AST
proof of /home/ff862203/input_pMrbZRPAop.ari
# AProVE Commit ID: 1c9e2a6453f9f0dca490585733f1cff3767d3e54 jan-christoph 20250828 unpublished


Innermost AST of the given PTRS could be proven:

(0) PTRS
(1) PTRStoPQTRSProof [EQUIVALENT, 0 ms]
(2) PQTRS
(3) PQTRStoADPProblemProof [EQUIVALENT, 0 ms]
(4) ADP
(5) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) ADP
        (8) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (9) ADP
        (10) AST_ADPProbabilityRemovalProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QReductionProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (15) YES
    (16) ADP
        (17) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
        (18) ADP
        (19) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (20) ADP
        (21) AST_ADPReductionPairProof [EQUIVALENT, 0 ms]
        (22) ADP
        (23) PisEmptyProof [EQUIVALENT, 0 ms]
        (24) YES
    (25) ADP
        (26) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
        (27) ADP
        (28) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
        (29) AND
            (30) ADP
                (31) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
                (32) ADP
                (33) AST_ADPProbabilityRemovalProof [EQUIVALENT, 0 ms]
                (34) QDP
                (35) QReductionProof [EQUIVALENT, 0 ms]
                (36) QDP
                (37) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (38) YES
            (39) ADP
                (40) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
                (41) ADP
                (42) AST_ADPProbabilityRemovalProof [EQUIVALENT, 0 ms]
                (43) QDP
                (44) QReductionProof [EQUIVALENT, 0 ms]
                (45) QDP
                (46) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (47) YES
    (48) ADP
        (49) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
        (50) ADP
        (51) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (52) ADP
        (53) AST_ADPProbabilityRemovalProof [EQUIVALENT, 0 ms]
        (54) QDP
        (55) QReductionProof [EQUIVALENT, 0 ms]
        (56) QDP
        (57) UsableRulesReductionPairsProof [EQUIVALENT, 0 ms]
        (58) QDP
        (59) QReductionProof [EQUIVALENT, 0 ms]
        (60) QDP
        (61) MRRProof [EQUIVALENT, 0 ms]
        (62) QDP
        (63) DependencyGraphProof [EQUIVALENT, 0 ms]
        (64) TRUE


----------------------------------------

(0)
Obligation:
Probabilistic term rewrite system:
The TRS has the following probabilistic rules:

   quot(p(x), y) -> 1 : negate(quot(negate(p(x)), y))
   p(s(x)) -> 1 : x
   negate(negate(x)) -> 1 : x
   quot(s(x), s(y)) -> 1 : div(s(x), s(y))
   quot(0, s(x)) -> 1 : 0
   s(p(x)) -> 1 : x
   quot(x, p(y)) -> 1 : negate(quot(x, negate(p(y))))
   negate(minus(0, x)) -> 1 : x
   negate(0) -> 1 : 0
   negate(s(x)) -> 1 : p(negate(x))
   minus(x, 0) -> 1 : x
   negate(p(x)) -> 1 : s(negate(x))
   quot(x, 0) -> 1 : error
   div(s(x), s(y)) -> 1 / 2 : s(div(minus(x, y), s(y))) || 1 / 2 : div(s(x), s(y))
   minus(s(x), s(y)) -> 1 : minus(x, y)
   div(0, s(x)) -> 1 : 0

and uses the innermost rewrite strategy.

----------------------------------------

(1) PTRStoPQTRSProof (EQUIVALENT)
Transformed PTRS into PQTRS. Q is:
   quot(p(x), y), p(s(x)), negate(negate(x)), quot(s(x), s(y)), quot(0, s(x)), s(p(x)), quot(x, p(y)), negate(minus(0, x)), negate(0), negate(s(x)), minus(x, 0), negate(p(x)), quot(x, 0), div(s(x), s(y)), minus(s(x), s(y)), div(0, s(x))
----------------------------------------

(2)
Obligation:
Probabilistic Q term rewrite system:
The PQTRS has the following probabilistic rules:

   quot(p(x), y) -> 1 : negate(quot(negate(p(x)), y))
   p(s(x)) -> 1 : x
   negate(negate(x)) -> 1 : x
   quot(s(x), s(y)) -> 1 : div(s(x), s(y))
   quot(0, s(x)) -> 1 : 0
   s(p(x)) -> 1 : x
   quot(x, p(y)) -> 1 : negate(quot(x, negate(p(y))))
   negate(minus(0, x)) -> 1 : x
   negate(0) -> 1 : 0
   negate(s(x)) -> 1 : p(negate(x))
   minus(x, 0) -> 1 : x
   negate(p(x)) -> 1 : s(negate(x))
   quot(x, 0) -> 1 : error
   div(s(x), s(y)) -> 1 / 2 : s(div(minus(x, y), s(y))) || 1 / 2 : div(s(x), s(y))
   minus(s(x), s(y)) -> 1 : minus(x, y)
   div(0, s(x)) -> 1 : 0

And Q contains the following terms:
   quot(p(x0), x1), p(s(x0)), negate(negate(x0)), quot(s(x0), s(x1)), quot(0, s(x0)), s(p(x0)), quot(x0, p(x1)), negate(minus(0, x0)), negate(0), negate(s(x0)), minus(x0, 0), negate(p(x0)), quot(x0, 0), div(s(x0), s(x1)), minus(s(x0), s(x1)), div(0, s(x0))

----------------------------------------

(3) PQTRStoADPProblemProof (EQUIVALENT)


A PQTRS (R,Q) is innermost AST iff ADP(R) is innermost AST (Chain-Criterion)[FLOPS24].
----------------------------------------

(4)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   quot(p(x), y) -> 1 : negate(quot(negate(p(x)), y))
   p(s(x)) -> 1 : x
   negate(negate(x)) -> 1 : x
   quot(s(x), s(y)) -> 1 : div(s(x), s(y))
   quot(0, s(x)) -> 1 : 0
   s(p(x)) -> 1 : x
   quot(x, p(y)) -> 1 : negate(quot(x, negate(p(y))))
   negate(minus(0, x)) -> 1 : x
   negate(0) -> 1 : 0
   negate(s(x)) -> 1 : p(negate(x))
   minus(x, 0) -> 1 : x
   negate(p(x)) -> 1 : s(negate(x))
   quot(x, 0) -> 1 : error
   div(s(x), s(y)) -> 1 / 2 : s(div(minus(x, y), s(y))) || 1 / 2 : div(s(x), s(y))
   minus(s(x), s(y)) -> 1 : minus(x, y)
   div(0, s(x)) -> 1 : 0

The ADP Problem has the following rules with annotations:

   QUOT(p(x), y) -> 1 : NEGATE(QUOT(NEGATE(P(x)), y))
   P(s(x)) -> 1 : x
   NEGATE(negate(x)) -> 1 : x
   QUOT(s(x), s(y)) -> 1 : DIV(S(x), S(y))
   QUOT(0, s(x)) -> 1 : 0
   S(p(x)) -> 1 : x
   QUOT(x, p(y)) -> 1 : NEGATE(QUOT(x, NEGATE(P(y))))
   NEGATE(minus(0, x)) -> 1 : x
   NEGATE(0) -> 1 : 0
   NEGATE(s(x)) -> 1 : P(NEGATE(x))
   MINUS(x, 0) -> 1 : x
   NEGATE(p(x)) -> 1 : S(NEGATE(x))
   QUOT(x, 0) -> 1 : error
   DIV(s(x), s(y)) -> 1 / 2 : S(DIV(MINUS(x, y), S(y))) || 1 / 2 : DIV(S(x), S(y))
   MINUS(s(x), s(y)) -> 1 : MINUS(x, y)
   DIV(0, s(x)) -> 1 : 0


----------------------------------------

(5) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 4 SCCs with 10 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   quot(p(x), y) -> 1 : negate(quot(negate(p(x)), y))
   p(s(x)) -> 1 : x
   negate(negate(x)) -> 1 : x
   quot(s(x), s(y)) -> 1 : div(s(x), s(y))
   quot(0, s(x)) -> 1 : 0
   s(p(x)) -> 1 : x
   quot(x, p(y)) -> 1 : negate(quot(x, negate(p(y))))
   negate(minus(0, x)) -> 1 : x
   negate(0) -> 1 : 0
   negate(s(x)) -> 1 : p(negate(x))
   minus(x, 0) -> 1 : x
   negate(p(x)) -> 1 : s(negate(x))
   quot(x, 0) -> 1 : error
   div(s(x), s(y)) -> 1 / 2 : s(div(minus(x, y), s(y))) || 1 / 2 : div(s(x), s(y))
   minus(s(x), s(y)) -> 1 : minus(x, y)
   div(0, s(x)) -> 1 : 0

The ADP Problem has the following rules with annotations:

   MINUS(s(x), s(y)) -> 1 : MINUS(x, y)


----------------------------------------

(8) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(9)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   MINUS(s(x), s(y)) -> 1 : MINUS(x, y)


----------------------------------------

(10) AST_ADPProbabilityRemovalProof (EQUIVALENT)


We use the probability removal processor [FLOPS24].
As all rules have a trivial probability (1:r), we can transform it into a non-probabilistic DP problem
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)

R is empty.
The set Q consists of the following terms:

   quot(p(x0), x1)
   p(s(x0))
   negate(negate(x0))
   quot(s(x0), s(x1))
   quot(0, s(x0))
   s(p(x0))
   quot(x0, p(x1))
   negate(minus(0, x0))
   negate(0)
   negate(s(x0))
   minus(x0, 0)
   negate(p(x0))
   quot(x0, 0)
   div(s(x0), s(x1))
   minus(s(x0), s(x1))
   div(0, s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   quot(p(x0), x1)
   p(s(x0))
   negate(negate(x0))
   quot(s(x0), s(x1))
   quot(0, s(x0))
   quot(x0, p(x1))
   negate(minus(0, x0))
   negate(0)
   negate(s(x0))
   minus(x0, 0)
   negate(p(x0))
   quot(x0, 0)
   div(s(x0), s(x1))
   minus(s(x0), s(x1))
   div(0, s(x0))


----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)

R is empty.
The set Q consists of the following terms:

   s(p(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MINUS(s(x), s(y)) -> MINUS(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   quot(p(x), y) -> 1 : negate(quot(negate(p(x)), y))
   p(s(x)) -> 1 : x
   negate(negate(x)) -> 1 : x
   quot(s(x), s(y)) -> 1 : div(s(x), s(y))
   quot(0, s(x)) -> 1 : 0
   s(p(x)) -> 1 : x
   quot(x, p(y)) -> 1 : negate(quot(x, negate(p(y))))
   negate(minus(0, x)) -> 1 : x
   negate(0) -> 1 : 0
   negate(s(x)) -> 1 : p(negate(x))
   minus(x, 0) -> 1 : x
   negate(p(x)) -> 1 : s(negate(x))
   quot(x, 0) -> 1 : error
   div(s(x), s(y)) -> 1 / 2 : s(div(minus(x, y), s(y))) || 1 / 2 : div(s(x), s(y))
   minus(s(x), s(y)) -> 1 : minus(x, y)
   div(0, s(x)) -> 1 : 0

The ADP Problem has the following rules with annotations:

   DIV(s(x), s(y)) -> 1 / 2 : S(DIV(MINUS(x, y), S(y))) || 1 / 2 : DIV(S(x), S(y))


----------------------------------------

(17) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[S(div(minus(x, y), s(y))), S(x), S(y), MINUS(x, y)]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(18)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   quot(p(x), y) -> 1 : negate(quot(negate(p(x)), y))
   p(s(x)) -> 1 : x
   negate(negate(x)) -> 1 : x
   quot(s(x), s(y)) -> 1 : div(s(x), s(y))
   quot(0, s(x)) -> 1 : 0
   s(p(x)) -> 1 : x
   quot(x, p(y)) -> 1 : negate(quot(x, negate(p(y))))
   negate(minus(0, x)) -> 1 : x
   negate(0) -> 1 : 0
   negate(s(x)) -> 1 : p(negate(x))
   minus(x, 0) -> 1 : x
   negate(p(x)) -> 1 : s(negate(x))
   quot(x, 0) -> 1 : error
   div(s(x), s(y)) -> 1 / 2 : s(div(minus(x, y), s(y))) || 1 / 2 : div(s(x), s(y))
   minus(s(x), s(y)) -> 1 : minus(x, y)
   div(0, s(x)) -> 1 : 0

The ADP Problem has the following rules with annotations:

   DIV(s(x), s(y)) -> 1 / 2 : s(DIV(minus(x, y), s(y))) || 1 / 2 : DIV(s(x), s(y))


----------------------------------------

(19) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(20)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   minus(x, 0) -> 1 : x
   minus(s(x), s(y)) -> 1 : minus(x, y)

The ADP Problem has the following rules with annotations:

   DIV(s(x), s(y)) -> 1 / 2 : s(DIV(minus(x, y), s(y))) || 1 / 2 : DIV(s(x), s(y))


----------------------------------------

(21) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   DIV(s(x), s(y)) -> 1 / 2 : s(DIV(minus(x, y), s(y))) || 1 / 2 : DIV(s(x), s(y))

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(0) = 1
   POL(DIV(x_1, x_2)) = 2*x_1*x_2
   POL(minus(x_1, x_2)) = 2*x_1
   POL(s(x_1)) = 2 + 2*x_1

----------------------------------------

(22)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   minus(x, 0) -> 1 : x
   minus(s(x), s(y)) -> 1 : minus(x, y)

The set of rules with annotations is empty.

----------------------------------------

(23) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(24)
YES

----------------------------------------

(25)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   quot(p(x), y) -> 1 : negate(quot(negate(p(x)), y))
   p(s(x)) -> 1 : x
   negate(negate(x)) -> 1 : x
   quot(s(x), s(y)) -> 1 : div(s(x), s(y))
   quot(0, s(x)) -> 1 : 0
   s(p(x)) -> 1 : x
   quot(x, p(y)) -> 1 : negate(quot(x, negate(p(y))))
   negate(minus(0, x)) -> 1 : x
   negate(0) -> 1 : 0
   negate(s(x)) -> 1 : p(negate(x))
   minus(x, 0) -> 1 : x
   negate(p(x)) -> 1 : s(negate(x))
   quot(x, 0) -> 1 : error
   div(s(x), s(y)) -> 1 / 2 : s(div(minus(x, y), s(y))) || 1 / 2 : div(s(x), s(y))
   minus(s(x), s(y)) -> 1 : minus(x, y)
   div(0, s(x)) -> 1 : 0

The ADP Problem has the following rules with annotations:

   NEGATE(p(x)) -> 1 : S(NEGATE(x))
   NEGATE(s(x)) -> 1 : P(NEGATE(x))


----------------------------------------

(26) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[S(negate(x)), P(negate(x))]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(27)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   quot(p(x), y) -> 1 : negate(quot(negate(p(x)), y))
   p(s(x)) -> 1 : x
   negate(negate(x)) -> 1 : x
   quot(s(x), s(y)) -> 1 : div(s(x), s(y))
   quot(0, s(x)) -> 1 : 0
   s(p(x)) -> 1 : x
   quot(x, p(y)) -> 1 : negate(quot(x, negate(p(y))))
   negate(minus(0, x)) -> 1 : x
   negate(0) -> 1 : 0
   negate(s(x)) -> 1 : p(negate(x))
   minus(x, 0) -> 1 : x
   negate(p(x)) -> 1 : s(negate(x))
   quot(x, 0) -> 1 : error
   div(s(x), s(y)) -> 1 / 2 : s(div(minus(x, y), s(y))) || 1 / 2 : div(s(x), s(y))
   minus(s(x), s(y)) -> 1 : minus(x, y)
   div(0, s(x)) -> 1 : 0

The ADP Problem has the following rules with annotations:

   NEGATE(p(x)) -> 1 : s(NEGATE(x))
   NEGATE(s(x)) -> 1 : p(NEGATE(x))


----------------------------------------

(28) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs.
----------------------------------------

(29)
Complex Obligation (AND)

----------------------------------------

(30)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   quot(p(x), y) -> 1 : negate(quot(negate(p(x)), y))
   p(s(x)) -> 1 : x
   negate(negate(x)) -> 1 : x
   quot(s(x), s(y)) -> 1 : div(s(x), s(y))
   quot(0, s(x)) -> 1 : 0
   s(p(x)) -> 1 : x
   quot(x, p(y)) -> 1 : negate(quot(x, negate(p(y))))
   negate(minus(0, x)) -> 1 : x
   negate(0) -> 1 : 0
   negate(s(x)) -> 1 : p(negate(x))
   minus(x, 0) -> 1 : x
   negate(p(x)) -> 1 : s(negate(x))
   quot(x, 0) -> 1 : error
   div(s(x), s(y)) -> 1 / 2 : s(div(minus(x, y), s(y))) || 1 / 2 : div(s(x), s(y))
   minus(s(x), s(y)) -> 1 : minus(x, y)
   div(0, s(x)) -> 1 : 0

The ADP Problem has the following rules with annotations:

   NEGATE(s(x)) -> 1 : p(NEGATE(x))


----------------------------------------

(31) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(32)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   NEGATE(s(x)) -> 1 : p(NEGATE(x))


----------------------------------------

(33) AST_ADPProbabilityRemovalProof (EQUIVALENT)


We use the probability removal processor [FLOPS24].
As all rules have a trivial probability (1:r), we can transform it into a non-probabilistic DP problem
----------------------------------------

(34)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   NEGATE(s(x)) -> NEGATE(x)

R is empty.
The set Q consists of the following terms:

   quot(p(x0), x1)
   p(s(x0))
   negate(negate(x0))
   quot(s(x0), s(x1))
   quot(0, s(x0))
   s(p(x0))
   quot(x0, p(x1))
   negate(minus(0, x0))
   negate(0)
   negate(s(x0))
   minus(x0, 0)
   negate(p(x0))
   quot(x0, 0)
   div(s(x0), s(x1))
   minus(s(x0), s(x1))
   div(0, s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(35) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   quot(p(x0), x1)
   p(s(x0))
   negate(negate(x0))
   quot(s(x0), s(x1))
   quot(0, s(x0))
   quot(x0, p(x1))
   negate(minus(0, x0))
   negate(0)
   negate(s(x0))
   minus(x0, 0)
   negate(p(x0))
   quot(x0, 0)
   div(s(x0), s(x1))
   minus(s(x0), s(x1))
   div(0, s(x0))


----------------------------------------

(36)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   NEGATE(s(x)) -> NEGATE(x)

R is empty.
The set Q consists of the following terms:

   s(p(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(37) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*NEGATE(s(x)) -> NEGATE(x)
The graph contains the following edges 1 > 1


----------------------------------------

(38)
YES

----------------------------------------

(39)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   quot(p(x), y) -> 1 : negate(quot(negate(p(x)), y))
   p(s(x)) -> 1 : x
   negate(negate(x)) -> 1 : x
   quot(s(x), s(y)) -> 1 : div(s(x), s(y))
   quot(0, s(x)) -> 1 : 0
   s(p(x)) -> 1 : x
   quot(x, p(y)) -> 1 : negate(quot(x, negate(p(y))))
   negate(minus(0, x)) -> 1 : x
   negate(0) -> 1 : 0
   negate(s(x)) -> 1 : p(negate(x))
   minus(x, 0) -> 1 : x
   negate(p(x)) -> 1 : s(negate(x))
   quot(x, 0) -> 1 : error
   div(s(x), s(y)) -> 1 / 2 : s(div(minus(x, y), s(y))) || 1 / 2 : div(s(x), s(y))
   minus(s(x), s(y)) -> 1 : minus(x, y)
   div(0, s(x)) -> 1 : 0

The ADP Problem has the following rules with annotations:

   NEGATE(p(x)) -> 1 : s(NEGATE(x))


----------------------------------------

(40) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(41)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   NEGATE(p(x)) -> 1 : s(NEGATE(x))


----------------------------------------

(42) AST_ADPProbabilityRemovalProof (EQUIVALENT)


We use the probability removal processor [FLOPS24].
As all rules have a trivial probability (1:r), we can transform it into a non-probabilistic DP problem
----------------------------------------

(43)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   NEGATE(p(x)) -> NEGATE(x)

R is empty.
The set Q consists of the following terms:

   quot(p(x0), x1)
   p(s(x0))
   negate(negate(x0))
   quot(s(x0), s(x1))
   quot(0, s(x0))
   s(p(x0))
   quot(x0, p(x1))
   negate(minus(0, x0))
   negate(0)
   negate(s(x0))
   minus(x0, 0)
   negate(p(x0))
   quot(x0, 0)
   div(s(x0), s(x1))
   minus(s(x0), s(x1))
   div(0, s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(44) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   quot(p(x0), x1)
   negate(negate(x0))
   quot(s(x0), s(x1))
   quot(0, s(x0))
   s(p(x0))
   quot(x0, p(x1))
   negate(minus(0, x0))
   negate(0)
   negate(s(x0))
   minus(x0, 0)
   negate(p(x0))
   quot(x0, 0)
   div(s(x0), s(x1))
   minus(s(x0), s(x1))
   div(0, s(x0))


----------------------------------------

(45)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   NEGATE(p(x)) -> NEGATE(x)

R is empty.
The set Q consists of the following terms:

   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(46) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*NEGATE(p(x)) -> NEGATE(x)
The graph contains the following edges 1 > 1


----------------------------------------

(47)
YES

----------------------------------------

(48)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   quot(p(x), y) -> 1 : negate(quot(negate(p(x)), y))
   p(s(x)) -> 1 : x
   negate(negate(x)) -> 1 : x
   quot(s(x), s(y)) -> 1 : div(s(x), s(y))
   quot(0, s(x)) -> 1 : 0
   s(p(x)) -> 1 : x
   quot(x, p(y)) -> 1 : negate(quot(x, negate(p(y))))
   negate(minus(0, x)) -> 1 : x
   negate(0) -> 1 : 0
   negate(s(x)) -> 1 : p(negate(x))
   minus(x, 0) -> 1 : x
   negate(p(x)) -> 1 : s(negate(x))
   quot(x, 0) -> 1 : error
   div(s(x), s(y)) -> 1 / 2 : s(div(minus(x, y), s(y))) || 1 / 2 : div(s(x), s(y))
   minus(s(x), s(y)) -> 1 : minus(x, y)
   div(0, s(x)) -> 1 : 0

The ADP Problem has the following rules with annotations:

   QUOT(x, p(y)) -> 1 : NEGATE(QUOT(x, NEGATE(P(y))))
   QUOT(p(x), y) -> 1 : NEGATE(QUOT(NEGATE(P(x)), y))


----------------------------------------

(49) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[NEGATE(quot(negate(p(x)), y)), NEGATE(p(y)), NEGATE(p(x)), P(x), P(y), NEGATE(quot(x, negate(p(y))))]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(50)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   quot(p(x), y) -> 1 : negate(quot(negate(p(x)), y))
   p(s(x)) -> 1 : x
   negate(negate(x)) -> 1 : x
   quot(s(x), s(y)) -> 1 : div(s(x), s(y))
   quot(0, s(x)) -> 1 : 0
   s(p(x)) -> 1 : x
   quot(x, p(y)) -> 1 : negate(quot(x, negate(p(y))))
   negate(minus(0, x)) -> 1 : x
   negate(0) -> 1 : 0
   negate(s(x)) -> 1 : p(negate(x))
   minus(x, 0) -> 1 : x
   negate(p(x)) -> 1 : s(negate(x))
   quot(x, 0) -> 1 : error
   div(s(x), s(y)) -> 1 / 2 : s(div(minus(x, y), s(y))) || 1 / 2 : div(s(x), s(y))
   minus(s(x), s(y)) -> 1 : minus(x, y)
   div(0, s(x)) -> 1 : 0

The ADP Problem has the following rules with annotations:

   QUOT(x, p(y)) -> 1 : negate(QUOT(x, negate(p(y))))
   QUOT(p(x), y) -> 1 : negate(QUOT(negate(p(x)), y))


----------------------------------------

(51) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(52)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   negate(p(x)) -> 1 : s(negate(x))
   negate(negate(x)) -> 1 : x
   negate(minus(0, x)) -> 1 : x
   negate(0) -> 1 : 0
   s(p(x)) -> 1 : x

The ADP Problem has the following rules with annotations:

   QUOT(x, p(y)) -> 1 : negate(QUOT(x, negate(p(y))))
   QUOT(p(x), y) -> 1 : negate(QUOT(negate(p(x)), y))


----------------------------------------

(53) AST_ADPProbabilityRemovalProof (EQUIVALENT)


We use the probability removal processor [FLOPS24].
As all rules have a trivial probability (1:r), we can transform it into a non-probabilistic DP problem
----------------------------------------

(54)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(x, p(y)) -> QUOT(x, negate(p(y)))
   QUOT(p(x), y) -> QUOT(negate(p(x)), y)

The TRS R consists of the following rules:

   negate(minus(0, x)) -> x
   negate(0) -> 0
   negate(p(x)) -> s(negate(x))
   negate(negate(x)) -> x
   s(p(x)) -> x

The set Q consists of the following terms:

   quot(p(x0), x1)
   p(s(x0))
   negate(negate(x0))
   quot(s(x0), s(x1))
   quot(0, s(x0))
   s(p(x0))
   quot(x0, p(x1))
   negate(minus(0, x0))
   negate(0)
   negate(s(x0))
   minus(x0, 0)
   negate(p(x0))
   quot(x0, 0)
   div(s(x0), s(x1))
   minus(s(x0), s(x1))
   div(0, s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(55) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   quot(p(x0), x1)
   quot(s(x0), s(x1))
   quot(0, s(x0))
   quot(x0, p(x1))
   quot(x0, 0)
   div(s(x0), s(x1))
   div(0, s(x0))


----------------------------------------

(56)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(x, p(y)) -> QUOT(x, negate(p(y)))
   QUOT(p(x), y) -> QUOT(negate(p(x)), y)

The TRS R consists of the following rules:

   negate(minus(0, x)) -> x
   negate(0) -> 0
   negate(p(x)) -> s(negate(x))
   negate(negate(x)) -> x
   s(p(x)) -> x

The set Q consists of the following terms:

   p(s(x0))
   negate(negate(x0))
   s(p(x0))
   negate(minus(0, x0))
   negate(0)
   negate(s(x0))
   minus(x0, 0)
   negate(p(x0))
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(57) UsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules with reduction pair processor [LPAR04] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules [FROCOS05] can be oriented non-strictly. All non-usable rules are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

No dependency pairs are removed.

The following rules are removed from R:

   negate(minus(0, x)) -> x
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(QUOT(x_1, x_2)) = x_1 + x_2
   POL(minus(x_1, x_2)) = x_1 + x_2
   POL(negate(x_1)) = x_1
   POL(p(x_1)) = 2*x_1
   POL(s(x_1)) = x_1


----------------------------------------

(58)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(x, p(y)) -> QUOT(x, negate(p(y)))
   QUOT(p(x), y) -> QUOT(negate(p(x)), y)

The TRS R consists of the following rules:

   negate(p(x)) -> s(negate(x))
   negate(0) -> 0
   negate(negate(x)) -> x
   s(p(x)) -> x

The set Q consists of the following terms:

   p(s(x0))
   negate(negate(x0))
   s(p(x0))
   negate(minus(0, x0))
   negate(0)
   negate(s(x0))
   minus(x0, 0)
   negate(p(x0))
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(59) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   minus(x0, 0)
   minus(s(x0), s(x1))


----------------------------------------

(60)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(x, p(y)) -> QUOT(x, negate(p(y)))
   QUOT(p(x), y) -> QUOT(negate(p(x)), y)

The TRS R consists of the following rules:

   negate(p(x)) -> s(negate(x))
   negate(0) -> 0
   negate(negate(x)) -> x
   s(p(x)) -> x

The set Q consists of the following terms:

   p(s(x0))
   negate(negate(x0))
   s(p(x0))
   negate(minus(0, x0))
   negate(0)
   negate(s(x0))
   negate(p(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(61) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   negate(p(x)) -> s(negate(x))
   s(p(x)) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(QUOT(x_1, x_2)) = x_1 + x_2
   POL(negate(x_1)) = x_1
   POL(p(x_1)) = 1 + x_1
   POL(s(x_1)) = x_1


----------------------------------------

(62)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(x, p(y)) -> QUOT(x, negate(p(y)))
   QUOT(p(x), y) -> QUOT(negate(p(x)), y)

The TRS R consists of the following rules:

   negate(0) -> 0
   negate(negate(x)) -> x

The set Q consists of the following terms:

   p(s(x0))
   negate(negate(x0))
   s(p(x0))
   negate(minus(0, x0))
   negate(0)
   negate(s(x0))
   negate(p(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(63) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 2 less nodes.
----------------------------------------

(64)
TRUE
