AST
proof of /home/ff862203/input_RZPwThrddJ.ari
# AProVE Commit ID: 1c9e2a6453f9f0dca490585733f1cff3767d3e54 jan-christoph 20250828 unpublished


Innermost AST of the given PTRS could be proven:

(0) PTRS
(1) PTRStoPQTRSProof [EQUIVALENT, 0 ms]
(2) PQTRS
(3) PQTRStoADPProblemProof [EQUIVALENT, 0 ms]
(4) ADP
(5) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
(6) ADP
(7) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
(8) ADP
(9) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
(10) ADP
(11) AST_ADPTransformationProof [EQUIVALENT, 0 ms]
(12) ADP
(13) AST_ADPReductionPairProof [EQUIVALENT, 0 ms]
(14) ADP
(15) AST_ADPTransformationProof [EQUIVALENT, 0 ms]
(16) ADP
(17) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
(18) ADP
(19) AST_ADPReductionPairProof [EQUIVALENT, 2 ms]
(20) ADP
(21) PisEmptyProof [EQUIVALENT, 0 ms]
(22) YES


----------------------------------------

(0)
Obligation:
Probabilistic term rewrite system:
The TRS has the following probabilistic rules:

   p(s(x)) -> 1 : x
   rw(s(x)) -> 1 / 2 : rw(s(s(s(x)))) || 1 / 2 : rw(p(x))
   s(p(x)) -> 1 : x

and uses the innermost rewrite strategy.

----------------------------------------

(1) PTRStoPQTRSProof (EQUIVALENT)
Transformed PTRS into PQTRS. Q is:
   p(s(x)), rw(s(x)), s(p(x))
----------------------------------------

(2)
Obligation:
Probabilistic Q term rewrite system:
The PQTRS has the following probabilistic rules:

   p(s(x)) -> 1 : x
   rw(s(x)) -> 1 / 2 : rw(s(s(s(x)))) || 1 / 2 : rw(p(x))
   s(p(x)) -> 1 : x

And Q contains the following terms:
   p(s(x0)), rw(s(x0)), s(p(x0))

----------------------------------------

(3) PQTRStoADPProblemProof (EQUIVALENT)


A PQTRS (R,Q) is innermost AST iff ADP(R) is innermost AST (Chain-Criterion)[FLOPS24].
----------------------------------------

(4)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   p(s(x)) -> 1 : x
   rw(s(x)) -> 1 / 2 : rw(s(s(s(x)))) || 1 / 2 : rw(p(x))
   s(p(x)) -> 1 : x

The ADP Problem has the following rules with annotations:

   P(s(x)) -> 1 : x
   RW(s(x)) -> 1 / 2 : RW(S(S(S(x)))) || 1 / 2 : RW(P(x))
   S(p(x)) -> 1 : x


----------------------------------------

(5) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(6)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   p(s(x)) -> 1 : x
   rw(s(x)) -> 1 / 2 : rw(s(s(s(x)))) || 1 / 2 : rw(p(x))
   s(p(x)) -> 1 : x

The ADP Problem has the following rules with annotations:

   RW(s(x)) -> 1 / 2 : RW(S(S(S(x)))) || 1 / 2 : RW(P(x))


----------------------------------------

(7) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[P(x), S(x), S(s(x)), S(s(s(x)))]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(8)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   p(s(x)) -> 1 : x
   rw(s(x)) -> 1 / 2 : rw(s(s(s(x)))) || 1 / 2 : rw(p(x))
   s(p(x)) -> 1 : x

The ADP Problem has the following rules with annotations:

   RW(s(x)) -> 1 / 2 : RW(s(s(s(x)))) || 1 / 2 : RW(p(x))


----------------------------------------

(9) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(10)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   p(s(x)) -> 1 : x

The ADP Problem has the following rules with annotations:

   RW(s(x)) -> 1 / 2 : RW(s(s(s(x)))) || 1 / 2 : RW(p(x))


----------------------------------------

(11) AST_ADPTransformationProof (EQUIVALENT)
By rule overlap instantiation [FLOPS24] for the rule RW(s(x)) -> 1 / 2 : RW(s(s(s(x)))) || 1 / 2 : RW(p(x)) we obtained the following new ADPs :

   RW(s(s(y0))) -> 1 / 2 : RW(s(s(s(s(y0))))) || 1 / 2 : RW(p(s(y0)))
   RW(s(x0)) -> 1 / 2 : RW(s(s(s(x0)))) || 1 / 2 : rw(p(x0))

and we added the following new probabilistic rules with active return value flag:
none

----------------------------------------

(12)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   p(s(x)) -> 1 : x

The ADP Problem has the following rules with annotations:

   RW(s(s(y0))) -> 1 / 2 : RW(s(s(s(s(y0))))) || 1 / 2 : RW(p(s(y0)))
   RW(s(x0)) -> 1 / 2 : RW(s(s(s(x0)))) || 1 / 2 : rw(p(x0))


----------------------------------------

(13) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   RW(s(x0)) -> 1 / 2 : RW(s(s(s(x0)))) || 1 / 2 : rw(p(x0))

The remaining pairs can at least be oriented weakly:

   RW(s(s(y0))) -> 1 / 2 : RW(s(s(s(s(y0))))) || 1 / 2 : RW(p(s(y0)))

Used ordering:  Polynomial interpretation [POLO]:

   POL(RW(x_1)) = 2
   POL(p(x_1)) = 2 + x_1
   POL(rw(x_1)) = 0
   POL(s(x_1)) = 2 + x_1

----------------------------------------

(14)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   p(s(x)) -> 1 : x

The ADP Problem has the following rules with annotations:

   RW(s(s(y0))) -> 1 / 2 : RW(s(s(s(s(y0))))) || 1 / 2 : RW(p(s(y0)))


----------------------------------------

(15) AST_ADPTransformationProof (EQUIVALENT)
By rewriting [FLOPS24] for the rule RW(s(s(y0))) -> 1 / 2 : RW(s(s(s(s(y0))))) || 1 / 2 : RW(p(s(y0))) at position [0] we obtained the following new ADPs :

   RW(s(s(y0))) -> 1 / 2 : RW(s(s(s(s(y0))))) || 1 / 2 : RW(y0)

and we added the following new probabilistic rules with active return value flag:
none

----------------------------------------

(16)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   p(s(x)) -> 1 : x

The ADP Problem has the following rules with annotations:

   RW(s(s(y0))) -> 1 / 2 : RW(s(s(s(s(y0))))) || 1 / 2 : RW(y0)


----------------------------------------

(17) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(18)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   RW(s(s(y0))) -> 1 / 2 : RW(s(s(s(s(y0))))) || 1 / 2 : RW(y0)


----------------------------------------

(19) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   RW(s(s(y0))) -> 1 / 2 : RW(s(s(s(s(y0))))) || 1 / 2 : RW(y0)

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(RW(x_1)) = 2*x_1
   POL(s(x_1)) = 1 + x_1

----------------------------------------

(20)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The set of rules with annotations is empty.

----------------------------------------

(21) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(22)
YES
