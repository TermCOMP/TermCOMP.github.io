AST
proof of /home/ff862203/input_GaAakKZVnm.ari
# AProVE Commit ID: 1c9e2a6453f9f0dca490585733f1cff3767d3e54 jan-christoph 20250828 unpublished


Innermost AST of the given PTRS could be proven:

(0) PTRS
(1) PTRStoPQTRSProof [EQUIVALENT, 0 ms]
(2) PQTRS
(3) PQTRStoADPProblemProof [EQUIVALENT, 0 ms]
(4) ADP
(5) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
(6) ADP
(7) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
(8) ADP
(9) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
(10) ADP
(11) AST_ADPTransformationProof [EQUIVALENT, 0 ms]
(12) ADP
(13) AST_ADPTransformationProof [EQUIVALENT, 0 ms]
(14) ADP
(15) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
(16) ADP
(17) AST_ADPReductionPairProof [EQUIVALENT, 0 ms]
(18) ADP
(19) PisEmptyProof [EQUIVALENT, 0 ms]
(20) YES


----------------------------------------

(0)
Obligation:
Probabilistic term rewrite system:
The TRS has the following probabilistic rules:

   f(x, x) -> 1 : d(f(a, a), x)
   a -> 1 / 2 : b || 1 / 2 : c

and uses the innermost rewrite strategy.

----------------------------------------

(1) PTRStoPQTRSProof (EQUIVALENT)
Transformed PTRS into PQTRS. Q is:
   f(x, x), a
----------------------------------------

(2)
Obligation:
Probabilistic Q term rewrite system:
The PQTRS has the following probabilistic rules:

   f(x, x) -> 1 : d(f(a, a), x)
   a -> 1 / 2 : b || 1 / 2 : c

And Q contains the following terms:
   f(x0, x0), a

----------------------------------------

(3) PQTRStoADPProblemProof (EQUIVALENT)


A PQTRS (R,Q) is innermost AST iff ADP(R) is innermost AST (Chain-Criterion)[FLOPS24].
----------------------------------------

(4)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   f(x, x) -> 1 : d(f(a, a), x)
   a -> 1 / 2 : b || 1 / 2 : c

The ADP Problem has the following rules with annotations:

   F(x, x) -> 1 : d(F(A, A), x)
   A -> 1 / 2 : b || 1 / 2 : c


----------------------------------------

(5) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(6)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   f(x, x) -> 1 : d(f(a, a), x)
   a -> 1 / 2 : b || 1 / 2 : c

The ADP Problem has the following rules with annotations:

   F(x, x) -> 1 : d(F(A, A), x)


----------------------------------------

(7) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[A]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(8)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   f(x, x) -> 1 : d(f(a, a), x)
   a -> 1 / 2 : b || 1 / 2 : c

The ADP Problem has the following rules with annotations:

   F(x, x) -> 1 : d(F(a, a), x)


----------------------------------------

(9) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(10)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   a -> 1 / 2 : b || 1 / 2 : c

The ADP Problem has the following rules with annotations:

   F(x, x) -> 1 : d(F(a, a), x)


----------------------------------------

(11) AST_ADPTransformationProof (EQUIVALENT)
By rewriting [FLOPS24] for the rule F(x, x) -> 1 : d(F(a, a), x) at position [0,0] we obtained the following new ADPs :

   F(x, x) -> 1 / 2 : d(F(b, a), x) || 1 / 2 : d(F(c, a), x)

and we added the following new probabilistic rules with active return value flag:
none

----------------------------------------

(12)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   a -> 1 / 2 : b || 1 / 2 : c

The ADP Problem has the following rules with annotations:

   F(x, x) -> 1 / 2 : d(F(b, a), x) || 1 / 2 : d(F(c, a), x)


----------------------------------------

(13) AST_ADPTransformationProof (EQUIVALENT)
By rewriting [FLOPS24] for the rule F(x, x) -> 1 / 2 : d(F(b, a), x) || 1 / 2 : d(F(c, a), x) at position [0,1] we obtained the following new ADPs :

   F(x, x) -> 1 / 2 : d(F(c, a), x) || 1 / 4 : d(F(b, b), x) || 1 / 4 : d(F(b, c), x)

and we added the following new probabilistic rules with active return value flag:
none

----------------------------------------

(14)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   a -> 1 / 2 : b || 1 / 2 : c

The ADP Problem has the following rules with annotations:

   F(x, x) -> 1 / 2 : d(F(c, a), x) || 1 / 4 : d(F(b, b), x) || 1 / 4 : d(F(b, c), x)


----------------------------------------

(15) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[F(b, c)]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(16)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   a -> 1 / 2 : b || 1 / 2 : c

The ADP Problem has the following rules with annotations:

   F(x, x) -> 1 / 2 : d(F(c, a), x) || 1 / 4 : d(F(b, b), x) || 1 / 4 : d(f(b, c), x)


----------------------------------------

(17) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   F(x, x) -> 1 / 2 : d(F(c, a), x) || 1 / 4 : d(F(b, b), x) || 1 / 4 : d(f(b, c), x)

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(F(x_1, x_2)) = 2
   POL(a) = 2
   POL(b) = 0
   POL(c) = 0
   POL(d(x_1, x_2)) = 0
   POL(f(x_1, x_2)) = 0

----------------------------------------

(18)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   a -> 1 / 2 : b || 1 / 2 : c

The set of rules with annotations is empty.

----------------------------------------

(19) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(20)
YES
