AST
proof of /home/ff862203/input_v8lNlwzuTZ.ari
# AProVE Commit ID: 1c9e2a6453f9f0dca490585733f1cff3767d3e54 jan-christoph 20250828 unpublished


Innermost AST of the given PTRS could be proven:

(0) PTRS
(1) PTRStoPQTRSProof [EQUIVALENT, 0 ms]
(2) PQTRS
(3) PQTRStoADPProblemProof [EQUIVALENT, 0 ms]
(4) ADP
(5) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) ADP
        (8) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
        (9) ADP
        (10) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (11) ADP
        (12) AST_ADPTransformationProof [EQUIVALENT, 0 ms]
        (13) ADP
        (14) AST_ADPTransformationProof [EQUIVALENT, 0 ms]
        (15) ADP
        (16) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
        (17) ADP
        (18) AST_ADPReductionPairProof [EQUIVALENT, 0 ms]
        (19) ADP
        (20) PisEmptyProof [EQUIVALENT, 0 ms]
        (21) YES
    (22) ADP
        (23) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
        (24) ADP
        (25) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (26) ADP
        (27) AST_ADPTransformationProof [EQUIVALENT, 0 ms]
        (28) ADP
        (29) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
        (30) ADP
        (31) AST_ADPTransformationProof [EQUIVALENT, 0 ms]
        (32) ADP
        (33) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
        (34) ADP
        (35) AST_ADPTransformationProof [EQUIVALENT, 0 ms]
        (36) ADP
        (37) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
        (38) TRUE


----------------------------------------

(0)
Obligation:
Probabilistic term rewrite system:
The TRS has the following probabilistic rules:

   f(x, x) -> 1 : e(f(a, a))
   g(f(x, y)) -> 1 : d(g(f(a, a)), g(f(a, a)), g(f(a, a)))
   a -> 1 / 2 : b1 || 1 / 2 : b2

and uses the innermost rewrite strategy.

----------------------------------------

(1) PTRStoPQTRSProof (EQUIVALENT)
Transformed PTRS into PQTRS. Q is:
   f(x, x), g(f(x, y)), a
----------------------------------------

(2)
Obligation:
Probabilistic Q term rewrite system:
The PQTRS has the following probabilistic rules:

   f(x, x) -> 1 : e(f(a, a))
   g(f(x, y)) -> 1 : d(g(f(a, a)), g(f(a, a)), g(f(a, a)))
   a -> 1 / 2 : b1 || 1 / 2 : b2

And Q contains the following terms:
   f(x0, x0), g(f(x0, x1)), a

----------------------------------------

(3) PQTRStoADPProblemProof (EQUIVALENT)


A PQTRS (R,Q) is innermost AST iff ADP(R) is innermost AST (Chain-Criterion)[FLOPS24].
----------------------------------------

(4)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   f(x, x) -> 1 : e(f(a, a))
   g(f(x, y)) -> 1 : d(g(f(a, a)), g(f(a, a)), g(f(a, a)))
   a -> 1 / 2 : b1 || 1 / 2 : b2

The ADP Problem has the following rules with annotations:

   F(x, x) -> 1 : e(F(A, A))
   G(f(x, y)) -> 1 : d(G(F(A, A)), G(F(A, A)), G(F(A, A)))
   A -> 1 / 2 : b1 || 1 / 2 : b2


----------------------------------------

(5) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 1 less node.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   f(x, x) -> 1 : e(f(a, a))
   g(f(x, y)) -> 1 : d(g(f(a, a)), g(f(a, a)), g(f(a, a)))
   a -> 1 / 2 : b1 || 1 / 2 : b2

The ADP Problem has the following rules with annotations:

   F(x, x) -> 1 : e(F(A, A))


----------------------------------------

(8) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[A]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(9)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   f(x, x) -> 1 : e(f(a, a))
   g(f(x, y)) -> 1 : d(g(f(a, a)), g(f(a, a)), g(f(a, a)))
   a -> 1 / 2 : b1 || 1 / 2 : b2

The ADP Problem has the following rules with annotations:

   F(x, x) -> 1 : e(F(a, a))


----------------------------------------

(10) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(11)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   a -> 1 / 2 : b1 || 1 / 2 : b2

The ADP Problem has the following rules with annotations:

   F(x, x) -> 1 : e(F(a, a))


----------------------------------------

(12) AST_ADPTransformationProof (EQUIVALENT)
By rewriting [FLOPS24] for the rule F(x, x) -> 1 : e(F(a, a)) at position [0,0] we obtained the following new ADPs :

   F(x, x) -> 1 / 2 : e(F(b1, a)) || 1 / 2 : e(F(b2, a))

and we added the following new probabilistic rules with active return value flag:
none

----------------------------------------

(13)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   a -> 1 / 2 : b1 || 1 / 2 : b2

The ADP Problem has the following rules with annotations:

   F(x, x) -> 1 / 2 : e(F(b1, a)) || 1 / 2 : e(F(b2, a))


----------------------------------------

(14) AST_ADPTransformationProof (EQUIVALENT)
By rewriting [FLOPS24] for the rule F(x, x) -> 1 / 2 : e(F(b1, a)) || 1 / 2 : e(F(b2, a)) at position [0,1] we obtained the following new ADPs :

   F(x, x) -> 1 / 2 : e(F(b2, a)) || 1 / 4 : e(F(b1, b1)) || 1 / 4 : e(F(b1, b2))

and we added the following new probabilistic rules with active return value flag:
none

----------------------------------------

(15)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   a -> 1 / 2 : b1 || 1 / 2 : b2

The ADP Problem has the following rules with annotations:

   F(x, x) -> 1 / 2 : e(F(b2, a)) || 1 / 4 : e(F(b1, b1)) || 1 / 4 : e(F(b1, b2))


----------------------------------------

(16) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[F(b1, b2)]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(17)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   a -> 1 / 2 : b1 || 1 / 2 : b2

The ADP Problem has the following rules with annotations:

   F(x, x) -> 1 / 2 : e(F(b2, a)) || 1 / 4 : e(F(b1, b1)) || 1 / 4 : e(f(b1, b2))


----------------------------------------

(18) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   F(x, x) -> 1 / 2 : e(F(b2, a)) || 1 / 4 : e(F(b1, b1)) || 1 / 4 : e(f(b1, b2))

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(F(x_1, x_2)) = 2
   POL(a) = 2
   POL(b1) = 0
   POL(b2) = 0
   POL(e(x_1)) = 0
   POL(f(x_1, x_2)) = 0

----------------------------------------

(19)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   a -> 1 / 2 : b1 || 1 / 2 : b2

The set of rules with annotations is empty.

----------------------------------------

(20) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(21)
YES

----------------------------------------

(22)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   f(x, x) -> 1 : e(f(a, a))
   g(f(x, y)) -> 1 : d(g(f(a, a)), g(f(a, a)), g(f(a, a)))
   a -> 1 / 2 : b1 || 1 / 2 : b2

The ADP Problem has the following rules with annotations:

   G(f(x, y)) -> 1 : d(G(F(A, A)), G(F(A, A)), G(F(A, A)))


----------------------------------------

(23) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[F(a, a), A]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(24)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   f(x, x) -> 1 : e(f(a, a))
   g(f(x, y)) -> 1 : d(g(f(a, a)), g(f(a, a)), g(f(a, a)))
   a -> 1 / 2 : b1 || 1 / 2 : b2

The ADP Problem has the following rules with annotations:

   G(f(x, y)) -> 1 : d(G(f(a, a)), G(f(a, a)), G(f(a, a)))


----------------------------------------

(25) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(26)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   a -> 1 / 2 : b1 || 1 / 2 : b2
   f(x, x) -> 1 : e(f(a, a))

The ADP Problem has the following rules with annotations:

   G(f(x, y)) -> 1 : d(G(f(a, a)), G(f(a, a)), G(f(a, a)))


----------------------------------------

(27) AST_ADPTransformationProof (EQUIVALENT)
By rewriting [FLOPS24] for the rule G(f(x, y)) -> 1 : d(G(f(a, a)), G(f(a, a)), G(f(a, a))) at position [0,0] we obtained the following new ADPs :

   G(f(x, y)) -> 1 : d(G(e(f(a, a))), G(f(a, a)), G(f(a, a)))

and we added the following new probabilistic rules with active return value flag:
none

----------------------------------------

(28)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   f(x, x) -> 1 : e(f(a, a))
   a -> 1 / 2 : b1 || 1 / 2 : b2

The ADP Problem has the following rules with annotations:

   G(f(x, y)) -> 1 : d(G(e(f(a, a))), G(f(a, a)), G(f(a, a)))


----------------------------------------

(29) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[G(e(f(a, a)))]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(30)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   f(x, x) -> 1 : e(f(a, a))
   a -> 1 / 2 : b1 || 1 / 2 : b2

The ADP Problem has the following rules with annotations:

   G(f(x, y)) -> 1 : d(g(e(f(a, a))), G(f(a, a)), G(f(a, a)))


----------------------------------------

(31) AST_ADPTransformationProof (EQUIVALENT)
By rewriting [FLOPS24] for the rule G(f(x, y)) -> 1 : d(g(e(f(a, a))), G(f(a, a)), G(f(a, a))) at position [2,0] we obtained the following new ADPs :

   G(f(x, y)) -> 1 : d(g(e(f(a, a))), G(f(a, a)), G(e(f(a, a))))

and we added the following new probabilistic rules with active return value flag:
none

----------------------------------------

(32)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   f(x, x) -> 1 : e(f(a, a))
   a -> 1 / 2 : b1 || 1 / 2 : b2

The ADP Problem has the following rules with annotations:

   G(f(x, y)) -> 1 : d(g(e(f(a, a))), G(f(a, a)), G(e(f(a, a))))


----------------------------------------

(33) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[G(e(f(a, a)))]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(34)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   f(x, x) -> 1 : e(f(a, a))
   a -> 1 / 2 : b1 || 1 / 2 : b2

The ADP Problem has the following rules with annotations:

   G(f(x, y)) -> 1 : d(g(e(f(a, a))), G(f(a, a)), g(e(f(a, a))))


----------------------------------------

(35) AST_ADPTransformationProof (EQUIVALENT)
By rewriting [FLOPS24] for the rule G(f(x, y)) -> 1 : d(g(e(f(a, a))), G(f(a, a)), g(e(f(a, a)))) at position [1,0] we obtained the following new ADPs :

   G(f(x, y)) -> 1 : d(g(e(f(a, a))), G(e(f(a, a))), g(e(f(a, a))))

and we added the following new probabilistic rules with active return value flag:
none

----------------------------------------

(36)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   f(x, x) -> 1 : e(f(a, a))
   a -> 1 / 2 : b1 || 1 / 2 : b2

The ADP Problem has the following rules with annotations:

   G(f(x, y)) -> 1 : d(g(e(f(a, a))), G(e(f(a, a))), g(e(f(a, a))))


----------------------------------------

(37) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(38)
TRUE
