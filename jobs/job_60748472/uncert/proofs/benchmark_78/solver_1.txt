AST
proof of /home/ff862203/input_PThDqPuvZh.ari
# AProVE Commit ID: 1c9e2a6453f9f0dca490585733f1cff3767d3e54 jan-christoph 20250828 unpublished


Innermost AST of the given PTRS could be proven:

(0) PTRS
(1) PTRStoPQTRSProof [EQUIVALENT, 0 ms]
(2) PQTRS
(3) PQTRStoADPProblemProof [EQUIVALENT, 0 ms]
(4) ADP
(5) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) ADP
        (8) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
        (9) ADP
        (10) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (11) ADP
        (12) AST_ADPTransformationProof [EQUIVALENT, 0 ms]
        (13) ADP
        (14) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
        (15) ADP
        (16) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (17) ADP
        (18) AST_ADPTransformationProof [EQUIVALENT, 0 ms]
        (19) ADP
        (20) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (21) ADP
        (22) AST_ADPTransformationProof [EQUIVALENT, 0 ms]
        (23) ADP
        (24) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (25) ADP
        (26) AST_ADPTransformationProof [EQUIVALENT, 0 ms]
        (27) ADP
        (28) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (29) ADP
        (30) AST_ADPReductionPairProof [EQUIVALENT, 0 ms]
        (31) ADP
        (32) PisEmptyProof [EQUIVALENT, 0 ms]
        (33) YES
    (34) ADP
        (35) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (36) ADP
        (37) AST_ADPProbabilityRemovalProof [EQUIVALENT, 0 ms]
        (38) QDP
        (39) QReductionProof [EQUIVALENT, 0 ms]
        (40) QDP
        (41) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (42) YES


----------------------------------------

(0)
Obligation:
Probabilistic term rewrite system:
The TRS has the following probabilistic rules:

   app(cons(x, xs), ys) -> 1 : cons(x, app(xs, ys))
   head(cons(x, xs)) -> 1 : x
   isempty(cons(x, xs)) -> 1 : false
   if_dup(false, x, xs) -> 1 / 2 : cons(x, duplicate_elem_rand(xs)) || 1 / 2 : cons(x, duplicate_elem_rand(cons(x, xs)))
   if_dup(true, x, xs) -> 1 : nil
   app(nil, ys) -> 1 : ys
   tail(cons(x, xs)) -> 1 : xs
   isempty(nil) -> 1 : true
   duplicate_elem_rand(xs) -> 1 : if_dup(isempty(xs), head(xs), tail(xs))

and uses the innermost rewrite strategy.

----------------------------------------

(1) PTRStoPQTRSProof (EQUIVALENT)
Transformed PTRS into PQTRS. Q is:
   app(cons(x, xs), ys), head(cons(x, xs)), isempty(cons(x, xs)), if_dup(false, x, xs), if_dup(true, x, xs), app(nil, ys), tail(cons(x, xs)), isempty(nil), duplicate_elem_rand(xs)
----------------------------------------

(2)
Obligation:
Probabilistic Q term rewrite system:
The PQTRS has the following probabilistic rules:

   app(cons(x, xs), ys) -> 1 : cons(x, app(xs, ys))
   head(cons(x, xs)) -> 1 : x
   isempty(cons(x, xs)) -> 1 : false
   if_dup(false, x, xs) -> 1 / 2 : cons(x, duplicate_elem_rand(xs)) || 1 / 2 : cons(x, duplicate_elem_rand(cons(x, xs)))
   if_dup(true, x, xs) -> 1 : nil
   app(nil, ys) -> 1 : ys
   tail(cons(x, xs)) -> 1 : xs
   isempty(nil) -> 1 : true
   duplicate_elem_rand(xs) -> 1 : if_dup(isempty(xs), head(xs), tail(xs))

And Q contains the following terms:
   app(cons(x0, x1), x2), head(cons(x0, x1)), isempty(cons(x0, x1)), if_dup(false, x0, x1), if_dup(true, x0, x1), app(nil, x0), tail(cons(x0, x1)), isempty(nil), duplicate_elem_rand(x0)

----------------------------------------

(3) PQTRStoADPProblemProof (EQUIVALENT)


A PQTRS (R,Q) is innermost AST iff ADP(R) is innermost AST (Chain-Criterion)[FLOPS24].
----------------------------------------

(4)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(x, xs), ys) -> 1 : cons(x, app(xs, ys))
   head(cons(x, xs)) -> 1 : x
   isempty(cons(x, xs)) -> 1 : false
   if_dup(false, x, xs) -> 1 / 2 : cons(x, duplicate_elem_rand(xs)) || 1 / 2 : cons(x, duplicate_elem_rand(cons(x, xs)))
   if_dup(true, x, xs) -> 1 : nil
   app(nil, ys) -> 1 : ys
   tail(cons(x, xs)) -> 1 : xs
   isempty(nil) -> 1 : true
   duplicate_elem_rand(xs) -> 1 : if_dup(isempty(xs), head(xs), tail(xs))

The ADP Problem has the following rules with annotations:

   APP(cons(x, xs), ys) -> 1 : cons(x, APP(xs, ys))
   HEAD(cons(x, xs)) -> 1 : x
   ISEMPTY(cons(x, xs)) -> 1 : false
   IF_DUP(false, x, xs) -> 1 / 2 : cons(x, DUPLICATE_ELEM_RAND(xs)) || 1 / 2 : cons(x, DUPLICATE_ELEM_RAND(cons(x, xs)))
   IF_DUP(true, x, xs) -> 1 : nil
   APP(nil, ys) -> 1 : ys
   TAIL(cons(x, xs)) -> 1 : xs
   ISEMPTY(nil) -> 1 : true
   DUPLICATE_ELEM_RAND(xs) -> 1 : IF_DUP(ISEMPTY(xs), HEAD(xs), TAIL(xs))


----------------------------------------

(5) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 6 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(x, xs), ys) -> 1 : cons(x, app(xs, ys))
   head(cons(x, xs)) -> 1 : x
   isempty(cons(x, xs)) -> 1 : false
   if_dup(false, x, xs) -> 1 / 2 : cons(x, duplicate_elem_rand(xs)) || 1 / 2 : cons(x, duplicate_elem_rand(cons(x, xs)))
   if_dup(true, x, xs) -> 1 : nil
   app(nil, ys) -> 1 : ys
   tail(cons(x, xs)) -> 1 : xs
   isempty(nil) -> 1 : true
   duplicate_elem_rand(xs) -> 1 : if_dup(isempty(xs), head(xs), tail(xs))

The ADP Problem has the following rules with annotations:

   IF_DUP(false, x, xs) -> 1 / 2 : cons(x, DUPLICATE_ELEM_RAND(xs)) || 1 / 2 : cons(x, DUPLICATE_ELEM_RAND(cons(x, xs)))
   DUPLICATE_ELEM_RAND(xs) -> 1 : IF_DUP(ISEMPTY(xs), HEAD(xs), TAIL(xs))


----------------------------------------

(8) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[TAIL(xs), ISEMPTY(xs), HEAD(xs)]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(9)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(x, xs), ys) -> 1 : cons(x, app(xs, ys))
   head(cons(x, xs)) -> 1 : x
   isempty(cons(x, xs)) -> 1 : false
   if_dup(false, x, xs) -> 1 / 2 : cons(x, duplicate_elem_rand(xs)) || 1 / 2 : cons(x, duplicate_elem_rand(cons(x, xs)))
   if_dup(true, x, xs) -> 1 : nil
   app(nil, ys) -> 1 : ys
   tail(cons(x, xs)) -> 1 : xs
   isempty(nil) -> 1 : true
   duplicate_elem_rand(xs) -> 1 : if_dup(isempty(xs), head(xs), tail(xs))

The ADP Problem has the following rules with annotations:

   IF_DUP(false, x, xs) -> 1 / 2 : cons(x, DUPLICATE_ELEM_RAND(xs)) || 1 / 2 : cons(x, DUPLICATE_ELEM_RAND(cons(x, xs)))
   DUPLICATE_ELEM_RAND(xs) -> 1 : IF_DUP(isempty(xs), head(xs), tail(xs))


----------------------------------------

(10) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(11)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   isempty(cons(x, xs)) -> 1 : false
   isempty(nil) -> 1 : true
   head(cons(x, xs)) -> 1 : x
   tail(cons(x, xs)) -> 1 : xs

The ADP Problem has the following rules with annotations:

   IF_DUP(false, x, xs) -> 1 / 2 : cons(x, DUPLICATE_ELEM_RAND(xs)) || 1 / 2 : cons(x, DUPLICATE_ELEM_RAND(cons(x, xs)))
   DUPLICATE_ELEM_RAND(xs) -> 1 : IF_DUP(isempty(xs), head(xs), tail(xs))


----------------------------------------

(12) AST_ADPTransformationProof (EQUIVALENT)
By rule overlap instantiation [FLOPS24] for the rule DUPLICATE_ELEM_RAND(xs) -> 1 : IF_DUP(isempty(xs), head(xs), tail(xs)) we obtained the following new ADPs :

   DUPLICATE_ELEM_RAND(cons(y0, y1)) -> 1 : IF_DUP(isempty(cons(y0, y1)), head(cons(y0, y1)), tail(cons(y0, y1)))
   DUPLICATE_ELEM_RAND(nil) -> 1 : IF_DUP(isempty(nil), head(nil), tail(nil))

and we added the following new probabilistic rules with active return value flag:
none

----------------------------------------

(13)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   head(cons(x, xs)) -> 1 : x
   isempty(cons(x, xs)) -> 1 : false
   isempty(nil) -> 1 : true
   tail(cons(x, xs)) -> 1 : xs

The ADP Problem has the following rules with annotations:

   IF_DUP(false, x, xs) -> 1 / 2 : cons(x, DUPLICATE_ELEM_RAND(xs)) || 1 / 2 : cons(x, DUPLICATE_ELEM_RAND(cons(x, xs)))
   DUPLICATE_ELEM_RAND(cons(y0, y1)) -> 1 : IF_DUP(isempty(cons(y0, y1)), head(cons(y0, y1)), tail(cons(y0, y1)))
   DUPLICATE_ELEM_RAND(nil) -> 1 : IF_DUP(isempty(nil), head(nil), tail(nil))


----------------------------------------

(14) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(15)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   head(cons(x, xs)) -> 1 : x
   isempty(cons(x, xs)) -> 1 : false
   isempty(nil) -> 1 : true
   tail(cons(x, xs)) -> 1 : xs

The ADP Problem has the following rules with annotations:

   DUPLICATE_ELEM_RAND(cons(y0, y1)) -> 1 : IF_DUP(isempty(cons(y0, y1)), head(cons(y0, y1)), tail(cons(y0, y1)))
   IF_DUP(false, x, xs) -> 1 / 2 : cons(x, DUPLICATE_ELEM_RAND(xs)) || 1 / 2 : cons(x, DUPLICATE_ELEM_RAND(cons(x, xs)))


----------------------------------------

(16) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(17)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   isempty(cons(x, xs)) -> 1 : false
   head(cons(x, xs)) -> 1 : x
   tail(cons(x, xs)) -> 1 : xs

The ADP Problem has the following rules with annotations:

   DUPLICATE_ELEM_RAND(cons(y0, y1)) -> 1 : IF_DUP(isempty(cons(y0, y1)), head(cons(y0, y1)), tail(cons(y0, y1)))
   IF_DUP(false, x, xs) -> 1 / 2 : cons(x, DUPLICATE_ELEM_RAND(xs)) || 1 / 2 : cons(x, DUPLICATE_ELEM_RAND(cons(x, xs)))


----------------------------------------

(18) AST_ADPTransformationProof (EQUIVALENT)
By rewriting [FLOPS24] for the rule DUPLICATE_ELEM_RAND(cons(y0, y1)) -> 1 : IF_DUP(isempty(cons(y0, y1)), head(cons(y0, y1)), tail(cons(y0, y1))) at position [0] we obtained the following new ADPs :

   DUPLICATE_ELEM_RAND(cons(y0, y1)) -> 1 : IF_DUP(false, head(cons(y0, y1)), tail(cons(y0, y1)))

and we added the following new probabilistic rules with active return value flag:
none

----------------------------------------

(19)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   head(cons(x, xs)) -> 1 : x
   isempty(cons(x, xs)) -> 1 : false
   tail(cons(x, xs)) -> 1 : xs

The ADP Problem has the following rules with annotations:

   IF_DUP(false, x, xs) -> 1 / 2 : cons(x, DUPLICATE_ELEM_RAND(xs)) || 1 / 2 : cons(x, DUPLICATE_ELEM_RAND(cons(x, xs)))
   DUPLICATE_ELEM_RAND(cons(y0, y1)) -> 1 : IF_DUP(false, head(cons(y0, y1)), tail(cons(y0, y1)))


----------------------------------------

(20) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(21)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   head(cons(x, xs)) -> 1 : x
   tail(cons(x, xs)) -> 1 : xs

The ADP Problem has the following rules with annotations:

   IF_DUP(false, x, xs) -> 1 / 2 : cons(x, DUPLICATE_ELEM_RAND(xs)) || 1 / 2 : cons(x, DUPLICATE_ELEM_RAND(cons(x, xs)))
   DUPLICATE_ELEM_RAND(cons(y0, y1)) -> 1 : IF_DUP(false, head(cons(y0, y1)), tail(cons(y0, y1)))


----------------------------------------

(22) AST_ADPTransformationProof (EQUIVALENT)
By rewriting [FLOPS24] for the rule DUPLICATE_ELEM_RAND(cons(y0, y1)) -> 1 : IF_DUP(false, head(cons(y0, y1)), tail(cons(y0, y1))) at position [1] we obtained the following new ADPs :

   DUPLICATE_ELEM_RAND(cons(y0, y1)) -> 1 : IF_DUP(false, y0, tail(cons(y0, y1)))

and we added the following new probabilistic rules with active return value flag:
none

----------------------------------------

(23)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   head(cons(x, xs)) -> 1 : x
   tail(cons(x, xs)) -> 1 : xs

The ADP Problem has the following rules with annotations:

   IF_DUP(false, x, xs) -> 1 / 2 : cons(x, DUPLICATE_ELEM_RAND(xs)) || 1 / 2 : cons(x, DUPLICATE_ELEM_RAND(cons(x, xs)))
   DUPLICATE_ELEM_RAND(cons(y0, y1)) -> 1 : IF_DUP(false, y0, tail(cons(y0, y1)))


----------------------------------------

(24) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(25)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   tail(cons(x, xs)) -> 1 : xs

The ADP Problem has the following rules with annotations:

   IF_DUP(false, x, xs) -> 1 / 2 : cons(x, DUPLICATE_ELEM_RAND(xs)) || 1 / 2 : cons(x, DUPLICATE_ELEM_RAND(cons(x, xs)))
   DUPLICATE_ELEM_RAND(cons(y0, y1)) -> 1 : IF_DUP(false, y0, tail(cons(y0, y1)))


----------------------------------------

(26) AST_ADPTransformationProof (EQUIVALENT)
By rewriting [FLOPS24] for the rule DUPLICATE_ELEM_RAND(cons(y0, y1)) -> 1 : IF_DUP(false, y0, tail(cons(y0, y1))) at position [2] we obtained the following new ADPs :

   DUPLICATE_ELEM_RAND(cons(y0, y1)) -> 1 : IF_DUP(false, y0, y1)

and we added the following new probabilistic rules with active return value flag:
none

----------------------------------------

(27)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   tail(cons(x, xs)) -> 1 : xs

The ADP Problem has the following rules with annotations:

   IF_DUP(false, x, xs) -> 1 / 2 : cons(x, DUPLICATE_ELEM_RAND(xs)) || 1 / 2 : cons(x, DUPLICATE_ELEM_RAND(cons(x, xs)))
   DUPLICATE_ELEM_RAND(cons(y0, y1)) -> 1 : IF_DUP(false, y0, y1)


----------------------------------------

(28) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(29)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   IF_DUP(false, x, xs) -> 1 / 2 : cons(x, DUPLICATE_ELEM_RAND(xs)) || 1 / 2 : cons(x, DUPLICATE_ELEM_RAND(cons(x, xs)))
   DUPLICATE_ELEM_RAND(cons(y0, y1)) -> 1 : IF_DUP(false, y0, y1)


----------------------------------------

(30) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   IF_DUP(false, x, xs) -> 1 / 2 : cons(x, DUPLICATE_ELEM_RAND(xs)) || 1 / 2 : cons(x, DUPLICATE_ELEM_RAND(cons(x, xs)))
   DUPLICATE_ELEM_RAND(cons(y0, y1)) -> 1 : IF_DUP(false, y0, y1)

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(DUPLICATE_ELEM_RAND(x_1)) = 2*x_1
   POL(IF_DUP(x_1, x_2, x_3)) = x_1 + x_2 + x_2*x_3 + 2*x_3
   POL(cons(x_1, x_2)) = 2 + x_1 + x_1*x_2 + x_2
   POL(false) = 2

----------------------------------------

(31)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The set of rules with annotations is empty.

----------------------------------------

(32) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(33)
YES

----------------------------------------

(34)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(x, xs), ys) -> 1 : cons(x, app(xs, ys))
   head(cons(x, xs)) -> 1 : x
   isempty(cons(x, xs)) -> 1 : false
   if_dup(false, x, xs) -> 1 / 2 : cons(x, duplicate_elem_rand(xs)) || 1 / 2 : cons(x, duplicate_elem_rand(cons(x, xs)))
   if_dup(true, x, xs) -> 1 : nil
   app(nil, ys) -> 1 : ys
   tail(cons(x, xs)) -> 1 : xs
   isempty(nil) -> 1 : true
   duplicate_elem_rand(xs) -> 1 : if_dup(isempty(xs), head(xs), tail(xs))

The ADP Problem has the following rules with annotations:

   APP(cons(x, xs), ys) -> 1 : cons(x, APP(xs, ys))


----------------------------------------

(35) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(36)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   APP(cons(x, xs), ys) -> 1 : cons(x, APP(xs, ys))


----------------------------------------

(37) AST_ADPProbabilityRemovalProof (EQUIVALENT)


We use the probability removal processor [FLOPS24].
As all rules have a trivial probability (1:r), we can transform it into a non-probabilistic DP problem
----------------------------------------

(38)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(cons(x, xs), ys) -> APP(xs, ys)

R is empty.
The set Q consists of the following terms:

   app(cons(x0, x1), x2)
   head(cons(x0, x1))
   isempty(cons(x0, x1))
   if_dup(false, x0, x1)
   if_dup(true, x0, x1)
   app(nil, x0)
   tail(cons(x0, x1))
   isempty(nil)
   duplicate_elem_rand(x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(39) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   app(cons(x0, x1), x2)
   head(cons(x0, x1))
   isempty(cons(x0, x1))
   if_dup(false, x0, x1)
   if_dup(true, x0, x1)
   app(nil, x0)
   tail(cons(x0, x1))
   isempty(nil)
   duplicate_elem_rand(x0)


----------------------------------------

(40)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(cons(x, xs), ys) -> APP(xs, ys)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(41) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP(cons(x, xs), ys) -> APP(xs, ys)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(42)
YES
