SAST
proof of /home/ff862203/input_DK4DxfLJ3Z.ari
# AProVE Commit ID: 1c9e2a6453f9f0dca490585733f1cff3767d3e54 jan-christoph 20250828 unpublished


Complexity of the given CpxPTRS could be proven:

(0) CpxPTRS
(1) CpxPTRS_DirectPoloProof [FINISHED, 48 ms]
(2) BOUNDS(1, EXP)


----------------------------------------

(0)
Obligation:
Probabilistic term rewrite system:
The TRS has the following probabilistic rules:

   ifSorted(nil) -> 1 : nil
   leq(0, x) -> 1 : true
   ifSorted(cons(x, cons(y, nil))) -> 1 : ifLeq(leq(x, y), cons(x, cons(y, nil)))
   leq(s(x), s(y)) -> 1 : leq(x, y)
   bogo(xs) -> 1 : ifSorted(xs)
   ifLeq(false, cons(x, cons(y, nil))) -> 1 / 2 : bogo(cons(x, cons(y, nil))) || 1 / 2 : cons(y, cons(x, nil))
   leq(s(x), 0) -> 1 : false
   ifLeq(true, xs) -> 1 : xs
   ifSorted(cons(x, nil)) -> 1 : cons(x, nil)

and uses the innermost rewrite strategy.

----------------------------------------

(1) CpxPTRS_DirectPoloProof (FINISHED)


We use the direct application of polynomial interpretations [ADY19].
Using the following Interpretation: 
Resulting in the following upper complexity bound: EXPPolynomial interpretation [POLO]:

   POL(0) = 0
   POL(bogo(x_1)) = 2 + x_1
   POL(cons(x_1, x_2)) = 1 + x_1 + x_2
   POL(false) = 1
   POL(ifLeq(x_1, x_2)) = 1 + x_1 + x_2
   POL(ifSorted(x_1)) = 2*x_1
   POL(leq(x_1, x_2)) = 1 + x_1 + x_2
   POL(nil) = 2
   POL(s(x_1)) = 1 + 2*x_1
   POL(true) = 0
   POL(xs) = 0

----------------------------------------

(2)
BOUNDS(1, EXP)
