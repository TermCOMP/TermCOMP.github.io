SAST
proof of /home/ff862203/input_ngVRAKTALA.ari
# AProVE Commit ID: 1c9e2a6453f9f0dca490585733f1cff3767d3e54 jan-christoph 20250828 unpublished


Complexity of the given CpxPTRS could be proven:

(0) CpxPTRS
(1) CpxPTRS_DerivationToRuntimeComplexityProof [UNSOUND LOWER BOUND(ID)SOUND UPPER BOUND(ID), 0 ms]
(2) CpxPTRS
(3) CpxPTRS_DirectPoloProof [FINISHED, 9 ms]
(4) BOUNDS(1, EXP)


----------------------------------------

(0)
Obligation:
Probabilistic term rewrite system:
The TRS has the following probabilistic rules:

   g(s(x)) -> 1 : f(g(x), g(x), g(x))

and uses the innermost rewrite strategy.

----------------------------------------

(1) CpxPTRS_DerivationToRuntimeComplexityProof (UNSOUND LOWER BOUND(ID)SOUND UPPER BOUND(ID))
The following rules have been added to R to convert the given derivational complexity problem to a runtime complexity problem:

   encArg(s(x_1)) -> 1 : s(encArg(x_1))
   encArg(f(x_1, x_2, x_3)) -> 1 : f(encArg(x_1), encArg(x_2), encArg(x_3))
   encArg(cons_g(x_1)) -> 1 : g(encArg(x_1))
   encode_g(x_1) -> 1 : g(encArg(x_1))
   encode_s(x_1) -> 1 : s(encArg(x_1))
   encode_f(x_1, x_2, x_3) -> 1 : f(encArg(x_1), encArg(x_2), encArg(x_3))


----------------------------------------

(2)
Obligation:
Probabilistic term rewrite system:
The TRS has the following probabilistic rules:

   encArg(s(x_1)) -> 1 : s(encArg(x_1))
   encArg(f(x_1, x_2, x_3)) -> 1 : f(encArg(x_1), encArg(x_2), encArg(x_3))
   encArg(cons_g(x_1)) -> 1 : g(encArg(x_1))
   encode_g(x_1) -> 1 : g(encArg(x_1))
   encode_s(x_1) -> 1 : s(encArg(x_1))
   encode_f(x_1, x_2, x_3) -> 1 : f(encArg(x_1), encArg(x_2), encArg(x_3))
   g(s(x)) -> 1 : f(g(x), g(x), g(x))

and uses the innermost rewrite strategy.

----------------------------------------

(3) CpxPTRS_DirectPoloProof (FINISHED)


We use the direct application of polynomial interpretations [ADY19].
Using the following Interpretation: 
Resulting in the following upper complexity bound: EXPPolynomial interpretation [POLO]:

   POL(cons_g(x_1)) = 5 + 4*x_1
   POL(encArg(x_1)) = 2*x_1
   POL(encode_f(x_1, x_2, x_3)) = 7 + 3*x_1 + 7*x_2 + 5*x_3
   POL(encode_g(x_1)) = 10 + 2*x_1
   POL(encode_s(x_1)) = 7 + 10*x_1
   POL(f(x_1, x_2, x_3)) = 1 + x_1 + 2*x_2 + 2*x_3
   POL(g(x_1)) = x_1
   POL(s(x_1)) = 2 + 5*x_1

----------------------------------------

(4)
BOUNDS(1, EXP)
