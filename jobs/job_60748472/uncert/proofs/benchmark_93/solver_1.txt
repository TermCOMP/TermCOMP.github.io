AST
proof of /home/ff862203/input_rdcGviSR03.ari
# AProVE Commit ID: 1c9e2a6453f9f0dca490585733f1cff3767d3e54 jan-christoph 20250828 unpublished


Innermost AST of the given PTRS could be proven:

(0) PTRS
(1) PTRStoPQTRSProof [EQUIVALENT, 0 ms]
(2) PQTRS
(3) PQTRStoADPProblemProof [EQUIVALENT, 0 ms]
(4) ADP
(5) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
(6) ADP
(7) AST_ADPTransformationProof [EQUIVALENT, 0 ms]
(8) ADP
(9) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
(10) AND
    (11) ADP
        (12) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
        (13) ADP
        (14) AST_ADPReductionPairProof [EQUIVALENT, 0 ms]
        (15) ADP
        (16) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
        (17) TRUE
    (18) ADP
        (19) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
        (20) ADP
        (21) AST_ADPReductionPairProof [EQUIVALENT, 0 ms]
        (22) ADP
        (23) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
        (24) TRUE


----------------------------------------

(0)
Obligation:
Probabilistic term rewrite system:
The TRS has the following probabilistic rules:

   h(b) -> 1 : f(b)
   f(x) -> 1 / 2 : c(g(x), g(x)) || 1 / 2 : c(h(x), h(x))
   g(a) -> 1 : f(a)

and uses the innermost rewrite strategy.

----------------------------------------

(1) PTRStoPQTRSProof (EQUIVALENT)
Transformed PTRS into PQTRS. Q is:
   h(b), f(x), g(a)
----------------------------------------

(2)
Obligation:
Probabilistic Q term rewrite system:
The PQTRS has the following probabilistic rules:

   h(b) -> 1 : f(b)
   f(x) -> 1 / 2 : c(g(x), g(x)) || 1 / 2 : c(h(x), h(x))
   g(a) -> 1 : f(a)

And Q contains the following terms:
   h(b), f(x0), g(a)

----------------------------------------

(3) PQTRStoADPProblemProof (EQUIVALENT)


A PQTRS (R,Q) is innermost AST iff ADP(R) is innermost AST (Chain-Criterion)[FLOPS24].
----------------------------------------

(4)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   h(b) -> 1 : f(b)
   f(x) -> 1 / 2 : c(g(x), g(x)) || 1 / 2 : c(h(x), h(x))
   g(a) -> 1 : f(a)

The ADP Problem has the following rules with annotations:

   H(b) -> 1 : F(b)
   F(x) -> 1 / 2 : c(G(x), G(x)) || 1 / 2 : c(H(x), H(x))
   G(a) -> 1 : F(a)


----------------------------------------

(5) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(6)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   H(b) -> 1 : F(b)
   F(x) -> 1 / 2 : c(G(x), G(x)) || 1 / 2 : c(H(x), H(x))
   G(a) -> 1 : F(a)


----------------------------------------

(7) AST_ADPTransformationProof (EQUIVALENT)
By instantiating [FLOPS24] for the rule F(x) -> 1 / 2 : c(G(x), G(x)) || 1 / 2 : c(H(x), H(x)) we obtained the following new ADPs :

   F(b) -> 1 / 2 : c(G(b), G(b)) || 1 / 2 : c(H(b), H(b))
   F(a) -> 1 / 2 : c(G(a), G(a)) || 1 / 2 : c(H(a), H(a))

and we added the following new probabilistic rules with active return value flag:
none

----------------------------------------

(8)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   H(b) -> 1 : F(b)
   G(a) -> 1 : F(a)
   F(b) -> 1 / 2 : c(G(b), G(b)) || 1 / 2 : c(H(b), H(b))
   F(a) -> 1 / 2 : c(G(a), G(a)) || 1 / 2 : c(H(a), H(a))


----------------------------------------

(9) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs.
----------------------------------------

(10)
Complex Obligation (AND)

----------------------------------------

(11)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   F(a) -> 1 / 2 : c(G(a), G(a)) || 1 / 2 : c(H(a), H(a))
   G(a) -> 1 : F(a)


----------------------------------------

(12) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[H(a)]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(13)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   G(a) -> 1 : F(a)
   F(a) -> 1 / 2 : c(G(a), G(a)) || 1 / 2 : c(h(a), h(a))


----------------------------------------

(14) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   F(a) -> 1 / 2 : c(G(a), G(a)) || 1 / 2 : c(h(a), h(a))

The remaining pairs can at least be oriented weakly:

   G(a) -> 1 : F(a)

Used ordering:  Polynomial interpretation [POLO]:

   POL(F(x_1)) = 1
   POL(G(x_1)) = x_1
   POL(a) = 1
   POL(c(x_1, x_2)) = 0
   POL(h(x_1)) = 0

----------------------------------------

(15)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   G(a) -> 1 : F(a)


----------------------------------------

(16) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(17)
TRUE

----------------------------------------

(18)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   F(b) -> 1 / 2 : c(G(b), G(b)) || 1 / 2 : c(H(b), H(b))
   H(b) -> 1 : F(b)


----------------------------------------

(19) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[G(b)]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(20)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   F(b) -> 1 / 2 : c(g(b), g(b)) || 1 / 2 : c(H(b), H(b))
   H(b) -> 1 : F(b)


----------------------------------------

(21) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   F(b) -> 1 / 2 : c(g(b), g(b)) || 1 / 2 : c(H(b), H(b))

The remaining pairs can at least be oriented weakly:

   H(b) -> 1 : F(b)

Used ordering:  Polynomial interpretation [POLO]:

   POL(F(x_1)) = 2 + 2*x_1
   POL(H(x_1)) = 2 + 2*x_1
   POL(b) = 0
   POL(c(x_1, x_2)) = 0
   POL(g(x_1)) = 0

----------------------------------------

(22)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   H(b) -> 1 : F(b)


----------------------------------------

(23) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(24)
TRUE
