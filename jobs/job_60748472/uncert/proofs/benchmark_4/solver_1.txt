AST
proof of /home/ff862203/input_ldh4hMuHFM.ari
# AProVE Commit ID: 1c9e2a6453f9f0dca490585733f1cff3767d3e54 jan-christoph 20250828 unpublished


Innermost AST of the given PTRS could be proven:

(0) PTRS
(1) PTRStoPQTRSProof [EQUIVALENT, 0 ms]
(2) PQTRS
(3) PQTRStoADPProblemProof [EQUIVALENT, 0 ms]
(4) ADP
(5) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) ADP
        (8) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (9) ADP
        (10) AST_ADPSubtermCriterionProof [EQUIVALENT, 0 ms]
        (11) ADP
        (12) PisEmptyProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) ADP
        (15) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (16) ADP
        (17) AST_ADPProbabilityRemovalProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QReductionProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (22) YES
    (23) ADP
        (24) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
        (25) ADP
        (26) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (27) ADP
        (28) AST_ADPReductionPairProof [EQUIVALENT, 5 ms]
        (29) ADP
        (30) PisEmptyProof [EQUIVALENT, 0 ms]
        (31) YES


----------------------------------------

(0)
Obligation:
Probabilistic term rewrite system:
The TRS has the following probabilistic rules:

   outerLoop(s(x), s(y)) -> 1 : outerLoop(minus(x, innerLoop(y, 0)), s(y))
   outerLoop(0, s(y)) -> 1 : stop
   minus(x, 0) -> 1 : x
   innerLoop(s(x), y) -> 1 / 2 : innerLoop(x, s(y)) || 1 / 2 : innerLoop(s(x), s(y))
   innerLoop(0, y) -> 1 : y
   minus(s(x), s(y)) -> 1 : minus(x, y)

and uses the innermost rewrite strategy.

----------------------------------------

(1) PTRStoPQTRSProof (EQUIVALENT)
Transformed PTRS into PQTRS. Q is:
   outerLoop(s(x), s(y)), outerLoop(0, s(y)), minus(x, 0), innerLoop(s(x), y), innerLoop(0, y), minus(s(x), s(y))
----------------------------------------

(2)
Obligation:
Probabilistic Q term rewrite system:
The PQTRS has the following probabilistic rules:

   outerLoop(s(x), s(y)) -> 1 : outerLoop(minus(x, innerLoop(y, 0)), s(y))
   outerLoop(0, s(y)) -> 1 : stop
   minus(x, 0) -> 1 : x
   innerLoop(s(x), y) -> 1 / 2 : innerLoop(x, s(y)) || 1 / 2 : innerLoop(s(x), s(y))
   innerLoop(0, y) -> 1 : y
   minus(s(x), s(y)) -> 1 : minus(x, y)

And Q contains the following terms:
   outerLoop(s(x0), s(x1)), outerLoop(0, s(x0)), minus(x0, 0), innerLoop(s(x0), x1), innerLoop(0, x0), minus(s(x0), s(x1))

----------------------------------------

(3) PQTRStoADPProblemProof (EQUIVALENT)


A PQTRS (R,Q) is innermost AST iff ADP(R) is innermost AST (Chain-Criterion)[FLOPS24].
----------------------------------------

(4)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   outerLoop(s(x), s(y)) -> 1 : outerLoop(minus(x, innerLoop(y, 0)), s(y))
   outerLoop(0, s(y)) -> 1 : stop
   minus(x, 0) -> 1 : x
   innerLoop(s(x), y) -> 1 / 2 : innerLoop(x, s(y)) || 1 / 2 : innerLoop(s(x), s(y))
   innerLoop(0, y) -> 1 : y
   minus(s(x), s(y)) -> 1 : minus(x, y)

The ADP Problem has the following rules with annotations:

   OUTERLOOP(s(x), s(y)) -> 1 : OUTERLOOP(MINUS(x, INNERLOOP(y, 0)), s(y))
   OUTERLOOP(0, s(y)) -> 1 : stop
   MINUS(x, 0) -> 1 : x
   INNERLOOP(s(x), y) -> 1 / 2 : INNERLOOP(x, s(y)) || 1 / 2 : INNERLOOP(s(x), s(y))
   INNERLOOP(0, y) -> 1 : y
   MINUS(s(x), s(y)) -> 1 : MINUS(x, y)


----------------------------------------

(5) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 3 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   outerLoop(s(x), s(y)) -> 1 : outerLoop(minus(x, innerLoop(y, 0)), s(y))
   outerLoop(0, s(y)) -> 1 : stop
   minus(x, 0) -> 1 : x
   innerLoop(s(x), y) -> 1 / 2 : innerLoop(x, s(y)) || 1 / 2 : innerLoop(s(x), s(y))
   innerLoop(0, y) -> 1 : y
   minus(s(x), s(y)) -> 1 : minus(x, y)

The ADP Problem has the following rules with annotations:

   INNERLOOP(s(x), y) -> 1 / 2 : INNERLOOP(x, s(y)) || 1 / 2 : INNERLOOP(s(x), s(y))


----------------------------------------

(8) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(9)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   INNERLOOP(s(x), y) -> 1 / 2 : INNERLOOP(x, s(y)) || 1 / 2 : INNERLOOP(s(x), s(y))


----------------------------------------

(10) AST_ADPSubtermCriterionProof (EQUIVALENT)
We use the subterm criterion [FLOPS24JOURNAL].
The following pairs can be oriented strictly and are deleted.

   INNERLOOP(s(x), y) -> 1 / 2 : INNERLOOP(x, s(y)) || 1 / 2 : INNERLOOP(s(x), s(y))

The remaining pairs can at least be oriented weakly or contain no annotations.
none

Used ordering:  Combined order from the following AFS and order.
OUTERLOOP(x1, x2)  =  x1

MINUS(x1, x2)  =  x1

INNERLOOP(x1, x2)  =  x1


Subterm Order

----------------------------------------

(11)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The set of rules with annotations is empty.

----------------------------------------

(12) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   outerLoop(s(x), s(y)) -> 1 : outerLoop(minus(x, innerLoop(y, 0)), s(y))
   outerLoop(0, s(y)) -> 1 : stop
   minus(x, 0) -> 1 : x
   innerLoop(s(x), y) -> 1 / 2 : innerLoop(x, s(y)) || 1 / 2 : innerLoop(s(x), s(y))
   innerLoop(0, y) -> 1 : y
   minus(s(x), s(y)) -> 1 : minus(x, y)

The ADP Problem has the following rules with annotations:

   MINUS(s(x), s(y)) -> 1 : MINUS(x, y)


----------------------------------------

(15) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(16)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   MINUS(s(x), s(y)) -> 1 : MINUS(x, y)


----------------------------------------

(17) AST_ADPProbabilityRemovalProof (EQUIVALENT)


We use the probability removal processor [FLOPS24].
As all rules have a trivial probability (1:r), we can transform it into a non-probabilistic DP problem
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)

R is empty.
The set Q consists of the following terms:

   outerLoop(s(x0), s(x1))
   outerLoop(0, s(x0))
   minus(x0, 0)
   innerLoop(s(x0), x1)
   innerLoop(0, x0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   outerLoop(s(x0), s(x1))
   outerLoop(0, s(x0))
   minus(x0, 0)
   innerLoop(s(x0), x1)
   innerLoop(0, x0)
   minus(s(x0), s(x1))


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MINUS(s(x), s(y)) -> MINUS(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(22)
YES

----------------------------------------

(23)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   outerLoop(s(x), s(y)) -> 1 : outerLoop(minus(x, innerLoop(y, 0)), s(y))
   outerLoop(0, s(y)) -> 1 : stop
   minus(x, 0) -> 1 : x
   innerLoop(s(x), y) -> 1 / 2 : innerLoop(x, s(y)) || 1 / 2 : innerLoop(s(x), s(y))
   innerLoop(0, y) -> 1 : y
   minus(s(x), s(y)) -> 1 : minus(x, y)

The ADP Problem has the following rules with annotations:

   OUTERLOOP(s(x), s(y)) -> 1 : OUTERLOOP(MINUS(x, INNERLOOP(y, 0)), s(y))


----------------------------------------

(24) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[MINUS(x, innerLoop(y, 0)), INNERLOOP(y, 0)]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(25)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   outerLoop(s(x), s(y)) -> 1 : outerLoop(minus(x, innerLoop(y, 0)), s(y))
   outerLoop(0, s(y)) -> 1 : stop
   minus(x, 0) -> 1 : x
   innerLoop(s(x), y) -> 1 / 2 : innerLoop(x, s(y)) || 1 / 2 : innerLoop(s(x), s(y))
   innerLoop(0, y) -> 1 : y
   minus(s(x), s(y)) -> 1 : minus(x, y)

The ADP Problem has the following rules with annotations:

   OUTERLOOP(s(x), s(y)) -> 1 : OUTERLOOP(minus(x, innerLoop(y, 0)), s(y))


----------------------------------------

(26) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(27)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   innerLoop(s(x), y) -> 1 / 2 : innerLoop(x, s(y)) || 1 / 2 : innerLoop(s(x), s(y))
   innerLoop(0, y) -> 1 : y
   minus(x, 0) -> 1 : x
   minus(s(x), s(y)) -> 1 : minus(x, y)

The ADP Problem has the following rules with annotations:

   OUTERLOOP(s(x), s(y)) -> 1 : OUTERLOOP(minus(x, innerLoop(y, 0)), s(y))


----------------------------------------

(28) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   OUTERLOOP(s(x), s(y)) -> 1 : OUTERLOOP(minus(x, innerLoop(y, 0)), s(y))

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(OUTERLOOP(x_1, x_2)) = x_1
   POL(innerLoop(x_1, x_2)) = 2*x_1 + x_2
   POL(minus(x_1, x_2)) = x_1
   POL(s(x_1)) = 1 + x_1

----------------------------------------

(29)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   innerLoop(s(x), y) -> 1 / 2 : innerLoop(x, s(y)) || 1 / 2 : innerLoop(s(x), s(y))
   innerLoop(0, y) -> 1 : y
   minus(x, 0) -> 1 : x
   minus(s(x), s(y)) -> 1 : minus(x, y)

The set of rules with annotations is empty.

----------------------------------------

(30) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(31)
YES
