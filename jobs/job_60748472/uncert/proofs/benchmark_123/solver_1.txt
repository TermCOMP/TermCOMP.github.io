AST
proof of /home/ff862203/input_stS7QSQymN.ari
# AProVE Commit ID: 1c9e2a6453f9f0dca490585733f1cff3767d3e54 jan-christoph 20250828 unpublished


Innermost AST of the given PTRS could be proven:

(0) PTRS
(1) PTRStoPQTRSProof [EQUIVALENT, 0 ms]
(2) PQTRS
(3) PQTRStoADPProblemProof [EQUIVALENT, 0 ms]
(4) ADP
(5) AST_ADPDependencyGraphProof [EQUIVALENT, 2 ms]
(6) AND
    (7) ADP
        (8) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (9) ADP
        (10) AST_ADPReductionPairProof [EQUIVALENT, 0 ms]
        (11) ADP
        (12) PisEmptyProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) ADP
        (15) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (16) ADP
        (17) AST_ADPProbabilityRemovalProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QReductionProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) UsableRulesReductionPairsProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) PisEmptyProof [EQUIVALENT, 0 ms]
        (24) YES


----------------------------------------

(0)
Obligation:
Probabilistic term rewrite system:
The TRS has the following probabilistic rules:

   f(s(x)) -> 1 : f(g(x, x))
   f(g(x, y)) -> 1 : g(f(x), f(y))
   geo(x) -> 1 / 2 : geo(s(x)) || 1 / 2 : x
   start -> 1 : f(geo(O))

and uses the innermost rewrite strategy.

----------------------------------------

(1) PTRStoPQTRSProof (EQUIVALENT)
Transformed PTRS into PQTRS. Q is:
   f(s(x)), f(g(x, y)), geo(x), start
----------------------------------------

(2)
Obligation:
Probabilistic Q term rewrite system:
The PQTRS has the following probabilistic rules:

   f(s(x)) -> 1 : f(g(x, x))
   f(g(x, y)) -> 1 : g(f(x), f(y))
   geo(x) -> 1 / 2 : geo(s(x)) || 1 / 2 : x
   start -> 1 : f(geo(O))

And Q contains the following terms:
   f(s(x0)), f(g(x0, x1)), geo(x0), start

----------------------------------------

(3) PQTRStoADPProblemProof (EQUIVALENT)


A PQTRS (R,Q) is innermost AST iff ADP(R) is innermost AST (Chain-Criterion)[FLOPS24].
----------------------------------------

(4)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   f(s(x)) -> 1 : f(g(x, x))
   f(g(x, y)) -> 1 : g(f(x), f(y))
   geo(x) -> 1 / 2 : geo(s(x)) || 1 / 2 : x
   start -> 1 : f(geo(O))

The ADP Problem has the following rules with annotations:

   F(s(x)) -> 1 : F(g(x, x))
   F(g(x, y)) -> 1 : g(F(x), F(y))
   GEO(x) -> 1 / 2 : GEO(s(x)) || 1 / 2 : x
   START -> 1 : F(GEO(O))


----------------------------------------

(5) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 1 less node.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   f(s(x)) -> 1 : f(g(x, x))
   f(g(x, y)) -> 1 : g(f(x), f(y))
   geo(x) -> 1 / 2 : geo(s(x)) || 1 / 2 : x
   start -> 1 : f(geo(O))

The ADP Problem has the following rules with annotations:

   GEO(x) -> 1 / 2 : GEO(s(x)) || 1 / 2 : x


----------------------------------------

(8) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(9)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   GEO(x) -> 1 / 2 : GEO(s(x)) || 1 / 2 : x


----------------------------------------

(10) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   GEO(x) -> 1 / 2 : GEO(s(x)) || 1 / 2 : x

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(GEO(x_1)) = 1 + x_1
   POL(s(x_1)) = 1 + 2*x_1

----------------------------------------

(11)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The set of rules with annotations is empty.

----------------------------------------

(12) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   f(s(x)) -> 1 : f(g(x, x))
   f(g(x, y)) -> 1 : g(f(x), f(y))
   geo(x) -> 1 / 2 : geo(s(x)) || 1 / 2 : x
   start -> 1 : f(geo(O))

The ADP Problem has the following rules with annotations:

   F(g(x, y)) -> 1 : g(F(x), F(y))
   F(s(x)) -> 1 : F(g(x, x))


----------------------------------------

(15) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(16)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   F(g(x, y)) -> 1 : g(F(x), F(y))
   F(s(x)) -> 1 : F(g(x, x))


----------------------------------------

(17) AST_ADPProbabilityRemovalProof (EQUIVALENT)


We use the probability removal processor [FLOPS24].
As all rules have a trivial probability (1:r), we can transform it into a non-probabilistic DP problem
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(s(x)) -> F(g(x, x))
   F(g(x, y)) -> F(y)
   F(g(x, y)) -> F(x)

R is empty.
The set Q consists of the following terms:

   f(s(x0))
   f(g(x0, x1))
   geo(x0)
   start

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f(s(x0))
   f(g(x0, x1))
   geo(x0)
   start


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(s(x)) -> F(g(x, x))
   F(g(x, y)) -> F(y)
   F(g(x, y)) -> F(x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) UsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules with reduction pair processor [LPAR04] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules [FROCOS05] can be oriented non-strictly. All non-usable rules are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

The following dependency pairs can be deleted:

   F(s(x)) -> F(g(x, x))
   F(g(x, y)) -> F(y)
   F(g(x, y)) -> F(x)
No rules are removed from R.

Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(F(x_1)) = 2*x_1
   POL(g(x_1, x_2)) = 1 + x_1 + x_2
   POL(s(x_1)) = 1 + 2*x_1


----------------------------------------

(22)
Obligation:
Q DP problem:
P is empty.
R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(24)
YES
