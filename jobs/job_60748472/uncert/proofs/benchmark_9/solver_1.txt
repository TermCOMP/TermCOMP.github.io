AST
proof of /home/ff862203/input_c7IUKvSpu2.ari
# AProVE Commit ID: 1c9e2a6453f9f0dca490585733f1cff3767d3e54 jan-christoph 20250828 unpublished


Innermost AST of the given PTRS could be proven:

(0) PTRS
(1) PTRStoPQTRSProof [EQUIVALENT, 0 ms]
(2) PQTRS
(3) PQTRStoADPProblemProof [EQUIVALENT, 0 ms]
(4) ADP
(5) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) ADP
        (8) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (9) ADP
        (10) AST_ADPProbabilityRemovalProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QReductionProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (15) YES
    (16) ADP
        (17) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
        (18) ADP
        (19) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (20) ADP
        (21) AST_ADPReductionPairProof [EQUIVALENT, 0 ms]
        (22) ADP
        (23) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
        (24) TRUE


----------------------------------------

(0)
Obligation:
Probabilistic term rewrite system:
The TRS has the following probabilistic rules:

   leq(0, x) -> 1 : true
   leq(s(x), s(y)) -> 1 : leq(x, y)
   ifLoop(true, x, s(y)) -> 1 / 2 : loop(x, y) || 1 / 2 : loop(x, s(s(y)))
   leq(s(x), 0) -> 1 : false
   ifLoop(false, x, y) -> 1 : stop
   loop(x, y) -> 1 : ifLoop(leq(x, y), x, y)

and uses the innermost rewrite strategy.

----------------------------------------

(1) PTRStoPQTRSProof (EQUIVALENT)
Transformed PTRS into PQTRS. Q is:
   leq(0, x), leq(s(x), s(y)), ifLoop(true, x, s(y)), leq(s(x), 0), ifLoop(false, x, y), loop(x, y)
----------------------------------------

(2)
Obligation:
Probabilistic Q term rewrite system:
The PQTRS has the following probabilistic rules:

   leq(0, x) -> 1 : true
   leq(s(x), s(y)) -> 1 : leq(x, y)
   ifLoop(true, x, s(y)) -> 1 / 2 : loop(x, y) || 1 / 2 : loop(x, s(s(y)))
   leq(s(x), 0) -> 1 : false
   ifLoop(false, x, y) -> 1 : stop
   loop(x, y) -> 1 : ifLoop(leq(x, y), x, y)

And Q contains the following terms:
   leq(0, x0), leq(s(x0), s(x1)), ifLoop(true, x0, s(x1)), leq(s(x0), 0), ifLoop(false, x0, x1), loop(x0, x1)

----------------------------------------

(3) PQTRStoADPProblemProof (EQUIVALENT)


A PQTRS (R,Q) is innermost AST iff ADP(R) is innermost AST (Chain-Criterion)[FLOPS24].
----------------------------------------

(4)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   leq(0, x) -> 1 : true
   leq(s(x), s(y)) -> 1 : leq(x, y)
   ifLoop(true, x, s(y)) -> 1 / 2 : loop(x, y) || 1 / 2 : loop(x, s(s(y)))
   leq(s(x), 0) -> 1 : false
   ifLoop(false, x, y) -> 1 : stop
   loop(x, y) -> 1 : ifLoop(leq(x, y), x, y)

The ADP Problem has the following rules with annotations:

   LEQ(0, x) -> 1 : true
   LEQ(s(x), s(y)) -> 1 : LEQ(x, y)
   IFLOOP(true, x, s(y)) -> 1 / 2 : LOOP(x, y) || 1 / 2 : LOOP(x, s(s(y)))
   LEQ(s(x), 0) -> 1 : false
   IFLOOP(false, x, y) -> 1 : stop
   LOOP(x, y) -> 1 : IFLOOP(LEQ(x, y), x, y)


----------------------------------------

(5) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 3 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   leq(0, x) -> 1 : true
   leq(s(x), s(y)) -> 1 : leq(x, y)
   ifLoop(true, x, s(y)) -> 1 / 2 : loop(x, y) || 1 / 2 : loop(x, s(s(y)))
   leq(s(x), 0) -> 1 : false
   ifLoop(false, x, y) -> 1 : stop
   loop(x, y) -> 1 : ifLoop(leq(x, y), x, y)

The ADP Problem has the following rules with annotations:

   LEQ(s(x), s(y)) -> 1 : LEQ(x, y)


----------------------------------------

(8) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(9)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   LEQ(s(x), s(y)) -> 1 : LEQ(x, y)


----------------------------------------

(10) AST_ADPProbabilityRemovalProof (EQUIVALENT)


We use the probability removal processor [FLOPS24].
As all rules have a trivial probability (1:r), we can transform it into a non-probabilistic DP problem
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LEQ(s(x), s(y)) -> LEQ(x, y)

R is empty.
The set Q consists of the following terms:

   leq(0, x0)
   leq(s(x0), s(x1))
   ifLoop(true, x0, s(x1))
   leq(s(x0), 0)
   ifLoop(false, x0, x1)
   loop(x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   leq(0, x0)
   leq(s(x0), s(x1))
   ifLoop(true, x0, s(x1))
   leq(s(x0), 0)
   ifLoop(false, x0, x1)
   loop(x0, x1)


----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LEQ(s(x), s(y)) -> LEQ(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LEQ(s(x), s(y)) -> LEQ(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   leq(0, x) -> 1 : true
   leq(s(x), s(y)) -> 1 : leq(x, y)
   ifLoop(true, x, s(y)) -> 1 / 2 : loop(x, y) || 1 / 2 : loop(x, s(s(y)))
   leq(s(x), 0) -> 1 : false
   ifLoop(false, x, y) -> 1 : stop
   loop(x, y) -> 1 : ifLoop(leq(x, y), x, y)

The ADP Problem has the following rules with annotations:

   IFLOOP(true, x, s(y)) -> 1 / 2 : LOOP(x, y) || 1 / 2 : LOOP(x, s(s(y)))
   LOOP(x, y) -> 1 : IFLOOP(LEQ(x, y), x, y)


----------------------------------------

(17) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[LEQ(x, y)]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(18)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   leq(0, x) -> 1 : true
   leq(s(x), s(y)) -> 1 : leq(x, y)
   ifLoop(true, x, s(y)) -> 1 / 2 : loop(x, y) || 1 / 2 : loop(x, s(s(y)))
   leq(s(x), 0) -> 1 : false
   ifLoop(false, x, y) -> 1 : stop
   loop(x, y) -> 1 : ifLoop(leq(x, y), x, y)

The ADP Problem has the following rules with annotations:

   IFLOOP(true, x, s(y)) -> 1 / 2 : LOOP(x, y) || 1 / 2 : LOOP(x, s(s(y)))
   LOOP(x, y) -> 1 : IFLOOP(leq(x, y), x, y)


----------------------------------------

(19) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(20)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   leq(0, x) -> 1 : true
   leq(s(x), s(y)) -> 1 : leq(x, y)
   leq(s(x), 0) -> 1 : false

The ADP Problem has the following rules with annotations:

   IFLOOP(true, x, s(y)) -> 1 / 2 : LOOP(x, y) || 1 / 2 : LOOP(x, s(s(y)))
   LOOP(x, y) -> 1 : IFLOOP(leq(x, y), x, y)


----------------------------------------

(21) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   IFLOOP(true, x, s(y)) -> 1 / 2 : LOOP(x, y) || 1 / 2 : LOOP(x, s(s(y)))

The remaining pairs can at least be oriented weakly:

   LOOP(x, y) -> 1 : IFLOOP(leq(x, y), x, y)

Used ordering:  Polynomial interpretation [POLO]:

   POL(0) = 2
   POL(IFLOOP(x_1, x_2, x_3)) = x_3
   POL(LOOP(x_1, x_2)) = x_2
   POL(false) = 0
   POL(leq(x_1, x_2)) = 0
   POL(s(x_1)) = 2 + x_1
   POL(true) = 0

----------------------------------------

(22)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   leq(0, x) -> 1 : true
   leq(s(x), s(y)) -> 1 : leq(x, y)
   leq(s(x), 0) -> 1 : false

The ADP Problem has the following rules with annotations:

   LOOP(x, y) -> 1 : IFLOOP(leq(x, y), x, y)


----------------------------------------

(23) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(24)
TRUE
