AST
proof of /home/ff862203/input_omDqMvWkCf.ari
# AProVE Commit ID: 1c9e2a6453f9f0dca490585733f1cff3767d3e54 jan-christoph 20250828 unpublished


Innermost AST of the given PTRS could be proven:

(0) PTRS
(1) PTRStoPQTRSProof [EQUIVALENT, 0 ms]
(2) PQTRS
(3) PQTRStoADPProblemProof [EQUIVALENT, 0 ms]
(4) ADP
(5) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) ADP
        (8) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (9) ADP
        (10) AST_ADPProbabilityRemovalProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QReductionProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (15) YES
    (16) ADP
        (17) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
        (18) ADP
        (19) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (20) ADP
        (21) AST_ADPReductionPairProof [EQUIVALENT, 1 ms]
        (22) ADP
        (23) PisEmptyProof [EQUIVALENT, 0 ms]
        (24) YES
    (25) ADP
        (26) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
        (27) ADP
        (28) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (29) ADP
        (30) AST_ADPReductionPairProof [EQUIVALENT, 0 ms]
        (31) ADP
        (32) PisEmptyProof [EQUIVALENT, 0 ms]
        (33) YES


----------------------------------------

(0)
Obligation:
Probabilistic term rewrite system:
The TRS has the following probabilistic rules:

   stateOI(x) -> 1 / 2 : stateOII(x) || 1 / 2 : stateO(x)
   stateOII(x) -> 1 : s(s(s(s(x))))
   stateI(x) -> 1 / 2 : stateII(x) || 1 / 2 : stateIO(x)
   stateIOI(x) -> 1 : s(s(x))
   stateO(x) -> 1 / 2 : stateOI(x) || 1 / 2 : stateOO(x)
   stateIO(x) -> 1 / 2 : stateIOI(x) || 1 / 2 : stateIOO(x)
   stateOO(x) -> 1 / 2 : stateOOI(x) || 1 / 2 : stateOOO(x)
   q(x, O, s(z)) -> 1 : s(q(x, s(z), s(z)))
   stateOOO(x) -> 1 : s(s(s(s(s(s(x))))))
   stateOOI(x) -> 1 : s(s(s(s(s(x)))))
   q(O, s(y), s(z)) -> 1 : O
   dice(x) -> 1 / 2 : stateI(x) || 1 / 2 : stateO(x)
   stateIOO(x) -> 1 : s(s(s(x)))
   q(s(x), s(y), z) -> 1 : q(x, y, z)
   start(x, y) -> 1 : q(dice(x), y, y)
   stateII(x) -> 1 / 2 : stateIII(x) || 1 / 2 : stateI(x)
   stateIII(x) -> 1 : s(x)

and uses the innermost rewrite strategy.

----------------------------------------

(1) PTRStoPQTRSProof (EQUIVALENT)
Transformed PTRS into PQTRS. Q is:
   stateOI(x), stateOII(x), stateI(x), stateIOI(x), stateO(x), stateIO(x), stateOO(x), q(x, O, s(z)), stateOOO(x), stateOOI(x), q(O, s(y), s(z)), dice(x), stateIOO(x), q(s(x), s(y), z), start(x, y), stateII(x), stateIII(x)
----------------------------------------

(2)
Obligation:
Probabilistic Q term rewrite system:
The PQTRS has the following probabilistic rules:

   stateOI(x) -> 1 / 2 : stateOII(x) || 1 / 2 : stateO(x)
   stateOII(x) -> 1 : s(s(s(s(x))))
   stateI(x) -> 1 / 2 : stateII(x) || 1 / 2 : stateIO(x)
   stateIOI(x) -> 1 : s(s(x))
   stateO(x) -> 1 / 2 : stateOI(x) || 1 / 2 : stateOO(x)
   stateIO(x) -> 1 / 2 : stateIOI(x) || 1 / 2 : stateIOO(x)
   stateOO(x) -> 1 / 2 : stateOOI(x) || 1 / 2 : stateOOO(x)
   q(x, O, s(z)) -> 1 : s(q(x, s(z), s(z)))
   stateOOO(x) -> 1 : s(s(s(s(s(s(x))))))
   stateOOI(x) -> 1 : s(s(s(s(s(x)))))
   q(O, s(y), s(z)) -> 1 : O
   dice(x) -> 1 / 2 : stateI(x) || 1 / 2 : stateO(x)
   stateIOO(x) -> 1 : s(s(s(x)))
   q(s(x), s(y), z) -> 1 : q(x, y, z)
   start(x, y) -> 1 : q(dice(x), y, y)
   stateII(x) -> 1 / 2 : stateIII(x) || 1 / 2 : stateI(x)
   stateIII(x) -> 1 : s(x)

And Q contains the following terms:
   stateOI(x0), stateOII(x0), stateI(x0), stateIOI(x0), stateO(x0), stateIO(x0), stateOO(x0), q(x0, O, s(x1)), stateOOO(x0), stateOOI(x0), q(O, s(x0), s(x1)), dice(x0), stateIOO(x0), q(s(x0), s(x1), x2), start(x0, x1), stateII(x0), stateIII(x0)

----------------------------------------

(3) PQTRStoADPProblemProof (EQUIVALENT)


A PQTRS (R,Q) is innermost AST iff ADP(R) is innermost AST (Chain-Criterion)[FLOPS24].
----------------------------------------

(4)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   stateOI(x) -> 1 / 2 : stateOII(x) || 1 / 2 : stateO(x)
   stateOII(x) -> 1 : s(s(s(s(x))))
   stateI(x) -> 1 / 2 : stateII(x) || 1 / 2 : stateIO(x)
   stateIOI(x) -> 1 : s(s(x))
   stateO(x) -> 1 / 2 : stateOI(x) || 1 / 2 : stateOO(x)
   stateIO(x) -> 1 / 2 : stateIOI(x) || 1 / 2 : stateIOO(x)
   stateOO(x) -> 1 / 2 : stateOOI(x) || 1 / 2 : stateOOO(x)
   q(x, O, s(z)) -> 1 : s(q(x, s(z), s(z)))
   stateOOO(x) -> 1 : s(s(s(s(s(s(x))))))
   stateOOI(x) -> 1 : s(s(s(s(s(x)))))
   q(O, s(y), s(z)) -> 1 : O
   dice(x) -> 1 / 2 : stateI(x) || 1 / 2 : stateO(x)
   stateIOO(x) -> 1 : s(s(s(x)))
   q(s(x), s(y), z) -> 1 : q(x, y, z)
   start(x, y) -> 1 : q(dice(x), y, y)
   stateII(x) -> 1 / 2 : stateIII(x) || 1 / 2 : stateI(x)
   stateIII(x) -> 1 : s(x)

The ADP Problem has the following rules with annotations:

   STATEOI(x) -> 1 / 2 : STATEOII(x) || 1 / 2 : STATEO(x)
   STATEOII(x) -> 1 : s(s(s(s(x))))
   STATEI(x) -> 1 / 2 : STATEII(x) || 1 / 2 : STATEIO(x)
   STATEIOI(x) -> 1 : s(s(x))
   STATEO(x) -> 1 / 2 : STATEOI(x) || 1 / 2 : STATEOO(x)
   STATEIO(x) -> 1 / 2 : STATEIOI(x) || 1 / 2 : STATEIOO(x)
   STATEOO(x) -> 1 / 2 : STATEOOI(x) || 1 / 2 : STATEOOO(x)
   Q(x, O, s(z)) -> 1 : s(Q(x, s(z), s(z)))
   STATEOOO(x) -> 1 : s(s(s(s(s(s(x))))))
   STATEOOI(x) -> 1 : s(s(s(s(s(x)))))
   Q(O, s(y), s(z)) -> 1 : O
   DICE(x) -> 1 / 2 : STATEI(x) || 1 / 2 : STATEO(x)
   STATEIOO(x) -> 1 : s(s(s(x)))
   Q(s(x), s(y), z) -> 1 : Q(x, y, z)
   START(x, y) -> 1 : Q(DICE(x), y, y)
   STATEII(x) -> 1 / 2 : STATEIII(x) || 1 / 2 : STATEI(x)
   STATEIII(x) -> 1 : s(x)


----------------------------------------

(5) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 11 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   stateOI(x) -> 1 / 2 : stateOII(x) || 1 / 2 : stateO(x)
   stateOII(x) -> 1 : s(s(s(s(x))))
   stateI(x) -> 1 / 2 : stateII(x) || 1 / 2 : stateIO(x)
   stateIOI(x) -> 1 : s(s(x))
   stateO(x) -> 1 / 2 : stateOI(x) || 1 / 2 : stateOO(x)
   stateIO(x) -> 1 / 2 : stateIOI(x) || 1 / 2 : stateIOO(x)
   stateOO(x) -> 1 / 2 : stateOOI(x) || 1 / 2 : stateOOO(x)
   q(x, O, s(z)) -> 1 : s(q(x, s(z), s(z)))
   stateOOO(x) -> 1 : s(s(s(s(s(s(x))))))
   stateOOI(x) -> 1 : s(s(s(s(s(x)))))
   q(O, s(y), s(z)) -> 1 : O
   dice(x) -> 1 / 2 : stateI(x) || 1 / 2 : stateO(x)
   stateIOO(x) -> 1 : s(s(s(x)))
   q(s(x), s(y), z) -> 1 : q(x, y, z)
   start(x, y) -> 1 : q(dice(x), y, y)
   stateII(x) -> 1 / 2 : stateIII(x) || 1 / 2 : stateI(x)
   stateIII(x) -> 1 : s(x)

The ADP Problem has the following rules with annotations:

   Q(s(x), s(y), z) -> 1 : Q(x, y, z)
   Q(x, O, s(z)) -> 1 : s(Q(x, s(z), s(z)))


----------------------------------------

(8) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(9)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   Q(s(x), s(y), z) -> 1 : Q(x, y, z)
   Q(x, O, s(z)) -> 1 : s(Q(x, s(z), s(z)))


----------------------------------------

(10) AST_ADPProbabilityRemovalProof (EQUIVALENT)


We use the probability removal processor [FLOPS24].
As all rules have a trivial probability (1:r), we can transform it into a non-probabilistic DP problem
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   Q(x, O, s(z)) -> Q(x, s(z), s(z))
   Q(s(x), s(y), z) -> Q(x, y, z)

R is empty.
The set Q consists of the following terms:

   stateOI(x0)
   stateOII(x0)
   stateI(x0)
   stateIOI(x0)
   stateO(x0)
   stateIO(x0)
   stateOO(x0)
   q(x0, O, s(x1))
   stateOOO(x0)
   stateOOI(x0)
   q(O, s(x0), s(x1))
   dice(x0)
   stateIOO(x0)
   q(s(x0), s(x1), x2)
   start(x0, x1)
   stateII(x0)
   stateIII(x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   stateOI(x0)
   stateOII(x0)
   stateI(x0)
   stateIOI(x0)
   stateO(x0)
   stateIO(x0)
   stateOO(x0)
   q(x0, O, s(x1))
   stateOOO(x0)
   stateOOI(x0)
   q(O, s(x0), s(x1))
   dice(x0)
   stateIOO(x0)
   q(s(x0), s(x1), x2)
   start(x0, x1)
   stateII(x0)
   stateIII(x0)


----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   Q(x, O, s(z)) -> Q(x, s(z), s(z))
   Q(s(x), s(y), z) -> Q(x, y, z)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*Q(s(x), s(y), z) -> Q(x, y, z)
The graph contains the following edges 1 > 1, 2 > 2, 3 >= 3


*Q(x, O, s(z)) -> Q(x, s(z), s(z))
The graph contains the following edges 1 >= 1, 3 >= 2, 3 >= 3


----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   stateOI(x) -> 1 / 2 : stateOII(x) || 1 / 2 : stateO(x)
   stateOII(x) -> 1 : s(s(s(s(x))))
   stateI(x) -> 1 / 2 : stateII(x) || 1 / 2 : stateIO(x)
   stateIOI(x) -> 1 : s(s(x))
   stateO(x) -> 1 / 2 : stateOI(x) || 1 / 2 : stateOO(x)
   stateIO(x) -> 1 / 2 : stateIOI(x) || 1 / 2 : stateIOO(x)
   stateOO(x) -> 1 / 2 : stateOOI(x) || 1 / 2 : stateOOO(x)
   q(x, O, s(z)) -> 1 : s(q(x, s(z), s(z)))
   stateOOO(x) -> 1 : s(s(s(s(s(s(x))))))
   stateOOI(x) -> 1 : s(s(s(s(s(x)))))
   q(O, s(y), s(z)) -> 1 : O
   dice(x) -> 1 / 2 : stateI(x) || 1 / 2 : stateO(x)
   stateIOO(x) -> 1 : s(s(s(x)))
   q(s(x), s(y), z) -> 1 : q(x, y, z)
   start(x, y) -> 1 : q(dice(x), y, y)
   stateII(x) -> 1 / 2 : stateIII(x) || 1 / 2 : stateI(x)
   stateIII(x) -> 1 : s(x)

The ADP Problem has the following rules with annotations:

   STATEII(x) -> 1 / 2 : STATEIII(x) || 1 / 2 : STATEI(x)
   STATEI(x) -> 1 / 2 : STATEII(x) || 1 / 2 : STATEIO(x)


----------------------------------------

(17) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[STATEIO(x), STATEIII(x)]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(18)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   stateOI(x) -> 1 / 2 : stateOII(x) || 1 / 2 : stateO(x)
   stateOII(x) -> 1 : s(s(s(s(x))))
   stateI(x) -> 1 / 2 : stateII(x) || 1 / 2 : stateIO(x)
   stateIOI(x) -> 1 : s(s(x))
   stateO(x) -> 1 / 2 : stateOI(x) || 1 / 2 : stateOO(x)
   stateIO(x) -> 1 / 2 : stateIOI(x) || 1 / 2 : stateIOO(x)
   stateOO(x) -> 1 / 2 : stateOOI(x) || 1 / 2 : stateOOO(x)
   q(x, O, s(z)) -> 1 : s(q(x, s(z), s(z)))
   stateOOO(x) -> 1 : s(s(s(s(s(s(x))))))
   stateOOI(x) -> 1 : s(s(s(s(s(x)))))
   q(O, s(y), s(z)) -> 1 : O
   dice(x) -> 1 / 2 : stateI(x) || 1 / 2 : stateO(x)
   stateIOO(x) -> 1 : s(s(s(x)))
   q(s(x), s(y), z) -> 1 : q(x, y, z)
   start(x, y) -> 1 : q(dice(x), y, y)
   stateII(x) -> 1 / 2 : stateIII(x) || 1 / 2 : stateI(x)
   stateIII(x) -> 1 : s(x)

The ADP Problem has the following rules with annotations:

   STATEI(x) -> 1 / 2 : STATEII(x) || 1 / 2 : stateIO(x)
   STATEII(x) -> 1 / 2 : stateIII(x) || 1 / 2 : STATEI(x)


----------------------------------------

(19) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(20)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   STATEI(x) -> 1 / 2 : STATEII(x) || 1 / 2 : stateIO(x)
   STATEII(x) -> 1 / 2 : stateIII(x) || 1 / 2 : STATEI(x)


----------------------------------------

(21) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   STATEI(x) -> 1 / 2 : STATEII(x) || 1 / 2 : stateIO(x)
   STATEII(x) -> 1 / 2 : stateIII(x) || 1 / 2 : STATEI(x)

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(STATEI(x_1)) = 2 + 2*x_1
   POL(STATEII(x_1)) = 2 + 2*x_1
   POL(stateIII(x_1)) = 0
   POL(stateIO(x_1)) = 0

----------------------------------------

(22)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The set of rules with annotations is empty.

----------------------------------------

(23) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(24)
YES

----------------------------------------

(25)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   stateOI(x) -> 1 / 2 : stateOII(x) || 1 / 2 : stateO(x)
   stateOII(x) -> 1 : s(s(s(s(x))))
   stateI(x) -> 1 / 2 : stateII(x) || 1 / 2 : stateIO(x)
   stateIOI(x) -> 1 : s(s(x))
   stateO(x) -> 1 / 2 : stateOI(x) || 1 / 2 : stateOO(x)
   stateIO(x) -> 1 / 2 : stateIOI(x) || 1 / 2 : stateIOO(x)
   stateOO(x) -> 1 / 2 : stateOOI(x) || 1 / 2 : stateOOO(x)
   q(x, O, s(z)) -> 1 : s(q(x, s(z), s(z)))
   stateOOO(x) -> 1 : s(s(s(s(s(s(x))))))
   stateOOI(x) -> 1 : s(s(s(s(s(x)))))
   q(O, s(y), s(z)) -> 1 : O
   dice(x) -> 1 / 2 : stateI(x) || 1 / 2 : stateO(x)
   stateIOO(x) -> 1 : s(s(s(x)))
   q(s(x), s(y), z) -> 1 : q(x, y, z)
   start(x, y) -> 1 : q(dice(x), y, y)
   stateII(x) -> 1 / 2 : stateIII(x) || 1 / 2 : stateI(x)
   stateIII(x) -> 1 : s(x)

The ADP Problem has the following rules with annotations:

   STATEO(x) -> 1 / 2 : STATEOI(x) || 1 / 2 : STATEOO(x)
   STATEOI(x) -> 1 / 2 : STATEOII(x) || 1 / 2 : STATEO(x)


----------------------------------------

(26) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[STATEOII(x), STATEOO(x)]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(27)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   stateOI(x) -> 1 / 2 : stateOII(x) || 1 / 2 : stateO(x)
   stateOII(x) -> 1 : s(s(s(s(x))))
   stateI(x) -> 1 / 2 : stateII(x) || 1 / 2 : stateIO(x)
   stateIOI(x) -> 1 : s(s(x))
   stateO(x) -> 1 / 2 : stateOI(x) || 1 / 2 : stateOO(x)
   stateIO(x) -> 1 / 2 : stateIOI(x) || 1 / 2 : stateIOO(x)
   stateOO(x) -> 1 / 2 : stateOOI(x) || 1 / 2 : stateOOO(x)
   q(x, O, s(z)) -> 1 : s(q(x, s(z), s(z)))
   stateOOO(x) -> 1 : s(s(s(s(s(s(x))))))
   stateOOI(x) -> 1 : s(s(s(s(s(x)))))
   q(O, s(y), s(z)) -> 1 : O
   dice(x) -> 1 / 2 : stateI(x) || 1 / 2 : stateO(x)
   stateIOO(x) -> 1 : s(s(s(x)))
   q(s(x), s(y), z) -> 1 : q(x, y, z)
   start(x, y) -> 1 : q(dice(x), y, y)
   stateII(x) -> 1 / 2 : stateIII(x) || 1 / 2 : stateI(x)
   stateIII(x) -> 1 : s(x)

The ADP Problem has the following rules with annotations:

   STATEOI(x) -> 1 / 2 : stateOII(x) || 1 / 2 : STATEO(x)
   STATEO(x) -> 1 / 2 : STATEOI(x) || 1 / 2 : stateOO(x)


----------------------------------------

(28) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(29)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   STATEOI(x) -> 1 / 2 : stateOII(x) || 1 / 2 : STATEO(x)
   STATEO(x) -> 1 / 2 : STATEOI(x) || 1 / 2 : stateOO(x)


----------------------------------------

(30) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   STATEOI(x) -> 1 / 2 : stateOII(x) || 1 / 2 : STATEO(x)
   STATEO(x) -> 1 / 2 : STATEOI(x) || 1 / 2 : stateOO(x)

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(STATEO(x_1)) = 1 + 2*x_1
   POL(STATEOI(x_1)) = 2 + 2*x_1
   POL(stateOII(x_1)) = 0
   POL(stateOO(x_1)) = 0

----------------------------------------

(31)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The set of rules with annotations is empty.

----------------------------------------

(32) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(33)
YES
