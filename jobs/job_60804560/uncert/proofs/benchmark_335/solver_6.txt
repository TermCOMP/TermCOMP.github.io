YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l1, true>
<l2, l3, (arg1 > 0) /\ (arg2 > ~(1)), par{arg1 -> arg2, arg2 -> undef2, arg3 -> undef3}>
<l3, l4, true, par{arg2 -> arg1, arg3 -> arg1}>
<l4, l3, ((arg1 - 1) < arg1) /\ (arg1 > 0) /\ (arg2 > 99) /\ (arg2 = arg3), par{arg1 -> (arg1 - 1), arg2 -> undef8, arg3 -> undef9}>
<l4, l5, (arg2 > 0) /\ (arg2 < 100) /\ (arg2 = arg3), par{arg1 -> arg2, arg2 -> undef11, arg3 -> undef12}>
<l4, l5, (arg2 < 100) /\ (arg2 > 0) /\ (arg2 = arg3), par{arg1 -> arg2, arg2 -> undef14, arg3 -> undef15}>
<l4, l4, (arg2 < 100) /\ (arg2 > 0) /\ (arg2 = arg3), par{arg2 -> (arg2 + 1), arg3 -> (arg2 + 1)}>
<l5, l5, (arg1 > 0) /\ ((arg1 - 1) < arg1), par{arg1 -> (arg1 - 1), arg2 -> undef20, arg3 -> undef21}>
<l1, l2, true, par{arg1 -> undef22, arg2 -> undef23, arg3 -> undef24}>

Fresh variables:
undef2, undef3, undef8, undef9, undef11, undef12, undef14, undef15, undef20, undef21, undef22, undef23, undef24, 

Undef variables:
undef2, undef3, undef8, undef9, undef11, undef12, undef14, undef15, undef20, undef21, undef22, undef23, undef24, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l4, (arg1 = undef23) /\ (arg2 = undef23) /\ (arg3 = undef23) /\ (undef22 > 0) /\ (undef23 > ~(1))>
<l4, l4, ((arg1 - 1) < arg1) /\ (arg1 > 0) /\ (arg2 > 99) /\ (arg2 = arg3), par{arg1 -> (arg1 - 1), arg2 -> (arg1 - 1), arg3 -> (arg1 - 1)}>
<l4, l5, (arg2 > 0) /\ (arg2 < 100) /\ (arg2 = arg3), par{arg1 -> arg2, arg2 -> undef11, arg3 -> undef12}>
<l4, l5, (arg2 < 100) /\ (arg2 > 0) /\ (arg2 = arg3), par{arg1 -> arg2, arg2 -> undef14, arg3 -> undef15}>
<l4, l4, (arg2 < 100) /\ (arg2 > 0) /\ (arg2 = arg3), par{arg2 -> (arg2 + 1), arg3 -> (arg2 + 1)}>
<l5, l5, (arg1 > 0) /\ ((arg1 - 1) < arg1), par{arg1 -> (arg1 - 1), arg2 -> undef20, arg3 -> undef21}>

Fresh variables:
undef2, undef3, undef8, undef9, undef11, undef12, undef14, undef15, undef20, undef21, undef22, undef23, undef24, 

Undef variables:
undef2, undef3, undef8, undef9, undef11, undef12, undef14, undef15, undef20, undef21, undef22, undef23, undef24, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l4, l4, 1 <= arg1 /\ 100 <= arg2 /\ arg2 = arg3, {arg1 -> -1 + arg1, arg2 -> -1 + arg1, arg3 -> -1 + arg1, rest remain the same}>
<l4, l4, 1 <= arg2 /\ arg2 <= 99 /\ arg2 = arg3, {arg2 -> 1 + arg2, arg3 -> 1 + arg2, rest remain the same}>
Variables:
arg1, arg2, arg3

Graph 2:
Transitions:
<l5, l5, 1 <= arg1, {arg1 -> -1 + arg1, arg2 -> undef20, arg3 -> undef21, rest remain the same}>
Variables:
arg1, arg2, arg3

Precedence: 
Graph 0

Graph 1
<l0, l4, 0 <= undef23 /\ 1 <= undef22 /\ arg1 = undef23 /\ arg2 = undef23 /\ arg3 = undef23, {all remain the same}>

Graph 2
<l4, l5, 1 <= arg2 /\ arg2 <= 99 /\ arg2 = arg3, {arg1 -> arg2, arg2 -> undef11, arg3 -> undef12, rest remain the same}>
<l4, l5, 1 <= arg2 /\ arg2 <= 99 /\ arg2 = arg3, {arg1 -> arg2, arg2 -> undef14, arg3 -> undef15, rest remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 4 , 1 )
( 5 , 2 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.003517

Checking conditional termination of SCC {l4}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000702s
[33mRanking function: [36m-297 + 297*arg1 + arg2 - arg3[0m
New Graphs: 
Transitions:
<l4, l4, 1 <= arg2 /\ arg2 <= 99 /\ arg2 = arg3, {arg2 -> 1 + arg2, arg3 -> 1 + arg2, rest remain the same}>
Variables:
arg2, arg3
Checking conditional termination of SCC {l4}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000295s
[33mRanking function: [36m99 - arg2[0m
New Graphs: 
Proving termination of subgraph 2
Checking unfeasibility...
Time used: 0.00104

Checking conditional termination of SCC {l5}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000281s
[33mRanking function: [36m-1 + arg1[0m
New Graphs: 
[32mProgram Terminates[0m

