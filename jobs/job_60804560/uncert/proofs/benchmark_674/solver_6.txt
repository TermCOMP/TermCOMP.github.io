YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l8, true>
<l1, l2, ((0 + x^0) <= (0 + i^0))>
<l1, l3, ((1 + i^0) <= (0 + x^0)), par{i^0 -> (1 + i^0), j^0 -> (2 + j^0)}>
<l4, l3, (2 <= (0 + x^0)), par{i^0 -> 0}>
<l4, l5, ((0 + x^0) <= 1)>
<l3, l1, true>
<l6, l5, true>
<l2, l6, ((1 + j^0) <= (0 + (2 * x^0)))>
<l2, l6, ((0 + (2 * x^0)) <= (0 + j^0))>
<l7, l4, true, par{j^0 -> 0, x^0 -> (0 + __const_10^0)}>
<l8, l7, true>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l3, (j^0 = 0) /\ (x^0 = (0 + x^0)) /\ (2 <= (0 + (0 + x^0))), par{i^0 -> 0}>
<l0, l5, (j^0 = 0) /\ (x^0 = (0 + x^0)) /\ ((0 + (0 + x^0)) <= 1)>
<l3, l5, ((0 + x^0) <= (0 + i^0)) /\ ((1 + j^0) <= (0 + (2 * x^0)))>
<l3, l5, ((0 + x^0) <= (0 + i^0)) /\ ((0 + (2 * x^0)) <= (0 + j^0))>
<l3, l3, ((1 + i^0) <= (0 + x^0)), par{i^0 -> (1 + i^0), j^0 -> (2 + j^0)}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l3, l3, 1 + i^0 <= x^0, {i^0 -> 1 + i^0, j^0 -> 2 + j^0, rest remain the same}>
Variables:
i^0, j^0, x^0

Graph 2:
Transitions:
Variables:

Precedence: 
Graph 0

Graph 1
<l0, l3, 2 <= x^0 /\ j^0 = 0, {i^0 -> 0, rest remain the same}>

Graph 2
<l0, l5, x^0 <= 1 /\ j^0 = 0, {all remain the same}>
<l3, l5, x^0 <= i^0 /\ 1 + j^0 <= 2*x^0, {all remain the same}>
<l3, l5, x^0 <= i^0 /\ 2*x^0 <= j^0, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 3 , 1 )
( 5 , 2 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.001464

Checking conditional termination of SCC {l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000368s
[33mRanking function: [36m-1 - i^0 + x^0[0m
New Graphs: 
Proving termination of subgraph 2
Analyzing SCC {l5}...
No cycles found.

[32mProgram Terminates[0m

