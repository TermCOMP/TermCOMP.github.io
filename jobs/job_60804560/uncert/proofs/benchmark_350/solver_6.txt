YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l1, true>
<l3, l2, (undef2 > ~(1)) /\ (arg2 > 1) /\ (undef1 > ~(1)) /\ (arg1 > 0), par{arg1 -> undef1, arg2 -> undef2, arg3 -> undef3}>
<l2, l2, (arg2 > 0) /\ ((arg2 - 1) < arg2), par{arg2 -> (arg2 - 1), arg3 -> undef6}>
<l2, l5, (1 = arg2), par{arg1 -> 1, arg2 -> 0, arg3 -> arg1}>
<l2, l5, (arg2 > 0) /\ ((arg2 - 1) < arg2) /\ (0 = arg1), par{arg1 -> arg2, arg2 -> 0, arg3 -> 0}>
<l2, l5, (arg2 > 0) /\ ((arg2 - 1) < arg2), par{arg1 -> arg2, arg2 -> undef14, arg3 -> arg1}>
<l2, l5, (arg2 > 0) /\ ((arg2 - 1) < arg2) /\ (0 = arg1), par{arg1 -> arg2, arg2 -> undef17, arg3 -> 0}>
<l4, l5, true, par{arg2 -> arg3, arg3 -> arg2}>
<l5, l6, (arg1 > 0), par{arg1 -> arg2, arg2 -> arg3, arg3 -> undef24}>
<l6, l6, (arg2 > 0) /\ ((arg2 - 1) < arg2), par{arg2 -> (arg2 - 1), arg3 -> undef27}>
<l6, l6, (arg2 < 1) /\ ((arg1 - 1) < arg1) /\ (arg1 > 0), par{arg1 -> (arg1 - 1), arg3 -> undef30}>
<l1, l3, true, par{arg1 -> undef31, arg2 -> undef32, arg3 -> undef33}>

Fresh variables:
undef1, undef2, undef3, undef6, undef14, undef17, undef24, undef27, undef30, undef31, undef32, undef33, 

Undef variables:
undef1, undef2, undef3, undef6, undef14, undef17, undef24, undef27, undef30, undef31, undef32, undef33, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l2, (arg1 = undef1) /\ (arg2 = undef2) /\ (arg3 = undef3) /\ (undef2 > ~(1)) /\ (undef32 > 1) /\ (undef1 > ~(1)) /\ (undef31 > 0)>
<l2, l2, (arg2 > 0) /\ ((arg2 - 1) < arg2), par{arg2 -> (arg2 - 1), arg3 -> undef6}>
<l2, l6, (1 = arg2) /\ (1 > 0), par{arg1 -> 0, arg2 -> arg1, arg3 -> undef24}>
<l2, l6, (arg2 > 0) /\ ((arg2 - 1) < arg2) /\ (0 = arg1) /\ (arg2 > 0), par{arg1 -> 0, arg2 -> 0, arg3 -> undef24}>
<l2, l6, (arg2 > 0) /\ ((arg2 - 1) < arg2) /\ (arg2 > 0), par{arg1 -> undef14, arg2 -> arg1, arg3 -> undef24}>
<l2, l6, (arg2 > 0) /\ ((arg2 - 1) < arg2) /\ (0 = arg1) /\ (arg2 > 0), par{arg1 -> undef17, arg2 -> 0, arg3 -> undef24}>
<l6, l6, (arg2 > 0) /\ ((arg2 - 1) < arg2), par{arg2 -> (arg2 - 1), arg3 -> undef27}>
<l6, l6, (arg2 < 1) /\ ((arg1 - 1) < arg1) /\ (arg1 > 0), par{arg1 -> (arg1 - 1), arg3 -> undef30}>

Fresh variables:
undef1, undef2, undef3, undef6, undef14, undef17, undef24, undef27, undef30, undef31, undef32, undef33, 

Undef variables:
undef1, undef2, undef3, undef6, undef14, undef17, undef24, undef27, undef30, undef31, undef32, undef33, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l2, l2, 1 <= arg2, {arg2 -> -1 + arg2, arg3 -> undef6, rest remain the same}>
Variables:
arg2, arg3

Graph 2:
Transitions:
<l6, l6, 1 <= arg2, {arg2 -> -1 + arg2, arg3 -> undef27, rest remain the same}>
<l6, l6, 1 <= arg1 /\ arg2 <= 0, {arg1 -> -1 + arg1, arg3 -> undef30, rest remain the same}>
Variables:
arg2, arg3, arg1

Precedence: 
Graph 0

Graph 1
<l0, l2, 1 <= undef31 /\ 0 <= undef1 /\ 0 <= undef2 /\ 2 <= undef32 /\ arg1 = undef1 /\ arg2 = undef2 /\ arg3 = undef3, {all remain the same}>

Graph 2
<l2, l6, arg2 = 1, {arg1 -> 0, arg2 -> arg1, arg3 -> undef24, rest remain the same}>
<l2, l6, 1 <= arg2 /\ arg1 = 0, {arg1 -> 0, arg2 -> 0, arg3 -> undef24, rest remain the same}>
<l2, l6, 1 <= arg2, {arg1 -> undef14, arg2 -> arg1, arg3 -> undef24, rest remain the same}>
<l2, l6, 1 <= arg2 /\ arg1 = 0, {arg1 -> undef17, arg2 -> 0, arg3 -> undef24, rest remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 2 , 1 )
( 6 , 2 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.001106

Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000292s
[33mRanking function: [36m-1 + arg2[0m
New Graphs: 
Proving termination of subgraph 2
Checking unfeasibility...
Time used: 0.002028

Checking conditional termination of SCC {l6}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000571s
[33mRanking function: [36m-1 + arg1[0m
New Graphs: 
Transitions:
<l6, l6, 1 <= arg2, {arg2 -> -1 + arg2, arg3 -> undef27, rest remain the same}>
Variables:
arg2, arg3
Checking conditional termination of SCC {l6}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000240s
[33mRanking function: [36m-1 + arg2[0m
New Graphs: 
[32mProgram Terminates[0m

