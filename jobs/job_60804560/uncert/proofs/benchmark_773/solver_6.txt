YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l7, true>
<l1, l2, (undef2 = (0 + x0^0)), par{oldX0^0 -> undef2, x0^0 -> (1 + undef2)}>
<l3, l4, (undef7 = undef7), par{oldX0^0 -> (0 + x0^0), oldX1^0 -> undef7, x0^0 -> (0 + undef7)}>
<l2, l1, (undef10 = (0 + x0^0)) /\ ((0 + undef10) <= (0 + __const_10^0)), par{oldX0^0 -> undef10, x0^0 -> (0 + undef10)}>
<l2, l3, (undef14 = (0 + x0^0)) /\ ((1 + __const_10^0) <= (0 + undef14)), par{oldX0^0 -> undef14, x0^0 -> (0 + undef14)}>
<l5, l2, true, par{oldX0^0 -> (0 + x0^0), x0^0 -> 0}>
<l6, l5, (undef23 = undef23), par{oldX0^0 -> (0 + x0^0), oldX1^0 -> undef23, x0^0 -> (0 + undef23)}>
<l6, l4, true>
<l6, l1, true>
<l6, l3, true>
<l6, l2, true>
<l6, l5, true>
<l7, l6, true>

Fresh variables:
undef2, undef7, undef10, undef14, undef23, 

Undef variables:
undef2, undef7, undef10, undef14, undef23, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l1, (undef23 = undef23) /\ (undef10 = (0 + 0)) /\ ((0 + undef10) <= (0 + __const_10^0)), par{x0^0 -> (0 + undef10)}>
<l0, l4, (undef23 = undef23) /\ (undef14 = (0 + 0)) /\ ((1 + __const_10^0) <= (0 + undef14)) /\ (undef7 = undef7), par{x0^0 -> (0 + undef7)}>
<l0, l4, true>
<l0, l1, true>
<l0, l4, (undef7 = undef7), par{x0^0 -> (0 + undef7)}>
<l0, l1, (undef10 = (0 + x0^0)) /\ ((0 + undef10) <= (0 + __const_10^0)), par{x0^0 -> (0 + undef10)}>
<l0, l4, (undef14 = (0 + x0^0)) /\ ((1 + __const_10^0) <= (0 + undef14)) /\ (undef7 = undef7), par{x0^0 -> (0 + undef7)}>
<l0, l1, (undef10 = (0 + 0)) /\ ((0 + undef10) <= (0 + __const_10^0)), par{x0^0 -> (0 + undef10)}>
<l0, l4, (undef14 = (0 + 0)) /\ ((1 + __const_10^0) <= (0 + undef14)) /\ (undef7 = undef7), par{x0^0 -> (0 + undef7)}>
<l1, l1, (undef2 = (0 + x0^0)) /\ (undef10 = (0 + (1 + undef2))) /\ ((0 + undef10) <= (0 + __const_10^0)), par{x0^0 -> (0 + undef10)}>
<l1, l4, (undef2 = (0 + x0^0)) /\ (undef14 = (0 + (1 + undef2))) /\ ((1 + __const_10^0) <= (0 + undef14)) /\ (undef7 = undef7), par{x0^0 -> (0 + undef7)}>

Fresh variables:
undef2, undef7, undef10, undef14, undef23, 

Undef variables:
undef2, undef7, undef10, undef14, undef23, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l1, l1, undef10 <= __const_10^0 /\ x0^0 = undef2 /\ 1 + undef2 = undef10, {x0^0 -> undef10, rest remain the same}>
Variables:
__const_10^0, x0^0

Graph 2:
Transitions:
Variables:

Precedence: 
Graph 0

Graph 1
<l0, l1, undef10 <= __const_10^0 /\ undef10 = 0, {x0^0 -> undef10, rest remain the same}>
<l0, l1, true, {all remain the same}>
<l0, l1, undef10 <= __const_10^0 /\ x0^0 = undef10, {x0^0 -> undef10, rest remain the same}>
<l0, l1, undef10 <= __const_10^0 /\ undef10 = 0, {x0^0 -> undef10, rest remain the same}>

Graph 2
<l0, l4, 1 + __const_10^0 <= undef14 /\ undef14 = 0, {x0^0 -> undef7, rest remain the same}>
<l0, l4, true, {all remain the same}>
<l0, l4, true, {x0^0 -> undef7, rest remain the same}>
<l0, l4, 1 + __const_10^0 <= undef14 /\ x0^0 = undef14, {x0^0 -> undef7, rest remain the same}>
<l0, l4, 1 + __const_10^0 <= undef14 /\ undef14 = 0, {x0^0 -> undef7, rest remain the same}>
<l1, l4, 1 + __const_10^0 <= undef14 /\ x0^0 = undef2 /\ 1 + undef2 = undef14, {x0^0 -> undef7, rest remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 1 , 1 )
( 4 , 2 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.001069

Checking conditional termination of SCC {l1}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000447s
[33mRanking function: [36m-1 + __const_10^0 - x0^0[0m
New Graphs: 
Proving termination of subgraph 2
Analyzing SCC {l4}...
No cycles found.

[32mProgram Terminates[0m

