YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l1, true>
<l4, l5, (undef1 <= arg1) /\ (arg2 > ~(1)) /\ (arg1 > 0) /\ (undef1 > 0), par{arg1 -> undef1, arg2 -> (arg2 - 1), arg3 -> 0, arg4 -> arg2}>
<l5, l2, (arg2 < 1) /\ (arg3 > 0) /\ (undef6 > arg3) /\ (undef5 <= arg1) /\ (arg1 > 0) /\ (undef5 > 0), par{arg1 -> undef5, arg2 -> undef6, arg3 -> arg4, arg4 -> undef8}>
<l5, l2, (arg1 >= undef9) /\ (arg2 < 1) /\ (arg1 > 0) /\ (undef9 > 0), par{arg1 -> undef9, arg2 -> 1, arg3 -> arg4, arg4 -> undef12}>
<l5, l5, (undef13 <= arg1) /\ (arg2 > 0) /\ (arg1 > 0) /\ (undef13 > 0), par{arg1 -> undef13, arg2 -> (arg2 - 1), arg3 -> undef15}>
<l2, l3, (arg3 > 0) /\ (undef21 > ~(1)) /\ (arg1 > 0), par{arg1 -> (undef21 - 1), arg3 -> undef19, arg4 -> undef20}>
<l3, l3, (arg2 > ~(1)) /\ (undef26 > 0) /\ (undef26 < arg2) /\ (arg1 > 0) /\ (undef26 < undef23), par{arg1 -> (arg1 - 1), arg2 -> undef23, arg3 -> undef24, arg4 -> undef25}>
<l3, l3, (arg1 > 0) /\ (undef31 < arg2) /\ (arg2 > ~(1)), par{arg1 -> (arg1 - 1), arg2 -> 1, arg3 -> undef29, arg4 -> undef30}>
<l1, l4, true, par{arg1 -> undef32, arg2 -> undef33, arg3 -> undef34, arg4 -> undef35}>

Fresh variables:
undef1, undef5, undef6, undef8, undef9, undef12, undef13, undef15, undef19, undef20, undef21, undef23, undef24, undef25, undef26, undef29, undef30, undef31, undef32, undef33, undef34, undef35, 

Undef variables:
undef1, undef5, undef6, undef8, undef9, undef12, undef13, undef15, undef19, undef20, undef21, undef23, undef24, undef25, undef26, undef29, undef30, undef31, undef32, undef33, undef34, undef35, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l5, (arg1 = undef1) /\ (arg2 = (undef33 - 1)) /\ (arg3 = 0) /\ (arg4 = undef33) /\ (undef1 <= undef32) /\ (undef33 > ~(1)) /\ (undef32 > 0) /\ (undef1 > 0)>
<l3, l3, (arg2 > ~(1)) /\ (undef26 > 0) /\ (undef26 < arg2) /\ (arg1 > 0) /\ (undef26 < undef23), par{arg1 -> (arg1 - 1), arg2 -> undef23, arg3 -> undef24, arg4 -> undef25}>
<l3, l3, (arg1 > 0) /\ (undef31 < arg2) /\ (arg2 > ~(1)), par{arg1 -> (arg1 - 1), arg2 -> 1, arg3 -> undef29, arg4 -> undef30}>
<l5, l3, (arg2 < 1) /\ (arg3 > 0) /\ (undef6 > arg3) /\ (undef5 <= arg1) /\ (arg1 > 0) /\ (undef5 > 0) /\ (arg4 > 0) /\ (undef21 > ~(1)) /\ (undef5 > 0), par{arg1 -> (undef21 - 1), arg2 -> undef6, arg3 -> undef19, arg4 -> undef20}>
<l5, l3, (arg1 >= undef9) /\ (arg2 < 1) /\ (arg1 > 0) /\ (undef9 > 0) /\ (arg4 > 0) /\ (undef21 > ~(1)) /\ (undef9 > 0), par{arg1 -> (undef21 - 1), arg2 -> 1, arg3 -> undef19, arg4 -> undef20}>
<l5, l5, (undef13 <= arg1) /\ (arg2 > 0) /\ (arg1 > 0) /\ (undef13 > 0), par{arg1 -> undef13, arg2 -> (arg2 - 1), arg3 -> undef15}>

Fresh variables:
undef1, undef5, undef6, undef8, undef9, undef12, undef13, undef15, undef19, undef20, undef21, undef23, undef24, undef25, undef26, undef29, undef30, undef31, undef32, undef33, undef34, undef35, 

Undef variables:
undef1, undef5, undef6, undef8, undef9, undef12, undef13, undef15, undef19, undef20, undef21, undef23, undef24, undef25, undef26, undef29, undef30, undef31, undef32, undef33, undef34, undef35, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l5, l5, 1 <= arg1 /\ 1 <= arg2 /\ 1 <= undef13 /\ undef13 <= arg1, {arg1 -> undef13, arg2 -> -1 + arg2, arg3 -> undef15, rest remain the same}>
Variables:
arg1, arg2, arg3

Graph 2:
Transitions:
<l3, l3, 1 <= arg1 /\ 1 + undef26 <= arg2 /\ 1 + undef26 <= undef23 /\ 1 <= undef26 /\ 0 <= arg2, {arg1 -> -1 + arg1, arg2 -> undef23, arg3 -> undef24, arg4 -> undef25, rest remain the same}>
<l3, l3, 1 <= arg1 /\ 1 + undef31 <= arg2 /\ 0 <= arg2, {arg1 -> -1 + arg1, arg2 -> 1, arg3 -> undef29, arg4 -> undef30, rest remain the same}>
Variables:
arg1, arg2, arg3, arg4

Precedence: 
Graph 0

Graph 1
<l0, l5, 1 <= undef1 /\ 1 <= undef32 /\ undef1 <= undef32 /\ 0 <= undef33 /\ 1 + arg2 = undef33 /\ arg1 = undef1 /\ arg3 = 0 /\ arg4 = undef33, {all remain the same}>

Graph 2
<l5, l3, 1 <= arg1 /\ 1 + arg3 <= undef6 /\ 1 <= arg3 /\ 1 <= arg4 /\ 1 <= undef5 /\ undef5 <= arg1 /\ arg2 <= 0 /\ 0 <= undef21, {arg1 -> -1 + undef21, arg2 -> undef6, arg3 -> undef19, arg4 -> undef20, rest remain the same}>
<l5, l3, 1 <= arg1 /\ 1 <= arg4 /\ 1 <= undef9 /\ undef9 <= arg1 /\ arg2 <= 0 /\ 0 <= undef21, {arg1 -> -1 + undef21, arg2 -> 1, arg3 -> undef19, arg4 -> undef20, rest remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 3 , 2 )
( 5 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.001658

Checking conditional termination of SCC {l5}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000504s
[33mRanking function: [36m-1 + arg2[0m
New Graphs: 
Proving termination of subgraph 2
Checking unfeasibility...
Time used: 0.003816

Checking conditional termination of SCC {l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000965s
[33mRanking function: [36m-1 + arg1[0m
New Graphs: 
[32mProgram Terminates[0m

