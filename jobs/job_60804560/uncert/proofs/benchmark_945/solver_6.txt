YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l6, true>
<l1, l2, (0 <= (~(1) + x_5^0)), par{x_5^0 -> (~(1) + x_5^0)}>
<l2, l1, true>
<l1, l3, ((0 + x_5^0) <= 0) /\ (undef7 = undef7) /\ (undef5 = undef5), par{Result_4^0 -> undef5}>
<l4, l1, (0 <= (~(1) + x_5^0)), par{x_5^0 -> (~(1) + x_5^0)}>
<l4, l3, ((0 + x_5^0) <= 0) /\ (undef12 = undef12) /\ (undef10 = undef10), par{Result_4^0 -> undef10}>
<l5, l4, true>
<l6, l5, true>

Fresh variables:
undef5, undef7, undef10, undef12, 

Undef variables:
undef5, undef7, undef10, undef12, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l1, (0 <= (~(1) + x_5^0)), par{x_5^0 -> (~(1) + x_5^0)}>
<l0, l3, ((0 + x_5^0) <= 0) /\ (undef12 = undef12) /\ (undef10 = undef10)>
<l1, l1, (0 <= (~(1) + x_5^0)), par{x_5^0 -> (~(1) + x_5^0)}>
<l1, l3, ((0 + x_5^0) <= 0) /\ (undef7 = undef7) /\ (undef5 = undef5)>

Fresh variables:
undef5, undef7, undef10, undef12, 

Undef variables:
undef5, undef7, undef10, undef12, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l1, l1, 1 <= x_5^0, {x_5^0 -> -1 + x_5^0, rest remain the same}>
Variables:
x_5^0

Graph 2:
Transitions:
Variables:

Precedence: 
Graph 0

Graph 1
<l0, l1, 1 <= x_5^0, {x_5^0 -> -1 + x_5^0, rest remain the same}>

Graph 2
<l0, l3, x_5^0 <= 0, {all remain the same}>
<l1, l3, x_5^0 <= 0, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 1 , 1 )
( 3 , 2 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.00079

Checking conditional termination of SCC {l1}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000254s
[33mRanking function: [36m-1 + x_5^0[0m
New Graphs: 
Proving termination of subgraph 2
Analyzing SCC {l3}...
No cycles found.

[32mProgram Terminates[0m

