YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l1, true>
<l2, l3, (undef2 > ~(1)) /\ (arg2 > 1) /\ (undef1 > ~(1)) /\ (arg1 > 0), par{arg1 -> undef1, arg2 -> undef2, arg3 -> undef3, arg4 -> undef4}>
<l3, l4, (arg2 <= arg1) /\ (arg2 > 0), par{arg1 -> arg2, arg2 -> arg1, arg3 -> arg2, arg4 -> arg2}>
<l4, l3, (0 = arg3) /\ (0 = arg4), par{arg1 -> arg2, arg2 -> arg1, arg3 -> undef11, arg4 -> undef12}>
<l4, l4, (arg3 < 0) /\ (arg3 < 1) /\ (arg3 = arg4), par{arg2 -> (arg2 + 1), arg3 -> (arg3 + 1), arg4 -> (arg3 + 1)}>
<l4, l4, (arg3 > 0) /\ (arg3 < 1) /\ (arg3 = arg4), par{arg2 -> (arg2 + 1), arg3 -> (arg3 + 1), arg4 -> (arg3 + 1)}>
<l4, l4, (arg3 > 0) /\ (arg3 = arg4), par{arg2 -> (arg2 - 1), arg3 -> (arg3 - 1), arg4 -> (arg3 - 1)}>
<l1, l2, true, par{arg1 -> undef25, arg2 -> undef26, arg3 -> undef27, arg4 -> undef28}>

Fresh variables:
undef1, undef2, undef3, undef4, undef11, undef12, undef25, undef26, undef27, undef28, 

Undef variables:
undef1, undef2, undef3, undef4, undef11, undef12, undef25, undef26, undef27, undef28, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l4, (arg1 = undef2) /\ (arg2 = undef1) /\ (arg3 = undef2) /\ (arg4 = undef2) /\ (undef2 > ~(1)) /\ (undef26 > 1) /\ (undef1 > ~(1)) /\ (undef25 > 0) /\ (undef2 <= undef1) /\ (undef2 > 0)>
<l4, l4, (0 = arg3) /\ (0 = arg4) /\ (arg1 <= arg2) /\ (arg1 > 0), par{arg1 -> arg1, arg2 -> arg2, arg3 -> arg1, arg4 -> arg1}>
<l4, l4, (arg3 < 0) /\ (arg3 < 1) /\ (arg3 = arg4), par{arg2 -> (arg2 + 1), arg3 -> (arg3 + 1), arg4 -> (arg3 + 1)}>
<l4, l4, (arg3 > 0) /\ (arg3 = arg4), par{arg2 -> (arg2 - 1), arg3 -> (arg3 - 1), arg4 -> (arg3 - 1)}>

Fresh variables:
undef1, undef2, undef3, undef4, undef11, undef12, undef25, undef26, undef27, undef28, 

Undef variables:
undef1, undef2, undef3, undef4, undef11, undef12, undef25, undef26, undef27, undef28, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l4, l4, 1 <= arg1 /\ arg1 <= arg2 /\ arg3 = 0 /\ arg4 = 0, {arg3 -> arg1, arg4 -> arg1, rest remain the same}>
<l4, l4, 1 + arg3 <= 0 /\ arg3 = arg4, {arg2 -> 1 + arg2, arg3 -> 1 + arg3, arg4 -> 1 + arg3, rest remain the same}>
<l4, l4, 1 <= arg3 /\ arg3 = arg4, {arg2 -> -1 + arg2, arg3 -> -1 + arg3, arg4 -> -1 + arg3, rest remain the same}>
Variables:
arg1, arg2, arg3, arg4

Precedence: 
Graph 0

Graph 1
<l0, l4, 1 <= undef2 /\ 1 <= undef25 /\ 0 <= undef1 /\ undef2 <= undef1 /\ 2 <= undef26 /\ arg1 = undef2 /\ arg2 = undef1 /\ arg3 = undef2 /\ arg4 = undef2, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 4 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.005138
[33mSome transition disabled by a set of invariant(s):[0m
[36mInvariant at l4: 0 <= arg3 + arg4[0m

[33mStrengthening and disabling transitions...[0m
> It's unfeasible. Removing transition: 
<l4, l4, 1 + arg3 <= 0 /\ arg3 = arg4, {arg2 -> 1 + arg2, arg3 -> 1 + arg3, arg4 -> 1 + arg3, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l4, l4, 1 <= arg1 /\ arg1 <= arg2 /\ 0 <= arg3 + arg4 /\ arg3 = 0 /\ arg4 = 0, {arg3 -> arg1, arg4 -> arg1, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l4, l4, 1 <= arg3 /\ 0 <= arg3 + arg4 /\ arg3 = arg4, {arg2 -> -1 + arg2, arg3 -> -1 + arg3, arg4 -> -1 + arg3, rest remain the same}>
Checking unfeasibility...
Time used: 0.007811

Checking conditional termination of SCC {l4}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000794s
[33mRanking function: [36m1 + 2*arg2 - arg3[0m
New Graphs: 
Transitions:
<l4, l4, 1 <= arg3 /\ 0 <= arg3 + arg4 /\ arg3 = arg4, {arg2 -> -1 + arg2, arg3 -> -1 + arg3, arg4 -> -1 + arg3, rest remain the same}>
Variables:
arg2, arg3, arg4
Checking conditional termination of SCC {l4}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000330s
[33mRanking function: [36m-1 + arg3[0m
New Graphs: 
[32mProgram Terminates[0m

