YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l8, true>
<l1, l2, true, par{i1^0 -> (1 + i1^0)}>
<l3, l1, true>
<l4, l3, true>
<l4, l1, true>
<l4, l3, true>
<l5, l6, ((0 + __const_42^0) <= (0 + i1^0))>
<l5, l4, ((1 + i1^0) <= (0 + __const_42^0))>
<l2, l5, true>
<l7, l2, true, par{i1^0 -> 0}>
<l8, l7, true>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l2, (i1^0 = 0)>
<l2, l6, ((0 + __const_42^0) <= (0 + i1^0))>
<l2, l2, ((1 + i1^0) <= (0 + __const_42^0)), par{i1^0 -> (1 + i1^0)}>
<l2, l2, ((1 + i1^0) <= (0 + __const_42^0)), par{i1^0 -> (1 + i1^0)}>
<l2, l2, ((1 + i1^0) <= (0 + __const_42^0)), par{i1^0 -> (1 + i1^0)}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l2, l2, 1 + i1^0 <= __const_42^0, {i1^0 -> 1 + i1^0, rest remain the same}>
<l2, l2, 1 + i1^0 <= __const_42^0, {i1^0 -> 1 + i1^0, rest remain the same}>
<l2, l2, 1 + i1^0 <= __const_42^0, {i1^0 -> 1 + i1^0, rest remain the same}>
Variables:
__const_42^0, i1^0

Graph 2:
Transitions:
Variables:

Precedence: 
Graph 0

Graph 1
<l0, l2, i1^0 = 0, {all remain the same}>

Graph 2
<l2, l6, __const_42^0 <= i1^0, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 2 , 1 )
( 6 , 2 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.0024

Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000933s
[33mRanking function: [36m-1 + 2*__const_42^0 - 2*i1^0[0m
New Graphs: 
Proving termination of subgraph 2
Analyzing SCC {l6}...
No cycles found.

[32mProgram Terminates[0m

