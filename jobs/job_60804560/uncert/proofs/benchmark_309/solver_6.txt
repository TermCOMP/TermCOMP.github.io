YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l1, true>
<l2, l5, (undef1 <= arg1) /\ (arg1 > ~(1)) /\ (undef1 > ~(1)), par{arg1 -> undef1, arg2 -> undef2}>
<l3, l5, (arg1 > 0) /\ (undef3 > ~(1)), par{arg1 -> undef3, arg2 -> undef4}>
<l5, l6, (undef5 <= arg1) /\ ((undef6 + 1) <= arg1) /\ (arg1 > 0) /\ (undef5 > 0) /\ (undef6 > ~(1)), par{arg1 -> undef5, arg2 -> undef6}>
<l6, l6, (arg1 >= (undef7 + 1)) /\ (arg2 >= (undef8 + 3)) /\ (arg1 > 0) /\ (arg2 > 2) /\ (undef7 > ~(1)) /\ (undef8 > ~(1)), par{arg1 -> undef7, arg2 -> undef8}>
<l3, l4, (arg2 > ~(1)) /\ (undef9 > ~(1)) /\ (arg1 > 0), par{arg1 -> undef9, arg2 -> undef10}>
<l4, l4, (arg1 > 0), par{arg1 -> (arg1 - 1), arg2 -> undef12}>
<l1, l3, true, par{arg1 -> undef13, arg2 -> undef14}>

Fresh variables:
undef1, undef2, undef3, undef4, undef5, undef6, undef7, undef8, undef9, undef10, undef12, undef13, undef14, 

Undef variables:
undef1, undef2, undef3, undef4, undef5, undef6, undef7, undef8, undef9, undef10, undef12, undef13, undef14, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l6, (undef13 > 0) /\ (undef3 > ~(1)) /\ (undef5 <= undef3) /\ ((undef6 + 1) <= undef3) /\ (undef3 > 0) /\ (undef5 > 0) /\ (undef6 > ~(1)), par{arg1 -> undef5, arg2 -> undef6}>
<l0, l4, (undef14 > ~(1)) /\ (undef9 > ~(1)) /\ (undef13 > 0), par{arg1 -> undef9, arg2 -> undef10}>
<l4, l4, (arg1 > 0), par{arg1 -> (arg1 - 1), arg2 -> undef12}>
<l6, l6, (arg1 >= (undef7 + 1)) /\ (arg2 >= (undef8 + 3)) /\ (arg1 > 0) /\ (arg2 > 2) /\ (undef7 > ~(1)) /\ (undef8 > ~(1)), par{arg1 -> undef7, arg2 -> undef8}>

Fresh variables:
undef1, undef2, undef3, undef4, undef5, undef6, undef7, undef8, undef9, undef10, undef12, undef13, undef14, 

Undef variables:
undef1, undef2, undef3, undef4, undef5, undef6, undef7, undef8, undef9, undef10, undef12, undef13, undef14, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l4, l4, 1 <= arg1, {arg1 -> -1 + arg1, arg2 -> undef12, rest remain the same}>
Variables:
arg1, arg2

Graph 2:
Transitions:
<l6, l6, 1 <= arg1 /\ 1 + undef7 <= arg1 /\ 0 <= undef7 /\ 0 <= undef8 /\ 3 <= arg2 /\ 3 + undef8 <= arg2, {arg1 -> undef7, arg2 -> undef8, rest remain the same}>
Variables:
arg1, arg2

Precedence: 
Graph 0

Graph 1
<l0, l4, 1 <= undef13 /\ 0 <= undef9 /\ 0 <= undef14, {arg1 -> undef9, arg2 -> undef10, rest remain the same}>

Graph 2
<l0, l6, 1 <= undef3 /\ 1 + undef6 <= undef3 /\ 1 <= undef5 /\ 1 <= undef13 /\ undef5 <= undef3 /\ 0 <= undef6, {arg1 -> undef5, arg2 -> undef6, rest remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 4 , 1 )
( 6 , 2 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.001145

Checking conditional termination of SCC {l4}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000326s
[33mRanking function: [36m-1 + arg1[0m
New Graphs: 
Proving termination of subgraph 2
Checking unfeasibility...
Time used: 0.001441

Checking conditional termination of SCC {l6}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000570s
[33mRanking function: [36m-1 + arg1[0m
New Graphs: 
[32mProgram Terminates[0m

