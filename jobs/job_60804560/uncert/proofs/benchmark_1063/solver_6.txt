YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l5, true>
<l1, l2, (undef6 = 0) /\ (0 <= (0 + undef6)) /\ ((0 + undef6) <= 0) /\ (0 <= (0 + undef6)) /\ ((0 + undef6) <= 0) /\ ((1 + undef6) <= (0 + __const_10^0)) /\ (undef7 = (1 + undef6)) /\ (1 <= (0 + undef7)) /\ ((0 + undef7) <= 1) /\ (1 <= (0 + undef7)) /\ ((0 + undef7) <= 1) /\ ((1 + undef7) <= (0 + __const_10^0)) /\ (undef2 = (1 + undef7)) /\ (2 <= (0 + undef2)) /\ ((0 + undef2) <= 2), par{i!14^0 -> undef2}>
<l2, l3, ((0 + __const_10^0) <= (0 + i!14^0)), par{result!12^0 -> (0 + temp0!15^0)}>
<l2, l4, ((1 + i!14^0) <= (0 + __const_10^0)) /\ (undef14 = (1 + i!14^0)) /\ ((0 + undef14) <= (1 + i!22^0)) /\ ((1 + i!22^0) <= (0 + undef14)) /\ ((1 + i!22^0) <= (0 + __const_10^0)), par{i!14^0 -> undef14}>
<l4, l2, true>
<l5, l1, true>

Fresh variables:
undef2, undef6, undef7, undef14, 

Undef variables:
undef2, undef6, undef7, undef14, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l2, (i!14^0 = undef2) /\ (undef6 = 0) /\ (0 <= (0 + undef6)) /\ ((0 + undef6) <= 0) /\ (0 <= (0 + undef6)) /\ ((0 + undef6) <= 0) /\ ((1 + undef6) <= (0 + __const_10^0)) /\ (undef7 = (1 + undef6)) /\ (1 <= (0 + undef7)) /\ ((0 + undef7) <= 1) /\ (1 <= (0 + undef7)) /\ ((0 + undef7) <= 1) /\ ((1 + undef7) <= (0 + __const_10^0)) /\ (undef2 = (1 + undef7)) /\ (2 <= (0 + undef2)) /\ ((0 + undef2) <= 2)>
<l2, l3, ((0 + __const_10^0) <= (0 + i!14^0))>
<l2, l2, ((1 + i!14^0) <= (0 + __const_10^0)) /\ (undef14 = (1 + i!14^0)) /\ ((0 + undef14) <= (1 + i!22^0)) /\ ((1 + i!22^0) <= (0 + undef14)) /\ ((1 + i!22^0) <= (0 + __const_10^0)), par{i!14^0 -> undef14}>

Fresh variables:
undef2, undef6, undef7, undef14, 

Undef variables:
undef2, undef6, undef7, undef14, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l2, l2, 1 + i!14^0 <= __const_10^0 /\ 1 + i!22^0 <= __const_10^0 /\ 1 + i!14^0 = undef14 /\ 1 + i!22^0 = undef14, {i!14^0 -> undef14, rest remain the same}>
Variables:
__const_10^0, i!14^0, i!22^0

Graph 2:
Transitions:
Variables:

Precedence: 
Graph 0

Graph 1
<l0, l2, 1 + undef6 <= __const_10^0 /\ 1 + undef7 <= __const_10^0 /\ i!14^0 = undef2 /\ undef6 = 0 /\ 1 + undef6 = undef7 /\ undef2 = 1 + undef7 /\ undef7 = 1 /\ undef2 = 2, {all remain the same}>

Graph 2
<l2, l3, __const_10^0 <= i!14^0, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 2 , 1 )
( 3 , 2 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.001449

Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000466s
[33mRanking function: [36m-i!14^0 + i!22^0[0m
New Graphs: 
Proving termination of subgraph 2
Analyzing SCC {l3}...
No cycles found.

[32mProgram Terminates[0m

