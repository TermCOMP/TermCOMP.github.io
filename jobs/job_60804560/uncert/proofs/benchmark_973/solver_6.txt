YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l5, true>
<l1, l2, ((0 + (~(1) * x_5^0)) <= 0), par{x_5^0 -> (1 + x_5^0)}>
<l1, l2, (0 <= (~(1) + (~(1) * x_5^0)))>
<l3, l1, true>
<l2, l4, (undef7 = undef7), par{Result_4^0 -> undef7}>
<l5, l3, true>

Fresh variables:
undef7, 

Undef variables:
undef7, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l4, ((0 + (~(1) * x_5^0)) <= 0) /\ (undef7 = undef7), par{x_5^0 -> (1 + x_5^0)}>
<l0, l4, (0 <= (~(1) + (~(1) * x_5^0))) /\ (undef7 = undef7)>

Fresh variables:
undef7, 

Undef variables:
undef7, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
Variables:

Precedence: 
Graph 0

Graph 1
<l0, l4, 0 <= x_5^0, {x_5^0 -> 1 + x_5^0, rest remain the same}>
<l0, l4, 1 + x_5^0 <= 0, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 4 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Analyzing SCC {l4}...
No cycles found.

[32mProgram Terminates[0m

