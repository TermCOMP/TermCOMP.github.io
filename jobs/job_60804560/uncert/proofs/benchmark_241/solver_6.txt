NO
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l1, true>
<l2, l3, (arg1 > 0) /\ (arg2 > ~(1)), par{arg1 -> arg2, arg2 -> 20}>
<l3, l3, (0 = arg1) /\ (0 = arg2), par{arg1 -> 0, arg2 -> 0}>
<l3, l3, (arg2 > arg1) /\ (arg2 > 0) /\ (arg1 > 0), par{arg1 -> (arg1 + 1)}>
<l3, l3, (arg1 > 0) /\ (arg1 = arg2), par{arg1 -> 0, arg2 -> (arg1 - 1)}>
<l3, l3, (arg2 > 0) /\ (0 = arg1), par{arg1 -> 1}>
<l1, l2, true, par{arg1 -> undef11, arg2 -> undef12}>

Fresh variables:
undef11, undef12, 

Undef variables:
undef11, undef12, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l3, (arg1 = undef12) /\ (arg2 = 20) /\ (undef11 > 0) /\ (undef12 > ~(1))>
<l3, l3, (0 = arg1) /\ (0 = arg2), par{arg1 -> 0, arg2 -> 0}>
<l3, l3, (arg2 > arg1) /\ (arg2 > 0) /\ (arg1 > 0), par{arg1 -> (arg1 + 1)}>
<l3, l3, (arg1 > 0) /\ (arg1 = arg2), par{arg1 -> 0, arg2 -> (arg1 - 1)}>
<l3, l3, (arg2 > 0) /\ (0 = arg1), par{arg1 -> 1}>

Fresh variables:
undef11, undef12, 

Undef variables:
undef11, undef12, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l3, l3, arg1 = 0 /\ arg2 = 0, {arg1 -> 0, arg2 -> 0, rest remain the same}>
<l3, l3, 1 + arg1 <= arg2 /\ 1 <= arg1 /\ 1 <= arg2, {arg1 -> 1 + arg1, rest remain the same}>
<l3, l3, 1 <= arg1 /\ arg1 = arg2, {arg1 -> 0, arg2 -> -1 + arg1, rest remain the same}>
<l3, l3, 1 <= arg2 /\ arg1 = 0, {arg1 -> 1, rest remain the same}>
Variables:
arg1, arg2

Precedence: 
Graph 0

Graph 1
<l0, l3, 0 <= undef12 /\ 1 <= undef11 /\ arg1 = undef12 /\ arg2 = 20, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 3 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.184433

Checking conditional termination of SCC {l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.001401s
[33mRanking function: [36m-1 + arg2[0m
New Graphs: 
Transitions:
<l3, l3, arg1 = 0 /\ arg2 = 0, {arg1 -> 0, arg2 -> 0, rest remain the same}>
<l3, l3, 1 + arg1 <= arg2 /\ 1 <= arg1 /\ 1 <= arg2, {arg1 -> 1 + arg1, rest remain the same}>
<l3, l3, 1 <= arg2 /\ arg1 = 0, {arg1 -> 1, rest remain the same}>
Variables:
arg1, arg2
Checking conditional termination of SCC {l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000606s
[33mRanking function: [36m-5 - arg1 + 3*arg2[0m
New Graphs: 
Transitions:
<l3, l3, arg1 = 0 /\ arg2 = 0, {arg1 -> 0, arg2 -> 0, rest remain the same}>
<l3, l3, 1 <= arg2 /\ arg1 = 0, {arg1 -> 1, rest remain the same}>
Variables:
arg1, arg2
Checking conditional termination of SCC {l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000402s
[33mRanking function: [36m-1 - arg1 + arg2[0m
New Graphs: 
Transitions:
<l3, l3, arg1 = 0 /\ arg2 = 0, {arg1 -> 0, arg2 -> 0, rest remain the same}>
Variables:
arg1, arg2
Checking conditional termination of SCC {l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000187s

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000561s
Trying to remove transition: <l3, l3, arg1 = 0 /\ arg2 = 0, {arg1 -> 0, arg2 -> 0, rest remain the same}>
Solving with 1 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 0.001537s
Time used: 0.001468
Solving with 1 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 0.005592s
Time used: 0.005383
Improving Solution with cost 1 ...

LOG: CALL solveNonLinearGetNextSolution

LOG: RETURN solveNonLinearGetNextSolution - Elapsed time: 0.186287s
Time used: 0.185326

LOG: SAT solveNonLinear - Elapsed time: 0.191878s
Cost: 1; Total time: 0.190709
[31mFailed at location 3: 1 + arg2 <= arg1[0m
Before Improving: 
[36mQuasi-invariant at l3: 1 + arg2 <= arg1[0m
Optimizing invariants...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.004174s
Remaining time after improvement: 0.999065
[33mTermination implied by a set of quasi-invariant(s):[0m
[36mQuasi-invariant at l3: 1 + arg2 <= arg1[0m
[ Invariant Graph ]
[33mStrengthening and disabling transitions...[0m

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
It's unfeasible. Removing transition: 
<l3, l3, arg1 = 0 /\ arg2 = 0, {arg1 -> 0, arg2 -> 0, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
It's unfeasible. Removing transition: 
<l3, l3, 1 + arg1 <= arg2 /\ 1 <= arg1 /\ 1 <= arg2, {arg1 -> 1 + arg1, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
It's unfeasible. Removing transition: 
<l3, l3, 1 <= arg1 /\ arg1 = arg2, {arg1 -> 0, arg2 -> -1 + arg1, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
It's unfeasible. Removing transition: 
<l3, l3, 1 <= arg2 /\ arg1 = 0, {arg1 -> 1, rest remain the same}>
[ Termination Graph ]
[33mStrengthening and disabling transitions...[0m
> It's unfeasible. Removing transition: 
<l3, l3, arg1 = 0 /\ arg2 = 0, {arg1 -> 0, arg2 -> 0, rest remain the same}>
New Graphs: 
Calling Safety with literal 1 + arg2 <= arg1 and entry <l0, l3, 0 <= undef12 /\ 1 <= undef11 /\ arg1 = undef12 /\ arg2 = 20, {all remain the same}>

LOG: CALL check - Post:1 + arg2 <= arg1 - Process 1
* Exit transition: <l0, l3, 0 <= undef12 /\ 1 <= undef11 /\ arg1 = undef12 /\ arg2 = 20, {all remain the same}>
* Postcondition  : 1 + arg2 <= arg1

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000322s
[31m> Postcondition is not implied![0m

LOG: RETURN check - Elapsed time: 0.000358s
INVARIANTS: 
3: 
Quasi-INVARIANTS to narrow Graph: 
3: 1 + arg2 <= arg1 , 
Narrowing transition: 
<l3, l3, arg1 = 0 /\ arg2 = 0, {arg1 -> 0, arg2 -> 0, rest remain the same}>

LOG: Narrow transition size 1
Narrowing transition: 
<l3, l3, 1 + arg1 <= arg2 /\ 1 <= arg1 /\ 1 <= arg2, {arg1 -> 1 + arg1, rest remain the same}>

LOG: Narrow transition size 1
Narrowing transition: 
<l3, l3, 1 <= arg1 /\ arg1 = arg2, {arg1 -> 0, arg2 -> -1 + arg1, rest remain the same}>

LOG: Narrow transition size 1
Narrowing transition: 
<l3, l3, 1 <= arg2 /\ arg1 = 0, {arg1 -> 1, rest remain the same}>

LOG: Narrow transition size 1
invGraph after Narrowing: 
Transitions:
<l3, l3, arg1 <= arg2 /\ arg1 = 0 /\ arg2 = 0, {arg1 -> 0, arg2 -> 0, rest remain the same}>
<l3, l3, 1 + arg1 <= arg2 /\ 1 <= arg1 /\ 1 <= arg2, {arg1 -> 1 + arg1, rest remain the same}>
<l3, l3, 1 <= arg1 /\ arg1 = arg2, {arg1 -> 0, arg2 -> -1 + arg1, rest remain the same}>
<l3, l3, arg1 <= arg2 /\ 1 <= arg2 /\ arg1 = 0, {arg1 -> 1, rest remain the same}>
Variables:
arg1, arg2
Checking conditional termination of SCC {l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000946s
[33mRanking function: [36m-1 + arg2[0m
New Graphs: 
Transitions:
<l3, l3, arg1 <= arg2 /\ arg1 = 0 /\ arg2 = 0, {arg1 -> 0, arg2 -> 0, rest remain the same}>
<l3, l3, 1 + arg1 <= arg2 /\ 1 <= arg1 /\ 1 <= arg2, {arg1 -> 1 + arg1, rest remain the same}>
<l3, l3, arg1 <= arg2 /\ 1 <= arg2 /\ arg1 = 0, {arg1 -> 1, rest remain the same}>
Variables:
arg1, arg2
Checking conditional termination of SCC {l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000726s
[33mRanking function: [36m-1 - arg1 + arg2[0m
New Graphs: 
Transitions:
<l3, l3, arg1 <= arg2 /\ arg1 = 0 /\ arg2 = 0, {arg1 -> 0, arg2 -> 0, rest remain the same}>
Variables:
arg1, arg2
Checking conditional termination of SCC {l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000224s

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000674s
Trying to remove transition: <l3, l3, arg1 <= arg2 /\ arg1 = 0 /\ arg2 = 0, {arg1 -> 0, arg2 -> 0, rest remain the same}>
Solving with 1 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 0.001737s
Time used: 0.001675
Solving with 1 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 0.676982s
Time used: 0.672848
Solving with 2 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 4.033038s
Time used: 4.00047
Solving with 3 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 1.033446s
Time used: 1.019
Solving with 1 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 0.218607s
Time used: 0.20906

Proving non-termination of subgraph 1
Transitions:
<l3, l3, arg1 <= arg2 /\ arg1 = 0 /\ arg2 = 0, {arg1 -> 0, arg2 -> 0, rest remain the same}>
<l3, l3, 1 + arg1 <= arg2 /\ 1 <= arg1 /\ 1 <= arg2, {arg1 -> 1 + arg1, rest remain the same}>
<l3, l3, 1 <= arg1 /\ arg1 = arg2, {arg1 -> 0, arg2 -> -1 + arg1, rest remain the same}>
<l3, l3, arg1 <= arg2 /\ 1 <= arg2 /\ arg1 = 0, {arg1 -> 1, rest remain the same}>
Variables:
arg1, arg2

Checking conditional non-termination of SCC {l3}...
EXIT TRANSITIONS:
<l3, end, 1 <= arg1 /\ 1 + arg2 <= arg1 /\ 1 <= arg2, {all remain the same}>
<l3, end, arg2 <= 0 /\ 1 <= arg1 /\ 1 + arg2 <= arg1, {all remain the same}>
<l3, end, arg1 <= 0 /\ 1 + arg2 <= arg1 /\ 1 + arg2 <= 0, {all remain the same}>
<l3, end, 1 + arg1 <= 0 /\ 1 + arg1 <= arg2 /\ 1 <= arg2, {all remain the same}>
<l3, end, 1 + arg1 <= 0 /\ 1 + arg1 <= arg2 /\ arg2 = 0, {all remain the same}>
<l3, end, arg1 <= arg2 /\ 1 + arg1 <= 0 /\ 1 + arg2 <= 0, {all remain the same}>

Solving with 1 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 0.009702s
Time used: 0.009513
Improving Solution with cost 3 ...

LOG: CALL solveNonLinearGetNextSolution

LOG: RETURN solveNonLinearGetNextSolution - Elapsed time: 0.301033s
Time used: 0.29953

LOG: SAT solveNonLinear - Elapsed time: 0.310735s
Cost: 3; Total time: 0.309043
[33mNon-termination implied by a set of quasi-invariant(s):[0m
[36mQuasi-invariant at l3: 0 <= arg1[0m

[33mStrengthening and disabling EXIT transitions...[0m
Closed exits from l3: 3
Strengthening exit transition (result): 
<l3, end, 1 <= arg1 /\ 1 + arg2 <= arg1 /\ 1 <= arg2, {all remain the same}>
Strengthening exit transition (result): 
<l3, end, arg2 <= 0 /\ 1 <= arg1 /\ 1 + arg2 <= arg1, {all remain the same}>
Strengthening exit transition (result): 
<l3, end, 1 + arg2 <= arg1 /\ 1 + arg2 <= 0 /\ arg1 = 0, {all remain the same}>

[33mStrengthening and disabling transitions...[0m

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l3, l3, arg1 <= arg2 /\ arg1 = 0 /\ arg2 = 0, {arg1 -> 0, arg2 -> 0, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l3, l3, 1 + arg1 <= arg2 /\ 1 <= arg1 /\ 1 <= arg2, {arg1 -> 1 + arg1, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l3, l3, 1 <= arg1 /\ arg1 = arg2, {arg1 -> 0, arg2 -> -1 + arg1, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l3, l3, arg1 <= arg2 /\ 1 <= arg2 /\ arg1 = 0, {arg1 -> 1, rest remain the same}>

Checking conditional non-termination of SCC {l3}...
EXIT TRANSITIONS:
<l3, end, 1 <= arg1 /\ 1 + arg2 <= arg1 /\ 1 <= arg2, {all remain the same}>
<l3, end, arg2 <= 0 /\ 1 <= arg1 /\ 1 + arg2 <= arg1, {all remain the same}>
<l3, end, 1 + arg2 <= arg1 /\ 1 + arg2 <= 0 /\ arg1 = 0, {all remain the same}>

Solving with 1 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 0.006751s
Time used: 0.006582
Improving Solution with cost 1 ...

LOG: CALL solveNonLinearGetNextSolution

LOG: RETURN solveNonLinearGetNextSolution - Elapsed time: 0.010016s
Time used: 0.009958

LOG: SAT solveNonLinear - Elapsed time: 0.016767s
Cost: 1; Total time: 0.01654
[31mFailed at location 3: arg1 <= arg2[0m
Before Improving: 
[36mQuasi-invariant at l3: arg1 <= arg2[0m
Optimizing invariants...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.003018s
Remaining time after improvement: 0.999106
[33mNon-termination implied by a set of quasi-invariant(s):[0m
[36mQuasi-invariant at l3: arg1 <= arg2[0m

[33mStrengthening and disabling EXIT transitions...[0m
Closed exits from l3: 3

[33mStrengthening and disabling transitions...[0m

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l3, l3, arg1 <= arg2 /\ arg1 = 0 /\ arg2 = 0, {arg1 -> 0, arg2 -> 0, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l3, l3, 1 + arg1 <= arg2 /\ 1 <= arg1 /\ 1 <= arg2, {arg1 -> 1 + arg1, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l3, l3, 1 <= arg1 /\ arg1 = arg2, {arg1 -> 0, arg2 -> -1 + arg1, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l3, l3, arg1 <= arg2 /\ 1 <= arg2 /\ arg1 = 0, {arg1 -> 1, rest remain the same}>

Calling reachability with...
Transition: <l3, end, true, {all remain the same}>
Conditions: 0 <= arg1, arg1 <= arg2, 
OPEN EXITS: 
<l3, end, arg1 <= arg2 /\ 0 <= arg1, {all remain the same}>

--- Reachability graph ---
> Graph without transitions.

Calling reachability with...
Transition: <l0, l3, 0 <= undef12 /\ 1 <= undef11 /\ arg1 = undef12 /\ arg2 = 20, {all remain the same}>
Conditions: arg1 <= arg2, 0 <= arg1, 
OPEN EXITS: 
<l0, l3, arg1 <= arg2 /\ 0 <= arg1 /\ 0 <= undef12 /\ 1 <= undef11 /\ arg1 = undef12 /\ arg2 = 20, {all remain the same}>

[32m> Conditions are reachable![0m

[32mProgram does NOT terminate[0m

