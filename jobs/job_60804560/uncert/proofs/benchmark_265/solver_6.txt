YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l1, true>
<l4, l2, (undef1 <= arg1) /\ (arg2 > ~(1)) /\ (arg1 > 0) /\ (undef1 > 0), par{arg1 -> undef1, arg2 -> 0, arg3 -> arg2, arg4 -> undef4}>
<l2, l3, (arg3 >= arg2) /\ (arg3 > ~(1)) /\ (undef5 <= arg1) /\ (arg1 > 0) /\ (undef5 > 0), par{arg1 -> undef5, arg3 -> 0, arg4 -> arg3}>
<l3, l2, (arg3 > arg4) /\ (arg4 > ~(1)) /\ (arg1 >= undef9) /\ (arg1 > 0) /\ (undef9 > 0), par{arg1 -> undef9, arg2 -> (arg2 + 1), arg3 -> arg4, arg4 -> undef12}>
<l3, l5, (arg4 >= arg2) /\ (arg4 >= arg3) /\ (arg1 > 0), par{arg1 -> arg3, arg3 -> undef15, arg4 -> undef16}>
<l3, l3, (arg4 > ~(1)) /\ (arg4 >= arg3) /\ (undef17 <= arg1) /\ (arg1 > 0) /\ (undef17 > 0) /\ (0 = arg2), par{arg1 -> undef17, arg2 -> 0, arg3 -> (arg3 + 1)}>
<l3, l3, (arg4 >= arg2) /\ (arg4 > ~(1)) /\ (undef21 <= arg1) /\ (arg1 > 0) /\ (undef21 > 0) /\ (0 = arg3), par{arg1 -> undef21, arg3 -> 1}>
<l6, l3, (undef25 <= arg1) /\ (arg4 > ~(1)) /\ (arg1 > 0) /\ (undef25 > 0), par{arg1 -> undef25, arg3 -> (arg3 + 1)}>
<l3, l3, (arg4 >= arg2) /\ (arg4 >= arg3) /\ (arg4 > ~(1)) /\ (undef29 <= arg1) /\ (arg1 > 0) /\ (undef29 > 0), par{arg1 -> undef29, arg3 -> (arg3 + 1)}>
<l5, l5, (arg2 > 0) /\ (arg2 < arg1) /\ (arg1 > 1), par{arg1 -> arg2, arg3 -> undef35, arg4 -> undef36}>
<l5, l5, (arg2 > 0) /\ (arg2 >= arg1) /\ (arg1 > 0), par{arg2 -> (arg2 - arg1), arg3 -> undef39, arg4 -> undef40}>
<l5, l8, (arg2 > 0) /\ (arg1 > 0) /\ ((arg2 - arg1) = 0) /\ (arg2 >= arg1), par{arg3 -> (arg1 - 1), arg4 -> undef44}>
<l7, l8, (arg2 > 0), par{arg1 -> arg2, arg2 -> arg1, arg3 -> (arg2 - 1), arg4 -> undef48}>
<l5, l8, (arg2 > 0) /\ (arg2 >= arg1) /\ (arg1 > 0), par{arg3 -> (arg1 - 1), arg4 -> undef52}>
<l8, l5, (arg2 > 0) /\ (arg1 > 0) /\ (undef57 > 0) /\ (arg3 < arg1), par{arg1 -> arg3, arg3 -> undef55, arg4 -> undef56}>
<l5, l5, (arg2 > 0) /\ (arg1 > 1) /\ (arg2 >= arg1) /\ ((arg1 - 1) < arg1) /\ (undef62 > 0), par{arg1 -> (arg1 - 1), arg3 -> undef60, arg4 -> undef61}>
<l1, l4, true, par{arg1 -> undef63, arg2 -> undef64, arg3 -> undef65, arg4 -> undef66}>

Fresh variables:
undef1, undef4, undef5, undef9, undef12, undef15, undef16, undef17, undef21, undef25, undef29, undef35, undef36, undef39, undef40, undef44, undef48, undef52, undef55, undef56, undef57, undef60, undef61, undef62, undef63, undef64, undef65, undef66, 

Undef variables:
undef1, undef4, undef5, undef9, undef12, undef15, undef16, undef17, undef21, undef25, undef29, undef35, undef36, undef39, undef40, undef44, undef48, undef52, undef55, undef56, undef57, undef60, undef61, undef62, undef63, undef64, undef65, undef66, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l3, (arg1 = undef5) /\ (arg2 = 0) /\ (arg3 = 0) /\ (arg4 = undef64) /\ (undef1 <= undef63) /\ (undef64 > ~(1)) /\ (undef63 > 0) /\ (undef1 > 0) /\ (undef64 >= 0) /\ (undef64 > ~(1)) /\ (undef5 <= undef1) /\ (undef1 > 0) /\ (undef5 > 0)>
<l3, l3, (arg3 > arg4) /\ (arg4 > ~(1)) /\ (arg1 >= undef9) /\ (arg1 > 0) /\ (undef9 > 0) /\ (arg4 >= (arg2 + 1)) /\ (arg4 > ~(1)) /\ (undef5 <= undef9) /\ (undef9 > 0) /\ (undef5 > 0), par{arg1 -> undef5, arg2 -> (arg2 + 1), arg3 -> 0, arg4 -> arg4}>
<l3, l5, (arg4 >= arg2) /\ (arg4 >= arg3) /\ (arg1 > 0), par{arg1 -> arg3, arg3 -> undef15, arg4 -> undef16}>
<l3, l3, (arg4 > ~(1)) /\ (arg4 >= arg3) /\ (undef17 <= arg1) /\ (arg1 > 0) /\ (undef17 > 0) /\ (0 = arg2), par{arg1 -> undef17, arg2 -> 0, arg3 -> (arg3 + 1)}>
<l3, l3, (arg4 >= arg2) /\ (arg4 > ~(1)) /\ (undef21 <= arg1) /\ (arg1 > 0) /\ (undef21 > 0) /\ (0 = arg3), par{arg1 -> undef21, arg3 -> 1}>
<l3, l3, (arg4 >= arg2) /\ (arg4 >= arg3) /\ (arg4 > ~(1)) /\ (undef29 <= arg1) /\ (arg1 > 0) /\ (undef29 > 0), par{arg1 -> undef29, arg3 -> (arg3 + 1)}>
<l5, l5, (arg2 > 0) /\ (arg2 < arg1) /\ (arg1 > 1), par{arg1 -> arg2, arg3 -> undef35, arg4 -> undef36}>
<l5, l5, (arg2 > 0) /\ (arg2 >= arg1) /\ (arg1 > 0), par{arg2 -> (arg2 - arg1), arg3 -> undef39, arg4 -> undef40}>
<l5, l5, (arg2 > 0) /\ (arg1 > 0) /\ ((arg2 - arg1) = 0) /\ (arg2 >= arg1) /\ (arg2 > 0) /\ (arg1 > 0) /\ (undef57 > 0) /\ ((arg1 - 1) < arg1), par{arg1 -> (arg1 - 1), arg3 -> undef55, arg4 -> undef56}>
<l5, l5, (arg2 > 0) /\ (arg2 >= arg1) /\ (arg1 > 0) /\ (arg2 > 0) /\ (arg1 > 0) /\ (undef57 > 0) /\ ((arg1 - 1) < arg1), par{arg1 -> (arg1 - 1), arg3 -> undef55, arg4 -> undef56}>
<l5, l5, (arg2 > 0) /\ (arg1 > 1) /\ (arg2 >= arg1) /\ ((arg1 - 1) < arg1) /\ (undef62 > 0), par{arg1 -> (arg1 - 1), arg3 -> undef60, arg4 -> undef61}>

Fresh variables:
undef1, undef4, undef5, undef9, undef12, undef15, undef16, undef17, undef21, undef25, undef29, undef35, undef36, undef39, undef40, undef44, undef48, undef52, undef55, undef56, undef57, undef60, undef61, undef62, undef63, undef64, undef65, undef66, 

Undef variables:
undef1, undef4, undef5, undef9, undef12, undef15, undef16, undef17, undef21, undef25, undef29, undef35, undef36, undef39, undef40, undef44, undef48, undef52, undef55, undef56, undef57, undef60, undef61, undef62, undef63, undef64, undef65, undef66, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l3, l3, 1 <= arg1 /\ 1 + arg2 <= arg4 /\ 1 + arg4 <= arg3 /\ 1 <= undef5 /\ 1 <= undef9 /\ undef9 <= arg1 /\ 0 <= arg4 /\ undef5 <= undef9, {arg1 -> undef5, arg2 -> 1 + arg2, arg3 -> 0, rest remain the same}>
<l3, l3, 1 <= arg1 /\ 1 <= undef17 /\ undef17 <= arg1 /\ arg3 <= arg4 /\ 0 <= arg4 /\ arg2 = 0, {arg1 -> undef17, arg2 -> 0, arg3 -> 1 + arg3, rest remain the same}>
<l3, l3, 1 <= arg1 /\ 1 <= undef21 /\ undef21 <= arg1 /\ arg2 <= arg4 /\ 0 <= arg4 /\ arg3 = 0, {arg1 -> undef21, arg3 -> 1, rest remain the same}>
<l3, l3, 1 <= arg1 /\ 1 <= undef29 /\ undef29 <= arg1 /\ arg2 <= arg4 /\ arg3 <= arg4 /\ 0 <= arg4, {arg1 -> undef29, arg3 -> 1 + arg3, rest remain the same}>
Variables:
arg1, arg2, arg3, arg4

Graph 2:
Transitions:
<l5, l5, 1 + arg2 <= arg1 /\ 1 <= arg2 /\ 2 <= arg1, {arg1 -> arg2, arg3 -> undef35, arg4 -> undef36, rest remain the same}>
<l5, l5, 1 <= arg1 /\ 1 <= arg2 /\ arg1 <= arg2, {arg2 -> -arg1 + arg2, arg3 -> undef39, arg4 -> undef40, rest remain the same}>
<l5, l5, 1 <= arg1 /\ 1 <= arg2 /\ 1 <= undef57 /\ arg1 = arg2, {arg1 -> -1 + arg1, arg3 -> undef55, arg4 -> undef56, rest remain the same}>
<l5, l5, 1 <= arg1 /\ 1 <= arg2 /\ 1 <= undef57 /\ arg1 <= arg2, {arg1 -> -1 + arg1, arg3 -> undef55, arg4 -> undef56, rest remain the same}>
<l5, l5, 1 <= arg2 /\ 1 <= undef62 /\ arg1 <= arg2 /\ 2 <= arg1, {arg1 -> -1 + arg1, arg3 -> undef60, arg4 -> undef61, rest remain the same}>
Variables:
arg1, arg2, arg3, arg4

Precedence: 
Graph 0

Graph 1
<l0, l3, 1 <= undef1 /\ 1 <= undef5 /\ 1 <= undef63 /\ undef1 <= undef63 /\ undef5 <= undef1 /\ 0 <= undef64 /\ arg1 = undef5 /\ arg2 = 0 /\ arg3 = 0 /\ arg4 = undef64, {all remain the same}>

Graph 2
<l3, l5, 1 <= arg1 /\ arg2 <= arg4 /\ arg3 <= arg4, {arg1 -> arg3, arg3 -> undef15, arg4 -> undef16, rest remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 3 , 1 )
( 5 , 2 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.009611

Checking conditional termination of SCC {l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.002436s
[33mRanking function: [36m-3 - 3*arg2 + 3*arg4[0m
New Graphs: 
Transitions:
<l3, l3, 1 <= arg1 /\ 1 <= undef17 /\ undef17 <= arg1 /\ arg3 <= arg4 /\ 0 <= arg4 /\ arg2 = 0, {arg1 -> undef17, arg2 -> 0, arg3 -> 1 + arg3, rest remain the same}>
<l3, l3, 1 <= arg1 /\ 1 <= undef21 /\ undef21 <= arg1 /\ arg2 <= arg4 /\ 0 <= arg4 /\ arg3 = 0, {arg1 -> undef21, arg3 -> 1, rest remain the same}>
<l3, l3, 1 <= arg1 /\ 1 <= undef29 /\ undef29 <= arg1 /\ arg2 <= arg4 /\ arg3 <= arg4 /\ 0 <= arg4, {arg1 -> undef29, arg3 -> 1 + arg3, rest remain the same}>
Variables:
arg1, arg2, arg3, arg4
Checking conditional termination of SCC {l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.001323s
[33mRanking function: [36m-4*arg2 - arg3 + arg4[0m
New Graphs: 
Transitions:
<l3, l3, 1 <= arg1 /\ 1 <= undef21 /\ undef21 <= arg1 /\ arg2 <= arg4 /\ 0 <= arg4 /\ arg3 = 0, {arg1 -> undef21, arg3 -> 1, rest remain the same}>
<l3, l3, 1 <= arg1 /\ 1 <= undef29 /\ undef29 <= arg1 /\ arg2 <= arg4 /\ arg3 <= arg4 /\ 0 <= arg4, {arg1 -> undef29, arg3 -> 1 + arg3, rest remain the same}>
Variables:
arg1, arg2, arg3, arg4
Checking conditional termination of SCC {l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000959s
[33mRanking function: [36m-4*arg3[0m
New Graphs: 
Transitions:
<l3, l3, 1 <= arg1 /\ 1 <= undef29 /\ undef29 <= arg1 /\ arg2 <= arg4 /\ arg3 <= arg4 /\ 0 <= arg4, {arg1 -> undef29, arg3 -> 1 + arg3, rest remain the same}>
Variables:
arg1, arg2, arg3, arg4
Checking conditional termination of SCC {l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000543s
[33mRanking function: [36m-arg3 + arg4[0m
New Graphs: 
Proving termination of subgraph 2
Checking unfeasibility...
Time used: 0.006219

Checking conditional termination of SCC {l5}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.001916s
[33mRanking function: [36m-1 + arg2[0m
New Graphs: 
Transitions:
<l5, l5, 1 + arg2 <= arg1 /\ 1 <= arg2 /\ 2 <= arg1, {arg1 -> arg2, arg3 -> undef35, arg4 -> undef36, rest remain the same}>
<l5, l5, 1 <= arg1 /\ 1 <= arg2 /\ 1 <= undef57 /\ arg1 = arg2, {arg1 -> -1 + arg1, arg3 -> undef55, arg4 -> undef56, rest remain the same}>
<l5, l5, 1 <= arg1 /\ 1 <= arg2 /\ 1 <= undef57 /\ arg1 <= arg2, {arg1 -> -1 + arg1, arg3 -> undef55, arg4 -> undef56, rest remain the same}>
<l5, l5, 1 <= arg2 /\ 1 <= undef62 /\ arg1 <= arg2 /\ 2 <= arg1, {arg1 -> -1 + arg1, arg3 -> undef60, arg4 -> undef61, rest remain the same}>
Variables:
arg1, arg2, arg3, arg4
Checking conditional termination of SCC {l5}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.001242s
[33mRanking function: [36m3*arg1 - 3*arg2[0m
New Graphs: 
Transitions:
<l5, l5, 1 <= arg1 /\ 1 <= arg2 /\ 1 <= undef57 /\ arg1 <= arg2, {arg1 -> -1 + arg1, arg3 -> undef55, arg4 -> undef56, rest remain the same}>
<l5, l5, 1 <= arg2 /\ 1 <= undef62 /\ arg1 <= arg2 /\ 2 <= arg1, {arg1 -> -1 + arg1, arg3 -> undef60, arg4 -> undef61, rest remain the same}>
Variables:
arg1, arg2, arg3, arg4
Checking conditional termination of SCC {l5}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000816s
[33mRanking function: [36m-8 + arg1 + 3*arg2[0m
New Graphs: 
Transitions:
<l5, l5, 1 <= arg1 /\ 1 <= arg2 /\ 1 <= undef57 /\ arg1 <= arg2, {arg1 -> -1 + arg1, arg3 -> undef55, arg4 -> undef56, rest remain the same}>
Variables:
arg1, arg2, arg3, arg4
Checking conditional termination of SCC {l5}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000499s
[33mRanking function: [36m-1 + arg1[0m
New Graphs: 
[32mProgram Terminates[0m

