YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l1, true>
<l2, l3, (arg1 > 0) /\ (0 = arg2), par{arg1 -> 0, arg2 -> 0, arg3 -> 0}>
<l2, l3, (arg1 > 0) /\ (undef7 > ~(1)) /\ (1 = arg2), par{arg1 -> 0, arg2 -> (0 - undef7), arg3 -> 0}>
<l2, l3, (undef11 > ~(1)) /\ (arg2 > 1) /\ (undef12 > ~(1)) /\ (arg1 > 0), par{arg1 -> (0 - undef12), arg2 -> (0 - undef11), arg3 -> (0 - undef12)}>
<l3, l3, (arg1 < arg2) /\ ((arg2 + 1) > arg2) /\ (arg1 < (arg2 + 1)) /\ (arg1 = arg3), par{arg1 -> (arg1 + arg2), arg2 -> (arg2 + 1), arg3 -> (arg1 + arg2)}>
<l1, l2, true, par{arg1 -> undef16, arg2 -> undef17, arg3 -> undef18}>

Fresh variables:
undef7, undef11, undef12, undef16, undef17, undef18, 

Undef variables:
undef7, undef11, undef12, undef16, undef17, undef18, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l3, (undef16 > 0) /\ (0 = undef17), par{arg1 -> 0, arg2 -> 0, arg3 -> 0}>
<l0, l3, (undef16 > 0) /\ (undef7 > ~(1)) /\ (1 = undef17), par{arg1 -> 0, arg2 -> (0 - undef7), arg3 -> 0}>
<l0, l3, (undef11 > ~(1)) /\ (undef17 > 1) /\ (undef12 > ~(1)) /\ (undef16 > 0), par{arg1 -> (0 - undef12), arg2 -> (0 - undef11), arg3 -> (0 - undef12)}>
<l3, l3, (arg1 < arg2) /\ ((arg2 + 1) > arg2) /\ (arg1 < (arg2 + 1)) /\ (arg1 = arg3), par{arg1 -> (arg1 + arg2), arg2 -> (arg2 + 1), arg3 -> (arg1 + arg2)}>

Fresh variables:
undef7, undef11, undef12, undef16, undef17, undef18, 

Undef variables:
undef7, undef11, undef12, undef16, undef17, undef18, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l3, l3, 1 + arg1 <= arg2 /\ arg1 = arg3, {arg1 -> arg1 + arg2, arg2 -> 1 + arg2, arg3 -> arg1 + arg2, rest remain the same}>
Variables:
arg1, arg2, arg3

Precedence: 
Graph 0

Graph 1
<l0, l3, 1 <= undef16 /\ undef17 = 0, {arg1 -> 0, arg2 -> 0, arg3 -> 0, rest remain the same}>
<l0, l3, 0 <= undef7 /\ 1 <= undef16 /\ undef17 = 1, {arg1 -> 0, arg2 -> -undef7, arg3 -> 0, rest remain the same}>
<l0, l3, 0 <= undef11 /\ 0 <= undef12 /\ 1 <= undef16 /\ 2 <= undef17, {arg1 -> -undef12, arg2 -> -undef11, arg3 -> -undef12, rest remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 3 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.001639

Checking conditional termination of SCC {l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000371s

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.001128s
Trying to remove transition: <l3, l3, 1 + arg1 <= arg2 /\ arg1 = arg3, {arg1 -> arg1 + arg2, arg2 -> 1 + arg2, arg3 -> arg1 + arg2, rest remain the same}>
Solving with 1 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 0.004742s
Time used: 0.004623
Solving with 1 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 0.005543s
Time used: 0.00523
Improving Solution with cost 1 ...

LOG: CALL solveNonLinearGetNextSolution

LOG: RETURN solveNonLinearGetNextSolution - Elapsed time: 1.005818s
Time used: 1.00016

LOG: SAT solveNonLinear - Elapsed time: 1.011361s
Cost: 1; Total time: 1.00539
[31mFailed at location 3: arg2 <= arg1[0m
Before Improving: 
[36mQuasi-invariant at l3: arg2 <= arg1[0m
Optimizing invariants...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.003236s
Remaining time after improvement: 0.9993
[33mTermination implied by a set of quasi-invariant(s):[0m
[36mQuasi-invariant at l3: arg2 <= arg1[0m
[ Invariant Graph ]
[33mStrengthening and disabling transitions...[0m

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
It's unfeasible. Removing transition: 
<l3, l3, 1 + arg1 <= arg2 /\ arg1 = arg3, {arg1 -> arg1 + arg2, arg2 -> 1 + arg2, arg3 -> arg1 + arg2, rest remain the same}>
[ Termination Graph ]
[33mStrengthening and disabling transitions...[0m
> It's unfeasible. Removing transition: 
<l3, l3, 1 + arg1 <= arg2 /\ arg1 = arg3, {arg1 -> arg1 + arg2, arg2 -> 1 + arg2, arg3 -> arg1 + arg2, rest remain the same}>
New Graphs: 
Calling Safety with literal arg2 <= arg1 and entry <l0, l3, 0 <= undef11 /\ 0 <= undef12 /\ 1 <= undef16 /\ 2 <= undef17, {arg1 -> -undef12, arg2 -> -undef11, arg3 -> -undef12, rest remain the same}>

LOG: CALL check - Post:arg2 <= arg1 - Process 1
* Exit transition: <l0, l3, 0 <= undef11 /\ 0 <= undef12 /\ 1 <= undef16 /\ 2 <= undef17, {arg1 -> -undef12, arg2 -> -undef11, arg3 -> -undef12, rest remain the same}>
* Postcondition  : arg2 <= arg1

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000243s
[31m> Postcondition is not implied![0m

LOG: RETURN check - Elapsed time: 0.000281s
INVARIANTS: 
3: 
Quasi-INVARIANTS to narrow Graph: 
3: arg2 <= arg1 , 
Narrowing transition: 
<l3, l3, 1 + arg1 <= arg2 /\ arg1 = arg3, {arg1 -> arg1 + arg2, arg2 -> 1 + arg2, arg3 -> arg1 + arg2, rest remain the same}>

LOG: Narrow transition size 1
invGraph after Narrowing: 
Transitions:
<l3, l3, 1 + arg1 <= arg2 /\ arg1 = arg3, {arg1 -> arg1 + arg2, arg2 -> 1 + arg2, arg3 -> arg1 + arg2, rest remain the same}>
Variables:
arg1, arg2, arg3
Checking conditional termination of SCC {l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000295s

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000995s
Trying to remove transition: <l3, l3, 1 + arg1 <= arg2 /\ arg1 = arg3, {arg1 -> arg1 + arg2, arg2 -> 1 + arg2, arg3 -> arg1 + arg2, rest remain the same}>
Solving with 1 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 0.003746s
Time used: 0.00366
Solving with 1 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 4.019058s
Time used: 4.00104
Solving with 2 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 4.020481s
Time used: 4.00042
Solving with 3 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 1.006898s
Time used: 1.00008
Solving with 1 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 0.009407s
Time used: 0.006641
Improving Solution with cost 1 ...

LOG: CALL solveNonLinearGetNextSolution

LOG: RETURN solveNonLinearGetNextSolution - Elapsed time: 1.004460s
Time used: 1.00032

LOG: SAT solveNonLinear - Elapsed time: 1.013867s
Cost: 1; Total time: 1.00696
[33mTermination implied by a set of invariant(s):[0m
[36mInvariant at l3: arg1 <= 1 + arg3[0m
[ Invariant Graph ]
[33mStrengthening and disabling transitions...[0m

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l3, l3, 1 + arg1 <= arg2 /\ arg1 = arg3, {arg1 -> arg1 + arg2, arg2 -> 1 + arg2, arg3 -> arg1 + arg2, rest remain the same}>
[ Termination Graph ]
[33mStrengthening and disabling transitions...[0m

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l3, l3, 1 + arg1 <= arg2 /\ arg1 = arg3, {arg1 -> arg1 + arg2, arg2 -> 1 + arg2, arg3 -> arg1 + arg2, rest remain the same}>
[33mQuasi-ranking function: [36m50000 - arg2[0m
New Graphs: 
Transitions:
<l3, l3, 1 + arg1 <= arg2 /\ 50001 <= arg2 /\ arg1 = arg3, {arg1 -> arg1 + arg2, arg2 -> 1 + arg2, arg3 -> arg1 + arg2, rest remain the same}>
Variables:
arg1, arg2, arg3
Checking conditional termination of SCC {l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000431s
[33mRanking function: [36m(~(1) / 50000) + (~(1) / 50000)*arg1 + (1 / 50000)*arg2[0m
New Graphs: 
INVARIANTS: 
3: arg1 <= 1 + arg3 , 
Quasi-INVARIANTS to narrow Graph: 
3: 
[32mProgram Terminates[0m

