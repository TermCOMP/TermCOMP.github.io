YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l1, true>
<l2, l3, (undef2 > 0) /\ (undef1 > 4), par{arg1 -> undef1, arg2 -> undef2}>
<l3, l3, ((undef3 + 2) <= arg1) /\ ((undef4 + 3) <= arg1) /\ (arg1 > 2) /\ (arg2 > 0) /\ (undef3 > 0) /\ (undef4 > ~(1)), par{arg1 -> undef3, arg2 -> undef4}>
<l3, l3, ((undef5 + 2) <= arg1) /\ ((undef6 + 3) <= arg1) /\ (arg1 > 2) /\ (arg2 > 0) /\ (undef5 > 0) /\ (undef6 > ~(1)), par{arg1 -> undef5, arg2 -> undef6}>
<l3, l3, ((undef7 + 2) <= arg1) /\ ((undef8 + 3) <= arg1) /\ (arg1 > 2) /\ (arg2 > 0) /\ (undef7 > 0) /\ (undef8 > ~(1)), par{arg1 -> undef7, arg2 -> undef8}>
<l1, l2, true, par{arg1 -> undef9, arg2 -> undef10}>

Fresh variables:
undef1, undef2, undef3, undef4, undef5, undef6, undef7, undef8, undef9, undef10, 

Undef variables:
undef1, undef2, undef3, undef4, undef5, undef6, undef7, undef8, undef9, undef10, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l3, (arg1 = undef1) /\ (arg2 = undef2) /\ (undef2 > 0) /\ (undef1 > 4)>
<l3, l3, ((undef3 + 2) <= arg1) /\ ((undef4 + 3) <= arg1) /\ (arg1 > 2) /\ (arg2 > 0) /\ (undef3 > 0) /\ (undef4 > ~(1)), par{arg1 -> undef3, arg2 -> undef4}>
<l3, l3, ((undef5 + 2) <= arg1) /\ ((undef6 + 3) <= arg1) /\ (arg1 > 2) /\ (arg2 > 0) /\ (undef5 > 0) /\ (undef6 > ~(1)), par{arg1 -> undef5, arg2 -> undef6}>
<l3, l3, ((undef7 + 2) <= arg1) /\ ((undef8 + 3) <= arg1) /\ (arg1 > 2) /\ (arg2 > 0) /\ (undef7 > 0) /\ (undef8 > ~(1)), par{arg1 -> undef7, arg2 -> undef8}>

Fresh variables:
undef1, undef2, undef3, undef4, undef5, undef6, undef7, undef8, undef9, undef10, 

Undef variables:
undef1, undef2, undef3, undef4, undef5, undef6, undef7, undef8, undef9, undef10, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l3, l3, 0 <= undef4 /\ 2 + undef3 <= arg1 /\ 3 <= arg1 /\ 3 + undef4 <= arg1 /\ 1 <= arg2 /\ 1 <= undef3, {arg1 -> undef3, arg2 -> undef4, rest remain the same}>
<l3, l3, 0 <= undef6 /\ 2 + undef5 <= arg1 /\ 3 <= arg1 /\ 3 + undef6 <= arg1 /\ 1 <= arg2 /\ 1 <= undef5, {arg1 -> undef5, arg2 -> undef6, rest remain the same}>
<l3, l3, 0 <= undef8 /\ 2 + undef7 <= arg1 /\ 3 <= arg1 /\ 3 + undef8 <= arg1 /\ 1 <= arg2 /\ 1 <= undef7, {arg1 -> undef7, arg2 -> undef8, rest remain the same}>
Variables:
arg1, arg2

Precedence: 
Graph 0

Graph 1
<l0, l3, 1 <= undef2 /\ 5 <= undef1 /\ arg1 = undef1 /\ arg2 = undef2, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 3 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.004701

Checking conditional termination of SCC {l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.001678s
[33mRanking function: [36m(~(3) / 2) + (1 / 2)*arg1[0m
New Graphs: 
[32mProgram Terminates[0m

