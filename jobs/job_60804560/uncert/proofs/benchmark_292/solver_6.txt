YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l1, true>
<l2, l3, (undef1 > ~(1)) /\ (arg2 > ~(1)) /\ (undef2 > ~(1)) /\ (arg1 > 0), par{arg1 -> undef1, arg2 -> undef2, arg3 -> 2}>
<l3, l3, (arg1 > ~(1)) /\ (~(1) = arg2), par{arg1 -> (arg1 - 1), arg2 -> ~(1)}>
<l3, l3, (undef7 > ~(1)) /\ (arg2 > ~(1)) /\ (arg3 > ~(1)), par{arg1 -> undef7, arg2 -> (arg2 - 1), arg3 -> (arg3 + 1)}>
<l1, l2, true, par{arg1 -> undef10, arg2 -> undef11, arg3 -> undef12}>

Fresh variables:
undef1, undef2, undef7, undef10, undef11, undef12, 

Undef variables:
undef1, undef2, undef7, undef10, undef11, undef12, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l3, (arg1 = undef1) /\ (arg2 = undef2) /\ (arg3 = 2) /\ (undef1 > ~(1)) /\ (undef11 > ~(1)) /\ (undef2 > ~(1)) /\ (undef10 > 0)>
<l3, l3, (arg1 > ~(1)) /\ (~(1) = arg2), par{arg1 -> (arg1 - 1), arg2 -> ~(1)}>
<l3, l3, (undef7 > ~(1)) /\ (arg2 > ~(1)) /\ (arg3 > ~(1)), par{arg1 -> undef7, arg2 -> (arg2 - 1), arg3 -> (arg3 + 1)}>

Fresh variables:
undef1, undef2, undef7, undef10, undef11, undef12, 

Undef variables:
undef1, undef2, undef7, undef10, undef11, undef12, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l3, l3, 0 <= arg1 /\ 1 + arg2 = 0, {arg1 -> -1 + arg1, arg2 -> -1, rest remain the same}>
<l3, l3, 0 <= arg2 /\ 0 <= arg3 /\ 0 <= undef7, {arg1 -> undef7, arg2 -> -1 + arg2, arg3 -> 1 + arg3, rest remain the same}>
Variables:
arg1, arg2, arg3

Precedence: 
Graph 0

Graph 1
<l0, l3, 1 <= undef10 /\ 0 <= undef1 /\ 0 <= undef2 /\ 0 <= undef11 /\ arg1 = undef1 /\ arg2 = undef2 /\ arg3 = 2, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 3 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.002369

Checking conditional termination of SCC {l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000644s
[33mRanking function: [36m1 + arg2[0m
New Graphs: 
Transitions:
<l3, l3, 0 <= arg1 /\ 1 + arg2 = 0, {arg1 -> -1 + arg1, arg2 -> -1, rest remain the same}>
Variables:
arg1, arg2
Checking conditional termination of SCC {l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000264s
[33mRanking function: [36marg1[0m
New Graphs: 
[32mProgram Terminates[0m

