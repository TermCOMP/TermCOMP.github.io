YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l1, true>
<l3, l2, true, par{arg1 -> 0, arg2 -> 0, arg3 -> 0}>
<l2, l2, (arg2 > ~(1)) /\ (arg1 > ~(1)) /\ (arg2 < 1001) /\ (arg2 = arg3), par{arg1 -> (arg1 + arg2), arg2 -> (arg2 + 1), arg3 -> (arg2 + 1)}>
<l2, l4, (arg2 > 1000) /\ (arg2 = arg3), par{arg1 -> 0, arg2 -> 0, arg3 -> 0}>
<l4, l4, (arg2 > ~(1)) /\ (arg1 > ~(1)) /\ (arg2 < 1001) /\ (arg2 = arg3), par{arg1 -> (arg1 + arg2), arg2 -> (arg2 + 2), arg3 -> (arg2 + 2)}>
<l4, l5, (arg2 > 1000) /\ (arg2 = arg3), par{arg1 -> 0, arg2 -> 0, arg3 -> 0}>
<l5, l5, (arg2 > ~(1)) /\ (arg1 > ~(1)) /\ (arg2 < 1001) /\ (arg2 = arg3), par{arg1 -> (arg1 + arg2), arg2 -> (arg2 + 3), arg3 -> (arg2 + 3)}>
<l1, l3, true, par{arg1 -> undef19, arg2 -> undef20, arg3 -> undef21}>

Fresh variables:
undef19, undef20, undef21, 

Undef variables:
undef19, undef20, undef21, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l2, (arg1 = 0) /\ (arg2 = 0) /\ (arg3 = 0)>
<l2, l2, (arg2 > ~(1)) /\ (arg1 > ~(1)) /\ (arg2 < 1001) /\ (arg2 = arg3), par{arg1 -> (arg1 + arg2), arg2 -> (arg2 + 1), arg3 -> (arg2 + 1)}>
<l2, l4, (arg2 > 1000) /\ (arg2 = arg3), par{arg1 -> 0, arg2 -> 0, arg3 -> 0}>
<l4, l4, (arg2 > ~(1)) /\ (arg1 > ~(1)) /\ (arg2 < 1001) /\ (arg2 = arg3), par{arg1 -> (arg1 + arg2), arg2 -> (arg2 + 2), arg3 -> (arg2 + 2)}>
<l4, l5, (arg2 > 1000) /\ (arg2 = arg3), par{arg1 -> 0, arg2 -> 0, arg3 -> 0}>
<l5, l5, (arg2 > ~(1)) /\ (arg1 > ~(1)) /\ (arg2 < 1001) /\ (arg2 = arg3), par{arg1 -> (arg1 + arg2), arg2 -> (arg2 + 3), arg3 -> (arg2 + 3)}>

Fresh variables:
undef19, undef20, undef21, 

Undef variables:
undef19, undef20, undef21, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l2, l2, 0 <= arg1 /\ 0 <= arg2 /\ arg2 <= 1000 /\ arg2 = arg3, {arg1 -> arg1 + arg2, arg2 -> 1 + arg2, arg3 -> 1 + arg2, rest remain the same}>
Variables:
arg1, arg2, arg3

Graph 2:
Transitions:
<l4, l4, 0 <= arg1 /\ 0 <= arg2 /\ arg2 <= 1000 /\ arg2 = arg3, {arg1 -> arg1 + arg2, arg2 -> 2 + arg2, arg3 -> 2 + arg2, rest remain the same}>
Variables:
arg1, arg2, arg3

Graph 3:
Transitions:
<l5, l5, 0 <= arg1 /\ 0 <= arg2 /\ arg2 <= 1000 /\ arg2 = arg3, {arg1 -> arg1 + arg2, arg2 -> 3 + arg2, arg3 -> 3 + arg2, rest remain the same}>
Variables:
arg1, arg2, arg3

Precedence: 
Graph 0

Graph 1
<l0, l2, arg1 = 0 /\ arg2 = 0 /\ arg3 = 0, {all remain the same}>

Graph 2
<l2, l4, 1001 <= arg2 /\ arg2 = arg3, {arg1 -> 0, arg2 -> 0, arg3 -> 0, rest remain the same}>

Graph 3
<l4, l5, 1001 <= arg2 /\ arg2 = arg3, {arg1 -> 0, arg2 -> 0, arg3 -> 0, rest remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 2 , 1 )
( 4 , 2 )
( 5 , 3 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.001048

Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000381s
[33mRanking function: [36m1000 - arg2[0m
New Graphs: 
Proving termination of subgraph 2
Checking unfeasibility...
Time used: 0.000994

Checking conditional termination of SCC {l4}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000398s
[33mRanking function: [36m500 + (~(1) / 2)*arg2[0m
New Graphs: 
Proving termination of subgraph 3
Checking unfeasibility...
Time used: 0.000932

Checking conditional termination of SCC {l5}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000383s
[33mRanking function: [36m(1000 / 3) + (~(1) / 3)*arg2[0m
New Graphs: 
[32mProgram Terminates[0m

