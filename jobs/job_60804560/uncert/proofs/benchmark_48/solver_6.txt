YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l1, true>
<l3, l2, (undef1 > 13), par{arg1 -> undef1, arg2 -> 0, arg3 -> 10}>
<l2, l2, (arg2 > ~(1)) /\ (arg3 > 0) /\ (undef4 <= arg1) /\ (arg1 > 2) /\ (undef4 > 2) /\ ((arg3 + 4) <= arg1), par{arg1 -> undef4, arg2 -> (arg2 + 10), arg3 -> (arg3 - 1)}>
<l1, l3, true, par{arg1 -> undef7, arg2 -> undef8, arg3 -> undef9}>

Fresh variables:
undef1, undef4, undef7, undef8, undef9, 

Undef variables:
undef1, undef4, undef7, undef8, undef9, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l2, (arg1 = undef1) /\ (arg2 = 0) /\ (arg3 = 10) /\ (undef1 > 13)>
<l2, l2, (arg2 > ~(1)) /\ (arg3 > 0) /\ (undef4 <= arg1) /\ (arg1 > 2) /\ (undef4 > 2) /\ ((arg3 + 4) <= arg1), par{arg1 -> undef4, arg2 -> (arg2 + 10), arg3 -> (arg3 - 1)}>

Fresh variables:
undef1, undef4, undef7, undef8, undef9, 

Undef variables:
undef1, undef4, undef7, undef8, undef9, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l2, l2, undef4 <= arg1 /\ 0 <= arg2 /\ 1 <= arg3 /\ 4 + arg3 <= arg1 /\ 3 <= arg1 /\ 3 <= undef4, {arg1 -> undef4, arg2 -> 10 + arg2, arg3 -> -1 + arg3, rest remain the same}>
Variables:
arg1, arg2, arg3

Precedence: 
Graph 0

Graph 1
<l0, l2, 14 <= undef1 /\ arg1 = undef1 /\ arg2 = 0 /\ arg3 = 10, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 2 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.087136

Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000992s
[33mRanking function: [36m-1 + arg3[0m
New Graphs: 
[32mProgram Terminates[0m

