YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l1, true>
<l3, l2, (arg2 > ~(1)) /\ (undef1 > ~(1)) /\ (arg1 > 0), par{arg1 -> undef1, arg2 -> 1}>
<l2, l2, (arg1 < 101) /\ (arg2 > 0), par{arg1 -> (arg1 + 11), arg2 -> (arg2 + 1)}>
<l2, l2, (arg1 > 100) /\ (arg2 > 0), par{arg1 -> (arg1 - 10), arg2 -> (arg2 - 1)}>
<l1, l3, true, par{arg1 -> undef7, arg2 -> undef8}>

Fresh variables:
undef1, undef7, undef8, 

Undef variables:
undef1, undef7, undef8, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l2, (arg1 = undef1) /\ (arg2 = 1) /\ (undef8 > ~(1)) /\ (undef1 > ~(1)) /\ (undef7 > 0)>
<l2, l2, (arg1 < 101) /\ (arg2 > 0), par{arg1 -> (arg1 + 11), arg2 -> (arg2 + 1)}>
<l2, l2, (arg1 > 100) /\ (arg2 > 0), par{arg1 -> (arg1 - 10), arg2 -> (arg2 - 1)}>

Fresh variables:
undef1, undef7, undef8, 

Undef variables:
undef1, undef7, undef8, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l2, l2, 1 <= arg2 /\ arg1 <= 100, {arg1 -> 11 + arg1, arg2 -> 1 + arg2, rest remain the same}>
<l2, l2, 1 <= arg2 /\ 101 <= arg1, {arg1 -> -10 + arg1, arg2 -> -1 + arg2, rest remain the same}>
Variables:
arg1, arg2

Precedence: 
Graph 0

Graph 1
<l0, l2, 1 <= undef7 /\ 0 <= undef1 /\ 0 <= undef8 /\ arg2 = 1 /\ arg1 = undef1, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 2 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.09646

Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000752s
[33mRanking function: [36m181 - 2*arg1 + 21*arg2[0m
New Graphs: 
Transitions:
<l2, l2, 1 <= arg2 /\ 101 <= arg1, {arg1 -> -10 + arg1, arg2 -> -1 + arg2, rest remain the same}>
Variables:
arg1, arg2
Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000279s
[33mRanking function: [36m(~(101) / 10) + (1 / 10)*arg1[0m
New Graphs: 
[32mProgram Terminates[0m

