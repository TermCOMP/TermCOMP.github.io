YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l1, true>
<l2, l3, (undef2 > ~(1)) /\ (arg2 > ~(1)) /\ (undef1 > ~(1)) /\ (arg1 > 0), par{arg1 -> undef1, arg2 -> undef2}>
<l3, l3, (arg2 > 0), par{arg1 -> (arg2 - 1), arg2 -> arg1}>
<l1, l2, true, par{arg1 -> undef5, arg2 -> undef6}>

Fresh variables:
undef1, undef2, undef5, undef6, 

Undef variables:
undef1, undef2, undef5, undef6, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l3, (arg1 = undef1) /\ (arg2 = undef2) /\ (undef2 > ~(1)) /\ (undef6 > ~(1)) /\ (undef1 > ~(1)) /\ (undef5 > 0)>
<l3, l3, (arg2 > 0), par{arg1 -> (arg2 - 1), arg2 -> arg1}>

Fresh variables:
undef1, undef2, undef5, undef6, 

Undef variables:
undef1, undef2, undef5, undef6, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l3, l3, 1 <= arg2, {arg1 -> -1 + arg2, arg2 -> arg1, rest remain the same}>
Variables:
arg1, arg2

Precedence: 
Graph 0

Graph 1
<l0, l3, 1 <= undef5 /\ 0 <= undef1 /\ 0 <= undef2 /\ 0 <= undef6 /\ arg1 = undef1 /\ arg2 = undef2, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 3 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.001122

Checking conditional termination of SCC {l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000258s

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000737s
Trying to remove transition: <l3, l3, 1 <= arg2, {arg1 -> -1 + arg2, arg2 -> arg1, rest remain the same}>
Solving with 1 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 0.002914s
Time used: 0.002831
Solving with 1 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 0.003881s
Time used: 0.003715

LOG: SAT solveNonLinear - Elapsed time: 0.003881s
Cost: 0; Total time: 0.003715
[33mTermination implied by a set of invariant(s):[0m
[36mInvariant at l3: 0 <= arg1[0m
[ Invariant Graph ]
[33mStrengthening and disabling transitions...[0m

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l3, l3, 1 <= arg2 /\ 0 <= arg1, {arg1 -> -1 + arg2, arg2 -> arg1, rest remain the same}>
[ Termination Graph ]
[33mStrengthening and disabling transitions...[0m

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l3, l3, 1 <= arg2 /\ 0 <= arg1, {arg1 -> -1 + arg2, arg2 -> arg1, rest remain the same}>
[33mRanking function: [36marg1 + arg2[0m
New Graphs: 
INVARIANTS: 
3: 0 <= arg1 , 
Quasi-INVARIANTS to narrow Graph: 
3: 
[32mProgram Terminates[0m

