YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l1, true>
<l2, l3, (arg1 > 0) /\ (0 = arg2), par{arg1 -> 0, arg2 -> 0}>
<l2, l3, (undef3 > ~(1)) /\ (arg2 > 0) /\ (arg1 > 0), par{arg1 -> undef3, arg2 -> 1}>
<l3, l3, ((arg1 - 1) < arg1) /\ (arg2 < 2) /\ (arg1 > 1), par{arg1 -> (arg1 - 1)}>
<l3, l3, (arg2 < 2) /\ ((arg1 - 1) < arg1) /\ (arg1 > 1), par{arg1 -> (arg1 - 1)}>
<l1, l2, true, par{arg1 -> undef9, arg2 -> undef10}>

Fresh variables:
undef3, undef9, undef10, 

Undef variables:
undef3, undef9, undef10, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l3, (undef9 > 0) /\ (0 = undef10), par{arg1 -> 0, arg2 -> 0}>
<l0, l3, (undef3 > ~(1)) /\ (undef10 > 0) /\ (undef9 > 0), par{arg1 -> undef3, arg2 -> 1}>
<l3, l3, ((arg1 - 1) < arg1) /\ (arg2 < 2) /\ (arg1 > 1), par{arg1 -> (arg1 - 1)}>
<l3, l3, (arg2 < 2) /\ ((arg1 - 1) < arg1) /\ (arg1 > 1), par{arg1 -> (arg1 - 1)}>

Fresh variables:
undef3, undef9, undef10, 

Undef variables:
undef3, undef9, undef10, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l3, l3, arg2 <= 1 /\ 2 <= arg1, {arg1 -> -1 + arg1, rest remain the same}>
<l3, l3, arg2 <= 1 /\ 2 <= arg1, {arg1 -> -1 + arg1, rest remain the same}>
Variables:
arg1, arg2

Precedence: 
Graph 0

Graph 1
<l0, l3, 1 <= undef9 /\ undef10 = 0, {arg1 -> 0, arg2 -> 0, rest remain the same}>
<l0, l3, 0 <= undef3 /\ 1 <= undef9 /\ 1 <= undef10, {arg1 -> undef3, arg2 -> 1, rest remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 3 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.002107

Checking conditional termination of SCC {l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000546s
[33mRanking function: [36m-2 + arg1[0m
New Graphs: 
[32mProgram Terminates[0m

