YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l1, true>
<l2, l3, (undef2 > ~(1)) /\ (arg2 > ~(1)) /\ (undef1 > ~(1)) /\ (undef3 > ~(1)) /\ (arg1 > 0), par{arg1 -> undef1, arg2 -> undef2, arg3 -> undef3, arg4 -> undef4}>
<l3, l4, (arg2 > arg1) /\ (arg2 = arg3), par{arg1 -> arg2, arg3 -> arg2, arg4 -> arg1}>
<l4, l3, (arg4 >= arg2) /\ (arg2 = arg3), par{arg1 -> arg4, arg2 -> arg1, arg3 -> arg2, arg4 -> undef12}>
<l4, l4, (arg4 < arg2) /\ (arg2 = arg3), par{arg1 -> (arg1 - 1), arg2 -> (arg2 - 1), arg3 -> (arg2 - 1)}>
<l1, l2, true, par{arg1 -> undef17, arg2 -> undef18, arg3 -> undef19, arg4 -> undef20}>

Fresh variables:
undef1, undef2, undef3, undef4, undef12, undef17, undef18, undef19, undef20, 

Undef variables:
undef1, undef2, undef3, undef4, undef12, undef17, undef18, undef19, undef20, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l4, (arg1 = undef2) /\ (arg2 = undef2) /\ (arg3 = undef2) /\ (arg4 = undef1) /\ (undef2 > ~(1)) /\ (undef18 > ~(1)) /\ (undef1 > ~(1)) /\ (undef3 > ~(1)) /\ (undef17 > 0) /\ (undef2 > undef1) /\ (undef2 = undef3)>
<l4, l4, (arg4 < arg2) /\ (arg2 = arg3), par{arg1 -> (arg1 - 1), arg2 -> (arg2 - 1), arg3 -> (arg2 - 1)}>

Fresh variables:
undef1, undef2, undef3, undef4, undef12, undef17, undef18, undef19, undef20, 

Undef variables:
undef1, undef2, undef3, undef4, undef12, undef17, undef18, undef19, undef20, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l4, l4, 1 + arg4 <= arg2 /\ arg2 = arg3, {arg1 -> -1 + arg1, arg2 -> -1 + arg2, arg3 -> -1 + arg2, rest remain the same}>
Variables:
arg1, arg2, arg3, arg4

Precedence: 
Graph 0

Graph 1
<l0, l4, 1 + undef1 <= undef2 /\ 1 <= undef17 /\ 0 <= undef1 /\ 0 <= undef2 /\ 0 <= undef3 /\ 0 <= undef18 /\ arg1 = undef2 /\ arg2 = undef2 /\ arg3 = undef2 /\ arg4 = undef1 /\ undef2 = undef3, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 4 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.002005

Checking conditional termination of SCC {l4}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000444s
[33mRanking function: [36m-1 + arg2 - arg4[0m
New Graphs: 
[32mProgram Terminates[0m

