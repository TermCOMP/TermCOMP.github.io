YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l1, true>
<l3, l2, (undef1 > 3), par{arg1 -> undef1}>
<l2, l2, ((undef2 + 1) <= arg1) /\ (arg1 > 0) /\ (undef2 > ~(1)), par{arg1 -> undef2}>
<l1, l3, true, par{arg1 -> undef3}>

Fresh variables:
undef1, undef2, undef3, 

Undef variables:
undef1, undef2, undef3, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l2, (arg1 = undef1) /\ (undef1 > 3)>
<l2, l2, ((undef2 + 1) <= arg1) /\ (arg1 > 0) /\ (undef2 > ~(1)), par{arg1 -> undef2}>

Fresh variables:
undef1, undef2, undef3, 

Undef variables:
undef1, undef2, undef3, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l2, l2, 1 <= arg1 /\ 1 + undef2 <= arg1 /\ 0 <= undef2, {arg1 -> undef2, rest remain the same}>
Variables:
arg1

Precedence: 
Graph 0

Graph 1
<l0, l2, 4 <= undef1 /\ arg1 = undef1, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 2 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.000882

Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000363s
[33mRanking function: [36m-1 + arg1[0m
New Graphs: 
[32mProgram Terminates[0m

