YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l1, true>
<l2, l3, (undef5 > ~(1)) /\ (arg2 > 1) /\ (undef4 > ~(1)) /\ (undef2 <= arg1) /\ (arg1 > 0) /\ (undef1 > 0) /\ (undef2 > 0), par{arg1 -> undef1, arg2 -> undef2, arg3 -> 0, arg4 -> undef4, arg5 -> undef5}>
<l3, l3, (arg4 > ~(1)) /\ (arg3 < arg5) /\ (arg1 >= (undef6 - 1)) /\ (arg1 >= undef7) /\ (arg2 >= undef7) /\ (arg1 > 0) /\ (arg2 > 0) /\ (undef6 > 0) /\ (undef7 > 0) /\ ((arg4 + 2) <= arg1), par{arg1 -> undef6, arg2 -> undef7, arg3 -> (arg3 + 1), arg4 -> (arg4 + 1)}>
<l1, l2, true, par{arg1 -> undef11, arg2 -> undef12, arg3 -> undef13, arg4 -> undef14, arg5 -> undef15}>

Fresh variables:
undef1, undef2, undef4, undef5, undef6, undef7, undef11, undef12, undef13, undef14, undef15, 

Undef variables:
undef1, undef2, undef4, undef5, undef6, undef7, undef11, undef12, undef13, undef14, undef15, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l3, (arg1 = undef1) /\ (arg2 = undef2) /\ (arg3 = 0) /\ (arg4 = undef4) /\ (arg5 = undef5) /\ (undef5 > ~(1)) /\ (undef12 > 1) /\ (undef4 > ~(1)) /\ (undef2 <= undef11) /\ (undef11 > 0) /\ (undef1 > 0) /\ (undef2 > 0)>
<l3, l3, (arg4 > ~(1)) /\ (arg3 < arg5) /\ (arg1 >= (undef6 - 1)) /\ (arg1 >= undef7) /\ (arg2 >= undef7) /\ (arg1 > 0) /\ (arg2 > 0) /\ (undef6 > 0) /\ (undef7 > 0) /\ ((arg4 + 2) <= arg1), par{arg1 -> undef6, arg2 -> undef7, arg3 -> (arg3 + 1), arg4 -> (arg4 + 1)}>

Fresh variables:
undef1, undef2, undef4, undef5, undef6, undef7, undef11, undef12, undef13, undef14, undef15, 

Undef variables:
undef1, undef2, undef4, undef5, undef6, undef7, undef11, undef12, undef13, undef14, undef15, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l3, l3, 1 <= arg1 /\ 1 <= arg2 /\ 1 + arg3 <= arg5 /\ 1 <= undef6 /\ 1 <= undef7 /\ undef6 <= 1 + arg1 /\ undef7 <= arg1 /\ undef7 <= arg2 /\ 0 <= arg4 /\ 2 + arg4 <= arg1, {arg1 -> undef6, arg2 -> undef7, arg3 -> 1 + arg3, arg4 -> 1 + arg4, rest remain the same}>
Variables:
arg1, arg2, arg3, arg4, arg5

Precedence: 
Graph 0

Graph 1
<l0, l3, 1 <= undef1 /\ 1 <= undef2 /\ 1 <= undef11 /\ undef2 <= undef11 /\ 0 <= undef4 /\ 0 <= undef5 /\ 2 <= undef12 /\ arg1 = undef1 /\ arg2 = undef2 /\ arg3 = 0 /\ arg4 = undef4 /\ arg5 = undef5, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 3 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.002592

Checking conditional termination of SCC {l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000832s
[33mRanking function: [36m-1 - arg3 + arg5[0m
New Graphs: 
[32mProgram Terminates[0m

