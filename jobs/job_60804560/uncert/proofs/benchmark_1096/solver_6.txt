YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l7, true>
<l1, l2, (undef2 = 0) /\ (0 <= (0 + undef2)) /\ ((0 + undef2) <= 0), par{i_13^0 -> undef2}>
<l3, l2, ((1 + i_13^0) <= 10) /\ (undef11 = (1 + i_13^0)) /\ (undef7 = undef7) /\ (2 <= (0 + undef7)) /\ ((0 + undef7) <= 2) /\ (undef6 = undef6) /\ ((0 + undef6) <= (0 + undef7)) /\ ((0 + undef7) <= (0 + undef6)), par{a_20^0 -> undef6, i_13^0 -> undef7}>
<l4, l2, ((1 + i_13^0) <= 10) /\ (undef13 = (1 + i_13^0)) /\ (1 <= (0 + undef13)) /\ ((0 + undef13) <= 1), par{i_13^0 -> undef13}>
<l2, l5, (10 <= (0 + i_13^0)), par{rt_11^0 -> (0 + st_14^0)}>
<l2, l6, (undef24 = undef24) /\ ((1 + i_13^0) <= 10) /\ (undef23 = (1 + i_13^0)) /\ ((0 + undef23) <= (1 + undef24)) /\ ((1 + undef24) <= (0 + undef23)) /\ ((1 + undef24) <= 10), par{i_13^0 -> undef23, i_21^0 -> undef24}>
<l6, l2, true>
<l7, l1, true>

Fresh variables:
undef2, undef6, undef7, undef11, undef13, undef23, undef24, 

Undef variables:
undef2, undef6, undef7, undef11, undef13, undef23, undef24, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l2, (i_13^0 = undef2) /\ (undef2 = 0) /\ (0 <= (0 + undef2)) /\ ((0 + undef2) <= 0)>
<l2, l5, (10 <= (0 + i_13^0))>
<l2, l2, (undef24 = undef24) /\ ((1 + i_13^0) <= 10) /\ (undef23 = (1 + i_13^0)) /\ ((0 + undef23) <= (1 + undef24)) /\ ((1 + undef24) <= (0 + undef23)) /\ ((1 + undef24) <= 10), par{i_13^0 -> undef23}>

Fresh variables:
undef2, undef6, undef7, undef11, undef13, undef23, undef24, 

Undef variables:
undef2, undef6, undef7, undef11, undef13, undef23, undef24, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l2, l2, i_13^0 <= 9 /\ undef24 <= 9 /\ 1 + i_13^0 = undef23 /\ undef23 = 1 + undef24, {i_13^0 -> undef23, rest remain the same}>
Variables:
i_13^0

Graph 2:
Transitions:
Variables:

Precedence: 
Graph 0

Graph 1
<l0, l2, i_13^0 = undef2 /\ undef2 = 0, {all remain the same}>

Graph 2
<l2, l5, 10 <= i_13^0, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 2 , 1 )
( 5 , 2 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.000793

Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000369s
[33mRanking function: [36m9 - i_13^0[0m
New Graphs: 
Proving termination of subgraph 2
Analyzing SCC {l5}...
No cycles found.

[32mProgram Terminates[0m

