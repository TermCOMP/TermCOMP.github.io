YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l7, true>
<l1, l2, true>
<l3, l1, ((0 + __const_20^0) <= (0 + i^0))>
<l3, l4, ((1 + i^0) <= (0 + __const_20^0)), par{i^0 -> (1 + i^0)}>
<l5, l1, ((0 + i^0) <= 0)>
<l5, l4, (1 <= (0 + i^0))>
<l4, l3, true>
<l6, l5, (undef15 = 0) /\ (undef14 = undef14), par{i^0 -> undef14}>
<l7, l6, true>

Fresh variables:
undef14, undef15, 

Undef variables:
undef14, undef15, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l2, (i^0 = undef14) /\ (undef15 = 0) /\ (undef14 = undef14) /\ ((0 + undef14) <= 0)>
<l0, l4, (i^0 = undef14) /\ (undef15 = 0) /\ (undef14 = undef14) /\ (1 <= (0 + undef14))>
<l4, l2, ((0 + __const_20^0) <= (0 + i^0))>
<l4, l4, ((1 + i^0) <= (0 + __const_20^0)), par{i^0 -> (1 + i^0)}>

Fresh variables:
undef14, undef15, 

Undef variables:
undef14, undef15, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l4, l4, 1 + i^0 <= __const_20^0, {i^0 -> 1 + i^0, rest remain the same}>
Variables:
__const_20^0, i^0

Graph 2:
Transitions:
Variables:

Precedence: 
Graph 0

Graph 1
<l0, l4, 1 <= undef14 /\ i^0 = undef14 /\ undef15 = 0, {all remain the same}>

Graph 2
<l0, l2, undef14 <= 0 /\ i^0 = undef14 /\ undef15 = 0, {all remain the same}>
<l4, l2, __const_20^0 <= i^0, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 2 , 2 )
( 4 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.000922

Checking conditional termination of SCC {l4}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000325s
[33mRanking function: [36m-1 + __const_20^0 - i^0[0m
New Graphs: 
Proving termination of subgraph 2
Analyzing SCC {l2}...
No cycles found.

[32mProgram Terminates[0m

