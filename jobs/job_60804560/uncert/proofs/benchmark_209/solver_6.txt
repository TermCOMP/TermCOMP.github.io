YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l1, true>
<l3, l2, (undef5 > ~(1)) /\ (arg2 > 0) /\ ((undef1 - 1) <= arg1) /\ ((undef2 - 1) <= arg1) /\ (arg1 > 0) /\ (undef1 > 1) /\ (undef2 > 1), par{arg1 -> undef1, arg2 -> undef2, arg3 -> (undef5 - 2), arg4 -> undef4}>
<l2, l2, (undef6 <= arg1) /\ (arg3 > 0) /\ ((undef7 - 2) <= arg2) /\ (arg1 > 0) /\ (arg2 > 0) /\ (undef6 > 0) /\ (undef7 > 2), par{arg1 -> undef6, arg2 -> undef7, arg3 -> (arg3 - 1), arg4 -> undef9}>
<l2, l4, (undef10 <= arg1) /\ (arg3 < 1) /\ (undef10 <= arg2) /\ (undef11 <= arg1) /\ (undef11 <= arg2) /\ (arg1 > 1) /\ (arg2 > 1) /\ (undef10 > 1) /\ (undef11 > 1), par{arg1 -> undef10, arg2 -> undef11, arg3 -> undef12, arg4 -> undef13}>
<l2, l4, (undef14 <= arg1) /\ (arg3 < 1) /\ ((undef14 - 1) <= arg2) /\ (arg1 > 1) /\ (arg2 > 0) /\ (undef14 > 1) /\ (undef15 > ~(1)), par{arg1 -> undef14, arg2 -> undef15, arg3 -> undef16, arg4 -> undef17}>
<l2, l4, (undef18 <= arg1) /\ (arg3 < 1) /\ ((undef18 - 1) <= arg2) /\ (arg1 > 1) /\ (arg2 > 0) /\ (undef18 > 1) /\ (undef19 > 0), par{arg1 -> undef18, arg2 -> undef19, arg3 -> undef20, arg4 -> undef21}>
<l2, l5, (undef22 <= arg1) /\ (arg3 < 1) /\ ((undef22 - 1) <= arg2) /\ (arg1 > 1) /\ (arg2 > 0) /\ (undef22 > 1) /\ (undef23 > 0), par{arg1 -> undef22, arg2 -> undef23, arg3 -> undef24, arg4 -> undef25}>
<l4, l6, ((undef26 + 1) <= arg2) /\ (undef27 <= arg2) /\ (undef28 <= arg1) /\ ((undef29 + 1) <= arg2) /\ (arg1 > 0) /\ (arg2 > 0) /\ (undef26 > ~(1)) /\ (undef27 > 0) /\ (undef28 > 0) /\ (undef29 > ~(1)), par{arg1 -> undef26, arg2 -> undef27, arg3 -> undef28, arg4 -> undef29}>
<l6, l4, (undef31 <= arg1) /\ ((undef31 + 1) <= arg2) /\ (undef31 <= arg4) /\ (arg1 > ~(1)) /\ (arg2 > 0) /\ (arg3 > 0) /\ (arg4 > ~(1)) /\ (undef30 > 2) /\ (undef31 > ~(1)), par{arg1 -> undef30, arg2 -> undef31, arg3 -> undef32, arg4 -> undef33}>
<l6, l4, ((undef34 - 3) <= arg1) /\ ((undef34 - 2) <= arg2) /\ ((undef34 - 2) <= arg3) /\ ((undef34 - 3) <= arg4) /\ (undef35 <= arg1) /\ ((undef35 + 1) <= arg2) /\ ((undef35 + 1) <= arg3) /\ (undef35 <= arg4) /\ (arg1 > ~(1)) /\ (arg2 > 0) /\ (arg3 > 0) /\ (arg4 > ~(1)) /\ (undef34 > 2) /\ (undef35 > ~(1)), par{arg1 -> undef34, arg2 -> undef35, arg3 -> undef36, arg4 -> undef37}>
<l5, l5, (arg3 > 0) /\ (arg4 > 0) /\ (undef41 < arg4) /\ ((undef38 - 2) <= arg1) /\ (arg1 > 0) /\ (arg2 > 2) /\ (undef38 > 2) /\ (undef39 > 0), par{arg1 -> undef38, arg2 -> undef39, arg4 -> undef41}>
<l5, l6, (undef46 > 0) /\ (undef47 > ~(1)) /\ (undef46 < undef47) /\ ((undef44 - 2) <= arg1) /\ (arg1 > 0) /\ (arg2 > 2) /\ (undef42 > ~(1)) /\ (undef43 > 0) /\ (undef44 > 2) /\ (undef45 > ~(1)), par{arg1 -> undef42, arg2 -> undef43, arg3 -> undef44, arg4 -> undef45}>
<l5, l4, (undef52 > ~(1)) /\ (undef53 < undef52) /\ ((undef48 - 2) <= arg1) /\ (undef48 <= arg2) /\ (undef49 <= arg1) /\ (arg1 > 0) /\ (arg2 > 2) /\ (undef48 > 2) /\ (undef49 > 0), par{arg1 -> undef48, arg2 -> undef49, arg3 -> undef50, arg4 -> undef51}>
<l1, l3, true, par{arg1 -> undef54, arg2 -> undef55, arg3 -> undef56, arg4 -> undef57}>

Fresh variables:
undef1, undef2, undef4, undef5, undef6, undef7, undef9, undef10, undef11, undef12, undef13, undef14, undef15, undef16, undef17, undef18, undef19, undef20, undef21, undef22, undef23, undef24, undef25, undef26, undef27, undef28, undef29, undef30, undef31, undef32, undef33, undef34, undef35, undef36, undef37, undef38, undef39, undef41, undef42, undef43, undef44, undef45, undef46, undef47, undef48, undef49, undef50, undef51, undef52, undef53, undef54, undef55, undef56, undef57, 

Undef variables:
undef1, undef2, undef4, undef5, undef6, undef7, undef9, undef10, undef11, undef12, undef13, undef14, undef15, undef16, undef17, undef18, undef19, undef20, undef21, undef22, undef23, undef24, undef25, undef26, undef27, undef28, undef29, undef30, undef31, undef32, undef33, undef34, undef35, undef36, undef37, undef38, undef39, undef41, undef42, undef43, undef44, undef45, undef46, undef47, undef48, undef49, undef50, undef51, undef52, undef53, undef54, undef55, undef56, undef57, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l2, (arg1 = undef1) /\ (arg2 = undef2) /\ (arg3 = (undef5 - 2)) /\ (arg4 = undef4) /\ (undef5 > ~(1)) /\ (undef55 > 0) /\ ((undef1 - 1) <= undef54) /\ ((undef2 - 1) <= undef54) /\ (undef54 > 0) /\ (undef1 > 1) /\ (undef2 > 1)>
<l2, l2, (undef6 <= arg1) /\ (arg3 > 0) /\ ((undef7 - 2) <= arg2) /\ (arg1 > 0) /\ (arg2 > 0) /\ (undef6 > 0) /\ (undef7 > 2), par{arg1 -> undef6, arg2 -> undef7, arg3 -> (arg3 - 1), arg4 -> undef9}>
<l2, l4, (undef10 <= arg1) /\ (arg3 < 1) /\ (undef10 <= arg2) /\ (undef11 <= arg1) /\ (undef11 <= arg2) /\ (arg1 > 1) /\ (arg2 > 1) /\ (undef10 > 1) /\ (undef11 > 1), par{arg1 -> undef10, arg2 -> undef11, arg3 -> undef12, arg4 -> undef13}>
<l2, l4, (undef14 <= arg1) /\ (arg3 < 1) /\ ((undef14 - 1) <= arg2) /\ (arg1 > 1) /\ (arg2 > 0) /\ (undef14 > 1) /\ (undef15 > ~(1)), par{arg1 -> undef14, arg2 -> undef15, arg3 -> undef16, arg4 -> undef17}>
<l2, l4, (undef18 <= arg1) /\ (arg3 < 1) /\ ((undef18 - 1) <= arg2) /\ (arg1 > 1) /\ (arg2 > 0) /\ (undef18 > 1) /\ (undef19 > 0), par{arg1 -> undef18, arg2 -> undef19, arg3 -> undef20, arg4 -> undef21}>
<l2, l5, (undef22 <= arg1) /\ (arg3 < 1) /\ ((undef22 - 1) <= arg2) /\ (arg1 > 1) /\ (arg2 > 0) /\ (undef22 > 1) /\ (undef23 > 0), par{arg1 -> undef22, arg2 -> undef23, arg3 -> undef24, arg4 -> undef25}>
<l4, l4, ((undef26 + 1) <= arg2) /\ (undef27 <= arg2) /\ (undef28 <= arg1) /\ ((undef29 + 1) <= arg2) /\ (arg1 > 0) /\ (arg2 > 0) /\ (undef26 > ~(1)) /\ (undef27 > 0) /\ (undef28 > 0) /\ (undef29 > ~(1)) /\ (undef31 <= undef26) /\ ((undef31 + 1) <= undef27) /\ (undef31 <= undef29) /\ (undef26 > ~(1)) /\ (undef27 > 0) /\ (undef28 > 0) /\ (undef29 > ~(1)) /\ (undef30 > 2) /\ (undef31 > ~(1)), par{arg1 -> undef30, arg2 -> undef31, arg3 -> undef32, arg4 -> undef33}>
<l4, l4, ((undef26 + 1) <= arg2) /\ (undef27 <= arg2) /\ (undef28 <= arg1) /\ ((undef29 + 1) <= arg2) /\ (arg1 > 0) /\ (arg2 > 0) /\ (undef26 > ~(1)) /\ (undef27 > 0) /\ (undef28 > 0) /\ (undef29 > ~(1)) /\ ((undef34 - 3) <= undef26) /\ ((undef34 - 2) <= undef27) /\ ((undef34 - 2) <= undef28) /\ ((undef34 - 3) <= undef29) /\ (undef35 <= undef26) /\ ((undef35 + 1) <= undef27) /\ ((undef35 + 1) <= undef28) /\ (undef35 <= undef29) /\ (undef26 > ~(1)) /\ (undef27 > 0) /\ (undef28 > 0) /\ (undef29 > ~(1)) /\ (undef34 > 2) /\ (undef35 > ~(1)), par{arg1 -> undef34, arg2 -> undef35, arg3 -> undef36, arg4 -> undef37}>
<l5, l5, (arg3 > 0) /\ (arg4 > 0) /\ (undef41 < arg4) /\ ((undef38 - 2) <= arg1) /\ (arg1 > 0) /\ (arg2 > 2) /\ (undef38 > 2) /\ (undef39 > 0), par{arg1 -> undef38, arg2 -> undef39, arg4 -> undef41}>
<l5, l4, (undef46 > 0) /\ (undef47 > ~(1)) /\ (undef46 < undef47) /\ ((undef44 - 2) <= arg1) /\ (arg1 > 0) /\ (arg2 > 2) /\ (undef42 > ~(1)) /\ (undef43 > 0) /\ (undef44 > 2) /\ (undef45 > ~(1)) /\ (undef31 <= undef42) /\ ((undef31 + 1) <= undef43) /\ (undef31 <= undef45) /\ (undef42 > ~(1)) /\ (undef43 > 0) /\ (undef44 > 0) /\ (undef45 > ~(1)) /\ (undef30 > 2) /\ (undef31 > ~(1)), par{arg1 -> undef30, arg2 -> undef31, arg3 -> undef32, arg4 -> undef33}>
<l5, l4, (undef46 > 0) /\ (undef47 > ~(1)) /\ (undef46 < undef47) /\ ((undef44 - 2) <= arg1) /\ (arg1 > 0) /\ (arg2 > 2) /\ (undef42 > ~(1)) /\ (undef43 > 0) /\ (undef44 > 2) /\ (undef45 > ~(1)) /\ ((undef34 - 3) <= undef42) /\ ((undef34 - 2) <= undef43) /\ ((undef34 - 2) <= undef44) /\ ((undef34 - 3) <= undef45) /\ (undef35 <= undef42) /\ ((undef35 + 1) <= undef43) /\ ((undef35 + 1) <= undef44) /\ (undef35 <= undef45) /\ (undef42 > ~(1)) /\ (undef43 > 0) /\ (undef44 > 0) /\ (undef45 > ~(1)) /\ (undef34 > 2) /\ (undef35 > ~(1)), par{arg1 -> undef34, arg2 -> undef35, arg3 -> undef36, arg4 -> undef37}>
<l5, l4, (undef52 > ~(1)) /\ (undef53 < undef52) /\ ((undef48 - 2) <= arg1) /\ (undef48 <= arg2) /\ (undef49 <= arg1) /\ (arg1 > 0) /\ (arg2 > 2) /\ (undef48 > 2) /\ (undef49 > 0), par{arg1 -> undef48, arg2 -> undef49, arg3 -> undef50, arg4 -> undef51}>

Fresh variables:
undef1, undef2, undef4, undef5, undef6, undef7, undef9, undef10, undef11, undef12, undef13, undef14, undef15, undef16, undef17, undef18, undef19, undef20, undef21, undef22, undef23, undef24, undef25, undef26, undef27, undef28, undef29, undef30, undef31, undef32, undef33, undef34, undef35, undef36, undef37, undef38, undef39, undef41, undef42, undef43, undef44, undef45, undef46, undef47, undef48, undef49, undef50, undef51, undef52, undef53, undef54, undef55, undef56, undef57, 

Undef variables:
undef1, undef2, undef4, undef5, undef6, undef7, undef9, undef10, undef11, undef12, undef13, undef14, undef15, undef16, undef17, undef18, undef19, undef20, undef21, undef22, undef23, undef24, undef25, undef26, undef27, undef28, undef29, undef30, undef31, undef32, undef33, undef34, undef35, undef36, undef37, undef38, undef39, undef41, undef42, undef43, undef44, undef45, undef46, undef47, undef48, undef49, undef50, undef51, undef52, undef53, undef54, undef55, undef56, undef57, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l2, l2, 1 <= arg1 /\ 1 <= arg2 /\ 1 <= arg3 /\ 1 <= undef6 /\ undef6 <= arg1 /\ 3 <= undef7 /\ undef7 <= 2 + arg2, {arg1 -> undef6, arg2 -> undef7, arg3 -> -1 + arg3, arg4 -> undef9, rest remain the same}>
Variables:
arg1, arg2, arg3, arg4

Graph 2:
Transitions:
<l5, l5, 1 <= arg1 /\ 1 <= arg3 /\ 1 <= arg4 /\ 1 + undef41 <= arg4 /\ 1 <= undef39 /\ 3 <= arg2 /\ 3 <= undef38 /\ undef38 <= 2 + arg1, {arg1 -> undef38, arg2 -> undef39, arg4 -> undef41, rest remain the same}>
Variables:
arg1, arg2, arg3, arg4

Graph 3:
Transitions:
<l4, l4, 1 <= arg1 /\ 1 <= arg2 /\ 1 + undef26 <= arg2 /\ 1 + undef29 <= arg2 /\ 1 <= undef27 /\ 1 + undef31 <= undef27 /\ 1 <= undef28 /\ undef28 <= arg1 /\ undef27 <= arg2 /\ 0 <= undef26 /\ undef31 <= undef26 /\ 0 <= undef29 /\ undef31 <= undef29 /\ 0 <= undef31 /\ 3 <= undef30, {arg1 -> undef30, arg2 -> undef31, arg3 -> undef32, arg4 -> undef33, rest remain the same}>
<l4, l4, 1 <= arg1 /\ 1 <= arg2 /\ 1 + undef26 <= arg2 /\ 1 + undef29 <= arg2 /\ 1 <= undef27 /\ 1 + undef35 <= undef27 /\ 1 <= undef28 /\ 1 + undef35 <= undef28 /\ undef28 <= arg1 /\ undef27 <= arg2 /\ 0 <= undef26 /\ undef35 <= undef26 /\ 0 <= undef29 /\ undef35 <= undef29 /\ 0 <= undef35 /\ 3 <= undef34 /\ undef34 <= 2 + undef27 /\ undef34 <= 2 + undef28 /\ undef34 <= 3 + undef26 /\ undef34 <= 3 + undef29, {arg1 -> undef34, arg2 -> undef35, arg3 -> undef36, arg4 -> undef37, rest remain the same}>
Variables:
arg1, arg2, arg3, arg4

Precedence: 
Graph 0

Graph 1
<l0, l2, 1 <= undef54 /\ 1 <= undef55 /\ undef1 <= 1 + undef54 /\ undef2 <= 1 + undef54 /\ 0 <= undef5 /\ 2 <= undef1 /\ 2 <= undef2 /\ arg1 = undef1 /\ arg2 = undef2 /\ arg4 = undef4 /\ 2 + arg3 = undef5, {all remain the same}>

Graph 2
<l2, l5, 1 <= arg2 /\ 1 <= undef23 /\ undef22 <= 1 + arg2 /\ undef22 <= arg1 /\ arg3 <= 0 /\ 2 <= arg1 /\ 2 <= undef22, {arg1 -> undef22, arg2 -> undef23, arg3 -> undef24, arg4 -> undef25, rest remain the same}>

Graph 3
<l2, l4, undef10 <= arg1 /\ undef11 <= arg1 /\ undef10 <= arg2 /\ undef11 <= arg2 /\ arg3 <= 0 /\ 2 <= arg1 /\ 2 <= arg2 /\ 2 <= undef10 /\ 2 <= undef11, {arg1 -> undef10, arg2 -> undef11, arg3 -> undef12, arg4 -> undef13, rest remain the same}>
<l2, l4, 1 <= arg2 /\ undef14 <= 1 + arg2 /\ undef14 <= arg1 /\ arg3 <= 0 /\ 0 <= undef15 /\ 2 <= arg1 /\ 2 <= undef14, {arg1 -> undef14, arg2 -> undef15, arg3 -> undef16, arg4 -> undef17, rest remain the same}>
<l2, l4, 1 <= arg2 /\ 1 <= undef19 /\ undef18 <= 1 + arg2 /\ undef18 <= arg1 /\ arg3 <= 0 /\ 2 <= arg1 /\ 2 <= undef18, {arg1 -> undef18, arg2 -> undef19, arg3 -> undef20, arg4 -> undef21, rest remain the same}>
<l5, l4, 1 <= arg1 /\ 1 + undef31 <= undef43 /\ 1 <= undef43 /\ 1 + undef46 <= undef47 /\ 1 <= undef46 /\ undef31 <= undef42 /\ undef31 <= undef45 /\ 0 <= undef31 /\ 0 <= undef42 /\ 0 <= undef45 /\ 0 <= undef47 /\ 3 <= arg2 /\ 3 <= undef30 /\ 3 <= undef44 /\ undef44 <= 2 + arg1, {arg1 -> undef30, arg2 -> undef31, arg3 -> undef32, arg4 -> undef33, rest remain the same}>
<l5, l4, 1 <= arg1 /\ 1 + undef35 <= undef43 /\ 1 + undef35 <= undef44 /\ 1 <= undef43 /\ 1 + undef46 <= undef47 /\ 1 <= undef46 /\ undef35 <= undef42 /\ undef35 <= undef45 /\ 0 <= undef35 /\ 0 <= undef42 /\ 0 <= undef45 /\ 0 <= undef47 /\ 3 <= arg2 /\ 3 <= undef34 /\ 3 <= undef44 /\ undef44 <= 2 + arg1 /\ undef34 <= 2 + undef43 /\ undef34 <= 2 + undef44 /\ undef34 <= 3 + undef42 /\ undef34 <= 3 + undef45, {arg1 -> undef34, arg2 -> undef35, arg3 -> undef36, arg4 -> undef37, rest remain the same}>
<l5, l4, 1 <= arg1 /\ 1 <= undef49 /\ 1 + undef53 <= undef52 /\ undef49 <= arg1 /\ undef48 <= arg2 /\ 0 <= undef52 /\ 3 <= arg2 /\ 3 <= undef48 /\ undef48 <= 2 + arg1, {arg1 -> undef48, arg2 -> undef49, arg3 -> undef50, arg4 -> undef51, rest remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 2 , 1 )
( 4 , 3 )
( 5 , 2 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.002206

Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000656s
[33mRanking function: [36m-1 + arg3[0m
New Graphs: 
Proving termination of subgraph 2
Checking unfeasibility...
Time used: 0.001818

Checking conditional termination of SCC {l5}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000722s
[33mRanking function: [36m-1 + arg4[0m
New Graphs: 
Proving termination of subgraph 3
Checking unfeasibility...
Time used: 0.006532

Checking conditional termination of SCC {l4}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.002405s
[33mRanking function: [36m-1 + arg2[0m
New Graphs: 
[32mProgram Terminates[0m

