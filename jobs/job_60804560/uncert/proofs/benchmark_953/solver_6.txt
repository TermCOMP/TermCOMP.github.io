YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l9, true>
<l1, l2, (undef14 = undef14) /\ (undef15 = undef15) /\ (undef12 = undef12) /\ (undef13 = undef13) /\ (undef34 = undef34) /\ (undef33 = undef33) /\ (undef35 = undef35) /\ (undef11 = undef11) /\ (undef36 = undef36) /\ (undef37 = undef37) /\ (undef40 = (0 + undef36)) /\ (undef31 = undef31) /\ (undef38 = undef38) /\ (undef39 = undef39) /\ (undef1 = undef1), par{Result_4^0 -> undef1, devExt_7^0 -> undef11, i_12^0 -> undef12, irp_11^0 -> undef13, loop_count_14^0 -> undef14, loop_max_13^0 -> undef15, lt_50^0 -> (0 + undef36), lt_51^0 -> undef31, nPacketsOld_9^0 -> undef33, nPackets_10^0 -> undef34, request_8^0 -> undef35, tmp_15^0 -> undef36, tmp___0_16^0 -> undef37, tmp___1_17^0 -> undef38, tmp___2_18^0 -> undef39}>
<l2, l4, (undef70 = undef70) /\ (undef84 = (0 + cnt_94^0)) /\ (undef69 = undef69) /\ (undef82 = (0 + lt_90^0)) /\ (undef83 = (0 + tmp___0_16^0)) /\ (undef67 = undef67) /\ (undef68 = undef68) /\ (undef80 = (0 + cnt_117^0)) /\ (undef81 = (0 + cnt_122^0)) /\ (0 <= ((~(1) + (~(1) * undef80)) + undef81)) /\ (undef65 = undef65) /\ (undef66 = undef66), par{lt_44^0 -> (0 + lt_113^0), lt_45^0 -> undef65, lt_46^0 -> undef66, lt_47^0 -> undef67, lt_48^0 -> undef68, lt_49^0 -> undef69, lt_50^0 -> undef70}>
<l4, l5, (undef87 = __disjvr_0^0) /\ (__disjvr_0^0 = undef87), par{__disjvr_0^0 -> undef87}>
<l5, l6, (undef147 = undef147), par{lt_42^0 -> (0 + lt_113^0), lt_43^0 -> (0 + cnt_187^0), lt_44^0 -> undef147}>
<l6, l7, (undef166 = __disjvr_1^0) /\ (__disjvr_1^0 = undef166), par{__disjvr_1^0 -> undef166}>
<l7, l3, (undef223 = undef223) /\ (undef224 = undef224) /\ (undef241 = (0 + lt_113^0)) /\ (undef242 = (0 + cnt_198^0)) /\ (undef243 = (0 + lt_90^0)) /\ (undef220 = undef220) /\ (undef221 = undef221) /\ (undef222 = undef222) /\ (undef202 = undef202), par{Result_4^0 -> undef202, lt_38^0 -> (0 + lt_90^0), lt_39^0 -> undef220, lt_40^0 -> undef221, lt_41^0 -> undef222, lt_42^0 -> undef223, lt_43^0 -> undef224}>
<l2, l8, (undef273 = undef273) /\ (undef289 = (0 + cnt_94^0)) /\ (undef272 = undef272) /\ (undef287 = (0 + lt_90^0)) /\ (undef288 = (0 + tmp___0_16^0)) /\ (undef270 = undef270) /\ (undef271 = undef271) /\ (undef285 = (0 + cnt_117^0)) /\ (undef286 = (0 + cnt_122^0)) /\ (((0 + (~(1) * undef285)) + undef286) <= 0) /\ (undef268 = undef268) /\ (undef269 = undef269) /\ (undef284 = (0 + lt_90^0)) /\ (undef283 = undef283) /\ (undef260 = undef260) /\ (undef248 = 0) /\ (undef245 = (0 + undef248)), par{Result_4^0 -> (0 + undef245), __cil_tmp6_20^0 -> undef245, __retres5_19^0 -> undef248, lt_21^0 -> undef260, lt_45^0 -> undef268, lt_46^0 -> undef269, lt_47^0 -> undef270, lt_48^0 -> undef271, lt_49^0 -> undef272, lt_50^0 -> undef273}>
<l9, l1, true>

Fresh variables:
undef1, undef11, undef12, undef13, undef14, undef15, undef31, undef33, undef34, undef35, undef36, undef37, undef38, undef39, undef40, undef65, undef66, undef67, undef68, undef69, undef70, undef80, undef81, undef82, undef83, undef84, undef87, undef147, undef166, undef202, undef220, undef221, undef222, undef223, undef224, undef241, undef242, undef243, undef245, undef248, undef260, undef268, undef269, undef270, undef271, undef272, undef273, undef283, undef284, undef285, undef286, undef287, undef288, undef289, 

Undef variables:
undef1, undef11, undef12, undef13, undef14, undef15, undef31, undef33, undef34, undef35, undef36, undef37, undef38, undef39, undef40, undef65, undef66, undef67, undef68, undef69, undef70, undef80, undef81, undef82, undef83, undef84, undef87, undef147, undef166, undef202, undef220, undef221, undef222, undef223, undef224, undef241, undef242, undef243, undef245, undef248, undef260, undef268, undef269, undef270, undef271, undef272, undef273, undef283, undef284, undef285, undef286, undef287, undef288, undef289, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l3, (undef14 = undef14) /\ (undef15 = undef15) /\ (undef12 = undef12) /\ (undef13 = undef13) /\ (undef34 = undef34) /\ (undef33 = undef33) /\ (undef35 = undef35) /\ (undef11 = undef11) /\ (undef36 = undef36) /\ (undef37 = undef37) /\ (undef40 = (0 + undef36)) /\ (undef31 = undef31) /\ (undef38 = undef38) /\ (undef39 = undef39) /\ (undef1 = undef1) /\ (undef70 = undef70) /\ (undef84 = (0 + cnt_94^0)) /\ (undef69 = undef69) /\ (undef82 = (0 + lt_90^0)) /\ (undef83 = (0 + undef37)) /\ (undef67 = undef67) /\ (undef68 = undef68) /\ (undef80 = (0 + cnt_117^0)) /\ (undef81 = (0 + cnt_122^0)) /\ (0 <= ((~(1) + (~(1) * undef80)) + undef81)) /\ (undef65 = undef65) /\ (undef66 = undef66) /\ (undef87 = __disjvr_0^0) /\ (__disjvr_0^0 = undef87) /\ (undef147 = undef147) /\ (undef166 = __disjvr_1^0) /\ (__disjvr_1^0 = undef166) /\ (undef223 = undef223) /\ (undef224 = undef224) /\ (undef241 = (0 + lt_113^0)) /\ (undef242 = (0 + cnt_198^0)) /\ (undef243 = (0 + lt_90^0)) /\ (undef220 = undef220) /\ (undef221 = undef221) /\ (undef222 = undef222) /\ (undef202 = undef202), par{__disjvr_0^0 -> undef87, __disjvr_1^0 -> undef166}>
<l0, l8, (undef14 = undef14) /\ (undef15 = undef15) /\ (undef12 = undef12) /\ (undef13 = undef13) /\ (undef34 = undef34) /\ (undef33 = undef33) /\ (undef35 = undef35) /\ (undef11 = undef11) /\ (undef36 = undef36) /\ (undef37 = undef37) /\ (undef40 = (0 + undef36)) /\ (undef31 = undef31) /\ (undef38 = undef38) /\ (undef39 = undef39) /\ (undef1 = undef1) /\ (undef273 = undef273) /\ (undef289 = (0 + cnt_94^0)) /\ (undef272 = undef272) /\ (undef287 = (0 + lt_90^0)) /\ (undef288 = (0 + undef37)) /\ (undef270 = undef270) /\ (undef271 = undef271) /\ (undef285 = (0 + cnt_117^0)) /\ (undef286 = (0 + cnt_122^0)) /\ (((0 + (~(1) * undef285)) + undef286) <= 0) /\ (undef268 = undef268) /\ (undef269 = undef269) /\ (undef284 = (0 + lt_90^0)) /\ (undef283 = undef283) /\ (undef260 = undef260) /\ (undef248 = 0) /\ (undef245 = (0 + undef248))>

Fresh variables:
undef1, undef11, undef12, undef13, undef14, undef15, undef31, undef33, undef34, undef35, undef36, undef37, undef38, undef39, undef40, undef65, undef66, undef67, undef68, undef69, undef70, undef80, undef81, undef82, undef83, undef84, undef87, undef147, undef166, undef202, undef220, undef221, undef222, undef223, undef224, undef241, undef242, undef243, undef245, undef248, undef260, undef268, undef269, undef270, undef271, undef272, undef273, undef283, undef284, undef285, undef286, undef287, undef288, undef289, 

Undef variables:
undef1, undef11, undef12, undef13, undef14, undef15, undef31, undef33, undef34, undef35, undef36, undef37, undef38, undef39, undef40, undef65, undef66, undef67, undef68, undef69, undef70, undef80, undef81, undef82, undef83, undef84, undef87, undef147, undef166, undef202, undef220, undef221, undef222, undef223, undef224, undef241, undef242, undef243, undef245, undef248, undef260, undef268, undef269, undef270, undef271, undef272, undef273, undef283, undef284, undef285, undef286, undef287, undef288, undef289, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
Variables:

Graph 2:
Transitions:
Variables:

Precedence: 
Graph 0

Graph 1
<l0, l8, undef286 <= undef285 /\ cnt_117^0 = undef285 /\ cnt_122^0 = undef286 /\ cnt_94^0 = undef289 /\ lt_90^0 = undef284 /\ lt_90^0 = undef287 /\ undef36 = undef40 /\ undef37 = undef288 /\ undef245 = undef248 /\ undef248 = 0, {all remain the same}>

Graph 2
<l0, l3, 1 + undef80 <= undef81 /\ __disjvr_0^0 = undef87 /\ __disjvr_1^0 = undef166 /\ cnt_117^0 = undef80 /\ cnt_122^0 = undef81 /\ cnt_198^0 = undef242 /\ cnt_94^0 = undef84 /\ lt_113^0 = undef241 /\ lt_90^0 = undef82 /\ lt_90^0 = undef243 /\ undef36 = undef40 /\ undef37 = undef83, {__disjvr_0^0 -> undef87, __disjvr_1^0 -> undef166, rest remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 3 , 2 )
( 8 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Analyzing SCC {l8}...
No cycles found.

Proving termination of subgraph 2
Analyzing SCC {l3}...
No cycles found.

[32mProgram Terminates[0m

