YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l1, true>
<l3, l2, ((undef1 - 3) <= arg1) /\ (arg2 > ~(1)) /\ (arg1 > 0) /\ (undef1 > 3), par{arg1 -> undef1, arg2 -> undef2}>
<l2, l2, ((undef3 + 1) <= arg1) /\ (arg1 > 0) /\ (undef3 > ~(1)), par{arg1 -> undef3, arg2 -> undef4}>
<l1, l3, true, par{arg1 -> undef5, arg2 -> undef6}>

Fresh variables:
undef1, undef2, undef3, undef4, undef5, undef6, 

Undef variables:
undef1, undef2, undef3, undef4, undef5, undef6, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l2, (arg1 = undef1) /\ ((undef1 - 3) <= undef5) /\ (undef6 > ~(1)) /\ (undef5 > 0) /\ (undef1 > 3)>
<l2, l2, ((undef3 + 1) <= arg1) /\ (arg1 > 0) /\ (undef3 > ~(1)), par{arg1 -> undef3}>

Fresh variables:
undef1, undef2, undef3, undef4, undef5, undef6, 

Undef variables:
undef1, undef2, undef3, undef4, undef5, undef6, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l2, l2, 1 <= arg1 /\ 1 + undef3 <= arg1 /\ 0 <= undef3, {arg1 -> undef3, rest remain the same}>
Variables:
arg1

Precedence: 
Graph 0

Graph 1
<l0, l2, 1 <= undef5 /\ 0 <= undef6 /\ undef1 <= 3 + undef5 /\ 4 <= undef1 /\ arg1 = undef1, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 2 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.000931

Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000347s
[33mRanking function: [36m-1 + arg1[0m
New Graphs: 
[32mProgram Terminates[0m

