YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l1, true>
<l3, l2, (undef1 > ~(1)) /\ (arg2 > 0) /\ (arg1 > 0), par{arg1 -> undef1, arg2 -> undef2, arg3 -> undef3}>
<l3, l4, (undef7 > ~(1)) /\ (arg2 > 0) /\ (undef4 <= arg1) /\ (arg1 > 0) /\ (undef4 > 0) /\ (undef5 > 3), par{arg1 -> undef4, arg2 -> undef5, arg3 -> 0}>
<l3, l4, (undef11 > ~(1)) /\ (arg2 > 0) /\ (arg1 >= undef8) /\ (arg1 >= (undef9 - 1)) /\ (arg1 > 0) /\ (undef8 > 0) /\ (undef9 > 1), par{arg1 -> undef8, arg2 -> undef9, arg3 -> 0}>
<l2, l2, (arg1 > ~(1)) /\ ((arg1 - 1) < arg1), par{arg1 -> (arg1 - 1), arg2 -> undef13, arg3 -> undef14}>
<l4, l5, (undef15 <= arg2) /\ (undef18 > 0) /\ ((undef16 + 2) <= arg2) /\ (arg1 > 0) /\ (arg2 > 1) /\ (undef15 > 1) /\ (undef16 > ~(1)) /\ (0 = arg3), par{arg1 -> undef15, arg2 -> undef16, arg3 -> 0}>
<l5, l5, ((undef19 + 2) <= arg1) /\ (arg3 < 0) /\ (undef19 <= arg2) /\ ((undef20 + 3) <= arg1) /\ ((undef20 + 1) <= arg2) /\ (arg1 > 2) /\ (arg2 > 0) /\ (undef19 > 0) /\ (undef20 > ~(1)) /\ ((undef21 + 4) <= arg1) /\ ((arg3 + 2) <= arg1) /\ ((undef21 + 2) <= arg2), par{arg1 -> undef19, arg2 -> undef20, arg3 -> undef21}>
<l5, l5, ((undef22 + 2) <= arg1) /\ (arg3 > 0) /\ (undef22 <= arg2) /\ ((undef23 + 3) <= arg1) /\ ((undef23 + 1) <= arg2) /\ (arg1 > 2) /\ (arg2 > 0) /\ (undef22 > 0) /\ (undef23 > ~(1)) /\ ((undef24 + 4) <= arg1) /\ ((arg3 + 2) <= arg1) /\ ((undef24 + 2) <= arg2), par{arg1 -> undef22, arg2 -> undef23, arg3 -> undef24}>
<l5, l5, (undef25 <= arg1) /\ ((undef25 - 2) <= arg2) /\ ((undef26 + 2) <= arg1) /\ (undef26 <= arg2) /\ (arg1 > 2) /\ (arg2 > 0) /\ (undef25 > 2) /\ (undef26 > 0) /\ (0 = arg3), par{arg1 -> undef25, arg2 -> undef26, arg3 -> 1}>
<l1, l3, true, par{arg1 -> undef28, arg2 -> undef29, arg3 -> undef30}>

Fresh variables:
undef1, undef2, undef3, undef4, undef5, undef7, undef8, undef9, undef11, undef13, undef14, undef15, undef16, undef18, undef19, undef20, undef21, undef22, undef23, undef24, undef25, undef26, undef28, undef29, undef30, 

Undef variables:
undef1, undef2, undef3, undef4, undef5, undef7, undef8, undef9, undef11, undef13, undef14, undef15, undef16, undef18, undef19, undef20, undef21, undef22, undef23, undef24, undef25, undef26, undef28, undef29, undef30, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l2, (undef1 > ~(1)) /\ (undef29 > 0) /\ (undef28 > 0), par{arg1 -> undef1, arg2 -> undef2, arg3 -> undef3}>
<l0, l5, (undef7 > ~(1)) /\ (undef29 > 0) /\ (undef4 <= undef28) /\ (undef28 > 0) /\ (undef4 > 0) /\ (undef5 > 3) /\ (undef15 <= undef5) /\ (undef18 > 0) /\ ((undef16 + 2) <= undef5) /\ (undef4 > 0) /\ (undef5 > 1) /\ (undef15 > 1) /\ (undef16 > ~(1)) /\ (0 = 0), par{arg1 -> undef15, arg2 -> undef16, arg3 -> 0}>
<l0, l5, (undef11 > ~(1)) /\ (undef29 > 0) /\ (undef28 >= undef8) /\ (undef28 >= (undef9 - 1)) /\ (undef28 > 0) /\ (undef8 > 0) /\ (undef9 > 1) /\ (undef15 <= undef9) /\ (undef18 > 0) /\ ((undef16 + 2) <= undef9) /\ (undef8 > 0) /\ (undef9 > 1) /\ (undef15 > 1) /\ (undef16 > ~(1)) /\ (0 = 0), par{arg1 -> undef15, arg2 -> undef16, arg3 -> 0}>
<l2, l2, (arg1 > ~(1)) /\ ((arg1 - 1) < arg1), par{arg1 -> (arg1 - 1), arg2 -> undef13, arg3 -> undef14}>
<l5, l5, ((undef19 + 2) <= arg1) /\ (arg3 < 0) /\ (undef19 <= arg2) /\ ((undef20 + 3) <= arg1) /\ ((undef20 + 1) <= arg2) /\ (arg1 > 2) /\ (arg2 > 0) /\ (undef19 > 0) /\ (undef20 > ~(1)) /\ ((undef21 + 4) <= arg1) /\ ((arg3 + 2) <= arg1) /\ ((undef21 + 2) <= arg2), par{arg1 -> undef19, arg2 -> undef20, arg3 -> undef21}>
<l5, l5, ((undef22 + 2) <= arg1) /\ (arg3 > 0) /\ (undef22 <= arg2) /\ ((undef23 + 3) <= arg1) /\ ((undef23 + 1) <= arg2) /\ (arg1 > 2) /\ (arg2 > 0) /\ (undef22 > 0) /\ (undef23 > ~(1)) /\ ((undef24 + 4) <= arg1) /\ ((arg3 + 2) <= arg1) /\ ((undef24 + 2) <= arg2), par{arg1 -> undef22, arg2 -> undef23, arg3 -> undef24}>
<l5, l5, (undef25 <= arg1) /\ ((undef25 - 2) <= arg2) /\ ((undef26 + 2) <= arg1) /\ (undef26 <= arg2) /\ (arg1 > 2) /\ (arg2 > 0) /\ (undef25 > 2) /\ (undef26 > 0) /\ (0 = arg3), par{arg1 -> undef25, arg2 -> undef26, arg3 -> 1}>

Fresh variables:
undef1, undef2, undef3, undef4, undef5, undef7, undef8, undef9, undef11, undef13, undef14, undef15, undef16, undef18, undef19, undef20, undef21, undef22, undef23, undef24, undef25, undef26, undef28, undef29, undef30, 

Undef variables:
undef1, undef2, undef3, undef4, undef5, undef7, undef8, undef9, undef11, undef13, undef14, undef15, undef16, undef18, undef19, undef20, undef21, undef22, undef23, undef24, undef25, undef26, undef28, undef29, undef30, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l5, l5, 1 <= arg2 /\ 1 + undef20 <= arg2 /\ 1 + arg3 <= 0 /\ 1 <= undef19 /\ undef19 <= arg2 /\ 0 <= undef20 /\ 3 <= arg1 /\ 3 + undef20 <= arg1 /\ 2 + arg3 <= arg1 /\ 2 + undef19 <= arg1 /\ 2 + undef21 <= arg2 /\ 4 + undef21 <= arg1, {arg1 -> undef19, arg2 -> undef20, arg3 -> undef21, rest remain the same}>
<l5, l5, 1 <= arg2 /\ 1 + undef23 <= arg2 /\ 1 <= arg3 /\ 1 <= undef22 /\ undef22 <= arg2 /\ 0 <= undef23 /\ 3 <= arg1 /\ 3 + undef23 <= arg1 /\ 2 + arg3 <= arg1 /\ 2 + undef22 <= arg1 /\ 2 + undef24 <= arg2 /\ 4 + undef24 <= arg1, {arg1 -> undef22, arg2 -> undef23, arg3 -> undef24, rest remain the same}>
<l5, l5, 1 <= arg2 /\ 1 <= undef26 /\ undef25 <= arg1 /\ undef26 <= arg2 /\ 3 <= arg1 /\ 3 <= undef25 /\ 2 + undef26 <= arg1 /\ undef25 <= 2 + arg2 /\ arg3 = 0, {arg1 -> undef25, arg2 -> undef26, arg3 -> 1, rest remain the same}>
Variables:
arg1, arg2, arg3

Graph 2:
Transitions:
<l2, l2, 0 <= arg1, {arg1 -> -1 + arg1, arg2 -> undef13, arg3 -> undef14, rest remain the same}>
Variables:
arg1, arg2, arg3

Precedence: 
Graph 0

Graph 1
<l0, l5, 1 <= undef4 /\ 1 <= undef18 /\ 1 <= undef28 /\ 1 <= undef29 /\ undef4 <= undef28 /\ undef15 <= undef5 /\ 0 <= undef7 /\ 0 <= undef16 /\ 2 + undef16 <= undef5 /\ 2 <= undef15 /\ 4 <= undef5, {arg1 -> undef15, arg2 -> undef16, arg3 -> 0, rest remain the same}>
<l0, l5, 1 <= undef8 /\ 1 <= undef18 /\ 1 <= undef28 /\ 1 <= undef29 /\ undef9 <= 1 + undef28 /\ undef8 <= undef28 /\ undef15 <= undef9 /\ 0 <= undef11 /\ 0 <= undef16 /\ 2 <= undef9 /\ 2 + undef16 <= undef9 /\ 2 <= undef15, {arg1 -> undef15, arg2 -> undef16, arg3 -> 0, rest remain the same}>

Graph 2
<l0, l2, 1 <= undef28 /\ 1 <= undef29 /\ 0 <= undef1, {arg1 -> undef1, arg2 -> undef2, arg3 -> undef3, rest remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 2 , 2 )
( 5 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.008283

Checking conditional termination of SCC {l5}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.003595s
[33mRanking function: [36m(~(4) / 3) + (1 / 3)*arg1 + (1 / 3)*arg2[0m
New Graphs: 
Transitions:
<l5, l5, 1 <= arg2 /\ 1 <= undef26 /\ undef25 <= arg1 /\ undef26 <= arg2 /\ 3 <= arg1 /\ 3 <= undef25 /\ 2 + undef26 <= arg1 /\ undef25 <= 2 + arg2 /\ arg3 = 0, {arg1 -> undef25, arg2 -> undef26, arg3 -> 1, rest remain the same}>
Variables:
arg1, arg2, arg3
Checking conditional termination of SCC {l5}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000672s
[33mRanking function: [36m-arg3[0m
New Graphs: 
Proving termination of subgraph 2
Checking unfeasibility...
Time used: 0.000897

Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000575s
[33mRanking function: [36marg1[0m
New Graphs: 
[32mProgram Terminates[0m

