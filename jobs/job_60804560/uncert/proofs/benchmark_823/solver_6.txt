YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l8, true>
<l1, l2, (1 <= (0 + copied^0)) /\ ((0 + olde^0) <= (0 + e^0)) /\ ((0 + n^0) <= (0 + oldn^0))>
<l1, l3, ((0 + copied^0) <= 0) /\ (1 <= (0 + e^0)) /\ ((0 + n^0) <= 100), par{copied^0 -> 1, e^0 -> (1 + e^0), n^0 -> (11 + n^0), olde^0 -> (0 + e^0), oldn^0 -> (0 + n^0)}>
<l3, l1, true>
<l1, l4, ((0 + copied^0) <= 0) /\ (1 <= (0 + e^0)) /\ (101 <= (0 + n^0)), par{copied^0 -> 1, e^0 -> (~(1) + e^0), n^0 -> (~(10) + n^0), olde^0 -> (0 + e^0), oldn^0 -> (0 + n^0)}>
<l4, l1, true>
<l1, l5, (1 <= (0 + e^0)) /\ ((0 + n^0) <= 100), par{e^0 -> (1 + e^0), n^0 -> (11 + n^0)}>
<l5, l1, true>
<l1, l6, (1 <= (0 + e^0)) /\ (101 <= (0 + n^0)), par{e^0 -> (~(1) + e^0), n^0 -> (~(10) + n^0)}>
<l6, l1, true>
<l7, l1, (undef48 = undef48), par{copied^0 -> 0, e^0 -> 1, n^0 -> undef48}>
<l8, l7, true>

Fresh variables:
undef48, 

Undef variables:
undef48, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l1, (copied^0 = 0) /\ (e^0 = 1) /\ (n^0 = undef48) /\ (undef48 = undef48)>
<l1, l2, (1 <= (0 + copied^0)) /\ ((0 + olde^0) <= (0 + e^0)) /\ ((0 + n^0) <= (0 + oldn^0))>
<l1, l1, ((0 + copied^0) <= 0) /\ (1 <= (0 + e^0)) /\ ((0 + n^0) <= 100), par{copied^0 -> 1, e^0 -> (1 + e^0), n^0 -> (11 + n^0), olde^0 -> (0 + e^0), oldn^0 -> (0 + n^0)}>
<l1, l1, ((0 + copied^0) <= 0) /\ (1 <= (0 + e^0)) /\ (101 <= (0 + n^0)), par{copied^0 -> 1, e^0 -> (~(1) + e^0), n^0 -> (~(10) + n^0), olde^0 -> (0 + e^0), oldn^0 -> (0 + n^0)}>
<l1, l1, (1 <= (0 + e^0)) /\ ((0 + n^0) <= 100), par{e^0 -> (1 + e^0), n^0 -> (11 + n^0)}>
<l1, l1, (1 <= (0 + e^0)) /\ (101 <= (0 + n^0)), par{e^0 -> (~(1) + e^0), n^0 -> (~(10) + n^0)}>

Fresh variables:
undef48, 

Undef variables:
undef48, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l1, l1, 1 <= e^0 /\ copied^0 <= 0 /\ n^0 <= 100, {copied^0 -> 1, e^0 -> 1 + e^0, n^0 -> 11 + n^0, olde^0 -> e^0, oldn^0 -> n^0, rest remain the same}>
<l1, l1, 1 <= e^0 /\ copied^0 <= 0 /\ 101 <= n^0, {copied^0 -> 1, e^0 -> -1 + e^0, n^0 -> -10 + n^0, olde^0 -> e^0, oldn^0 -> n^0, rest remain the same}>
<l1, l1, 1 <= e^0 /\ n^0 <= 100, {e^0 -> 1 + e^0, n^0 -> 11 + n^0, rest remain the same}>
<l1, l1, 1 <= e^0 /\ 101 <= n^0, {e^0 -> -1 + e^0, n^0 -> -10 + n^0, rest remain the same}>
Variables:
copied^0, e^0, n^0, olde^0, oldn^0

Graph 2:
Transitions:
Variables:

Precedence: 
Graph 0

Graph 1
<l0, l1, copied^0 = 0 /\ n^0 = undef48 /\ e^0 = 1, {all remain the same}>

Graph 2
<l1, l2, 1 <= copied^0 /\ olde^0 <= e^0 /\ n^0 <= oldn^0, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 1 , 1 )
( 2 , 2 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.307135

Checking conditional termination of SCC {l1}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.003959s
[33mRanking function: [36m-copied^0[0m
New Graphs: 
Transitions:
<l1, l1, 1 <= e^0 /\ n^0 <= 100, {e^0 -> 1 + e^0, n^0 -> 11 + n^0, rest remain the same}>
<l1, l1, 1 <= e^0 /\ 101 <= n^0, {e^0 -> -1 + e^0, n^0 -> -10 + n^0, rest remain the same}>
Variables:
e^0, n^0
Checking conditional termination of SCC {l1}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000516s
[33mRanking function: [36m181 + 21*e^0 - 2*n^0[0m
New Graphs: 
Transitions:
<l1, l1, 1 <= e^0 /\ 101 <= n^0, {e^0 -> -1 + e^0, n^0 -> -10 + n^0, rest remain the same}>
Variables:
e^0, n^0
Checking conditional termination of SCC {l1}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000319s
[33mRanking function: [36m-1 + e^0[0m
New Graphs: 
Proving termination of subgraph 2
Analyzing SCC {l2}...
No cycles found.

[32mProgram Terminates[0m

