YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l6, true>
<l1, l2, (36 <= (0 + counter^0))>
<l1, l3, ((1 + counter^0) <= 36), par{counter^0 -> (1 + counter^0), z^0 -> (1 + z^0)}>
<l4, l3, ((0 + y^0) <= 127) /\ (undef9 = undef9), par{z^0 -> undef9}>
<l4, l2, (128 <= (0 + y^0))>
<l3, l1, true>
<l5, l4, true, par{counter^0 -> 0}>
<l6, l5, true>

Fresh variables:
undef9, 

Undef variables:
undef9, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l3, (counter^0 = 0) /\ ((0 + y^0) <= 127) /\ (undef9 = undef9), par{z^0 -> undef9}>
<l0, l2, (counter^0 = 0) /\ (128 <= (0 + y^0))>
<l3, l2, (36 <= (0 + counter^0))>
<l3, l3, ((1 + counter^0) <= 36), par{counter^0 -> (1 + counter^0), z^0 -> (1 + z^0)}>

Fresh variables:
undef9, 

Undef variables:
undef9, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l3, l3, counter^0 <= 35, {counter^0 -> 1 + counter^0, z^0 -> 1 + z^0, rest remain the same}>
Variables:
counter^0, z^0

Graph 2:
Transitions:
Variables:

Precedence: 
Graph 0

Graph 1
<l0, l3, y^0 <= 127 /\ counter^0 = 0, {z^0 -> undef9, rest remain the same}>

Graph 2
<l0, l2, 128 <= y^0 /\ counter^0 = 0, {all remain the same}>
<l3, l2, 36 <= counter^0, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 2 , 2 )
( 3 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.001018

Checking conditional termination of SCC {l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000312s
[33mRanking function: [36m35 - counter^0[0m
New Graphs: 
Proving termination of subgraph 2
Analyzing SCC {l2}...
No cycles found.

[32mProgram Terminates[0m

