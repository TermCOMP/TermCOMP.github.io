YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l1, true>
<l3, l2, (undef1 > ~(1)) /\ (arg2 > ~(1)) /\ (undef2 > ~(1)) /\ (arg1 > 0), par{arg1 -> undef1, arg2 -> undef2, arg3 -> (undef1 + undef2)}>
<l2, l2, (arg1 > 0) /\ (arg3 > 0) /\ (arg2 > ~(1)), par{arg1 -> (arg1 - 1), arg3 -> ((arg1 - 1) + arg2)}>
<l2, l2, (arg3 > 0) /\ (0 = arg1) /\ (0 = arg2), par{arg1 -> 0, arg2 -> 0, arg3 -> 0}>
<l2, l2, (arg3 > 0) /\ (arg2 > 0) /\ (0 = arg1), par{arg1 -> 0, arg2 -> (arg2 - 1), arg3 -> (arg2 - 1)}>
<l1, l3, true, par{arg1 -> undef13, arg2 -> undef14, arg3 -> undef15}>

Fresh variables:
undef1, undef2, undef13, undef14, undef15, 

Undef variables:
undef1, undef2, undef13, undef14, undef15, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l2, (arg1 = undef1) /\ (arg2 = undef2) /\ (arg3 = (undef1 + undef2)) /\ (undef1 > ~(1)) /\ (undef14 > ~(1)) /\ (undef2 > ~(1)) /\ (undef13 > 0)>
<l2, l2, (arg1 > 0) /\ (arg3 > 0) /\ (arg2 > ~(1)), par{arg1 -> (arg1 - 1), arg3 -> ((arg1 - 1) + arg2)}>
<l2, l2, (arg3 > 0) /\ (0 = arg1) /\ (0 = arg2), par{arg1 -> 0, arg2 -> 0, arg3 -> 0}>
<l2, l2, (arg3 > 0) /\ (arg2 > 0) /\ (0 = arg1), par{arg1 -> 0, arg2 -> (arg2 - 1), arg3 -> (arg2 - 1)}>

Fresh variables:
undef1, undef2, undef13, undef14, undef15, 

Undef variables:
undef1, undef2, undef13, undef14, undef15, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l2, l2, 1 <= arg1 /\ 1 <= arg3 /\ 0 <= arg2, {arg1 -> -1 + arg1, arg3 -> -1 + arg1 + arg2, rest remain the same}>
<l2, l2, 1 <= arg3 /\ arg1 = 0 /\ arg2 = 0, {arg1 -> 0, arg2 -> 0, arg3 -> 0, rest remain the same}>
<l2, l2, 1 <= arg2 /\ 1 <= arg3 /\ arg1 = 0, {arg1 -> 0, arg2 -> -1 + arg2, arg3 -> -1 + arg2, rest remain the same}>
Variables:
arg1, arg2, arg3

Precedence: 
Graph 0

Graph 1
<l0, l2, 1 <= undef13 /\ 0 <= undef1 /\ 0 <= undef2 /\ 0 <= undef14 /\ arg1 = undef1 /\ arg2 = undef2 /\ arg3 = undef1 + undef2, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 2 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.00546
[33mSome transition disabled by a set of invariant(s):[0m
[36mInvariant at l2: arg3 <= arg1 + arg2[0m

[33mStrengthening and disabling transitions...[0m
> It's unfeasible. Removing transition: 
<l2, l2, 1 <= arg3 /\ arg1 = 0 /\ arg2 = 0, {arg1 -> 0, arg2 -> 0, arg3 -> 0, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l2, l2, 1 <= arg1 /\ 1 <= arg3 /\ arg3 <= arg1 + arg2 /\ 0 <= arg2, {arg1 -> -1 + arg1, arg3 -> -1 + arg1 + arg2, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l2, l2, 1 <= arg2 /\ 1 <= arg3 /\ arg3 <= arg1 + arg2 /\ arg1 = 0, {arg1 -> 0, arg2 -> -1 + arg2, arg3 -> -1 + arg2, rest remain the same}>
Checking unfeasibility...
Time used: 0.002675

Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000805s
[33mRanking function: [36m-3 + 3*arg2[0m
New Graphs: 
Transitions:
<l2, l2, 1 <= arg1 /\ 1 <= arg3 /\ arg3 <= arg1 + arg2 /\ 0 <= arg2, {arg1 -> -1 + arg1, arg3 -> -1 + arg1 + arg2, rest remain the same}>
Variables:
arg1, arg2, arg3
Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000401s
[33mRanking function: [36m-1 + arg1[0m
New Graphs: 
[32mProgram Terminates[0m

