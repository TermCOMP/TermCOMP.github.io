YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l1, true>
<l3, l4, (arg1 > 0) /\ (arg2 > ~(1)), par{arg1 -> arg2, arg2 -> undef2}>
<l4, l4, (arg1 > 1) /\ ((arg1 - 1) < arg1), par{arg1 -> (arg1 - 1), arg2 -> undef4}>
<l4, l2, (2 = arg1), par{arg1 -> 2, arg2 -> 0}>
<l4, l2, (arg1 > 1) /\ ((arg1 - 1) < arg1), par{arg2 -> (arg1 - 2)}>
<l5, l2, (arg1 > 0), par{arg2 -> (arg1 - 2)}>
<l2, l4, (arg1 > 1) /\ (arg2 < arg1), par{arg1 -> arg2, arg2 -> undef12}>
<l1, l3, true, par{arg1 -> undef13, arg2 -> undef14}>

Fresh variables:
undef2, undef4, undef12, undef13, undef14, 

Undef variables:
undef2, undef4, undef12, undef13, undef14, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l4, (arg1 = undef14) /\ (undef13 > 0) /\ (undef14 > ~(1))>
<l4, l4, (arg1 > 1) /\ ((arg1 - 1) < arg1), par{arg1 -> (arg1 - 1)}>
<l4, l4, (2 = arg1) /\ (2 > 1) /\ (0 < 2), par{arg1 -> 0}>
<l4, l4, (arg1 > 1) /\ ((arg1 - 1) < arg1) /\ (arg1 > 1) /\ ((arg1 - 2) < arg1), par{arg1 -> (arg1 - 2)}>

Fresh variables:
undef2, undef4, undef12, undef13, undef14, 

Undef variables:
undef2, undef4, undef12, undef13, undef14, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l4, l4, 2 <= arg1, {arg1 -> -1 + arg1, rest remain the same}>
<l4, l4, arg1 = 2, {arg1 -> 0, rest remain the same}>
<l4, l4, 2 <= arg1, {arg1 -> -2 + arg1, rest remain the same}>
Variables:
arg1

Precedence: 
Graph 0

Graph 1
<l0, l4, 0 <= undef14 /\ 1 <= undef13 /\ arg1 = undef14, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 4 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.002541

Checking conditional termination of SCC {l4}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000558s
[33mRanking function: [36m-1 + (1 / 2)*arg1[0m
New Graphs: 
[32mProgram Terminates[0m

