YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l1, true>
<l2, l7, (undef1 <= arg1) /\ (arg2 > ~(1)) /\ (arg1 > 0) /\ (undef1 > 0), par{arg1 -> undef1, arg2 -> 0, arg3 -> arg2, arg4 -> undef4, arg5 -> undef5}>
<l7, l7, (arg3 > arg2) /\ (arg3 > 0) /\ (undef6 <= arg1) /\ (arg1 > 0) /\ (undef6 > 0), par{arg1 -> undef6, arg2 -> (arg2 + 1), arg4 -> undef9, arg5 -> undef10}>
<l7, l4, (arg3 > arg2) /\ (arg3 > 0) /\ (arg1 > 0), par{arg1 -> 0, arg2 -> arg3, arg3 -> undef13, arg4 -> undef14, arg5 -> undef15}>
<l4, l4, (arg2 >= arg1) /\ (arg1 > ~(1)) /\ (arg2 > 0), par{arg1 -> (arg1 + 1), arg3 -> undef18, arg4 -> undef19, arg5 -> undef20}>
<l4, l5, (arg2 > 0) /\ (arg2 >= arg1), par{arg2 -> 0, arg3 -> (2 * arg1), arg4 -> undef24, arg5 -> undef25}>
<l5, l5, (arg1 > ~(1)) /\ (arg3 >= arg2) /\ (arg2 > ~(1)), par{arg2 -> (arg2 + 1), arg4 -> undef29, arg5 -> undef30}>
<l5, l3, (arg1 > ~(1)) /\ (arg3 >= arg2) /\ (arg2 > ~(1)), par{arg3 -> (arg1 + arg2), arg4 -> undef34, arg5 -> undef35}>
<l3, l3, ((3 * arg2) >= 0) /\ (arg3 > ~(1)) /\ ((2 * arg1) >= 0) /\ (((2 * arg1) + (3 * arg2)) >= 0) /\ ((4 * arg3) >= 0), par{arg3 -> (arg3 - 1), arg4 -> undef39, arg5 -> undef40}>
<l3, l8, ((3 * arg2) >= 0) /\ (arg3 > ~(1)) /\ ((2 * arg1) >= 0) /\ (((2 * arg1) + (3 * arg2)) >= 0) /\ ((4 * arg3) >= 0), par{arg4 -> 0, arg5 -> (((2 * arg1) + (3 * arg2)) + (4 * arg3))}>
<l8, l8, ((100 * arg2) >= 0) /\ (arg5 >= arg4) /\ ((1000 * arg1) >= 0) /\ ((10 * arg3) >= 0) /\ (((1000 * arg1) + (100 * arg2)) >= 0) /\ (arg3 > ~(1)) /\ ((((1000 * arg1) + (100 * arg2)) + (10 * arg3)) >= 0) /\ (arg4 > ~(1)), par{arg4 -> (arg4 + 1)}>
<l8, l6, ((100 * arg2) >= 0) /\ (arg5 >= arg4) /\ ((1000 * arg1) >= 0) /\ ((10 * arg3) >= 0) /\ (((1000 * arg1) + (100 * arg2)) >= 0) /\ (arg3 > ~(1)) /\ (arg4 > ~(1)) /\ ((((1000 * arg1) + (100 * arg2)) + (10 * arg3)) >= 0), par{arg1 -> ((((1000 * arg1) + (100 * arg2)) + (10 * arg3)) + arg4), arg2 -> undef52, arg3 -> undef53, arg4 -> undef54, arg5 -> undef55}>
<l6, l6, (arg1 > ~(1)), par{arg1 -> (arg1 - 1), arg2 -> undef57, arg3 -> undef58, arg4 -> undef59, arg5 -> undef60}>
<l1, l2, true, par{arg1 -> undef61, arg2 -> undef62, arg3 -> undef63, arg4 -> undef64, arg5 -> undef65}>

Fresh variables:
undef1, undef4, undef5, undef6, undef9, undef10, undef13, undef14, undef15, undef18, undef19, undef20, undef24, undef25, undef29, undef30, undef34, undef35, undef39, undef40, undef52, undef53, undef54, undef55, undef57, undef58, undef59, undef60, undef61, undef62, undef63, undef64, undef65, 

Undef variables:
undef1, undef4, undef5, undef6, undef9, undef10, undef13, undef14, undef15, undef18, undef19, undef20, undef24, undef25, undef29, undef30, undef34, undef35, undef39, undef40, undef52, undef53, undef54, undef55, undef57, undef58, undef59, undef60, undef61, undef62, undef63, undef64, undef65, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l7, (arg1 = undef1) /\ (arg2 = 0) /\ (arg3 = undef62) /\ (arg4 = undef4) /\ (arg5 = undef5) /\ (undef1 <= undef61) /\ (undef62 > ~(1)) /\ (undef61 > 0) /\ (undef1 > 0)>
<l3, l3, ((3 * arg2) >= 0) /\ (arg3 > ~(1)) /\ ((2 * arg1) >= 0) /\ (((2 * arg1) + (3 * arg2)) >= 0) /\ ((4 * arg3) >= 0), par{arg3 -> (arg3 - 1), arg4 -> undef39, arg5 -> undef40}>
<l3, l8, ((3 * arg2) >= 0) /\ (arg3 > ~(1)) /\ ((2 * arg1) >= 0) /\ (((2 * arg1) + (3 * arg2)) >= 0) /\ ((4 * arg3) >= 0), par{arg4 -> 0, arg5 -> (((2 * arg1) + (3 * arg2)) + (4 * arg3))}>
<l4, l4, (arg2 >= arg1) /\ (arg1 > ~(1)) /\ (arg2 > 0), par{arg1 -> (arg1 + 1), arg3 -> undef18, arg4 -> undef19, arg5 -> undef20}>
<l4, l5, (arg2 > 0) /\ (arg2 >= arg1), par{arg2 -> 0, arg3 -> (2 * arg1), arg4 -> undef24, arg5 -> undef25}>
<l5, l5, (arg1 > ~(1)) /\ (arg3 >= arg2) /\ (arg2 > ~(1)), par{arg2 -> (arg2 + 1), arg4 -> undef29, arg5 -> undef30}>
<l5, l3, (arg1 > ~(1)) /\ (arg3 >= arg2) /\ (arg2 > ~(1)), par{arg3 -> (arg1 + arg2), arg4 -> undef34, arg5 -> undef35}>
<l6, l6, (arg1 > ~(1)), par{arg1 -> (arg1 - 1), arg2 -> undef57, arg3 -> undef58, arg4 -> undef59, arg5 -> undef60}>
<l7, l7, (arg3 > arg2) /\ (arg3 > 0) /\ (undef6 <= arg1) /\ (arg1 > 0) /\ (undef6 > 0), par{arg1 -> undef6, arg2 -> (arg2 + 1), arg4 -> undef9, arg5 -> undef10}>
<l7, l4, (arg3 > arg2) /\ (arg3 > 0) /\ (arg1 > 0), par{arg1 -> 0, arg2 -> arg3, arg3 -> undef13, arg4 -> undef14, arg5 -> undef15}>
<l8, l8, ((100 * arg2) >= 0) /\ (arg5 >= arg4) /\ ((1000 * arg1) >= 0) /\ ((10 * arg3) >= 0) /\ (((1000 * arg1) + (100 * arg2)) >= 0) /\ (arg3 > ~(1)) /\ ((((1000 * arg1) + (100 * arg2)) + (10 * arg3)) >= 0) /\ (arg4 > ~(1)), par{arg4 -> (arg4 + 1)}>
<l8, l6, ((100 * arg2) >= 0) /\ (arg5 >= arg4) /\ ((1000 * arg1) >= 0) /\ ((10 * arg3) >= 0) /\ (((1000 * arg1) + (100 * arg2)) >= 0) /\ (arg3 > ~(1)) /\ (arg4 > ~(1)) /\ ((((1000 * arg1) + (100 * arg2)) + (10 * arg3)) >= 0), par{arg1 -> ((((1000 * arg1) + (100 * arg2)) + (10 * arg3)) + arg4), arg2 -> undef52, arg3 -> undef53, arg4 -> undef54, arg5 -> undef55}>

Fresh variables:
undef1, undef4, undef5, undef6, undef9, undef10, undef13, undef14, undef15, undef18, undef19, undef20, undef24, undef25, undef29, undef30, undef34, undef35, undef39, undef40, undef52, undef53, undef54, undef55, undef57, undef58, undef59, undef60, undef61, undef62, undef63, undef64, undef65, 

Undef variables:
undef1, undef4, undef5, undef6, undef9, undef10, undef13, undef14, undef15, undef18, undef19, undef20, undef24, undef25, undef29, undef30, undef34, undef35, undef39, undef40, undef52, undef53, undef54, undef55, undef57, undef58, undef59, undef60, undef61, undef62, undef63, undef64, undef65, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l7, l7, 1 <= arg1 /\ 1 + arg2 <= arg3 /\ 1 <= arg3 /\ 1 <= undef6 /\ undef6 <= arg1, {arg1 -> undef6, arg2 -> 1 + arg2, arg4 -> undef9, arg5 -> undef10, rest remain the same}>
Variables:
arg1, arg2, arg3, arg4, arg5

Graph 2:
Transitions:
<l4, l4, 1 <= arg2 /\ arg1 <= arg2 /\ 0 <= arg1, {arg1 -> 1 + arg1, arg3 -> undef18, arg4 -> undef19, arg5 -> undef20, rest remain the same}>
Variables:
arg1, arg2, arg3, arg4, arg5

Graph 3:
Transitions:
<l5, l5, 0 <= arg1 /\ arg2 <= arg3 /\ 0 <= arg2, {arg2 -> 1 + arg2, arg4 -> undef29, arg5 -> undef30, rest remain the same}>
Variables:
arg1, arg2, arg3, arg4, arg5

Graph 4:
Transitions:
<l3, l3, 0 <= arg1 /\ 0 <= 2*arg1 + 3*arg2 /\ 0 <= arg2 /\ 0 <= arg3, {arg3 -> -1 + arg3, arg4 -> undef39, arg5 -> undef40, rest remain the same}>
Variables:
arg1, arg2, arg3, arg4, arg5

Graph 5:
Transitions:
<l8, l8, 0 <= arg1 /\ 0 <= 100*arg1 + 10*arg2 + arg3 /\ 0 <= 10*arg1 + arg2 /\ 0 <= arg2 /\ 0 <= arg3 /\ arg4 <= arg5 /\ 0 <= arg4, {arg4 -> 1 + arg4, rest remain the same}>
Variables:
arg1, arg2, arg3, arg4, arg5

Graph 6:
Transitions:
<l6, l6, 0 <= arg1, {arg1 -> -1 + arg1, arg2 -> undef57, arg3 -> undef58, arg4 -> undef59, arg5 -> undef60, rest remain the same}>
Variables:
arg1, arg2, arg3, arg4, arg5

Precedence: 
Graph 0

Graph 1
<l0, l7, 1 <= undef1 /\ 1 <= undef61 /\ undef1 <= undef61 /\ 0 <= undef62 /\ arg1 = undef1 /\ arg2 = 0 /\ arg3 = undef62 /\ arg4 = undef4 /\ arg5 = undef5, {all remain the same}>

Graph 2
<l7, l4, 1 <= arg1 /\ 1 + arg2 <= arg3 /\ 1 <= arg3, {arg1 -> 0, arg2 -> arg3, arg3 -> undef13, arg4 -> undef14, arg5 -> undef15, rest remain the same}>

Graph 3
<l4, l5, 1 <= arg2 /\ arg1 <= arg2, {arg2 -> 0, arg3 -> 2*arg1, arg4 -> undef24, arg5 -> undef25, rest remain the same}>

Graph 4
<l5, l3, 0 <= arg1 /\ arg2 <= arg3 /\ 0 <= arg2, {arg3 -> arg1 + arg2, arg4 -> undef34, arg5 -> undef35, rest remain the same}>

Graph 5
<l3, l8, 0 <= arg1 /\ 0 <= 2*arg1 + 3*arg2 /\ 0 <= arg2 /\ 0 <= arg3, {arg4 -> 0, arg5 -> 2*arg1 + 3*arg2 + 4*arg3, rest remain the same}>

Graph 6
<l8, l6, 0 <= arg1 /\ 0 <= 100*arg1 + 10*arg2 + arg3 /\ 0 <= 10*arg1 + arg2 /\ 0 <= arg2 /\ 0 <= arg3 /\ arg4 <= arg5 /\ 0 <= arg4, {arg1 -> 1000*arg1 + 100*arg2 + 10*arg3 + arg4, arg2 -> undef52, arg3 -> undef53, arg4 -> undef54, arg5 -> undef55, rest remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 3 , 4 )
( 4 , 2 )
( 5 , 3 )
( 6 , 6 )
( 7 , 1 )
( 8 , 5 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.002245

Checking conditional termination of SCC {l7}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000655s
[33mRanking function: [36m-1 - arg2 + arg3[0m
New Graphs: 
Proving termination of subgraph 2
Checking unfeasibility...
Time used: 0.001455

Checking conditional termination of SCC {l4}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000577s
[33mRanking function: [36m-arg1 + arg2[0m
New Graphs: 
Proving termination of subgraph 3
Checking unfeasibility...
Time used: 0.001332

Checking conditional termination of SCC {l5}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000708s
[33mRanking function: [36m-arg2 + arg3[0m
New Graphs: 
Proving termination of subgraph 4
Checking unfeasibility...
Time used: 0.001379

Checking conditional termination of SCC {l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000549s
[33mRanking function: [36marg3[0m
New Graphs: 
Proving termination of subgraph 5
Checking unfeasibility...
Time used: 0.001432

Checking conditional termination of SCC {l8}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000681s
[33mRanking function: [36m-arg4 + arg5[0m
New Graphs: 
Proving termination of subgraph 6
Checking unfeasibility...
Time used: 0.001341

Checking conditional termination of SCC {l6}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000755s
[33mRanking function: [36marg1[0m
New Graphs: 
[32mProgram Terminates[0m

