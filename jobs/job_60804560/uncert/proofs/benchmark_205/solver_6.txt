YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l1, true>
<l2, l5, (undef1 <= arg1) /\ ((undef1 - 1) <= arg2) /\ (undef2 <= arg2) /\ (arg1 > 0) /\ (arg2 > ~(1)) /\ (undef1 > 0) /\ (undef2 > ~(1)), par{arg1 -> undef1, arg2 -> undef2, arg3 -> undef3}>
<l3, l5, (undef4 <= arg1) /\ (arg1 > 0) /\ (undef4 > 0) /\ (undef5 > ~(1)), par{arg1 -> undef4, arg2 -> undef5, arg3 -> undef6}>
<l3, l4, (arg2 > ~(1)) /\ (undef7 > ~(1)) /\ (arg1 > 0), par{arg1 -> undef7, arg2 -> undef8, arg3 -> undef9}>
<l4, l4, (arg1 > 0), par{arg1 -> (arg1 - 1), arg2 -> undef11, arg3 -> undef12}>
<l5, l6, (undef13 <= arg2) /\ (undef16 > 0) /\ (undef15 <= arg2) /\ (arg1 > 0) /\ (arg2 > ~(1)) /\ (undef13 > ~(1)) /\ (undef15 > ~(1)), par{arg1 -> undef13, arg2 -> 1, arg3 -> undef15}>
<l6, l6, ((undef17 + 1) <= arg1) /\ ((undef17 + 1) <= arg3) /\ ((undef19 + 1) <= arg1) /\ ((undef19 + 1) <= arg3) /\ (arg1 > 0) /\ (arg3 > 0) /\ (undef17 > ~(1)) /\ (undef19 > ~(1)) /\ (0 = arg2), par{arg1 -> undef17, arg2 -> 1, arg3 -> undef19}>
<l6, l6, (undef20 <= arg1) /\ (undef20 <= arg3) /\ (undef22 <= arg1) /\ (undef22 <= arg3) /\ (arg1 > 0) /\ (arg3 > 0) /\ (undef20 > 0) /\ (undef22 > 0) /\ (1 = arg2), par{arg1 -> undef20, arg2 -> 0, arg3 -> undef22}>
<l1, l3, true, par{arg1 -> undef23, arg2 -> undef24, arg3 -> undef25}>

Fresh variables:
undef1, undef2, undef3, undef4, undef5, undef6, undef7, undef8, undef9, undef11, undef12, undef13, undef15, undef16, undef17, undef19, undef20, undef22, undef23, undef24, undef25, 

Undef variables:
undef1, undef2, undef3, undef4, undef5, undef6, undef7, undef8, undef9, undef11, undef12, undef13, undef15, undef16, undef17, undef19, undef20, undef22, undef23, undef24, undef25, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l6, (undef4 <= undef23) /\ (undef23 > 0) /\ (undef4 > 0) /\ (undef5 > ~(1)) /\ (undef13 <= undef5) /\ (undef16 > 0) /\ (undef15 <= undef5) /\ (undef4 > 0) /\ (undef5 > ~(1)) /\ (undef13 > ~(1)) /\ (undef15 > ~(1)), par{arg1 -> undef13, arg2 -> 1, arg3 -> undef15}>
<l0, l4, (undef24 > ~(1)) /\ (undef7 > ~(1)) /\ (undef23 > 0), par{arg1 -> undef7, arg2 -> undef8, arg3 -> undef9}>
<l4, l4, (arg1 > 0), par{arg1 -> (arg1 - 1), arg2 -> undef11, arg3 -> undef12}>
<l6, l6, ((undef17 + 1) <= arg1) /\ ((undef17 + 1) <= arg3) /\ ((undef19 + 1) <= arg1) /\ ((undef19 + 1) <= arg3) /\ (arg1 > 0) /\ (arg3 > 0) /\ (undef17 > ~(1)) /\ (undef19 > ~(1)) /\ (0 = arg2), par{arg1 -> undef17, arg2 -> 1, arg3 -> undef19}>
<l6, l6, (undef20 <= arg1) /\ (undef20 <= arg3) /\ (undef22 <= arg1) /\ (undef22 <= arg3) /\ (arg1 > 0) /\ (arg3 > 0) /\ (undef20 > 0) /\ (undef22 > 0) /\ (1 = arg2), par{arg1 -> undef20, arg2 -> 0, arg3 -> undef22}>

Fresh variables:
undef1, undef2, undef3, undef4, undef5, undef6, undef7, undef8, undef9, undef11, undef12, undef13, undef15, undef16, undef17, undef19, undef20, undef22, undef23, undef24, undef25, 

Undef variables:
undef1, undef2, undef3, undef4, undef5, undef6, undef7, undef8, undef9, undef11, undef12, undef13, undef15, undef16, undef17, undef19, undef20, undef22, undef23, undef24, undef25, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l4, l4, 1 <= arg1, {arg1 -> -1 + arg1, arg2 -> undef11, arg3 -> undef12, rest remain the same}>
Variables:
arg1, arg2, arg3

Graph 2:
Transitions:
<l6, l6, 1 <= arg1 /\ 1 + undef17 <= arg1 /\ 1 + undef19 <= arg1 /\ 1 <= arg3 /\ 1 + undef17 <= arg3 /\ 1 + undef19 <= arg3 /\ 0 <= undef17 /\ 0 <= undef19 /\ arg2 = 0, {arg1 -> undef17, arg2 -> 1, arg3 -> undef19, rest remain the same}>
<l6, l6, 1 <= arg1 /\ 1 <= arg3 /\ 1 <= undef20 /\ 1 <= undef22 /\ undef20 <= arg1 /\ undef22 <= arg1 /\ undef20 <= arg3 /\ undef22 <= arg3 /\ arg2 = 1, {arg1 -> undef20, arg2 -> 0, arg3 -> undef22, rest remain the same}>
Variables:
arg1, arg2, arg3

Precedence: 
Graph 0

Graph 1
<l0, l4, 1 <= undef23 /\ 0 <= undef7 /\ 0 <= undef24, {arg1 -> undef7, arg2 -> undef8, arg3 -> undef9, rest remain the same}>

Graph 2
<l0, l6, 1 <= undef4 /\ 1 <= undef16 /\ 1 <= undef23 /\ undef4 <= undef23 /\ 0 <= undef5 /\ undef13 <= undef5 /\ undef15 <= undef5 /\ 0 <= undef13 /\ 0 <= undef15, {arg1 -> undef13, arg2 -> 1, arg3 -> undef15, rest remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 4 , 1 )
( 6 , 2 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.001215

Checking conditional termination of SCC {l4}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000359s
[33mRanking function: [36m-1 + arg1[0m
New Graphs: 
Proving termination of subgraph 2
Checking unfeasibility...
Time used: 0.004203

Checking conditional termination of SCC {l6}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.001483s
[33mRanking function: [36m-6 + 3*arg2 + 3*arg3[0m
New Graphs: 
Transitions:
<l6, l6, 1 <= arg1 /\ 1 + undef17 <= arg1 /\ 1 + undef19 <= arg1 /\ 1 <= arg3 /\ 1 + undef17 <= arg3 /\ 1 + undef19 <= arg3 /\ 0 <= undef17 /\ 0 <= undef19 /\ arg2 = 0, {arg1 -> undef17, arg2 -> 1, arg3 -> undef19, rest remain the same}>
Variables:
arg1, arg2, arg3
Checking conditional termination of SCC {l6}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000645s
[33mRanking function: [36m-arg2[0m
New Graphs: 
[32mProgram Terminates[0m

