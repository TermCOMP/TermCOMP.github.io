YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l9, true>
<l1, l2, (2 <= (0 + i^0)), par{j^0 -> 0}>
<l1, l3, ((1 + i^0) <= 2), par{i^0 -> (1 + i^0)}>
<l3, l1, true>
<l2, l4, true>
<l5, l6, true>
<l7, l5, true>
<l7, l5, true>
<l4, l7, (2 <= (0 + j^0))>
<l4, l2, ((1 + j^0) <= 2), par{j^0 -> (1 + j^0)}>
<l8, l3, true, par{i^0 -> 0}>
<l9, l8, true>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l3, (i^0 = 0)>
<l2, l6, (2 <= (0 + j^0))>
<l2, l6, (2 <= (0 + j^0))>
<l2, l2, ((1 + j^0) <= 2), par{j^0 -> (1 + j^0)}>
<l3, l2, (2 <= (0 + i^0)), par{j^0 -> 0}>
<l3, l3, ((1 + i^0) <= 2), par{i^0 -> (1 + i^0)}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l3, l3, i^0 <= 1, {i^0 -> 1 + i^0, rest remain the same}>
Variables:
i^0

Graph 2:
Transitions:
<l2, l2, j^0 <= 1, {j^0 -> 1 + j^0, rest remain the same}>
Variables:
j^0

Graph 3:
Transitions:
Variables:

Precedence: 
Graph 0

Graph 1
<l0, l3, i^0 = 0, {all remain the same}>

Graph 2
<l3, l2, 2 <= i^0, {j^0 -> 0, rest remain the same}>

Graph 3
<l2, l6, 2 <= j^0, {all remain the same}>
<l2, l6, 2 <= j^0, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 2 , 2 )
( 3 , 1 )
( 6 , 3 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.000613

Checking conditional termination of SCC {l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000228s
[33mRanking function: [36m1 - i^0[0m
New Graphs: 
Proving termination of subgraph 2
Checking unfeasibility...
Time used: 0.000553

Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000236s
[33mRanking function: [36m1 - j^0[0m
New Graphs: 
Proving termination of subgraph 3
Analyzing SCC {l6}...
No cycles found.

[32mProgram Terminates[0m

