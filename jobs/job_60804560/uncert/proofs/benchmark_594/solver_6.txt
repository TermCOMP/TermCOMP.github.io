YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l7, true>
<l1, l2, (10 <= (0 + i4^0)), par{i7^0 -> 0}>
<l1, l3, ((1 + i4^0) <= 10), par{i4^0 -> (1 + i4^0)}>
<l3, l1, true>
<l2, l4, true>
<l4, l5, (10 <= (0 + i7^0))>
<l4, l2, ((1 + i7^0) <= 10), par{i7^0 -> (1 + i7^0)}>
<l6, l3, (undef21 = undef21), par{i4^0 -> 0, tmp^0 -> undef21}>
<l7, l6, true>

Fresh variables:
undef21, 

Undef variables:
undef21, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l3, (i4^0 = 0) /\ (undef21 = undef21)>
<l2, l5, (10 <= (0 + i7^0))>
<l2, l2, ((1 + i7^0) <= 10), par{i7^0 -> (1 + i7^0)}>
<l3, l2, (10 <= (0 + i4^0)), par{i7^0 -> 0}>
<l3, l3, ((1 + i4^0) <= 10), par{i4^0 -> (1 + i4^0)}>

Fresh variables:
undef21, 

Undef variables:
undef21, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l3, l3, i4^0 <= 9, {i4^0 -> 1 + i4^0, rest remain the same}>
Variables:
i4^0

Graph 2:
Transitions:
<l2, l2, i7^0 <= 9, {i7^0 -> 1 + i7^0, rest remain the same}>
Variables:
i7^0

Graph 3:
Transitions:
Variables:

Precedence: 
Graph 0

Graph 1
<l0, l3, i4^0 = 0, {all remain the same}>

Graph 2
<l3, l2, 10 <= i4^0, {i7^0 -> 0, rest remain the same}>

Graph 3
<l2, l5, 10 <= i7^0, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 2 , 2 )
( 3 , 1 )
( 5 , 3 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.000675

Checking conditional termination of SCC {l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000246s
[33mRanking function: [36m9 - i4^0[0m
New Graphs: 
Proving termination of subgraph 2
Checking unfeasibility...
Time used: 0.000582

Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000241s
[33mRanking function: [36m9 - i7^0[0m
New Graphs: 
Proving termination of subgraph 3
Analyzing SCC {l5}...
No cycles found.

[32mProgram Terminates[0m

