YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l1, true>
<l2, l3, (undef1 > ~(1)) /\ (arg2 > ~(1)) /\ (undef3 > ~(1)) /\ (arg1 > 0), par{arg1 -> undef1, arg2 -> (undef1 - 1), arg3 -> undef3}>
<l3, l4, (arg3 > arg2)>
<l3, l4, (arg3 <= arg2), par{arg2 -> arg3}>
<l4, l3, (arg1 > ~(1)) /\ (arg2 = arg3), par{arg2 -> (arg1 - 1), arg3 -> (arg2 + 1)}>
<l1, l2, true, par{arg1 -> undef13, arg2 -> undef14, arg3 -> undef15}>

Fresh variables:
undef1, undef3, undef13, undef14, undef15, 

Undef variables:
undef1, undef3, undef13, undef14, undef15, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l3, (arg1 = undef1) /\ (arg2 = (undef1 - 1)) /\ (arg3 = undef3) /\ (undef1 > ~(1)) /\ (undef14 > ~(1)) /\ (undef3 > ~(1)) /\ (undef13 > 0)>
<l3, l3, (arg3 <= arg2) /\ (arg1 > ~(1)) /\ (arg3 = arg3), par{arg2 -> (arg1 - 1), arg3 -> (arg3 + 1)}>

Fresh variables:
undef1, undef3, undef13, undef14, undef15, 

Undef variables:
undef1, undef3, undef13, undef14, undef15, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l3, l3, 0 <= arg1 /\ arg3 <= arg2, {arg2 -> -1 + arg1, arg3 -> 1 + arg3, rest remain the same}>
Variables:
arg1, arg2, arg3

Precedence: 
Graph 0

Graph 1
<l0, l3, 1 <= undef13 /\ 0 <= undef1 /\ 0 <= undef3 /\ 0 <= undef14 /\ 1 + arg2 = undef1 /\ arg1 = undef1 /\ arg3 = undef3, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 3 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.001343

Checking conditional termination of SCC {l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000352s

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.001081s
Trying to remove transition: <l3, l3, 0 <= arg1 /\ arg3 <= arg2, {arg2 -> -1 + arg1, arg3 -> 1 + arg3, rest remain the same}>
Solving with 1 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 0.003813s
Time used: 0.003705
Solving with 1 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 0.005029s
Time used: 0.004728

LOG: SAT solveNonLinear - Elapsed time: 0.005029s
Cost: 0; Total time: 0.004728
[33mTermination implied by a set of invariant(s):[0m
[36mInvariant at l3: arg2 <= 1 + arg1[0m
[ Invariant Graph ]
[33mStrengthening and disabling transitions...[0m

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l3, l3, arg2 <= 1 + arg1 /\ 0 <= arg1 /\ arg3 <= arg2, {arg2 -> -1 + arg1, arg3 -> 1 + arg3, rest remain the same}>
[ Termination Graph ]
[33mStrengthening and disabling transitions...[0m

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l3, l3, arg2 <= 1 + arg1 /\ 0 <= arg1 /\ arg3 <= arg2, {arg2 -> -1 + arg1, arg3 -> 1 + arg3, rest remain the same}>
[33mRanking function: [36m4 + 4*arg1 - arg2 - 3*arg3[0m
New Graphs: 
INVARIANTS: 
3: arg2 <= 1 + arg1 , 
Quasi-INVARIANTS to narrow Graph: 
3: 
[32mProgram Terminates[0m

