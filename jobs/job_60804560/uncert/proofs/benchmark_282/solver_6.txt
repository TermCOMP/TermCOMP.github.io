YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l1, true>
<l4, l2, (undef1 > ~(1)) /\ (arg2 > ~(1)) /\ (undef2 > ~(1)) /\ (arg1 > 0), par{arg1 -> undef1, arg2 -> undef2}>
<l2, l3, (arg2 <= arg1) /\ (arg2 > 0) /\ (arg1 > 0), par{arg1 -> arg2, arg2 -> arg1}>
<l2, l5, (arg2 > arg1) /\ (arg2 > 0) /\ (arg1 > 0)>
<l3, l2, (0 = arg2), par{arg1 -> 0, arg2 -> arg1}>
<l3, l3, (arg2 > 0), par{arg2 -> (arg2 - 1)}>
<l5, l2, (0 = arg2), par{arg2 -> 0}>
<l5, l5, (arg2 > 0), par{arg2 -> (arg2 - 1)}>
<l1, l4, true, par{arg1 -> undef15, arg2 -> undef16}>

Fresh variables:
undef1, undef2, undef15, undef16, 

Undef variables:
undef1, undef2, undef15, undef16, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l3, (undef1 > ~(1)) /\ (undef16 > ~(1)) /\ (undef2 > ~(1)) /\ (undef15 > 0) /\ (undef2 <= undef1) /\ (undef2 > 0) /\ (undef1 > 0), par{arg1 -> undef2, arg2 -> undef1}>
<l0, l5, (undef1 > ~(1)) /\ (undef16 > ~(1)) /\ (undef2 > ~(1)) /\ (undef15 > 0) /\ (undef2 > undef1) /\ (undef2 > 0) /\ (undef1 > 0), par{arg1 -> undef1, arg2 -> undef2}>
<l3, l3, (arg2 > 0), par{arg2 -> (arg2 - 1)}>
<l5, l5, (arg2 > 0), par{arg2 -> (arg2 - 1)}>

Fresh variables:
undef1, undef2, undef15, undef16, 

Undef variables:
undef1, undef2, undef15, undef16, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l5, l5, 1 <= arg2, {arg2 -> -1 + arg2, rest remain the same}>
Variables:
arg2

Graph 2:
Transitions:
<l3, l3, 1 <= arg2, {arg2 -> -1 + arg2, rest remain the same}>
Variables:
arg2

Precedence: 
Graph 0

Graph 1
<l0, l5, 1 + undef1 <= undef2 /\ 1 <= undef1 /\ 1 <= undef2 /\ 1 <= undef15 /\ 0 <= undef16, {arg1 -> undef1, arg2 -> undef2, rest remain the same}>

Graph 2
<l0, l3, 1 <= undef1 /\ 1 <= undef2 /\ 1 <= undef15 /\ undef2 <= undef1 /\ 0 <= undef16, {arg1 -> undef2, arg2 -> undef1, rest remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 3 , 2 )
( 5 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.000896

Checking conditional termination of SCC {l5}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000261s
[33mRanking function: [36m-1 + arg2[0m
New Graphs: 
Proving termination of subgraph 2
Checking unfeasibility...
Time used: 0.000763

Checking conditional termination of SCC {l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000248s
[33mRanking function: [36m-1 + arg2[0m
New Graphs: 
[32mProgram Terminates[0m

