YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l1, true>
<l3, l4, (undef1 > 2), par{arg1 -> undef1, arg2 -> undef2, arg3 -> undef3}>
<l3, l4, (undef4 > 1), par{arg1 -> undef4, arg2 -> undef5, arg3 -> undef6}>
<l3, l6, true, par{arg1 -> 5, arg2 -> 5, arg3 -> 5}>
<l6, l6, ((arg2 - 1) < arg2) /\ (arg1 > 0) /\ (arg2 > 1) /\ (arg2 = arg3), par{arg1 -> (arg2 - 1), arg2 -> (arg2 - 1), arg3 -> (arg2 - 1)}>
<l6, l5, ((arg2 - 1) < arg2) /\ (arg2 > 1) /\ (undef14 > 4) /\ (arg1 > 0) /\ (arg2 = arg3), par{arg2 -> undef14, arg3 -> (arg2 - 1)}>
<l6, l5, ((arg2 - 1) < arg2) /\ (arg2 > 1) /\ (undef17 > 3) /\ (arg1 > 0) /\ (arg2 = arg3), par{arg2 -> undef17, arg3 -> (arg2 - 1)}>
<l5, l6, (arg3 > 0) /\ (arg1 > 0) /\ (arg2 > 2), par{arg1 -> arg3, arg2 -> arg3}>
<l4, l2, (undef22 <= arg1) /\ ((undef23 + 1) <= arg1) /\ (arg1 > 0) /\ (undef22 > 0) /\ (undef23 > ~(1)), par{arg1 -> undef22, arg2 -> undef23, arg3 -> undef24}>
<l2, l2, ((undef25 + 2) <= arg1) /\ (undef25 <= arg2) /\ ((undef26 + 3) <= arg1) /\ ((undef26 + 1) <= arg2) /\ (arg1 > 2) /\ (arg2 > 0) /\ (undef25 > 0) /\ (undef26 > ~(1)), par{arg1 -> undef25, arg2 -> undef26, arg3 -> undef27}>
<l2, l2, ((undef28 + 2) <= arg1) /\ ((undef29 + 3) <= arg1) /\ (arg1 > 2) /\ (arg2 > ~(1)) /\ (undef28 > 0) /\ (undef29 > ~(1)), par{arg1 -> undef28, arg2 -> undef29, arg3 -> undef30}>
<l1, l3, true, par{arg1 -> undef31, arg2 -> undef32, arg3 -> undef33}>

Fresh variables:
undef1, undef2, undef3, undef4, undef5, undef6, undef14, undef17, undef22, undef23, undef24, undef25, undef26, undef27, undef28, undef29, undef30, undef31, undef32, undef33, 

Undef variables:
undef1, undef2, undef3, undef4, undef5, undef6, undef14, undef17, undef22, undef23, undef24, undef25, undef26, undef27, undef28, undef29, undef30, undef31, undef32, undef33, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l2, (undef1 > 2) /\ (undef22 <= undef1) /\ ((undef23 + 1) <= undef1) /\ (undef1 > 0) /\ (undef22 > 0) /\ (undef23 > ~(1)), par{arg1 -> undef22, arg2 -> undef23, arg3 -> undef24}>
<l0, l2, (undef4 > 1) /\ (undef22 <= undef4) /\ ((undef23 + 1) <= undef4) /\ (undef4 > 0) /\ (undef22 > 0) /\ (undef23 > ~(1)), par{arg1 -> undef22, arg2 -> undef23, arg3 -> undef24}>
<l0, l6, true, par{arg1 -> 5, arg2 -> 5, arg3 -> 5}>
<l2, l2, ((undef25 + 2) <= arg1) /\ (undef25 <= arg2) /\ ((undef26 + 3) <= arg1) /\ ((undef26 + 1) <= arg2) /\ (arg1 > 2) /\ (arg2 > 0) /\ (undef25 > 0) /\ (undef26 > ~(1)), par{arg1 -> undef25, arg2 -> undef26, arg3 -> undef27}>
<l2, l2, ((undef28 + 2) <= arg1) /\ ((undef29 + 3) <= arg1) /\ (arg1 > 2) /\ (arg2 > ~(1)) /\ (undef28 > 0) /\ (undef29 > ~(1)), par{arg1 -> undef28, arg2 -> undef29, arg3 -> undef30}>
<l6, l6, ((arg2 - 1) < arg2) /\ (arg1 > 0) /\ (arg2 > 1) /\ (arg2 = arg3), par{arg1 -> (arg2 - 1), arg2 -> (arg2 - 1), arg3 -> (arg2 - 1)}>
<l6, l6, ((arg2 - 1) < arg2) /\ (arg2 > 1) /\ (undef14 > 4) /\ (arg1 > 0) /\ (arg2 = arg3) /\ ((arg2 - 1) > 0) /\ (arg1 > 0) /\ (undef14 > 2), par{arg1 -> (arg2 - 1), arg2 -> (arg2 - 1), arg3 -> (arg2 - 1)}>
<l6, l6, ((arg2 - 1) < arg2) /\ (arg2 > 1) /\ (undef17 > 3) /\ (arg1 > 0) /\ (arg2 = arg3) /\ ((arg2 - 1) > 0) /\ (arg1 > 0) /\ (undef17 > 2), par{arg1 -> (arg2 - 1), arg2 -> (arg2 - 1), arg3 -> (arg2 - 1)}>

Fresh variables:
undef1, undef2, undef3, undef4, undef5, undef6, undef14, undef17, undef22, undef23, undef24, undef25, undef26, undef27, undef28, undef29, undef30, undef31, undef32, undef33, 

Undef variables:
undef1, undef2, undef3, undef4, undef5, undef6, undef14, undef17, undef22, undef23, undef24, undef25, undef26, undef27, undef28, undef29, undef30, undef31, undef32, undef33, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l6, l6, 2 <= arg2 /\ 1 <= arg1 /\ arg2 = arg3, {arg1 -> -1 + arg2, arg2 -> -1 + arg2, arg3 -> -1 + arg2, rest remain the same}>
<l6, l6, 2 <= arg2 /\ 1 <= arg1 /\ 5 <= undef14 /\ arg2 = arg3, {arg1 -> -1 + arg2, arg2 -> -1 + arg2, arg3 -> -1 + arg2, rest remain the same}>
<l6, l6, 2 <= arg2 /\ 1 <= arg1 /\ 4 <= undef17 /\ arg2 = arg3, {arg1 -> -1 + arg2, arg2 -> -1 + arg2, arg3 -> -1 + arg2, rest remain the same}>
Variables:
arg1, arg2, arg3

Graph 2:
Transitions:
<l2, l2, 2 + undef25 <= arg1 /\ 1 <= arg2 /\ 1 + undef26 <= arg2 /\ 1 <= undef25 /\ undef25 <= arg2 /\ 0 <= undef26 /\ 3 <= arg1 /\ 3 + undef26 <= arg1, {arg1 -> undef25, arg2 -> undef26, arg3 -> undef27, rest remain the same}>
<l2, l2, 2 + undef28 <= arg1 /\ 1 <= undef28 /\ 0 <= arg2 /\ 0 <= undef29 /\ 3 <= arg1 /\ 3 + undef29 <= arg1, {arg1 -> undef28, arg2 -> undef29, arg3 -> undef30, rest remain the same}>
Variables:
arg1, arg2, arg3

Precedence: 
Graph 0

Graph 1
<l0, l6, true, {arg1 -> 5, arg2 -> 5, arg3 -> 5, rest remain the same}>

Graph 2
<l0, l2, 1 + undef23 <= undef1 /\ 1 <= undef22 /\ undef22 <= undef1 /\ 0 <= undef23 /\ 3 <= undef1, {arg1 -> undef22, arg2 -> undef23, arg3 -> undef24, rest remain the same}>
<l0, l2, 2 <= undef4 /\ 1 + undef23 <= undef4 /\ 1 <= undef22 /\ undef22 <= undef4 /\ 0 <= undef23, {arg1 -> undef22, arg2 -> undef23, arg3 -> undef24, rest remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 2 , 2 )
( 6 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.021561

Checking conditional termination of SCC {l6}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.001193s
[33mRanking function: [36m-2 + 2*arg2 - arg3[0m
New Graphs: 
Proving termination of subgraph 2
Checking unfeasibility...
Time used: 0.002755

Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.001056s
[33mRanking function: [36m(~(3) / 2) + (1 / 2)*arg1[0m
New Graphs: 
[32mProgram Terminates[0m

