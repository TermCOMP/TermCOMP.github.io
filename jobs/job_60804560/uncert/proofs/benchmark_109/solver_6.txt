YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l1, true>
<l3, l4, (undef1 > 3), par{arg1 -> undef1, arg2 -> undef2, arg3 -> undef3, arg4 -> undef4, arg5 -> undef5, arg6 -> undef6}>
<l4, l2, (undef7 <= arg1) /\ ((undef12 + 1) <= arg1) /\ (arg1 > 0) /\ (undef7 > 0) /\ (undef12 > ~(1)) /\ ((undef11 + 2) <= arg1), par{arg1 -> undef7, arg2 -> 1, arg3 -> 1, arg4 -> 1, arg5 -> undef11, arg6 -> undef12}>
<l2, l4, (arg2 > 0) /\ (arg5 < arg3) /\ (arg1 >= (undef13 + 1)) /\ (arg6 >= undef13) /\ (arg1 > 0) /\ (arg6 > ~(1)) /\ (undef13 > ~(1)) /\ ((arg5 + 2) <= arg1) /\ (arg3 = arg4), par{arg1 -> undef13, arg2 -> undef14, arg3 -> undef15, arg4 -> undef16, arg5 -> undef17, arg6 -> undef18}>
<l2, l2, (arg5 >= arg3) /\ (arg3 > 0) /\ (arg2 > 0) /\ (undef19 <= arg1) /\ ((undef24 + 1) <= arg1) /\ (undef24 <= arg6) /\ (arg1 > 0) /\ (arg6 > ~(1)) /\ (undef19 > 0) /\ (undef24 > ~(1)) /\ ((arg5 + 2) <= arg1) /\ (arg3 = arg4), par{arg1 -> undef19, arg2 -> (arg2 * arg3), arg3 -> (arg3 + 1), arg4 -> (arg3 + 1), arg6 -> undef24}>
<l1, l3, true, par{arg1 -> undef25, arg2 -> undef26, arg3 -> undef27, arg4 -> undef28, arg5 -> undef29, arg6 -> undef30}>

Fresh variables:
undef1, undef2, undef3, undef4, undef5, undef6, undef7, undef11, undef12, undef13, undef14, undef15, undef16, undef17, undef18, undef19, undef24, undef25, undef26, undef27, undef28, undef29, undef30, 

Undef variables:
undef1, undef2, undef3, undef4, undef5, undef6, undef7, undef11, undef12, undef13, undef14, undef15, undef16, undef17, undef18, undef19, undef24, undef25, undef26, undef27, undef28, undef29, undef30, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l2, (arg1 = undef7) /\ (arg2 = 1) /\ (arg3 = 1) /\ (arg4 = 1) /\ (arg5 = undef11) /\ (arg6 = undef12) /\ (undef1 > 3) /\ (undef7 <= undef1) /\ ((undef12 + 1) <= undef1) /\ (undef1 > 0) /\ (undef7 > 0) /\ (undef12 > ~(1)) /\ ((undef11 + 2) <= undef1)>
<l2, l2, (arg2 > 0) /\ (arg5 < arg3) /\ (arg1 >= (undef13 + 1)) /\ (arg6 >= undef13) /\ (arg1 > 0) /\ (arg6 > ~(1)) /\ (undef13 > ~(1)) /\ ((arg5 + 2) <= arg1) /\ (arg3 = arg4) /\ (undef7 <= undef13) /\ ((undef12 + 1) <= undef13) /\ (undef13 > 0) /\ (undef7 > 0) /\ (undef12 > ~(1)) /\ ((undef11 + 2) <= undef13), par{arg1 -> undef7, arg2 -> 1, arg3 -> 1, arg4 -> 1, arg5 -> undef11, arg6 -> undef12}>
<l2, l2, (arg5 >= arg3) /\ (arg3 > 0) /\ (arg2 > 0) /\ (undef19 <= arg1) /\ ((undef24 + 1) <= arg1) /\ (undef24 <= arg6) /\ (arg1 > 0) /\ (arg6 > ~(1)) /\ (undef19 > 0) /\ (undef24 > ~(1)) /\ ((arg5 + 2) <= arg1) /\ (arg3 = arg4), par{arg1 -> undef19, arg2 -> abstract_31, arg3 -> (arg3 + 1), arg4 -> (arg3 + 1), arg6 -> undef24}>

Fresh variables:
undef1, undef2, undef3, undef4, undef5, undef6, undef7, undef11, undef12, undef13, undef14, undef15, undef16, undef17, undef18, undef19, undef24, undef25, undef26, undef27, undef28, undef29, undef30, abstract_31, 

Undef variables:
undef1, undef2, undef3, undef4, undef5, undef6, undef7, undef11, undef12, undef13, undef14, undef15, undef16, undef17, undef18, undef19, undef24, undef25, undef26, undef27, undef28, undef29, undef30, 

Abstraction variables:
abstract_31 --> ( * arg2 arg3 )

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l2, l2, 1 <= arg1 /\ 1 + undef13 <= arg1 /\ 1 <= arg2 /\ 1 + arg5 <= arg3 /\ 1 <= undef7 /\ 1 + undef12 <= undef13 /\ 1 <= undef13 /\ 0 <= arg6 /\ undef13 <= arg6 /\ undef7 <= undef13 /\ 0 <= undef12 /\ 2 + arg5 <= arg1 /\ 2 + undef11 <= undef13 /\ arg3 = arg4, {arg1 -> undef7, arg2 -> 1, arg3 -> 1, arg4 -> 1, arg5 -> undef11, arg6 -> undef12, rest remain the same}>
<l2, l2, 1 <= arg1 /\ 1 + undef24 <= arg1 /\ 1 <= arg2 /\ 1 <= arg3 /\ 1 <= undef19 /\ undef19 <= arg1 /\ arg3 <= arg5 /\ 0 <= arg6 /\ undef24 <= arg6 /\ 0 <= undef24 /\ 2 + arg5 <= arg1 /\ arg3 = arg4, {arg1 -> undef19, arg2 -> abstract_31, arg3 -> 1 + arg3, arg4 -> 1 + arg3, arg6 -> undef24, rest remain the same}>
Variables:
arg1, arg2, arg3, arg4, arg5, arg6

Precedence: 
Graph 0

Graph 1
<l0, l2, 1 + undef12 <= undef1 /\ 1 <= undef7 /\ undef7 <= undef1 /\ 0 <= undef12 /\ 2 + undef11 <= undef1 /\ 4 <= undef1 /\ arg1 = undef7 /\ arg5 = undef11 /\ arg6 = undef12 /\ arg2 = 1 /\ arg3 = 1 /\ arg4 = 1, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 2 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Detected abstraction incompatible with non-termination check.
Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.024859

Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.002526s
[33mRanking function: [36m1 + arg3 - arg4 + arg6[0m
New Graphs: 
Transitions:
<l2, l2, 1 <= arg1 /\ 1 + undef24 <= arg1 /\ 1 <= arg2 /\ 1 <= arg3 /\ 1 <= undef19 /\ undef19 <= arg1 /\ arg3 <= arg5 /\ 0 <= arg6 /\ undef24 <= arg6 /\ 0 <= undef24 /\ 2 + arg5 <= arg1 /\ arg3 = arg4, {arg1 -> undef19, arg2 -> abstract_31, arg3 -> 1 + arg3, arg4 -> 1 + arg3, arg6 -> undef24, rest remain the same}>
Variables:
arg1, arg2, arg3, arg4, arg5, arg6
Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000863s
[33mRanking function: [36m-arg3 + arg5[0m
New Graphs: 
[32mProgram Terminates[0m

