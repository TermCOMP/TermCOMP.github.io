YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l1, true>
<l3, l4, (arg2 > ~(1)) /\ (undef6 <= (200 * arg2)) /\ (arg1 > 0), par{arg3 -> undef3, arg4 -> undef4, arg5 -> undef5}>
<l4, l2, (arg2 > ~(1)) /\ (undef8 <= (200 * arg2)) /\ (arg1 > 0) /\ (((200 * arg2) - (13 * undef8)) < 13) /\ (((200 * arg2) - (13 * undef8)) >= 0), par{arg1 -> (100 * arg2), arg2 -> undef8, arg3 -> ((100 * arg2) + undef8), arg4 -> arg2, arg5 -> 0}>
<l2, l2, (arg3 > 0) /\ (arg4 > ~(1)) /\ ((arg2 - 1) < arg2) /\ (arg5 >= arg4), par{arg2 -> (arg2 - 1), arg3 -> (arg1 + (arg2 - 1))}>
<l2, l2, (arg4 > 1) /\ ((arg5 + 1) < arg4) /\ (arg3 > 0) /\ (arg5 > ~(1)) /\ (undef22 > ~(1)) /\ (undef23 > ~(1)) /\ ((undef22 * undef23) <= 9) /\ ((arg5 + 2) <= arg4) /\ ((arg2 - 1) < arg2), par{arg2 -> (arg2 - 1), arg3 -> (arg1 + (arg2 - 1)), arg5 -> (arg5 + 2)}>
<l2, l2, (arg4 > 1) /\ ((arg5 + 1) < arg4) /\ (arg3 > 0) /\ (arg5 > ~(1)) /\ (undef29 > ~(1)) /\ (undef30 > ~(1)) /\ ((undef29 * undef30) > 9) /\ ((arg5 + 2) <= arg4) /\ ((arg1 - 1) < arg1), par{arg1 -> (arg1 - 1), arg3 -> ((arg1 - 1) + arg2), arg5 -> (arg5 + 2)}>
<l1, l3, true, par{arg1 -> undef31, arg2 -> undef32, arg3 -> undef33, arg4 -> undef34, arg5 -> undef35}>

Fresh variables:
undef3, undef4, undef5, undef6, undef8, undef22, undef23, undef29, undef30, undef31, undef32, undef33, undef34, undef35, 

Undef variables:
undef3, undef4, undef5, undef6, undef8, undef22, undef23, undef29, undef30, undef31, undef32, undef33, undef34, undef35, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l2, (arg1 = (100 * undef32)) /\ (arg2 = undef8) /\ (arg3 = ((100 * undef32) + undef8)) /\ (arg4 = undef32) /\ (arg5 = 0) /\ (undef32 > ~(1)) /\ (undef6 <= (200 * undef32)) /\ (undef31 > 0) /\ (undef32 > ~(1)) /\ (undef8 <= (200 * undef32)) /\ (undef31 > 0) /\ (((200 * undef32) - (13 * undef8)) < 13) /\ (((200 * undef32) - (13 * undef8)) >= 0)>
<l2, l2, (arg3 > 0) /\ (arg4 > ~(1)) /\ ((arg2 - 1) < arg2) /\ (arg5 >= arg4), par{arg2 -> (arg2 - 1), arg3 -> (arg1 + (arg2 - 1))}>
<l2, l2, (arg4 > 1) /\ ((arg5 + 1) < arg4) /\ (arg3 > 0) /\ (arg5 > ~(1)) /\ (undef22 > ~(1)) /\ (undef23 > ~(1)) /\ ((arg5 + 2) <= arg4) /\ ((arg2 - 1) < arg2), par{arg2 -> (arg2 - 1), arg3 -> (arg1 + (arg2 - 1)), arg5 -> (arg5 + 2)}>
<l2, l2, (arg4 > 1) /\ ((arg5 + 1) < arg4) /\ (arg3 > 0) /\ (arg5 > ~(1)) /\ (undef29 > ~(1)) /\ (undef30 > ~(1)) /\ ((arg5 + 2) <= arg4) /\ ((arg1 - 1) < arg1), par{arg1 -> (arg1 - 1), arg3 -> ((arg1 - 1) + arg2), arg5 -> (arg5 + 2)}>

Fresh variables:
undef3, undef4, undef5, undef6, undef8, undef22, undef23, undef29, undef30, undef31, undef32, undef33, undef34, undef35, 

Undef variables:
undef3, undef4, undef5, undef6, undef8, undef22, undef23, undef29, undef30, undef31, undef32, undef33, undef34, undef35, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l2, l2, 1 <= arg3 /\ arg4 <= arg5 /\ 0 <= arg4, {arg2 -> -1 + arg2, arg3 -> -1 + arg1 + arg2, rest remain the same}>
<l2, l2, 1 <= arg3 /\ 0 <= arg5 /\ 0 <= undef22 /\ 0 <= undef23 /\ 2 <= arg4 /\ 2 + arg5 <= arg4, {arg2 -> -1 + arg2, arg3 -> -1 + arg1 + arg2, arg5 -> 2 + arg5, rest remain the same}>
<l2, l2, 1 <= arg3 /\ 0 <= arg5 /\ 0 <= undef29 /\ 0 <= undef30 /\ 2 <= arg4 /\ 2 + arg5 <= arg4, {arg1 -> -1 + arg1, arg3 -> -1 + arg1 + arg2, arg5 -> 2 + arg5, rest remain the same}>
Variables:
arg1, arg2, arg3, arg4, arg5

Precedence: 
Graph 0

Graph 1
<l0, l2, 1 <= undef31 /\ undef6 <= 200*undef32 /\ undef8 <= 200*undef32 /\ 13*undef8 <= 200*undef32 /\ 0 <= undef32 /\ 200*undef32 <= 12 + 13*undef8 /\ arg1 = 100*undef32 /\ arg2 = undef8 /\ arg3 = undef8 + 100*undef32 /\ arg4 = undef32 /\ arg5 = 0, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 2 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Detected abstraction incompatible with non-termination check.
Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.018319

Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.001752s
[33mRanking function: [36marg4 - arg5[0m
New Graphs: 
Transitions:
<l2, l2, 1 <= arg3 /\ arg4 <= arg5 /\ 0 <= arg4, {arg2 -> -1 + arg2, arg3 -> -1 + arg1 + arg2, rest remain the same}>
Variables:
arg1, arg2, arg3, arg4, arg5
Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000301s

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.001264s
Trying to remove transition: <l2, l2, 1 <= arg3 /\ arg4 <= arg5 /\ 0 <= arg4, {arg2 -> -1 + arg2, arg3 -> -1 + arg1 + arg2, rest remain the same}>
Solving with 1 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 0.004607s
Time used: 0.004488
Solving with 1 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 0.018738s
Time used: 0.018304

LOG: SAT solveNonLinear - Elapsed time: 0.018738s
Cost: 0; Total time: 0.018304
[33mTermination implied by a set of invariant(s):[0m
[36mInvariant at l2: arg3 <= arg1 + arg2 + arg5[0m
[ Invariant Graph ]
[33mStrengthening and disabling transitions...[0m

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l2, l2, 1 <= arg3 /\ arg3 <= arg1 + arg2 + arg5 /\ arg4 <= arg5 /\ 0 <= arg4, {arg2 -> -1 + arg2, arg3 -> -1 + arg1 + arg2, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l2, l2, 1 <= arg3 /\ arg3 <= arg1 + arg2 + arg5 /\ 0 <= arg5 /\ 0 <= undef22 /\ 0 <= undef23 /\ 2 <= arg4 /\ 2 + arg5 <= arg4, {arg2 -> -1 + arg2, arg3 -> -1 + arg1 + arg2, arg5 -> 2 + arg5, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l2, l2, 1 <= arg3 /\ arg3 <= arg1 + arg2 + arg5 /\ 0 <= arg5 /\ 0 <= undef29 /\ 0 <= undef30 /\ 2 <= arg4 /\ 2 + arg5 <= arg4, {arg1 -> -1 + arg1, arg3 -> -1 + arg1 + arg2, arg5 -> 2 + arg5, rest remain the same}>
[ Termination Graph ]
[33mStrengthening and disabling transitions...[0m

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l2, l2, 1 <= arg3 /\ arg3 <= arg1 + arg2 + arg5 /\ arg4 <= arg5 /\ 0 <= arg4, {arg2 -> -1 + arg2, arg3 -> -1 + arg1 + arg2, rest remain the same}>
[33mRanking function: [36marg1 + arg2 + arg5[0m
New Graphs: 
INVARIANTS: 
2: arg3 <= arg1 + arg2 + arg5 , 
Quasi-INVARIANTS to narrow Graph: 
2: 
[32mProgram Terminates[0m

