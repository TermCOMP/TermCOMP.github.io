YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l1, true>
<l4, l2, (arg2 > ~(1)) /\ (undef1 > ~(1)) /\ (arg1 > 0), par{arg1 -> undef1, arg2 -> undef2}>
<l2, l3, (arg1 > 1) /\ (arg1 > undef5), par{arg2 -> undef4}>
<l3, l2, (arg1 > undef6) /\ (arg1 > 1) /\ ((arg1 - (2 * undef6)) < 2) /\ ((arg1 - (2 * undef6)) >= 0), par{arg1 -> undef6, arg2 -> undef7}>
<l1, l4, true, par{arg1 -> undef8, arg2 -> undef9}>

Fresh variables:
undef1, undef2, undef4, undef5, undef6, undef7, undef8, undef9, 

Undef variables:
undef1, undef2, undef4, undef5, undef6, undef7, undef8, undef9, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l2, (arg1 = undef1) /\ (undef9 > ~(1)) /\ (undef1 > ~(1)) /\ (undef8 > 0)>
<l2, l2, (arg1 > 1) /\ (arg1 > undef5) /\ (arg1 > undef6) /\ (arg1 > 1) /\ ((arg1 - (2 * undef6)) < 2) /\ ((arg1 - (2 * undef6)) >= 0), par{arg1 -> undef6}>

Fresh variables:
undef1, undef2, undef4, undef5, undef6, undef7, undef8, undef9, 

Undef variables:
undef1, undef2, undef4, undef5, undef6, undef7, undef8, undef9, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l2, l2, 1 + undef5 <= arg1 /\ 1 + undef6 <= arg1 /\ arg1 <= 1 + 2*undef6 /\ 2*undef6 <= arg1 /\ 2 <= arg1, {arg1 -> undef6, rest remain the same}>
Variables:
arg1

Precedence: 
Graph 0

Graph 1
<l0, l2, 1 <= undef8 /\ 0 <= undef1 /\ 0 <= undef9 /\ arg1 = undef1, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 2 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.000869

Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000395s
[33mRanking function: [36m-1 + arg1[0m
New Graphs: 
[32mProgram Terminates[0m

