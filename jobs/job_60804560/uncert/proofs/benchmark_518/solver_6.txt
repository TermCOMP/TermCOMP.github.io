YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l9, true>
<l1, l2, (undef2 = undef2), par{tmp3^0 -> undef2, x1^0 -> (0 + j^0), y2^0 -> (1 + j^0)}>
<l1, l2, true>
<l3, l4, (4 <= (0 + j^0))>
<l3, l1, ((1 + j^0) <= 4)>
<l5, l6, true>
<l7, l3, true>
<l4, l5, true>
<l4, l5, true>
<l2, l7, true, par{j^0 -> (1 + j^0)}>
<l8, l7, true, par{j^0 -> 0}>
<l9, l8, true>

Fresh variables:
undef2, 

Undef variables:
undef2, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l7, (j^0 = 0)>
<l7, l6, (4 <= (0 + j^0))>
<l7, l6, (4 <= (0 + j^0))>
<l7, l7, ((1 + j^0) <= 4) /\ (undef2 = undef2), par{j^0 -> (1 + j^0)}>
<l7, l7, ((1 + j^0) <= 4), par{j^0 -> (1 + j^0)}>

Fresh variables:
undef2, 

Undef variables:
undef2, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l7, l7, j^0 <= 3, {j^0 -> 1 + j^0, rest remain the same}>
<l7, l7, j^0 <= 3, {j^0 -> 1 + j^0, rest remain the same}>
Variables:
j^0

Graph 2:
Transitions:
Variables:

Precedence: 
Graph 0

Graph 1
<l0, l7, j^0 = 0, {all remain the same}>

Graph 2
<l7, l6, 4 <= j^0, {all remain the same}>
<l7, l6, 4 <= j^0, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 6 , 2 )
( 7 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.001309

Checking conditional termination of SCC {l7}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000389s
[33mRanking function: [36m3 - j^0[0m
New Graphs: 
Proving termination of subgraph 2
Analyzing SCC {l6}...
No cycles found.

[32mProgram Terminates[0m

