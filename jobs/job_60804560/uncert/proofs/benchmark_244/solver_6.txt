YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l1, true>
<l3, l4, (undef1 > ~(1)) /\ (arg2 > 0) /\ (arg1 > 0), par{arg1 -> undef1, arg2 -> undef2}>
<l4, l4, (arg1 > 0) /\ ((arg1 - 1) < arg1), par{arg1 -> (arg1 - 1), arg2 -> undef4}>
<l4, l2, (1 = arg1), par{arg1 -> 1, arg2 -> undef6}>
<l2, l4, (arg1 > 0), par{arg1 -> 0, arg2 -> undef8}>
<l4, l2, (arg1 > 0) /\ ((arg1 - 1) < arg1), par{arg2 -> undef10}>
<l1, l3, true, par{arg1 -> undef11, arg2 -> undef12}>

Fresh variables:
undef1, undef2, undef4, undef6, undef8, undef10, undef11, undef12, 

Undef variables:
undef1, undef2, undef4, undef6, undef8, undef10, undef11, undef12, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l4, (arg1 = undef1) /\ (undef1 > ~(1)) /\ (undef12 > 0) /\ (undef11 > 0)>
<l4, l4, (arg1 > 0) /\ ((arg1 - 1) < arg1), par{arg1 -> (arg1 - 1)}>
<l4, l4, (1 = arg1) /\ (1 > 0), par{arg1 -> 0}>
<l4, l4, (arg1 > 0) /\ ((arg1 - 1) < arg1) /\ (arg1 > 0), par{arg1 -> 0}>

Fresh variables:
undef1, undef2, undef4, undef6, undef8, undef10, undef11, undef12, 

Undef variables:
undef1, undef2, undef4, undef6, undef8, undef10, undef11, undef12, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l4, l4, 1 <= arg1, {arg1 -> -1 + arg1, rest remain the same}>
<l4, l4, arg1 = 1, {arg1 -> 0, rest remain the same}>
<l4, l4, 1 <= arg1, {arg1 -> 0, rest remain the same}>
Variables:
arg1

Precedence: 
Graph 0

Graph 1
<l0, l4, 1 <= undef11 /\ 1 <= undef12 /\ 0 <= undef1 /\ arg1 = undef1, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 4 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.001963

Checking conditional termination of SCC {l4}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000517s
[33mRanking function: [36m-1 + arg1[0m
New Graphs: 
[32mProgram Terminates[0m

