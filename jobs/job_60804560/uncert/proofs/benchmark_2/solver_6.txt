YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l1, true>
<l3, l2, (arg1 > 0) /\ (0 = arg2), par{arg1 -> 0, arg2 -> 0}>
<l3, l2, (arg1 > 0) /\ (undef4 > ~(1)) /\ (1 = arg2), par{arg1 -> 0, arg2 -> undef4}>
<l3, l2, (undef5 > ~(1)) /\ (arg2 > 1) /\ (undef6 > ~(1)) /\ (arg1 > 0), par{arg1 -> undef5, arg2 -> undef6}>
<l2, l2, (arg2 > 0) /\ ((arg2 - 1) < arg2) /\ (0 = arg1), par{arg1 -> 1, arg2 -> (arg2 - 1)}>
<l2, l2, (arg1 > 0) /\ ((arg2 - 1) < arg2) /\ (arg2 > 0), par{arg1 -> (arg1 - 1)}>
<l2, l2, (arg1 > 0) /\ (arg2 > 0) /\ (undef11 > 0) /\ ((arg2 - 1) < arg2), par{arg1 -> undef11, arg2 -> (arg2 - 1)}>
<l1, l3, true, par{arg1 -> undef13, arg2 -> undef14}>

Fresh variables:
undef4, undef5, undef6, undef11, undef13, undef14, 

Undef variables:
undef4, undef5, undef6, undef11, undef13, undef14, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l2, (undef13 > 0) /\ (0 = undef14), par{arg1 -> 0, arg2 -> 0}>
<l0, l2, (undef13 > 0) /\ (undef4 > ~(1)) /\ (1 = undef14), par{arg1 -> 0, arg2 -> undef4}>
<l0, l2, (undef5 > ~(1)) /\ (undef14 > 1) /\ (undef6 > ~(1)) /\ (undef13 > 0), par{arg1 -> undef5, arg2 -> undef6}>
<l2, l2, (arg2 > 0) /\ ((arg2 - 1) < arg2) /\ (0 = arg1), par{arg1 -> 1, arg2 -> (arg2 - 1)}>
<l2, l2, (arg1 > 0) /\ ((arg2 - 1) < arg2) /\ (arg2 > 0), par{arg1 -> (arg1 - 1)}>
<l2, l2, (arg1 > 0) /\ (arg2 > 0) /\ (undef11 > 0) /\ ((arg2 - 1) < arg2), par{arg1 -> undef11, arg2 -> (arg2 - 1)}>

Fresh variables:
undef4, undef5, undef6, undef11, undef13, undef14, 

Undef variables:
undef4, undef5, undef6, undef11, undef13, undef14, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l2, l2, 1 <= arg2 /\ arg1 = 0, {arg1 -> 1, arg2 -> -1 + arg2, rest remain the same}>
<l2, l2, 1 <= arg1 /\ 1 <= arg2, {arg1 -> -1 + arg1, rest remain the same}>
<l2, l2, 1 <= arg1 /\ 1 <= arg2 /\ 1 <= undef11, {arg1 -> undef11, arg2 -> -1 + arg2, rest remain the same}>
Variables:
arg1, arg2

Precedence: 
Graph 0

Graph 1
<l0, l2, 1 <= undef13 /\ undef14 = 0, {arg1 -> 0, arg2 -> 0, rest remain the same}>
<l0, l2, 0 <= undef4 /\ 1 <= undef13 /\ undef14 = 1, {arg1 -> 0, arg2 -> undef4, rest remain the same}>
<l0, l2, 0 <= undef5 /\ 0 <= undef6 /\ 1 <= undef13 /\ 2 <= undef14, {arg1 -> undef5, arg2 -> undef6, rest remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 2 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.003554

Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000827s
[33mRanking function: [36m-1 + arg2[0m
New Graphs: 
Transitions:
<l2, l2, 1 <= arg1 /\ 1 <= arg2, {arg1 -> -1 + arg1, rest remain the same}>
Variables:
arg1, arg2
Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000265s
[33mRanking function: [36m-1 + arg1[0m
New Graphs: 
[32mProgram Terminates[0m

