YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l4, true>
<l1, l2, ((0 + x^0) <= 0) /\ (undef2 = (0 + x^0)) /\ (undef3 = (0 + undef2)) /\ (undef4 = (0 + undef3)), par{x^0 -> (0 + undef4)}>
<l1, l3, (1 <= (0 + x^0)) /\ (undef6 = (0 + x^0)), par{x^0 -> (~(1) + undef6)}>
<l3, l1, true, par{x^0 -> (0 + x^0)}>
<l4, l3, true>

Fresh variables:
undef2, undef3, undef4, undef6, 

Undef variables:
undef2, undef3, undef4, undef6, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l3, true>
<l3, l2, ((0 + (0 + x^0)) <= 0) /\ (undef2 = (0 + (0 + x^0))) /\ (undef3 = (0 + undef2)) /\ (undef4 = (0 + undef3)), par{x^0 -> (0 + undef4)}>
<l3, l3, (1 <= (0 + (0 + x^0))) /\ (undef6 = (0 + (0 + x^0))), par{x^0 -> (~(1) + undef6)}>

Fresh variables:
undef2, undef3, undef4, undef6, 

Undef variables:
undef2, undef3, undef4, undef6, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l3, l3, 1 <= x^0 /\ x^0 = undef6, {x^0 -> -1 + undef6, rest remain the same}>
Variables:
x^0

Graph 2:
Transitions:
Variables:

Precedence: 
Graph 0

Graph 1
<l0, l3, true, {all remain the same}>

Graph 2
<l3, l2, x^0 <= 0 /\ x^0 = undef2 /\ undef2 = undef3 /\ undef3 = undef4, {x^0 -> undef4, rest remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 2 , 2 )
( 3 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.000661

Checking conditional termination of SCC {l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000303s
[33mRanking function: [36m-1 + x^0[0m
New Graphs: 
Proving termination of subgraph 2
Analyzing SCC {l2}...
No cycles found.

[32mProgram Terminates[0m

