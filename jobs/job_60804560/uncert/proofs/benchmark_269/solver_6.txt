YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l1, true>
<l3, l2, (undef2 > ~(1)) /\ (arg2 > ~(1)) /\ (undef1 > ~(1)) /\ (arg1 > 0), par{arg1 -> undef1, arg2 -> undef2, arg3 -> (undef1 + 1)}>
<l2, l2, (arg3 <= arg2) /\ (arg1 > ~(2)), par{arg1 -> (arg1 + 1), arg3 -> (arg1 + 2)}>
<l1, l3, true, par{arg1 -> undef7, arg2 -> undef8, arg3 -> undef9}>

Fresh variables:
undef1, undef2, undef7, undef8, undef9, 

Undef variables:
undef1, undef2, undef7, undef8, undef9, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l2, (arg1 = undef1) /\ (arg2 = undef2) /\ (arg3 = (undef1 + 1)) /\ (undef2 > ~(1)) /\ (undef8 > ~(1)) /\ (undef1 > ~(1)) /\ (undef7 > 0)>
<l2, l2, (arg3 <= arg2) /\ (arg1 > ~(2)), par{arg1 -> (arg1 + 1), arg3 -> (arg1 + 2)}>

Fresh variables:
undef1, undef2, undef7, undef8, undef9, 

Undef variables:
undef1, undef2, undef7, undef8, undef9, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l2, l2, 0 <= 1 + arg1 /\ arg3 <= arg2, {arg1 -> 1 + arg1, arg3 -> 2 + arg1, rest remain the same}>
Variables:
arg1, arg2, arg3

Precedence: 
Graph 0

Graph 1
<l0, l2, 1 <= undef7 /\ 0 <= undef1 /\ 0 <= undef2 /\ 0 <= undef8 /\ arg3 = 1 + undef1 /\ arg1 = undef1 /\ arg2 = undef2, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 2 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.001789

Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000351s

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.001082s
Trying to remove transition: <l2, l2, 0 <= 1 + arg1 /\ arg3 <= arg2, {arg1 -> 1 + arg1, arg3 -> 2 + arg1, rest remain the same}>
Solving with 1 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 0.005672s
Time used: 0.005553
Solving with 1 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 0.006811s
Time used: 0.006479

LOG: SAT solveNonLinear - Elapsed time: 0.006811s
Cost: 0; Total time: 0.006479
[33mTermination implied by a set of invariant(s):[0m
[36mInvariant at l2: arg3 <= 1 + arg1[0m
[ Invariant Graph ]
[33mStrengthening and disabling transitions...[0m

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l2, l2, 0 <= 1 + arg1 /\ arg3 <= 1 + arg1 /\ arg3 <= arg2, {arg1 -> 1 + arg1, arg3 -> 2 + arg1, rest remain the same}>
[ Termination Graph ]
[33mStrengthening and disabling transitions...[0m

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l2, l2, 0 <= 1 + arg1 /\ arg3 <= 1 + arg1 /\ arg3 <= arg2, {arg1 -> 1 + arg1, arg3 -> 2 + arg1, rest remain the same}>
[33mRanking function: [36m1 + arg1 + 2*arg2 - 2*arg3[0m
New Graphs: 
INVARIANTS: 
2: arg3 <= 1 + arg1 , 
Quasi-INVARIANTS to narrow Graph: 
2: 
[32mProgram Terminates[0m

