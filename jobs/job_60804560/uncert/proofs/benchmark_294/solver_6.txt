YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l1, true>
<l4, l2, (arg2 > ~(1)) /\ (undef1 > ~(1)) /\ (arg1 > 0), par{arg1 -> undef1, arg2 -> undef2}>
<l2, l3, (arg1 > ~(1)), par{arg1 -> (arg1 + 1), arg2 -> 1}>
<l3, l3, (arg2 <= arg1), par{arg2 -> (arg2 + 1)}>
<l3, l2, (arg1 > 0) /\ (arg2 > arg1), par{arg1 -> (arg1 - 2), arg2 -> undef8}>
<l1, l4, true, par{arg1 -> undef9, arg2 -> undef10}>

Fresh variables:
undef1, undef2, undef8, undef9, undef10, 

Undef variables:
undef1, undef2, undef8, undef9, undef10, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l3, (arg1 = (undef1 + 1)) /\ (arg2 = 1) /\ (undef10 > ~(1)) /\ (undef1 > ~(1)) /\ (undef9 > 0) /\ (undef1 > ~(1))>
<l3, l3, (arg2 <= arg1), par{arg2 -> (arg2 + 1)}>
<l3, l3, (arg1 > 0) /\ (arg2 > arg1) /\ ((arg1 - 2) > ~(1)), par{arg1 -> ((arg1 - 2) + 1), arg2 -> 1}>

Fresh variables:
undef1, undef2, undef8, undef9, undef10, 

Undef variables:
undef1, undef2, undef8, undef9, undef10, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l3, l3, arg2 <= arg1, {arg2 -> 1 + arg2, rest remain the same}>
<l3, l3, 1 + arg1 <= arg2 /\ 2 <= arg1, {arg1 -> -1 + arg1, arg2 -> 1, rest remain the same}>
Variables:
arg1, arg2

Precedence: 
Graph 0

Graph 1
<l0, l3, 1 <= undef9 /\ 0 <= undef1 /\ 0 <= undef10 /\ arg1 = 1 + undef1 /\ arg2 = 1, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 3 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.005914

Checking conditional termination of SCC {l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000682s
[33mRanking function: [36marg1[0m
New Graphs: 
Transitions:
<l3, l3, arg2 <= arg1, {arg2 -> 1 + arg2, rest remain the same}>
Variables:
arg1, arg2
Checking conditional termination of SCC {l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000338s
[33mRanking function: [36marg1 - arg2[0m
New Graphs: 
[32mProgram Terminates[0m

