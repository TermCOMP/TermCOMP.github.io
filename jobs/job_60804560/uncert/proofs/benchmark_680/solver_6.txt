YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l5, true>
<l1, l2, ((0 + length4^0) <= (0 + i5^0))>
<l1, l3, ((1 + i5^0) <= (0 + length4^0)) /\ (undef12 = undef12), par{i5^0 -> (1 + i5^0), tmp___08^0 -> undef12}>
<l3, l1, true>
<l4, l3, (undef23 = undef23), par{i5^0 -> 0, length4^0 -> (0 + __const_10^0), s^0 -> (0 + undef23), tmp^0 -> undef23}>
<l5, l4, true>

Fresh variables:
undef12, undef23, 

Undef variables:
undef12, undef23, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l3, (i5^0 = 0) /\ (length4^0 = (0 + length4^0)) /\ (undef23 = undef23)>
<l3, l2, ((0 + length4^0) <= (0 + i5^0))>
<l3, l3, ((1 + i5^0) <= (0 + length4^0)) /\ (undef12 = undef12), par{i5^0 -> (1 + i5^0)}>

Fresh variables:
undef12, undef23, 

Undef variables:
undef12, undef23, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l3, l3, 1 + i5^0 <= length4^0, {i5^0 -> 1 + i5^0, rest remain the same}>
Variables:
i5^0, length4^0

Graph 2:
Transitions:
Variables:

Precedence: 
Graph 0

Graph 1
<l0, l3, i5^0 = 0, {all remain the same}>

Graph 2
<l3, l2, length4^0 <= i5^0, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 2 , 2 )
( 3 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.000926

Checking conditional termination of SCC {l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000396s
[33mRanking function: [36m-1 - i5^0 + length4^0[0m
New Graphs: 
Proving termination of subgraph 2
Analyzing SCC {l2}...
No cycles found.

[32mProgram Terminates[0m

