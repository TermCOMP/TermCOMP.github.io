YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l9, true>
<l1, l2, (undef2 = (0 + x_5^0)) /\ (undef9 = (0 + undef2)) /\ (undef1 = undef1), par{Result_4^0 -> undef1, __cil_tmp2_6^0 -> undef2, selected_11^0 -> (0 + undef9)}>
<l3, l4, (undef11 = (0 + x_5^0)) /\ (undef18 = (0 + undef11)) /\ (undef10 = undef10), par{Result_4^0 -> undef10, __cil_tmp2_6^0 -> undef11, retryCount_10^0 -> (1 + retryCount_10^0), selected_11^0 -> (0 + undef18)}>
<l4, l6, (undef22 = __disjvr_0^0) /\ (__disjvr_0^0 = undef22), par{__disjvr_0^0 -> undef22}>
<l6, l5, (undef29 = (0 + selected_11^0)), par{Result_4^0 -> (0 + undef29), __cil_tmp6_12^0 -> undef29}>
<l4, l7, ((0 + selected_11^0) <= 0) /\ (0 <= (0 + selected_11^0)) /\ (((0 + maxRetries_9^0) + (~(1) * retryCount_10^0)) <= 0) /\ (undef37 = (0 + selected_11^0)), par{Result_4^0 -> (0 + undef37), __cil_tmp6_12^0 -> undef37}>
<l4, l2, ((0 + selected_11^0) <= 0) /\ (0 <= (0 + selected_11^0)) /\ (0 <= ((~(1) + maxRetries_9^0) + (~(1) * retryCount_10^0))) /\ (undef44 = (0 + x_5^0)) /\ (undef51 = (0 + undef44)) /\ (undef43 = undef43), par{Result_4^0 -> undef43, __cil_tmp2_6^0 -> undef44, selected_11^0 -> (0 + undef51)}>
<l2, l4, true, par{retryCount_10^0 -> (1 + retryCount_10^0)}>
<l8, l4, true, par{maxRetries_9^0 -> 4, retryCount_10^0 -> 0, selected_11^0 -> 0}>
<l9, l8, true>

Fresh variables:
undef1, undef2, undef9, undef10, undef11, undef18, undef22, undef29, undef37, undef43, undef44, undef51, 

Undef variables:
undef1, undef2, undef9, undef10, undef11, undef18, undef22, undef29, undef37, undef43, undef44, undef51, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l4, (4 = 4) /\ (retryCount_10^0 = 0) /\ (selected_11^0 = 0)>
<l4, l5, (undef22 = __disjvr_0^0) /\ (__disjvr_0^0 = undef22) /\ (undef29 = (0 + selected_11^0)), par{__disjvr_0^0 -> undef22}>
<l4, l7, ((0 + selected_11^0) <= 0) /\ (0 <= (0 + selected_11^0)) /\ (((0 + 4) + (~(1) * retryCount_10^0)) <= 0) /\ (undef37 = (0 + selected_11^0))>
<l4, l4, ((0 + selected_11^0) <= 0) /\ (0 <= (0 + selected_11^0)) /\ (0 <= ((~(1) + 4) + (~(1) * retryCount_10^0))) /\ (undef44 = (0 + x_5^0)) /\ (undef51 = (0 + undef44)) /\ (undef43 = undef43), par{retryCount_10^0 -> (1 + retryCount_10^0), selected_11^0 -> (0 + undef51)}>

Fresh variables:
undef1, undef2, undef9, undef10, undef11, undef18, undef22, undef29, undef37, undef43, undef44, undef51, 

Undef variables:
undef1, undef2, undef9, undef10, undef11, undef18, undef22, undef29, undef37, undef43, undef44, undef51, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l4, l4, retryCount_10^0 <= 3 /\ selected_11^0 = 0 /\ x_5^0 = undef44 /\ undef44 = undef51, {retryCount_10^0 -> 1 + retryCount_10^0, selected_11^0 -> undef51, rest remain the same}>
Variables:
retryCount_10^0, selected_11^0, x_5^0

Graph 2:
Transitions:
Variables:

Graph 3:
Transitions:
Variables:

Precedence: 
Graph 0

Graph 1
<l0, l4, retryCount_10^0 = 0 /\ selected_11^0 = 0, {all remain the same}>

Graph 2
<l4, l7, 4 <= retryCount_10^0 /\ selected_11^0 = 0 /\ selected_11^0 = undef37, {all remain the same}>

Graph 3
<l4, l5, __disjvr_0^0 = undef22 /\ selected_11^0 = undef29, {__disjvr_0^0 -> undef22, rest remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 4 , 1 )
( 5 , 3 )
( 7 , 2 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.00118

Checking conditional termination of SCC {l4}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000436s
[33mRanking function: [36m3 - retryCount_10^0[0m
New Graphs: 
Proving termination of subgraph 2
Analyzing SCC {l7}...
No cycles found.

Proving termination of subgraph 3
Analyzing SCC {l5}...
No cycles found.

[32mProgram Terminates[0m

