YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l1, true>
<l4, l2, (arg2 > 0) /\ (undef3 > ~(1)) /\ ((undef1 + 1) <= arg1) /\ (arg1 > 0) /\ (undef1 > ~(1)), par{arg1 -> undef1, arg2 -> (undef3 - 1)}>
<l2, l3, (undef4 <= arg1) /\ (arg2 < 1) /\ (arg1 > ~(1)) /\ (undef4 > ~(1)), par{arg1 -> undef4, arg2 -> undef5}>
<l2, l2, ((undef6 - 2) <= arg1) /\ (arg2 > 0) /\ (arg1 > ~(1)) /\ (undef6 > 0), par{arg1 -> undef6, arg2 -> (arg2 - 1)}>
<l3, l3, ((undef8 + 1) <= arg1) /\ (arg1 > 0) /\ (undef8 > ~(1)), par{arg1 -> undef8, arg2 -> undef9}>
<l1, l4, true, par{arg1 -> undef10, arg2 -> undef11}>

Fresh variables:
undef1, undef3, undef4, undef5, undef6, undef8, undef9, undef10, undef11, 

Undef variables:
undef1, undef3, undef4, undef5, undef6, undef8, undef9, undef10, undef11, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l2, (arg1 = undef1) /\ (arg2 = (undef3 - 1)) /\ (undef11 > 0) /\ (undef3 > ~(1)) /\ ((undef1 + 1) <= undef10) /\ (undef10 > 0) /\ (undef1 > ~(1))>
<l2, l3, (undef4 <= arg1) /\ (arg2 < 1) /\ (arg1 > ~(1)) /\ (undef4 > ~(1)), par{arg1 -> undef4, arg2 -> undef5}>
<l2, l2, ((undef6 - 2) <= arg1) /\ (arg2 > 0) /\ (arg1 > ~(1)) /\ (undef6 > 0), par{arg1 -> undef6, arg2 -> (arg2 - 1)}>
<l3, l3, ((undef8 + 1) <= arg1) /\ (arg1 > 0) /\ (undef8 > ~(1)), par{arg1 -> undef8, arg2 -> undef9}>

Fresh variables:
undef1, undef3, undef4, undef5, undef6, undef8, undef9, undef10, undef11, 

Undef variables:
undef1, undef3, undef4, undef5, undef6, undef8, undef9, undef10, undef11, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l2, l2, 0 <= arg1 /\ 1 <= arg2 /\ 1 <= undef6 /\ undef6 <= 2 + arg1, {arg1 -> undef6, arg2 -> -1 + arg2, rest remain the same}>
Variables:
arg1, arg2

Graph 2:
Transitions:
<l3, l3, 0 <= undef8 /\ 1 <= arg1 /\ 1 + undef8 <= arg1, {arg1 -> undef8, arg2 -> undef9, rest remain the same}>
Variables:
arg1, arg2

Precedence: 
Graph 0

Graph 1
<l0, l2, 0 <= undef1 /\ 0 <= undef3 /\ 1 + undef1 <= undef10 /\ 1 <= undef10 /\ 1 <= undef11 /\ arg1 = undef1 /\ 1 + arg2 = undef3, {all remain the same}>

Graph 2
<l2, l3, 0 <= arg1 /\ undef4 <= arg1 /\ arg2 <= 0 /\ 0 <= undef4, {arg1 -> undef4, arg2 -> undef5, rest remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 2 , 1 )
( 3 , 2 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.001246

Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000448s
[33mRanking function: [36m-1 + arg2[0m
New Graphs: 
Proving termination of subgraph 2
Checking unfeasibility...
Time used: 0.000956

Checking conditional termination of SCC {l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000398s
[33mRanking function: [36m-1 + arg1[0m
New Graphs: 
[32mProgram Terminates[0m

