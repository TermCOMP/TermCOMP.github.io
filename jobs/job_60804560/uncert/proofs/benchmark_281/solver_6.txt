YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l1, true>
<l2, l3, (undef2 > ~(1)) /\ (arg2 > ~(1)) /\ (undef3 > ~(1)) /\ (undef1 > ~(1)) /\ (arg1 > 0), par{arg1 -> undef1, arg2 -> undef2, arg3 -> undef3}>
<l3, l4, (arg3 < arg2), par{arg1 -> arg2, arg2 -> arg1}>
<l4, l3, (arg2 <= arg3), par{arg1 -> arg2, arg2 -> (arg1 - 1)}>
<l4, l4, (arg3 < arg2), par{arg2 -> (arg2 - 1)}>
<l1, l2, true, par{arg1 -> undef13, arg2 -> undef14, arg3 -> undef15}>

Fresh variables:
undef1, undef2, undef3, undef13, undef14, undef15, 

Undef variables:
undef1, undef2, undef3, undef13, undef14, undef15, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l4, (arg1 = undef2) /\ (arg2 = undef1) /\ (arg3 = undef3) /\ (undef2 > ~(1)) /\ (undef14 > ~(1)) /\ (undef3 > ~(1)) /\ (undef1 > ~(1)) /\ (undef13 > 0) /\ (undef3 < undef2)>
<l4, l4, (arg2 <= arg3) /\ (arg3 < (arg1 - 1)), par{arg1 -> (arg1 - 1), arg2 -> arg2}>
<l4, l4, (arg3 < arg2), par{arg2 -> (arg2 - 1)}>

Fresh variables:
undef1, undef2, undef3, undef13, undef14, undef15, 

Undef variables:
undef1, undef2, undef3, undef13, undef14, undef15, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l4, l4, arg2 <= arg3 /\ 2 + arg3 <= arg1, {arg1 -> -1 + arg1, rest remain the same}>
<l4, l4, 1 + arg3 <= arg2, {arg2 -> -1 + arg2, rest remain the same}>
Variables:
arg1, arg2, arg3

Precedence: 
Graph 0

Graph 1
<l0, l4, 1 + undef3 <= undef2 /\ 1 <= undef13 /\ 0 <= undef1 /\ 0 <= undef2 /\ 0 <= undef3 /\ 0 <= undef14 /\ arg1 = undef2 /\ arg2 = undef1 /\ arg3 = undef3, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 4 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.00274

Checking conditional termination of SCC {l4}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000648s
[33mRanking function: [36m-1 + arg2 - arg3[0m
New Graphs: 
Transitions:
<l4, l4, arg2 <= arg3 /\ 2 + arg3 <= arg1, {arg1 -> -1 + arg1, rest remain the same}>
Variables:
arg1, arg2, arg3
Checking conditional termination of SCC {l4}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000315s
[33mRanking function: [36m-2 + arg1 - arg3[0m
New Graphs: 
[32mProgram Terminates[0m

