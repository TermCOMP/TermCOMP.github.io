YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l1, true>
<l4, l2, (arg1 > 0) /\ (arg2 > ~(1)), par{arg1 -> arg2, arg3 -> undef3}>
<l2, l3, (arg1 > 0), par{arg2 -> 2, arg3 -> arg2}>
<l3, l2, (arg2 > 0) /\ (arg1 > 0), par{arg1 -> (arg1 - arg2), arg2 -> (arg3 - 1), arg3 -> undef9}>
<l3, l3, (arg2 > 0) /\ (arg1 > 0), par{arg2 -> (arg2 - 1), arg3 -> (arg3 - 1)}>
<l3, l3, (arg2 > 0) /\ (arg1 > 0), par{arg2 -> (arg2 - 1), arg3 -> undef15}>
<l1, l4, true, par{arg1 -> undef16, arg2 -> undef17, arg3 -> undef18}>

Fresh variables:
undef3, undef9, undef15, undef16, undef17, undef18, 

Undef variables:
undef3, undef9, undef15, undef16, undef17, undef18, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l3, (arg1 = undef17) /\ (arg2 = 2) /\ (arg3 = undef17) /\ (undef16 > 0) /\ (undef17 > ~(1)) /\ (undef17 > 0)>
<l3, l3, (arg2 > 0) /\ (arg1 > 0) /\ ((arg1 - arg2) > 0), par{arg1 -> (arg1 - arg2), arg2 -> 2, arg3 -> (arg3 - 1)}>
<l3, l3, (arg2 > 0) /\ (arg1 > 0), par{arg2 -> (arg2 - 1), arg3 -> (arg3 - 1)}>
<l3, l3, (arg2 > 0) /\ (arg1 > 0), par{arg2 -> (arg2 - 1), arg3 -> undef15}>

Fresh variables:
undef3, undef9, undef15, undef16, undef17, undef18, 

Undef variables:
undef3, undef9, undef15, undef16, undef17, undef18, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l3, l3, 1 <= arg1 /\ 1 + arg2 <= arg1 /\ 1 <= arg2, {arg1 -> arg1 - arg2, arg2 -> 2, arg3 -> -1 + arg3, rest remain the same}>
<l3, l3, 1 <= arg1 /\ 1 <= arg2, {arg2 -> -1 + arg2, arg3 -> -1 + arg3, rest remain the same}>
<l3, l3, 1 <= arg1 /\ 1 <= arg2, {arg2 -> -1 + arg2, arg3 -> undef15, rest remain the same}>
Variables:
arg1, arg2, arg3

Precedence: 
Graph 0

Graph 1
<l0, l3, 1 <= undef16 /\ 1 <= undef17 /\ arg1 = undef17 /\ arg3 = undef17 /\ arg2 = 2, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 3 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.022401

Checking conditional termination of SCC {l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000993s
[33mRanking function: [36m-6 + 3*arg1[0m
New Graphs: 
Transitions:
<l3, l3, 1 <= arg1 /\ 1 <= arg2, {arg2 -> -1 + arg2, arg3 -> -1 + arg3, rest remain the same}>
<l3, l3, 1 <= arg1 /\ 1 <= arg2, {arg2 -> -1 + arg2, arg3 -> undef15, rest remain the same}>
Variables:
arg1, arg2, arg3
Checking conditional termination of SCC {l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000476s
[33mRanking function: [36m-1 + arg2[0m
New Graphs: 
[32mProgram Terminates[0m

