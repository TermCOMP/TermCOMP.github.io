YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l1, true>
<l2, l3, (undef1 > ~(1)) /\ (arg2 > 0) /\ (arg1 > 0), par{arg1 -> undef1, arg3 -> 1}>
<l2, l4, (undef7 > ~(1)) /\ (arg2 > 0) /\ (undef4 <= arg1) /\ (arg1 > 0) /\ (undef4 > 0) /\ (undef5 > 2), par{arg1 -> undef4, arg2 -> undef5, arg3 -> undef6}>
<l2, l4, (undef11 > ~(1)) /\ (arg2 > 0) /\ (arg1 >= undef8) /\ (arg1 >= (undef9 - 1)) /\ (arg1 > 0) /\ (undef8 > 0) /\ (undef9 > 1), par{arg1 -> undef8, arg2 -> undef9, arg3 -> undef10}>
<l3, l3, (arg1 > ~(1)) /\ (arg2 > ~(1)) /\ (arg3 > 0) /\ ((arg1 - 1) < arg1) /\ (arg3 < arg2), par{arg1 -> (arg1 - 1), arg3 -> (arg3 + 1)}>
<l4, l5, (undef18 > 0) /\ (arg3 > 1) /\ (undef15 <= arg2) /\ ((undef16 + 1) <= arg2) /\ (arg1 > 0) /\ (arg2 > 0) /\ (undef15 > 0) /\ (undef16 > ~(1)), par{arg1 -> undef15, arg2 -> undef16}>
<l5, l5, ((undef19 + 2) <= arg1) /\ (arg3 > 1) /\ (undef19 <= arg2) /\ ((undef20 + 3) <= arg1) /\ ((undef20 + 1) <= arg2) /\ (arg1 > 2) /\ (arg2 > 0) /\ (undef19 > 0) /\ (undef20 > ~(1)), par{arg1 -> undef19, arg2 -> undef20}>
<l1, l2, true, par{arg1 -> undef22, arg2 -> undef23, arg3 -> undef24}>

Fresh variables:
undef1, undef4, undef5, undef6, undef7, undef8, undef9, undef10, undef11, undef15, undef16, undef18, undef19, undef20, undef22, undef23, undef24, 

Undef variables:
undef1, undef4, undef5, undef6, undef7, undef8, undef9, undef10, undef11, undef15, undef16, undef18, undef19, undef20, undef22, undef23, undef24, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l3, (undef1 > ~(1)) /\ (undef23 > 0) /\ (undef22 > 0), par{arg1 -> undef1, arg2 -> undef23, arg3 -> 1}>
<l0, l5, (undef7 > ~(1)) /\ (undef23 > 0) /\ (undef4 <= undef22) /\ (undef22 > 0) /\ (undef4 > 0) /\ (undef5 > 2) /\ (undef18 > 0) /\ (undef6 > 1) /\ (undef15 <= undef5) /\ ((undef16 + 1) <= undef5) /\ (undef4 > 0) /\ (undef5 > 0) /\ (undef15 > 0) /\ (undef16 > ~(1)), par{arg1 -> undef15, arg2 -> undef16, arg3 -> undef6}>
<l0, l5, (undef11 > ~(1)) /\ (undef23 > 0) /\ (undef22 >= undef8) /\ (undef22 >= (undef9 - 1)) /\ (undef22 > 0) /\ (undef8 > 0) /\ (undef9 > 1) /\ (undef18 > 0) /\ (undef10 > 1) /\ (undef15 <= undef9) /\ ((undef16 + 1) <= undef9) /\ (undef8 > 0) /\ (undef9 > 0) /\ (undef15 > 0) /\ (undef16 > ~(1)), par{arg1 -> undef15, arg2 -> undef16, arg3 -> undef10}>
<l3, l3, (arg1 > ~(1)) /\ (arg2 > ~(1)) /\ (arg3 > 0) /\ ((arg1 - 1) < arg1) /\ (arg3 < arg2), par{arg1 -> (arg1 - 1), arg3 -> (arg3 + 1)}>
<l5, l5, ((undef19 + 2) <= arg1) /\ (arg3 > 1) /\ (undef19 <= arg2) /\ ((undef20 + 3) <= arg1) /\ ((undef20 + 1) <= arg2) /\ (arg1 > 2) /\ (arg2 > 0) /\ (undef19 > 0) /\ (undef20 > ~(1)), par{arg1 -> undef19, arg2 -> undef20}>

Fresh variables:
undef1, undef4, undef5, undef6, undef7, undef8, undef9, undef10, undef11, undef15, undef16, undef18, undef19, undef20, undef22, undef23, undef24, 

Undef variables:
undef1, undef4, undef5, undef6, undef7, undef8, undef9, undef10, undef11, undef15, undef16, undef18, undef19, undef20, undef22, undef23, undef24, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l5, l5, 1 <= arg2 /\ 1 + undef20 <= arg2 /\ 1 <= undef19 /\ undef19 <= arg2 /\ 0 <= undef20 /\ 2 + undef19 <= arg1 /\ 2 <= arg3 /\ 3 <= arg1 /\ 3 + undef20 <= arg1, {arg1 -> undef19, arg2 -> undef20, rest remain the same}>
Variables:
arg1, arg2, arg3

Graph 2:
Transitions:
<l3, l3, 1 + arg3 <= arg2 /\ 1 <= arg3 /\ 0 <= arg1 /\ 0 <= arg2, {arg1 -> -1 + arg1, arg3 -> 1 + arg3, rest remain the same}>
Variables:
arg1, arg2, arg3

Precedence: 
Graph 0

Graph 1
<l0, l5, 1 <= undef4 /\ 1 + undef16 <= undef5 /\ 1 <= undef15 /\ 1 <= undef18 /\ 1 <= undef22 /\ 1 <= undef23 /\ undef4 <= undef22 /\ undef15 <= undef5 /\ 0 <= undef7 /\ 0 <= undef16 /\ 2 <= undef6 /\ 3 <= undef5, {arg1 -> undef15, arg2 -> undef16, arg3 -> undef6, rest remain the same}>
<l0, l5, 1 <= undef8 /\ 1 + undef16 <= undef9 /\ 1 <= undef15 /\ 1 <= undef18 /\ 1 <= undef22 /\ 1 <= undef23 /\ undef9 <= 1 + undef22 /\ undef8 <= undef22 /\ undef15 <= undef9 /\ 0 <= undef11 /\ 0 <= undef16 /\ 2 <= undef9 /\ 2 <= undef10, {arg1 -> undef15, arg2 -> undef16, arg3 -> undef10, rest remain the same}>

Graph 2
<l0, l3, 1 <= undef22 /\ 1 <= undef23 /\ 0 <= undef1, {arg1 -> undef1, arg2 -> undef23, arg3 -> 1, rest remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 3 , 2 )
( 5 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.002494

Checking conditional termination of SCC {l5}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000769s
[33mRanking function: [36m(~(4) / 3) + (1 / 3)*arg1 + (1 / 3)*arg2[0m
New Graphs: 
Proving termination of subgraph 2
Checking unfeasibility...
Time used: 0.001521

Checking conditional termination of SCC {l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000479s
[33mRanking function: [36marg1[0m
New Graphs: 
[32mProgram Terminates[0m

