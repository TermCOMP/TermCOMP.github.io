YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l9, true>
<l1, l2, (undef2 = (0 + x_5^0)) /\ (undef10 = (0 + undef2)) /\ (undef1 = undef1), par{Result_4^0 -> undef1, __cil_tmp2_6^0 -> undef2, selected_11^0 -> (0 + undef10)}>
<l3, l4, (undef12 = (0 + x_5^0)) /\ (undef20 = (0 + undef12)) /\ (undef11 = undef11), par{Result_4^0 -> undef11, __cil_tmp2_6^0 -> undef12, retryCount_10^0 -> (1 + retryCount_10^0), selected_11^0 -> (0 + undef20)}>
<l4, l6, (undef25 = __disjvr_0^0) /\ (__disjvr_0^0 = undef25), par{__disjvr_0^0 -> undef25}>
<l6, l5, (undef32 = (0 + selected_11^0)), par{Result_4^0 -> (0 + undef32), __cil_tmp6_12^0 -> undef32}>
<l4, l7, ((0 + selected_11^0) <= 0) /\ (0 <= (0 + selected_11^0)) /\ (((0 + maxRetries_9^0) + (~(1) * retryCount_10^0)) <= 0) /\ (undef41 = (0 + selected_11^0)), par{Result_4^0 -> (0 + undef41), __cil_tmp6_12^0 -> undef41}>
<l4, l2, ((0 + selected_11^0) <= 0) /\ (0 <= (0 + selected_11^0)) /\ (0 <= ((~(1) + maxRetries_9^0) + (~(1) * retryCount_10^0))) /\ (undef49 = (0 + x_5^0)) /\ (undef57 = (0 + undef49)) /\ (undef48 = undef48), par{Result_4^0 -> undef48, __cil_tmp2_6^0 -> undef49, selected_11^0 -> (0 + undef57)}>
<l2, l4, true, par{retryCount_10^0 -> (1 + retryCount_10^0)}>
<l8, l4, true, par{maxRetries_9^0 -> (0 + __const_400^0), retryCount_10^0 -> 0, selected_11^0 -> 0}>
<l9, l8, true>

Fresh variables:
undef1, undef2, undef10, undef11, undef12, undef20, undef25, undef32, undef41, undef48, undef49, undef57, 

Undef variables:
undef1, undef2, undef10, undef11, undef12, undef20, undef25, undef32, undef41, undef48, undef49, undef57, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l4, (maxRetries_9^0 = (0 + maxRetries_9^0)) /\ (retryCount_10^0 = 0) /\ (selected_11^0 = 0)>
<l4, l5, (undef25 = __disjvr_0^0) /\ (__disjvr_0^0 = undef25) /\ (undef32 = (0 + selected_11^0)), par{__disjvr_0^0 -> undef25}>
<l4, l7, ((0 + selected_11^0) <= 0) /\ (0 <= (0 + selected_11^0)) /\ (((0 + maxRetries_9^0) + (~(1) * retryCount_10^0)) <= 0) /\ (undef41 = (0 + selected_11^0))>
<l4, l4, ((0 + selected_11^0) <= 0) /\ (0 <= (0 + selected_11^0)) /\ (0 <= ((~(1) + maxRetries_9^0) + (~(1) * retryCount_10^0))) /\ (undef49 = (0 + x_5^0)) /\ (undef57 = (0 + undef49)) /\ (undef48 = undef48), par{retryCount_10^0 -> (1 + retryCount_10^0), selected_11^0 -> (0 + undef57)}>

Fresh variables:
undef1, undef2, undef10, undef11, undef12, undef20, undef25, undef32, undef41, undef48, undef49, undef57, 

Undef variables:
undef1, undef2, undef10, undef11, undef12, undef20, undef25, undef32, undef41, undef48, undef49, undef57, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l4, l4, 1 + retryCount_10^0 <= maxRetries_9^0 /\ selected_11^0 = 0 /\ x_5^0 = undef49 /\ undef49 = undef57, {retryCount_10^0 -> 1 + retryCount_10^0, selected_11^0 -> undef57, rest remain the same}>
Variables:
maxRetries_9^0, retryCount_10^0, selected_11^0, x_5^0

Graph 2:
Transitions:
Variables:

Graph 3:
Transitions:
Variables:

Precedence: 
Graph 0

Graph 1
<l0, l4, retryCount_10^0 = 0 /\ selected_11^0 = 0, {all remain the same}>

Graph 2
<l4, l7, maxRetries_9^0 <= retryCount_10^0 /\ selected_11^0 = 0 /\ selected_11^0 = undef41, {all remain the same}>

Graph 3
<l4, l5, __disjvr_0^0 = undef25 /\ selected_11^0 = undef32, {__disjvr_0^0 -> undef25, rest remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 4 , 1 )
( 5 , 3 )
( 7 , 2 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.001447

Checking conditional termination of SCC {l4}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000588s
[33mRanking function: [36m-1 + maxRetries_9^0 - retryCount_10^0[0m
New Graphs: 
Proving termination of subgraph 2
Analyzing SCC {l7}...
No cycles found.

Proving termination of subgraph 3
Analyzing SCC {l5}...
No cycles found.

[32mProgram Terminates[0m

