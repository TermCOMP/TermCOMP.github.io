YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l5, true>
<l1, l2, (undef6 = undef6) /\ (undef1 = undef1), par{nondet!13^0 -> undef1, x!14^0 -> (0 + undef6)}>
<l2, l3, ((0 + x!14^0) <= 0), par{result!12^0 -> (0 + temp0!15^0)}>
<l2, l4, (1 <= (0 + x!14^0)) /\ (undef15 = (~(1) + x!14^0)) /\ ((0 + undef15) <= (~(1) + x!20^0)) /\ ((~(1) + x!20^0) <= (0 + undef15)) /\ (1 <= (0 + x!20^0)), par{x!14^0 -> undef15}>
<l4, l2, true>
<l5, l1, true>

Fresh variables:
undef1, undef6, undef15, 

Undef variables:
undef1, undef6, undef15, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l2, (x!14^0 = (0 + undef6)) /\ (undef6 = undef6) /\ (undef1 = undef1)>
<l2, l3, ((0 + x!14^0) <= 0)>
<l2, l2, (1 <= (0 + x!14^0)) /\ (undef15 = (~(1) + x!14^0)) /\ ((0 + undef15) <= (~(1) + x!20^0)) /\ ((~(1) + x!20^0) <= (0 + undef15)) /\ (1 <= (0 + x!20^0)), par{x!14^0 -> undef15}>

Fresh variables:
undef1, undef6, undef15, 

Undef variables:
undef1, undef6, undef15, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l2, l2, 1 <= x!14^0 /\ 1 <= x!20^0 /\ x!14^0 = 1 + undef15 /\ x!20^0 = 1 + undef15, {x!14^0 -> undef15, rest remain the same}>
Variables:
x!14^0, x!20^0

Graph 2:
Transitions:
Variables:

Precedence: 
Graph 0

Graph 1
<l0, l2, x!14^0 = undef6, {all remain the same}>

Graph 2
<l2, l3, x!14^0 <= 0, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 2 , 1 )
( 3 , 2 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.001033

Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000419s
[33mRanking function: [36mx!14^0 - x!20^0[0m
New Graphs: 
Proving termination of subgraph 2
Analyzing SCC {l3}...
No cycles found.

[32mProgram Terminates[0m

