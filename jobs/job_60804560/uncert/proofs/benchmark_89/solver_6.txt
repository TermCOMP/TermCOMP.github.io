YES
Solver Timeout: 4
No parsing errors!
Init Location: 0
Transitions:
<l0, l1, true>
<l2, l3, (arg1 > 0) /\ (0 = arg2), par{arg1 -> 0, arg2 -> 0, arg3 -> 0, arg4 -> 0, arg5 -> 0, arg6 -> 0, arg7 -> 0}>
<l2, l3, (arg1 > 0) /\ (undef9 > ~(1)) /\ (1 = arg2), par{arg1 -> 0, arg2 -> undef9, arg3 -> 0, arg4 -> 0, arg5 -> 0, arg6 -> 1, arg7 -> 1}>
<l2, l3, (undef16 > ~(1)) /\ (undef17 > ~(1)) /\ (arg1 > 0) /\ (2 = arg2), par{arg1 -> 0, arg2 -> undef16, arg3 -> undef17, arg4 -> 0, arg5 -> 0, arg6 -> 2, arg7 -> 2}>
<l2, l3, (undef23 > ~(1)) /\ (arg2 > 2) /\ (undef22 > ~(1)) /\ (undef24 > ~(1)) /\ (arg1 > 0), par{arg1 -> undef22, arg2 -> undef23, arg3 -> undef24, arg4 -> undef22, arg5 -> undef22, arg6 -> arg2, arg7 -> 3}>
<l3, l3, (arg1 > ~(1)) /\ (arg6 > ~(1)) /\ (arg7 >= arg6) /\ ((2 * arg2) >= 0) /\ (((3 * arg3) - (2 * arg2)) < 0) /\ ((3 * arg3) >= 0) /\ (arg1 = arg4) /\ (arg1 = arg5), par{arg2 -> 0, arg3 -> 0, arg4 -> arg1, arg5 -> arg1}>
<l3, l3, (arg1 > ~(1)) /\ (arg6 > ~(1)) /\ (arg7 > ~(1)) /\ (arg7 < arg6) /\ (undef37 > ~(1)) /\ ((arg7 + 1) >= arg6) /\ ((2 * arg2) >= 0) /\ ((3 * arg3) >= 0) /\ (((3 * arg3) - (2 * arg2)) < (0 - (2 * undef37))) /\ ((2 * undef37) >= 0) /\ (arg1 = arg4) /\ (arg1 = arg5), par{arg1 -> (arg1 - (0 - (2 * undef37))), arg2 -> undef37, arg3 -> 0, arg4 -> (arg1 - (0 - (2 * undef37))), arg5 -> (arg1 - (0 - (2 * undef37))), arg7 -> (arg7 + 1)}>
<l3, l3, (arg6 > 1) /\ ((arg7 + 1) < arg6) /\ (arg1 > ~(1)) /\ (arg7 > ~(1)) /\ (undef44 > ~(1)) /\ (undef45 > ~(1)) /\ ((2 * arg2) >= 0) /\ ((3 * arg3) >= 0) /\ ((2 * undef44) >= 0) /\ ((3 * undef45) >= 0) /\ ((arg7 + 2) <= arg6) /\ (((3 * undef45) - (2 * undef44)) > ((3 * arg3) - (2 * arg2))) /\ (arg1 = arg4) /\ (arg1 = arg5), par{arg1 -> (arg1 - ((3 * undef45) - (2 * undef44))), arg2 -> undef44, arg3 -> undef45, arg4 -> (arg1 - ((3 * undef45) - (2 * undef44))), arg5 -> (arg1 - ((3 * undef45) - (2 * undef44))), arg7 -> (arg7 + 2)}>
<l1, l2, true, par{arg1 -> undef50, arg2 -> undef51, arg3 -> undef52, arg4 -> undef53, arg5 -> undef54, arg6 -> undef55, arg7 -> undef56}>

Fresh variables:
undef9, undef16, undef17, undef22, undef23, undef24, undef37, undef44, undef45, undef50, undef51, undef52, undef53, undef54, undef55, undef56, 

Undef variables:
undef9, undef16, undef17, undef22, undef23, undef24, undef37, undef44, undef45, undef50, undef51, undef52, undef53, undef54, undef55, undef56, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l3, (undef50 > 0) /\ (0 = undef51), par{arg1 -> 0, arg2 -> 0, arg3 -> 0, arg4 -> 0, arg5 -> 0, arg6 -> 0, arg7 -> 0}>
<l0, l3, (undef50 > 0) /\ (undef9 > ~(1)) /\ (1 = undef51), par{arg1 -> 0, arg2 -> undef9, arg3 -> 0, arg4 -> 0, arg5 -> 0, arg6 -> 1, arg7 -> 1}>
<l0, l3, (undef16 > ~(1)) /\ (undef17 > ~(1)) /\ (undef50 > 0) /\ (2 = undef51), par{arg1 -> 0, arg2 -> undef16, arg3 -> undef17, arg4 -> 0, arg5 -> 0, arg6 -> 2, arg7 -> 2}>
<l0, l3, (undef23 > ~(1)) /\ (undef51 > 2) /\ (undef22 > ~(1)) /\ (undef24 > ~(1)) /\ (undef50 > 0), par{arg1 -> undef22, arg2 -> undef23, arg3 -> undef24, arg4 -> undef22, arg5 -> undef22, arg6 -> undef51, arg7 -> 3}>
<l3, l3, (arg1 > ~(1)) /\ (arg6 > ~(1)) /\ (arg7 >= arg6) /\ ((2 * arg2) >= 0) /\ (((3 * arg3) - (2 * arg2)) < 0) /\ ((3 * arg3) >= 0) /\ (arg1 = arg4) /\ (arg1 = arg5), par{arg2 -> 0, arg3 -> 0, arg4 -> arg1, arg5 -> arg1}>
<l3, l3, (arg1 > ~(1)) /\ (arg6 > ~(1)) /\ (arg7 > ~(1)) /\ (arg7 < arg6) /\ (undef37 > ~(1)) /\ ((arg7 + 1) >= arg6) /\ ((2 * arg2) >= 0) /\ ((3 * arg3) >= 0) /\ (((3 * arg3) - (2 * arg2)) < (0 - (2 * undef37))) /\ ((2 * undef37) >= 0) /\ (arg1 = arg4) /\ (arg1 = arg5), par{arg1 -> (arg1 - (0 - (2 * undef37))), arg2 -> undef37, arg3 -> 0, arg4 -> (arg1 - (0 - (2 * undef37))), arg5 -> (arg1 - (0 - (2 * undef37))), arg7 -> (arg7 + 1)}>
<l3, l3, (arg6 > 1) /\ ((arg7 + 1) < arg6) /\ (arg1 > ~(1)) /\ (arg7 > ~(1)) /\ (undef44 > ~(1)) /\ (undef45 > ~(1)) /\ ((2 * arg2) >= 0) /\ ((3 * arg3) >= 0) /\ ((2 * undef44) >= 0) /\ ((3 * undef45) >= 0) /\ ((arg7 + 2) <= arg6) /\ (((3 * undef45) - (2 * undef44)) > ((3 * arg3) - (2 * arg2))) /\ (arg1 = arg4) /\ (arg1 = arg5), par{arg1 -> (arg1 - ((3 * undef45) - (2 * undef44))), arg2 -> undef44, arg3 -> undef45, arg4 -> (arg1 - ((3 * undef45) - (2 * undef44))), arg5 -> (arg1 - ((3 * undef45) - (2 * undef44))), arg7 -> (arg7 + 2)}>

Fresh variables:
undef9, undef16, undef17, undef22, undef23, undef24, undef37, undef44, undef45, undef50, undef51, undef52, undef53, undef54, undef55, undef56, 

Undef variables:
undef9, undef16, undef17, undef22, undef23, undef24, undef37, undef44, undef45, undef50, undef51, undef52, undef53, undef54, undef55, undef56, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l3, l3, 0 <= arg1 /\ 0 <= arg2 /\ 0 <= arg3 /\ arg6 <= arg7 /\ 0 <= arg6 /\ 1 + 3*arg3 <= 2*arg2 /\ arg1 = arg4 /\ arg1 = arg5, {arg2 -> 0, arg3 -> 0, arg4 -> arg1, arg5 -> arg1, rest remain the same}>
<l3, l3, 0 <= arg1 /\ 0 <= arg2 /\ 0 <= arg3 /\ 0 <= arg6 /\ 0 <= arg7 /\ 0 <= undef37 /\ 1 + 3*arg3 + 2*undef37 <= 2*arg2 /\ arg1 = arg4 /\ arg1 = arg5 /\ arg6 = 1 + arg7, {arg1 -> arg1 + 2*undef37, arg2 -> undef37, arg3 -> 0, arg4 -> arg1 + 2*undef37, arg5 -> arg1 + 2*undef37, arg7 -> 1 + arg7, rest remain the same}>
<l3, l3, 0 <= arg1 /\ 0 <= arg2 /\ 0 <= arg3 /\ 0 <= arg7 /\ 0 <= undef44 /\ 0 <= undef45 /\ 1 + 3*arg3 + 2*undef44 <= 2*arg2 + 3*undef45 /\ 2 <= arg6 /\ 2 + arg7 <= arg6 /\ arg1 = arg4 /\ arg1 = arg5, {arg1 -> arg1 + 2*undef44 - 3*undef45, arg2 -> undef44, arg3 -> undef45, arg4 -> arg1 + 2*undef44 - 3*undef45, arg5 -> arg1 + 2*undef44 - 3*undef45, arg7 -> 2 + arg7, rest remain the same}>
Variables:
arg1, arg2, arg3, arg4, arg5, arg6, arg7

Precedence: 
Graph 0

Graph 1
<l0, l3, 1 <= undef50 /\ undef51 = 0, {arg1 -> 0, arg2 -> 0, arg3 -> 0, arg4 -> 0, arg5 -> 0, arg6 -> 0, arg7 -> 0, rest remain the same}>
<l0, l3, 0 <= undef9 /\ 1 <= undef50 /\ undef51 = 1, {arg1 -> 0, arg2 -> undef9, arg3 -> 0, arg4 -> 0, arg5 -> 0, arg6 -> 1, arg7 -> 1, rest remain the same}>
<l0, l3, 0 <= undef16 /\ 0 <= undef17 /\ 1 <= undef50 /\ undef51 = 2, {arg1 -> 0, arg2 -> undef16, arg3 -> undef17, arg4 -> 0, arg5 -> 0, arg6 -> 2, arg7 -> 2, rest remain the same}>
<l0, l3, 0 <= undef22 /\ 0 <= undef23 /\ 0 <= undef24 /\ 1 <= undef50 /\ 3 <= undef51, {arg1 -> undef22, arg2 -> undef23, arg3 -> undef24, arg4 -> undef22, arg5 -> undef22, arg6 -> undef51, arg7 -> 3, rest remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 3 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.01343

Checking conditional termination of SCC {l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.003308s
[33mRanking function: [36m-6 + 2*arg1 + 12*arg2 - 18*arg3 - arg4 - arg5 - 3*arg6 + 3*arg7[0m
New Graphs: 
Transitions:
<l3, l3, 0 <= arg1 /\ 0 <= arg2 /\ 0 <= arg3 /\ 0 <= arg6 /\ 0 <= arg7 /\ 0 <= undef37 /\ 1 + 3*arg3 + 2*undef37 <= 2*arg2 /\ arg1 = arg4 /\ arg1 = arg5 /\ arg6 = 1 + arg7, {arg1 -> arg1 + 2*undef37, arg2 -> undef37, arg3 -> 0, arg4 -> arg1 + 2*undef37, arg5 -> arg1 + 2*undef37, arg7 -> 1 + arg7, rest remain the same}>
<l3, l3, 0 <= arg1 /\ 0 <= arg2 /\ 0 <= arg3 /\ 0 <= arg7 /\ 0 <= undef44 /\ 0 <= undef45 /\ 1 + 3*arg3 + 2*undef44 <= 2*arg2 + 3*undef45 /\ 2 <= arg6 /\ 2 + arg7 <= arg6 /\ arg1 = arg4 /\ arg1 = arg5, {arg1 -> arg1 + 2*undef44 - 3*undef45, arg2 -> undef44, arg3 -> undef45, arg4 -> arg1 + 2*undef44 - 3*undef45, arg5 -> arg1 + 2*undef44 - 3*undef45, arg7 -> 2 + arg7, rest remain the same}>
Variables:
arg1, arg2, arg3, arg4, arg5, arg6, arg7
Checking conditional termination of SCC {l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.001733s
[33mRanking function: [36m(3 / 2) + (1 / 2)*arg6 + (~(1) / 2)*arg7[0m
New Graphs: 
[32mProgram Terminates[0m

