YES
We consider the system t390o.

  Alphabet:

    cons : [c * d] --> d 
    fcons : [b -> c * a] --> a 
    fmap : [a * b] --> d 
    fnil : [] --> a 
    nil : [] --> d 

  Rules:

    fmap(fnil, X) => nil 
    fmap(fcons(F, X), Y) => cons(F Y, fmap(X, Y)) 

We use the dependency pair framework as described in [Kop12, Ch. 6/7], with static dependency pairs (see [KusIsoSakBla09] and the adaptation for AFSMs and accessible arguments in [FuhKop19]).

We thus obtain the following dependency pair problem (P_0, R_0, computable, formative):

  Dependency Pairs P_0:

    0] fmap#(fcons(F, X), Y) =#> fmap#(X, Y)   

  Rules R_0:

    fmap(fnil, X) => nil 
    fmap(fcons(F, X), Y) => cons(F Y, fmap(X, Y)) 

Thus, the original system is terminating if (P_0, R_0, computable, formative) is finite.

We consider the dependency pair problem (P_0, R_0, computable, formative).

We apply the subterm criterion with the following projection function:

  nu(fmap#) = 1 

Thus, we can orient the dependency pairs as follows:

  nu(fmap#(fcons(F, X), Y)) = fcons(F, X) |> X = nu(fmap#(X, Y)) 

By [FuhKop19, Thm. 61], we may replace a dependency pair problem (P_0, R_0, computable, f) by ({}, R_0, computable, f).  By the empty set processor [Kop12, Thm. 7.15] this problem may be immediately removed.

As all dependency pair problems were succesfully simplified with sound (and complete) processors until nothing remained, we conclude termination.


+++ Citations +++

[FuhKop19]  C. Fuhs, and C. Kop.  A static higher-order dependency pair framework.  In Proceedings of ESOP 2019, 2019.
[Kop12]  C. Kop.  Higher Order Termination.  PhD Thesis, 2012.
[KusIsoSakBla09]  K. Kusakari, Y. Isogai, M. Sakai, and F. Blanqui.  Static Dependency Pair Method Based On Strong Computability for Higher-Order Rewrite Systems.  In volume 92(10) of IEICE Transactions on Information and Systems.  2007--2015, 2009.
