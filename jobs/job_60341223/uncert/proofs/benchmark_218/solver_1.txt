NO
We consider the system SnDgZ.

  Alphabet:

    I : [] --> b 
    O : [] --> b 
    cons : [e * f] --> f 
    f : [c] --> a 
    false : [] --> d 
    filter : [e -> d * f] --> f 
    filter2 : [d * e -> d * e * f] --> f 
    g : [b * b] --> c 
    map : [e -> e * f] --> f 
    nil : [] --> f 
    s : [b] --> c 
    true : [] --> d 

  Rules:

    f(s(X)) => f(g(X, X)) 
    g(O, I) => s(O) 
    O => I 
    map(F, nil) => nil 
    map(F, cons(X, Y)) => cons(F X, map(F, Y)) 
    filter(F, nil) => nil 
    filter(F, cons(X, Y)) => filter2(F X, F, X, Y) 
    filter2(true, F, X, Y) => cons(X, filter(F, Y)) 
    filter2(false, F, X, Y) => filter(F, Y) 

This system is non-terminating, as demonstrated by our external first-order non-termination checker:

 || The following well-typed term is terminating: f(g(O, O))
 || 
 || proof of system.trs
 || # AProVE Commit ID: 500ec9b2e2a919720cb177ef26031cb0220e008e fuhs 20130603
 || 
 || 
 || Termination w.r.t. Q of the given QTRS could be disproven:
 || 
 || (0) QTRS
 || (1) NonTerminationProof [EQUIVALENT, 0 ms]
 || (2) NO
 || 
 || 
 || ----------------------------------------
 || 
 || (0)
 || Obligation:
 || Q restricted rewrite system:
 || The TRS R consists of the following rules:
 || 
 ||    f(s(%X)) -> f(g(%X, %X))
 ||    g(O, I) -> s(O)
 ||    O -> I
 || 
 || Q is empty.
 || 
 || ----------------------------------------
 || 
 || (1) NonTerminationProof (EQUIVALENT)
 || The following loops were found:
 || 
 || ---------- Loop: ----------
 || 
 || f(g(O, O)) -> f(g(O, I)) with rule O -> I at position [0,1] and matcher [ ]
 || 
 || f(g(O, I)) -> f(s(O)) with rule g(O, I) -> s(O) at position [0] and matcher [ ]
 || 
 || f(s(O)) -> f(g(O, O)) with rule f(s(%X)) -> f(g(%X, %X)) at position [] and matcher [%X / O]
 || 
 || Now an instance of the first term with Matcher [ ] occurs in the last term at position [].
 || 
 || Context: []
 || 
 || 
 || ----------------------------------------
 || 
 || (2)
 || NO
 || 
