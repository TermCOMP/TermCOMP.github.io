YES
We consider the system LWpDG.

  Alphabet:

    append : [c * c] --> c 
    cons : [b * c] --> c 
    flatwith : [a -> b * b] --> c 
    flatwithsub : [a -> b * c] --> c 
    leaf : [a] --> b 
    nil : [] --> c 
    node : [c] --> b 

  Rules:

    append(nil, X) => X 
    append(cons(X, Y), Z) => cons(X, append(Y, Z)) 
    flatwith(F, leaf(X)) => cons(F X, nil) 
    flatwith(F, node(X)) => flatwithsub(F, X) 
    flatwithsub(F, nil) => nil 
    flatwithsub(F, cons(X, Y)) => append(flatwith(F, X), flatwithsub(F, Y)) 

We use rule removal, following [Kop12, Theorem 2.23].

This gives the following requirements (possibly using Theorems 2.25 and 2.26 in [Kop12]):

  append(nil, X) >? X 
  append(cons(X, Y), Z) >? cons(X, append(Y, Z)) 
  flatwith(F, leaf(X)) >? cons(F X, nil) 
  flatwith(F, node(X)) >? flatwithsub(F, X) 
  flatwithsub(F, nil) >? nil 
  flatwithsub(F, cons(X, Y)) >? append(flatwith(F, X), flatwithsub(F, Y)) 

We orient these requirements with a polynomial interpretation in the natural numbers.

The following interpretation satisfies the requirements:

  append = Lam[y0;y1].y0 + y1 
  cons = Lam[y0;y1].1 + y0 + y1 
  flatwith = Lam[G0;y1].y1 + G0(y1) + 2*y1*G0(y1) 
  flatwithsub = Lam[G0;y1].y1 + G0(0) + G0(y1) + 2*y1*G0(y1) 
  leaf = Lam[y0].3 + 3*y0 
  nil = 2 
  node = Lam[y0].3 + 3*y0 

Using this interpretation, the requirements translate to:

  [[append(nil, _x0)]] = 2 + x0 > x0 = [[_x0]] 
  [[append(cons(_x0, _x1), _x2)]] = 1 + x0 + x1 + x2 >= 1 + x0 + x1 + x2 = [[cons(_x0, append(_x1, _x2))]] 
  [[flatwith(_F0, leaf(_x1))]] = 3 + 3*x1 + 6*x1*F0(3 + 3*x1) + 7*F0(3 + 3*x1) >= 3 + x1 + F0(x1) = [[cons(_F0 _x1, nil)]] 
  [[flatwith(_F0, node(_x1))]] = 3 + 3*x1 + 6*x1*F0(3 + 3*x1) + 7*F0(3 + 3*x1) > x1 + F0(0) + F0(x1) + 2*x1*F0(x1) = [[flatwithsub(_F0, _x1)]] 
  [[flatwithsub(_F0, nil)]] = 2 + F0(0) + 5*F0(2) >= 2 = [[nil]] 
  [[flatwithsub(_F0, cons(_x1, _x2))]] = 1 + x1 + x2 + F0(0) + 2*x1*F0(1 + x1 + x2) + 2*x2*F0(1 + x1 + x2) + 3*F0(1 + x1 + x2) > x1 + x2 + F0(0) + F0(x1) + F0(x2) + 2*x1*F0(x1) + 2*x2*F0(x2) = [[append(flatwith(_F0, _x1), flatwithsub(_F0, _x2))]] 

We can thus remove the following rules:

  append(nil, X) => X 
  flatwith(F, node(X)) => flatwithsub(F, X) 
  flatwithsub(F, cons(X, Y)) => append(flatwith(F, X), flatwithsub(F, Y)) 

We use rule removal, following [Kop12, Theorem 2.23].

This gives the following requirements (possibly using Theorems 2.25 and 2.26 in [Kop12]):

  append(cons(X, Y), Z) >? cons(X, append(Y, Z)) 
  flatwith(F, leaf(X)) >? cons(F X, nil) 
  flatwithsub(F, nil) >? nil 

We orient these requirements with a polynomial interpretation in the natural numbers.

The following interpretation satisfies the requirements:

  append = Lam[y0;y1].y1 + 3*y0 
  cons = Lam[y0;y1].y0 + y1 
  flatwith = Lam[G0;y1].3 + 3*y1 + G0(0) + y1*G0(y1) 
  flatwithsub = Lam[G0;y1].3 + 3*y1 + G0(0) 
  leaf = Lam[y0].3 + 3*y0 
  nil = 0 

Using this interpretation, the requirements translate to:

  [[append(cons(_x0, _x1), _x2)]] = x2 + 3*x0 + 3*x1 >= x0 + x2 + 3*x1 = [[cons(_x0, append(_x1, _x2))]] 
  [[flatwith(_F0, leaf(_x1))]] = 12 + 9*x1 + F0(0) + 3*x1*F0(3 + 3*x1) + 3*F0(3 + 3*x1) > x1 + F0(x1) = [[cons(_F0 _x1, nil)]] 
  [[flatwithsub(_F0, nil)]] = 3 + F0(0) > 0 = [[nil]] 

We can thus remove the following rules:

  flatwith(F, leaf(X)) => cons(F X, nil) 
  flatwithsub(F, nil) => nil 

We use rule removal, following [Kop12, Theorem 2.23].

This gives the following requirements (possibly using Theorems 2.25 and 2.26 in [Kop12]):

  append(cons(X, Y), Z) >? cons(X, append(Y, Z)) 

We orient these requirements with a polynomial interpretation in the natural numbers.

The following interpretation satisfies the requirements:

  append = Lam[y0;y1].y1 + 3*y0 
  cons = Lam[y0;y1].1 + y0 + y1 

Using this interpretation, the requirements translate to:

  [[append(cons(_x0, _x1), _x2)]] = 3 + x2 + 3*x0 + 3*x1 > 1 + x0 + x2 + 3*x1 = [[cons(_x0, append(_x1, _x2))]] 

We can thus remove the following rules:

  append(cons(X, Y), Z) => cons(X, append(Y, Z)) 

All rules were succesfully removed.  Thus, termination of the original system has been reduced to termination of the beta-rule, which is well-known to hold.


+++ Citations +++

[Kop12]  C. Kop.  Higher Order Termination.  PhD Thesis, 2012.
