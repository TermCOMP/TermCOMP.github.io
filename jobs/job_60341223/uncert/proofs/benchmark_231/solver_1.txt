YES
We consider the system tp63N.

  Alphabet:

    !div : [a * a] --> a 
    C : [] --> a 
    cons : [c * d] --> d 
    false : [] --> b 
    filter : [c -> b * d] --> d 
    filter2 : [b * c -> b * c * d] --> d 
    map : [c -> c * d] --> d 
    nil : [] --> d 
    true : [] --> b 

  Rules:

    !div(!div(!div(!div(C, X), Y), Z), U) => !div(!div(X, Z), !div(!div(!div(X, Y), Z), U)) 
    map(F, nil) => nil 
    map(F, cons(X, Y)) => cons(F X, map(F, Y)) 
    filter(F, nil) => nil 
    filter(F, cons(X, Y)) => filter2(F X, F, X, Y) 
    filter2(true, F, X, Y) => cons(X, filter(F, Y)) 
    filter2(false, F, X, Y) => filter(F, Y) 

We use rule removal, following [Kop12, Theorem 2.23].

This gives the following requirements (possibly using Theorems 2.25 and 2.26 in [Kop12]):

  !div(!div(!div(!div(C, X), Y), Z), U) >? !div(!div(X, Z), !div(!div(!div(X, Y), Z), U)) 
  map(F, nil) >? nil 
  map(F, cons(X, Y)) >? cons(F X, map(F, Y)) 
  filter(F, nil) >? nil 
  filter(F, cons(X, Y)) >? filter2(F X, F, X, Y) 
  filter2(true, F, X, Y) >? cons(X, filter(F, Y)) 
  filter2(false, F, X, Y) >? filter(F, Y) 

We use a recursive path ordering as defined in [Kop12, Chapter 5].

Argument functions:

  [[filter2(x_1, x_2, x_3, x_4)]] = filter2(x_2, x_4, x_1, x_3) 
  [[nil]] = _|_ 

We choose Lex = {!div, @_{o -> o}, filter, filter2} and Mul = {C, cons, false, map, true}, and the following precedence: map > C > !div > false > @_{o -> o} = filter = filter2 > true > cons

Taking the argument function into account, and fixing the greater / greater equal choices, the constraints can be denoted as follows:

  !div(!div(!div(!div(C, X), Y), Z), U) >= !div(!div(X, Z), !div(!div(!div(X, Y), Z), U)) 
  map(F, _|_) >= _|_ 
  map(F, cons(X, Y)) > cons(@_{o -> o}(F, X), map(F, Y)) 
  filter(F, _|_) >= _|_ 
  filter(F, cons(X, Y)) >= filter2(@_{o -> o}(F, X), F, X, Y) 
  filter2(true, F, X, Y) >= cons(X, filter(F, Y)) 
  filter2(false, F, X, Y) >= filter(F, Y) 

With these choices, we have:

  1] !div(!div(!div(!div(C, X), Y), Z), U) >= !div(!div(X, Z), !div(!div(!div(X, Y), Z), U))  because [2], by (Star) 
  2] !div*(!div(!div(!div(C, X), Y), Z), U) >= !div(!div(X, Z), !div(!div(!div(X, Y), Z), U))  because !div in Lex, [3], [14] and [18], by (Stat) 
  3] !div(!div(!div(C, X), Y), Z) > !div(X, Z)  because [4], by definition 
  4] !div*(!div(!div(C, X), Y), Z) >= !div(X, Z)  because !div in Lex, [5], [10] and [12], by (Stat) 
  5] !div(!div(C, X), Y) > X  because [6], by definition 
  6] !div*(!div(C, X), Y) >= X  because [7], by (Select) 
  7] !div(C, X) >= X  because [8], by (Star) 
  8] !div*(C, X) >= X  because [9], by (Select) 
  9] X >= X  by (Meta) 
  10] !div*(!div(!div(C, X), Y), Z) >= X  because [11], by (Select) 
  11] !div(!div(C, X), Y) >= X  because [6], by (Star) 
  12] !div*(!div(!div(C, X), Y), Z) >= Z  because [13], by (Select) 
  13] Z >= Z  by (Meta) 
  14] !div*(!div(!div(!div(C, X), Y), Z), U) >= !div(X, Z)  because [15], by (Select) 
  15] !div(!div(!div(C, X), Y), Z) >= !div(X, Z)  because !div in Lex, [16] and [17], by (Fun) 
  16] !div(!div(C, X), Y) >= X  because [6], by (Star) 
  17] Z >= Z  by (Meta) 
  18] !div*(!div(!div(!div(C, X), Y), Z), U) >= !div(!div(!div(X, Y), Z), U)  because !div in Lex, [19], [31] and [34], by (Stat) 
  19] !div(!div(!div(C, X), Y), Z) > !div(!div(X, Y), Z)  because [20], by definition 
  20] !div*(!div(!div(C, X), Y), Z) >= !div(!div(X, Y), Z)  because !div in Lex, [21], [27] and [12], by (Stat) 
  21] !div(!div(C, X), Y) > !div(X, Y)  because [22], by definition 
  22] !div*(!div(C, X), Y) >= !div(X, Y)  because !div in Lex, [23], [6] and [25], by (Stat) 
  23] !div(C, X) > X  because [24], by definition 
  24] !div*(C, X) >= X  because [9], by (Select) 
  25] !div*(!div(C, X), Y) >= Y  because [26], by (Select) 
  26] Y >= Y  by (Meta) 
  27] !div*(!div(!div(C, X), Y), Z) >= !div(X, Y)  because [28], by (Select) 
  28] !div(!div(C, X), Y) >= !div(X, Y)  because !div in Lex, [29] and [30], by (Fun) 
  29] !div(C, X) >= X  because [24], by (Star) 
  30] Y >= Y  by (Meta) 
  31] !div*(!div(!div(!div(C, X), Y), Z), U) >= !div(!div(X, Y), Z)  because [32], by (Select) 
  32] !div(!div(!div(C, X), Y), Z) >= !div(!div(X, Y), Z)  because !div in Lex, [33] and [17], by (Fun) 
  33] !div(!div(C, X), Y) >= !div(X, Y)  because !div in Lex, [29] and [30], by (Fun) 
  34] !div*(!div(!div(!div(C, X), Y), Z), U) >= U  because [35], by (Select) 
  35] U >= U  by (Meta) 

  36] map(F, _|_) >= _|_  by (Bot) 

  37] map(F, cons(X, Y)) > cons(@_{o -> o}(F, X), map(F, Y))  because [38], by definition 
  38] map*(F, cons(X, Y)) >= cons(@_{o -> o}(F, X), map(F, Y))  because map > cons, [39] and [46], by (Copy) 
  39] map*(F, cons(X, Y)) >= @_{o -> o}(F, X)  because map > @_{o -> o}, [40] and [42], by (Copy) 
  40] map*(F, cons(X, Y)) >= F  because [41], by (Select) 
  41] F >= F  by (Meta) 
  42] map*(F, cons(X, Y)) >= X  because [43], by (Select) 
  43] cons(X, Y) >= X  because [44], by (Star) 
  44] cons*(X, Y) >= X  because [45], by (Select) 
  45] X >= X  by (Meta) 
  46] map*(F, cons(X, Y)) >= map(F, Y)  because map in Mul, [47] and [48], by (Stat) 
  47] F >= F  by (Meta) 
  48] cons(X, Y) > Y  because [49], by definition 
  49] cons*(X, Y) >= Y  because [50], by (Select) 
  50] Y >= Y  by (Meta) 

  51] filter(F, _|_) >= _|_  by (Bot) 

  52] filter(F, cons(X, Y)) >= filter2(@_{o -> o}(F, X), F, X, Y)  because [53], by (Star) 
  53] filter*(F, cons(X, Y)) >= filter2(@_{o -> o}(F, X), F, X, Y)  because filter = filter2, filter in Lex, [54], [55], [58], [62], [63] and [65], by (Stat) 
  54] F >= F  by (Meta) 
  55] cons(X, Y) > Y  because [56], by definition 
  56] cons*(X, Y) >= Y  because [57], by (Select) 
  57] Y >= Y  by (Meta) 
  58] filter*(F, cons(X, Y)) >= @_{o -> o}(F, X)  because filter = @_{o -> o}, filter in Lex, [54], [59], [62] and [63], by (Stat) 
  59] cons(X, Y) > X  because [60], by definition 
  60] cons*(X, Y) >= X  because [61], by (Select) 
  61] X >= X  by (Meta) 
  62] filter*(F, cons(X, Y)) >= F  because [54], by (Select) 
  63] filter*(F, cons(X, Y)) >= X  because [64], by (Select) 
  64] cons(X, Y) >= X  because [60], by (Star) 
  65] filter*(F, cons(X, Y)) >= Y  because [66], by (Select) 
  66] cons(X, Y) >= Y  because [56], by (Star) 

  67] filter2(true, F, X, Y) >= cons(X, filter(F, Y))  because [68], by (Star) 
  68] filter2*(true, F, X, Y) >= cons(X, filter(F, Y))  because filter2 > cons, [69] and [71], by (Copy) 
  69] filter2*(true, F, X, Y) >= X  because [70], by (Select) 
  70] X >= X  by (Meta) 
  71] filter2*(true, F, X, Y) >= filter(F, Y)  because filter2 = filter, filter2 in Lex, [72], [73], [74] and [75], by (Stat) 
  72] F >= F  by (Meta) 
  73] Y >= Y  by (Meta) 
  74] filter2*(true, F, X, Y) >= F  because [72], by (Select) 
  75] filter2*(true, F, X, Y) >= Y  because [73], by (Select) 

  76] filter2(false, F, X, Y) >= filter(F, Y)  because [77], by (Star) 
  77] filter2*(false, F, X, Y) >= filter(F, Y)  because filter2 = filter, filter2 in Lex, [78], [79], [80] and [81], by (Stat) 
  78] F >= F  by (Meta) 
  79] Y >= Y  by (Meta) 
  80] filter2*(false, F, X, Y) >= F  because [78], by (Select) 
  81] filter2*(false, F, X, Y) >= Y  because [79], by (Select) 

We can thus remove the following rules:

  map(F, cons(X, Y)) => cons(F X, map(F, Y)) 

We use rule removal, following [Kop12, Theorem 2.23].

This gives the following requirements (possibly using Theorems 2.25 and 2.26 in [Kop12]):

  !div(!div(!div(!div(C, X), Y), Z), U) >? !div(!div(X, Z), !div(!div(!div(X, Y), Z), U)) 
  map(F, nil) >? nil 
  filter(F, nil) >? nil 
  filter(F, cons(X, Y)) >? filter2(F X, F, X, Y) 
  filter2(true, F, X, Y) >? cons(X, filter(F, Y)) 
  filter2(false, F, X, Y) >? filter(F, Y) 

We use a recursive path ordering as defined in [Kop12, Chapter 5].

Argument functions:

  [[filter(x_1, x_2)]] = filter(x_2, x_1) 
  [[filter2(x_1, x_2, x_3, x_4)]] = filter2(x_4, x_2, x_1, x_3) 
  [[nil]] = _|_ 

We choose Lex = {!div, filter, filter2} and Mul = {@_{o -> o}, C, cons, false, map, true}, and the following precedence: !div > true > map > false > filter = filter2 > @_{o -> o} > C > cons

Taking the argument function into account, and fixing the greater / greater equal choices, the constraints can be denoted as follows:

  !div(!div(!div(!div(C, X), Y), Z), U) > !div(!div(X, Z), !div(!div(!div(X, Y), Z), U)) 
  map(F, _|_) >= _|_ 
  filter(F, _|_) > _|_ 
  filter(F, cons(X, Y)) > filter2(@_{o -> o}(F, X), F, X, Y) 
  filter2(true, F, X, Y) > cons(X, filter(F, Y)) 
  filter2(false, F, X, Y) >= filter(F, Y) 

With these choices, we have:

  1] !div(!div(!div(!div(C, X), Y), Z), U) > !div(!div(X, Z), !div(!div(!div(X, Y), Z), U))  because [2], by definition 
  2] !div*(!div(!div(!div(C, X), Y), Z), U) >= !div(!div(X, Z), !div(!div(!div(X, Y), Z), U))  because !div in Lex, [3], [14] and [18], by (Stat) 
  3] !div(!div(!div(C, X), Y), Z) > !div(X, Z)  because [4], by definition 
  4] !div*(!div(!div(C, X), Y), Z) >= !div(X, Z)  because !div in Lex, [5], [10] and [12], by (Stat) 
  5] !div(!div(C, X), Y) > X  because [6], by definition 
  6] !div*(!div(C, X), Y) >= X  because [7], by (Select) 
  7] !div(C, X) >= X  because [8], by (Star) 
  8] !div*(C, X) >= X  because [9], by (Select) 
  9] X >= X  by (Meta) 
  10] !div*(!div(!div(C, X), Y), Z) >= X  because [11], by (Select) 
  11] !div(!div(C, X), Y) >= X  because [6], by (Star) 
  12] !div*(!div(!div(C, X), Y), Z) >= Z  because [13], by (Select) 
  13] Z >= Z  by (Meta) 
  14] !div*(!div(!div(!div(C, X), Y), Z), U) >= !div(X, Z)  because [15], by (Select) 
  15] !div(!div(!div(C, X), Y), Z) >= !div(X, Z)  because !div in Lex, [16] and [17], by (Fun) 
  16] !div(!div(C, X), Y) >= X  because [6], by (Star) 
  17] Z >= Z  by (Meta) 
  18] !div*(!div(!div(!div(C, X), Y), Z), U) >= !div(!div(!div(X, Y), Z), U)  because !div in Lex, [19], [30] and [35], by (Stat) 
  19] !div(!div(!div(C, X), Y), Z) > !div(!div(X, Y), Z)  because [20], by definition 
  20] !div*(!div(!div(C, X), Y), Z) >= !div(!div(X, Y), Z)  because !div in Lex, [21], [27] and [12], by (Stat) 
  21] !div(!div(C, X), Y) > !div(X, Y)  because [22], by definition 
  22] !div*(!div(C, X), Y) >= !div(X, Y)  because !div in Lex, [23], [6] and [25], by (Stat) 
  23] !div(C, X) > X  because [24], by definition 
  24] !div*(C, X) >= X  because [9], by (Select) 
  25] !div*(!div(C, X), Y) >= Y  because [26], by (Select) 
  26] Y >= Y  by (Meta) 
  27] !div*(!div(!div(C, X), Y), Z) >= !div(X, Y)  because !div in Lex, [5], [10] and [28], by (Stat) 
  28] !div*(!div(!div(C, X), Y), Z) >= Y  because [29], by (Select) 
  29] !div(!div(C, X), Y) >= Y  because [25], by (Star) 
  30] !div*(!div(!div(!div(C, X), Y), Z), U) >= !div(!div(X, Y), Z)  because [31], by (Select) 
  31] !div(!div(!div(C, X), Y), Z) >= !div(!div(X, Y), Z)  because !div in Lex, [32] and [17], by (Fun) 
  32] !div(!div(C, X), Y) >= !div(X, Y)  because !div in Lex, [33] and [34], by (Fun) 
  33] !div(C, X) >= X  because [24], by (Star) 
  34] Y >= Y  by (Meta) 
  35] !div*(!div(!div(!div(C, X), Y), Z), U) >= U  because [36], by (Select) 
  36] U >= U  by (Meta) 

  37] map(F, _|_) >= _|_  by (Bot) 

  38] filter(F, _|_) > _|_  because [39], by definition 
  39] filter*(F, _|_) >= _|_  by (Bot) 

  40] filter(F, cons(X, Y)) > filter2(@_{o -> o}(F, X), F, X, Y)  because [41], by definition 
  41] filter*(F, cons(X, Y)) >= filter2(@_{o -> o}(F, X), F, X, Y)  because filter = filter2, filter in Lex, [42], [45], [46], [48] and [52], by (Stat) 
  42] cons(X, Y) > Y  because [43], by definition 
  43] cons*(X, Y) >= Y  because [44], by (Select) 
  44] Y >= Y  by (Meta) 
  45] filter*(F, cons(X, Y)) >= @_{o -> o}(F, X)  because filter > @_{o -> o}, [46] and [48], by (Copy) 
  46] filter*(F, cons(X, Y)) >= F  because [47], by (Select) 
  47] F >= F  by (Meta) 
  48] filter*(F, cons(X, Y)) >= X  because [49], by (Select) 
  49] cons(X, Y) >= X  because [50], by (Star) 
  50] cons*(X, Y) >= X  because [51], by (Select) 
  51] X >= X  by (Meta) 
  52] filter*(F, cons(X, Y)) >= Y  because [53], by (Select) 
  53] cons(X, Y) >= Y  because [43], by (Star) 

  54] filter2(true, F, X, Y) > cons(X, filter(F, Y))  because [55], by definition 
  55] filter2*(true, F, X, Y) >= cons(X, filter(F, Y))  because filter2 > cons, [56] and [58], by (Copy) 
  56] filter2*(true, F, X, Y) >= X  because [57], by (Select) 
  57] X >= X  by (Meta) 
  58] filter2*(true, F, X, Y) >= filter(F, Y)  because filter2 = filter, filter2 in Lex, [59], [60], [61] and [62], by (Stat) 
  59] F >= F  by (Meta) 
  60] Y >= Y  by (Meta) 
  61] filter2*(true, F, X, Y) >= F  because [59], by (Select) 
  62] filter2*(true, F, X, Y) >= Y  because [60], by (Select) 

  63] filter2(false, F, X, Y) >= filter(F, Y)  because [64], by (Star) 
  64] filter2*(false, F, X, Y) >= filter(F, Y)  because filter2 = filter, filter2 in Lex, [65], [66], [67] and [68], by (Stat) 
  65] F >= F  by (Meta) 
  66] Y >= Y  by (Meta) 
  67] filter2*(false, F, X, Y) >= F  because [65], by (Select) 
  68] filter2*(false, F, X, Y) >= Y  because [66], by (Select) 

We can thus remove the following rules:

  !div(!div(!div(!div(C, X), Y), Z), U) => !div(!div(X, Z), !div(!div(!div(X, Y), Z), U)) 
  filter(F, nil) => nil 
  filter(F, cons(X, Y)) => filter2(F X, F, X, Y) 
  filter2(true, F, X, Y) => cons(X, filter(F, Y)) 

We use rule removal, following [Kop12, Theorem 2.23].

This gives the following requirements (possibly using Theorems 2.25 and 2.26 in [Kop12]):

  map(F, nil) >? nil 
  filter2(false, F, X, Y) >? filter(F, Y) 

We orient these requirements with a polynomial interpretation in the natural numbers.

The following interpretation satisfies the requirements:

  false = 3 
  filter = Lam[G0;y1].y1 + G0(0) 
  filter2 = Lam[y0;G1;y2;y3].3 + y2 + 3*y0 + 3*y3 + 2*G1(0) + 2*G1(y0) + 2*G1(y2) + 2*G1(y3) + 3*y0*G1(y0) 
  map = Lam[G0;y1].3 + 3*y1 + 2*G0(0) 
  nil = 0 

Using this interpretation, the requirements translate to:

  [[map(_F0, nil)]] = 3 + 2*F0(0) > 0 = [[nil]] 
  [[filter2(false, _F0, _x1, _x2)]] = 12 + x1 + 3*x2 + 2*F0(0) + 2*F0(x1) + 2*F0(x2) + 11*F0(3) > x2 + F0(0) = [[filter(_F0, _x2)]] 

We can thus remove the following rules:

  map(F, nil) => nil 
  filter2(false, F, X, Y) => filter(F, Y) 

All rules were succesfully removed.  Thus, termination of the original system has been reduced to termination of the beta-rule, which is well-known to hold.


+++ Citations +++

[Kop12]  C. Kop.  Higher Order Termination.  PhD Thesis, 2012.
