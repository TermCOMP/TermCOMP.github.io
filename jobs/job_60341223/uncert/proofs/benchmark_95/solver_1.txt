YES
We consider the system 6mGoo.

  Alphabet:

    cons : [nat -> nat * funlist] --> funlist 
    false : [] --> bool 
    head : [funlist] --> nat -> nat 
    if : [bool * nat -> string * nat -> string] --> nat -> string 
    nil : [] --> funlist 
    s : [nat] --> nat 
    tail : [funlist] --> funlist 
    test : [nat -> nat] --> bool 
    true : [] --> bool 

  Rules:

    if(true, F, G) => F 
    if(false, F, G) => G 
    test(/\x.s(x)) => true 
    head(cons(F, X)) => F 
    tail(cons(F, X)) => X 

We use the dependency pair framework as described in [Kop12, Ch. 6/7], with static dependency pairs (see [KusIsoSakBla09] and the adaptation for AFSMs and accessible arguments in [FuhKop19]).

In order to do so, we start by eta-expanding the system, which gives:

  if(true, F, G, X) => F X 
  if(false, F, G, X) => G X 
  test(/\x.s(x)) => true 
  head(cons(F, X), Y) => F Y 
  tail(cons(F, X)) => X 

We thus obtain the following dependency pair problem (P_0, R_0, computable, formative):

  Dependency Pairs P_0:


  Rules R_0:

    if(true, F, G, X) => F X 
    if(false, F, G, X) => G X 
    test(/\x.s(x)) => true 
    head(cons(F, X), Y) => F Y 
    tail(cons(F, X)) => X 

Thus, the original system is terminating if (P_0, R_0, computable, formative) is finite.

We consider the dependency pair problem (P_0, R_0, computable, formative).

We place the elements of P in a dependency graph approximation G (see e.g. [Kop12, Thm. 7.27, 7.29], as follows:


This graph has no strongly connected components.  By [Kop12, Thm. 7.31], this implies finiteness of the dependency pair problem.

As all dependency pair problems were succesfully simplified with sound (and complete) processors until nothing remained, we conclude termination.


+++ Citations +++

[FuhKop19]  C. Fuhs, and C. Kop.  A static higher-order dependency pair framework.  In Proceedings of ESOP 2019, 2019.
[Kop12]  C. Kop.  Higher Order Termination.  PhD Thesis, 2012.
[KusIsoSakBla09]  K. Kusakari, Y. Isogai, M. Sakai, and F. Blanqui.  Static Dependency Pair Method Based On Strong Computability for Higher-Order Rewrite Systems.  In volume 92(10) of IEICE Transactions on Information and Systems.  2007--2015, 2009.
