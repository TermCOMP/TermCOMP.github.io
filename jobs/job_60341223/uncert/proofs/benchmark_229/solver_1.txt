YES
We consider the system 3bmfx.

  Alphabet:

    !plus : [a * a] --> a 
    !times : [a * a] --> a 
    O : [] --> a 
    cons : [c * d] --> d 
    fact : [a] --> a 
    false : [] --> b 
    filter : [c -> b * d] --> d 
    filter2 : [b * c -> b * c * d] --> d 
    map : [c -> c * d] --> d 
    nil : [] --> d 
    p : [a] --> a 
    s : [a] --> a 
    true : [] --> b 

  Rules:

    p(s(X)) => X 
    fact(O) => s(O) 
    fact(s(X)) => !times(s(X), fact(p(s(X)))) 
    !times(O, X) => O 
    !times(s(X), Y) => !plus(!times(X, Y), Y) 
    !plus(X, O) => X 
    !plus(X, s(Y)) => s(!plus(X, Y)) 
    map(F, nil) => nil 
    map(F, cons(X, Y)) => cons(F X, map(F, Y)) 
    filter(F, nil) => nil 
    filter(F, cons(X, Y)) => filter2(F X, F, X, Y) 
    filter2(true, F, X, Y) => cons(X, filter(F, Y)) 
    filter2(false, F, X, Y) => filter(F, Y) 

We observe that the rules contain a first-order subset:

  p(s(X)) => X 
  fact(O) => s(O) 
  fact(s(X)) => !times(s(X), fact(p(s(X)))) 
  !times(O, X) => O 
  !times(s(X), Y) => !plus(!times(X, Y), Y) 
  !plus(X, O) => X 
  !plus(X, s(Y)) => s(!plus(X, Y)) 

Moreover, the system is orthogonal.  Thus, by [Kop12, Thm. 7.55], we may omit all first-order dependency pairs from the dependency pair problem (DP(R), R) if this first-order part is terminating when seen as a many-sorted first-order TRS.

According to the external first-order termination prover, this system is indeed terminating:

 || Input TRS:
 ||     1: p(s(PeRCenTX)) -> PeRCenTX
 ||     2: fact(O()) -> s(O())
 ||     3: fact(s(PeRCenTX)) -> !times(s(PeRCenTX),fact(p(s(PeRCenTX))))
 ||     4: !times(O(),PeRCenTX) -> O()
 ||     5: !times(s(PeRCenTX),PeRCenTY) -> !plus(!times(PeRCenTX,PeRCenTY),PeRCenTY)
 ||     6: !plus(PeRCenTX,O()) -> PeRCenTX
 ||     7: !plus(PeRCenTX,s(PeRCenTY)) -> s(!plus(PeRCenTX,PeRCenTY))
 || Number of strict rules: 7
 || Direct POLO(bPol) ... failed.
 || Uncurrying !times p
 || 1: p^1_s(PeRCenTX) -> PeRCenTX
 || 2: fact(O()) -> s(O())
 || 3: fact(s(PeRCenTX)) -> !times^1_s(PeRCenTX,fact(p^1_s(PeRCenTX)))
 || 4: !times^1_O(PeRCenTX) -> O()
 || 5: !times^1_s(PeRCenTX,PeRCenTY) -> !plus(!times(PeRCenTX,PeRCenTY),PeRCenTY)
 || 6: !plus(PeRCenTX,O()) -> PeRCenTX
 || 7: !plus(PeRCenTX,s(PeRCenTY)) -> s(!plus(PeRCenTX,PeRCenTY))
 || 8: p(s(_1)) ->= p^1_s(_1)
 || 9: !times(s(_1),_2) ->= !times^1_s(_1,_2)
 || 10: !times(O(),_1) ->= !times^1_O(_1)
 || Number of strict rules: 7
 || Direct POLO(bPol) ... failed.
 || Dependency Pairs:
 ||    #1: #!times(s(_1),_2) ->? #!times^1_s(_1,_2)
 ||    #2: #!plus(PeRCenTX,s(PeRCenTY)) -> #!plus(PeRCenTX,PeRCenTY)
 ||    #3: #!times(O(),_1) ->? #!times^1_O(_1)
 ||    #4: #!times^1_s(PeRCenTX,PeRCenTY) -> #!plus(!times(PeRCenTX,PeRCenTY),PeRCenTY)
 ||    #5: #!times^1_s(PeRCenTX,PeRCenTY) -> #!times(PeRCenTX,PeRCenTY)
 ||    #6: #fact(s(PeRCenTX)) -> #!times^1_s(PeRCenTX,fact(p^1_s(PeRCenTX)))
 ||    #7: #fact(s(PeRCenTX)) -> #fact(p^1_s(PeRCenTX))
 ||    #8: #fact(s(PeRCenTX)) -> #p^1_s(PeRCenTX)
 ||    #9: #p(s(_1)) ->? #p^1_s(_1)
 || Number of SCCs: 3, DPs: 4
 ||   SCC { #7 }
 || POLO(Sum)... succeeded.
 ||       !times^1_O	w: 0
 ||       s 	w: x1 + 2
 ||       #p^1_s	w: 0
 ||       !plus	w: 0
 ||       #!times	w: 0
 ||       p^1_s	w: x1 + 1
 ||       #!plus	w: 0
 ||       #fact	w: x1
 ||       #p 	w: 0
 ||       O 	w: 0
 ||       p 	w: 0
 ||       fact	w: 0
 ||       !times	w: 0
 ||       #!times^1_O	w: 0
 ||       #!times^1_s	w: 0
 ||       !times^1_s	w: 0
 ||     USABLE RULES: { 1 }
 ||     Removed DPs: #7
 || Number of SCCs: 2, DPs: 3
 ||   SCC { #2 }
 || POLO(Sum)... succeeded.
 ||       !times^1_O	w: 0
 ||       s 	w: x1 + 1
 ||       #p^1_s	w: 0
 ||       !plus	w: 0
 ||       #!times	w: 0
 ||       p^1_s	w: x1 + 1
 ||       #!plus	w: x2
 ||       #fact	w: x1
 ||       #p 	w: 0
 ||       O 	w: 0
 ||       p 	w: 0
 ||       fact	w: 0
 ||       !times	w: 0
 ||       #!times^1_O	w: 0
 ||       #!times^1_s	w: 0
 ||       !times^1_s	w: 0
 ||     USABLE RULES: { 1 }
 ||     Removed DPs: #2
 || Number of SCCs: 1, DPs: 2
 ||   SCC { #1 #5 }
 || POLO(Sum)... succeeded.
 ||       !times^1_O	w: 0
 ||       s 	w: x1 + 2
 ||       #p^1_s	w: 0
 ||       !plus	w: 0
 ||       #!times	w: x1
 ||       p^1_s	w: x1 + 1
 ||       #!plus	w: 0
 ||       #fact	w: x1
 ||       #p 	w: 0
 ||       O 	w: 0
 ||       p 	w: 0
 ||       fact	w: 0
 ||       !times	w: 0
 ||       #!times^1_O	w: 0
 ||       #!times^1_s	w: x1 + 1
 ||       !times^1_s	w: 0
 ||     USABLE RULES: { 1 }
 ||     Removed DPs: #1 #5
 || Number of SCCs: 0, DPs: 0
 || 
We use the dependency pair framework as described in [Kop12, Ch. 6/7], with static dependency pairs (see [KusIsoSakBla09] and the adaptation for AFSMs and accessible arguments in [FuhKop19]).

We thus obtain the following dependency pair problem (P_0, R_0, computable, formative):

  Dependency Pairs P_0:

    0] map#(F, cons(X, Y)) =#> map#(F, Y)   
    1] filter#(F, cons(X, Y)) =#> filter2#(F X, F, X, Y)   
    2] filter2#(true, F, X, Y) =#> filter#(F, Y)   
    3] filter2#(false, F, X, Y) =#> filter#(F, Y)   

  Rules R_0:

    p(s(X)) => X 
    fact(O) => s(O) 
    fact(s(X)) => !times(s(X), fact(p(s(X)))) 
    !times(O, X) => O 
    !times(s(X), Y) => !plus(!times(X, Y), Y) 
    !plus(X, O) => X 
    !plus(X, s(Y)) => s(!plus(X, Y)) 
    map(F, nil) => nil 
    map(F, cons(X, Y)) => cons(F X, map(F, Y)) 
    filter(F, nil) => nil 
    filter(F, cons(X, Y)) => filter2(F X, F, X, Y) 
    filter2(true, F, X, Y) => cons(X, filter(F, Y)) 
    filter2(false, F, X, Y) => filter(F, Y) 

Thus, the original system is terminating if (P_0, R_0, computable, formative) is finite.

We consider the dependency pair problem (P_0, R_0, computable, formative).

We place the elements of P in a dependency graph approximation G (see e.g. [Kop12, Thm. 7.27, 7.29], as follows:

    * 0 : 0 
    * 1 : 2, 3 
    * 2 : 1 
    * 3 : 1 

This graph has the following strongly connected components:

  P_1:

    map#(F, cons(X, Y)) =#> map#(F, Y)   

  P_2:

    filter#(F, cons(X, Y)) =#> filter2#(F X, F, X, Y)   
    filter2#(true, F, X, Y) =#> filter#(F, Y)   
    filter2#(false, F, X, Y) =#> filter#(F, Y)   

By [Kop12, Thm. 7.31], we may replace any dependency pair problem (P_0, R_0, m, f) by (P_1, R_0, m, f) and (P_2, R_0, m, f).

Thus, the original system is terminating if each of (P_1, R_0, computable, formative) and (P_2, R_0, computable, formative) is finite.

We consider the dependency pair problem (P_2, R_0, computable, formative).

We apply the subterm criterion with the following projection function:

  nu(filter2#) = 4 
  nu(filter#) = 2 

Thus, we can orient the dependency pairs as follows:

  nu(filter#(F, cons(X, Y))) = cons(X, Y) |> Y = nu(filter2#(F X, F, X, Y)) 
  nu(filter2#(true, F, X, Y)) = Y = Y = nu(filter#(F, Y)) 
  nu(filter2#(false, F, X, Y)) = Y = Y = nu(filter#(F, Y)) 

By [FuhKop19, Thm. 61], we may replace a dependency pair problem (P_2, R_0, computable, f) by (P_3, R_0, computable, f), where P_3 contains:

  filter2#(true, F, X, Y) =#> filter#(F, Y)   
  filter2#(false, F, X, Y) =#> filter#(F, Y)   

Thus, the original system is terminating if each of (P_1, R_0, computable, formative) and (P_3, R_0, computable, formative) is finite.

We consider the dependency pair problem (P_3, R_0, computable, formative).

We place the elements of P in a dependency graph approximation G (see e.g. [Kop12, Thm. 7.27, 7.29], as follows:

    * 0 :  
    * 1 :  

This graph has no strongly connected components.  By [Kop12, Thm. 7.31], this implies finiteness of the dependency pair problem.

Thus, the original system is terminating if (P_1, R_0, computable, formative) is finite.

We consider the dependency pair problem (P_1, R_0, computable, formative).

We apply the subterm criterion with the following projection function:

  nu(map#) = 2 

Thus, we can orient the dependency pairs as follows:

  nu(map#(F, cons(X, Y))) = cons(X, Y) |> Y = nu(map#(F, Y)) 

By [FuhKop19, Thm. 61], we may replace a dependency pair problem (P_1, R_0, computable, f) by ({}, R_0, computable, f).  By the empty set processor [Kop12, Thm. 7.15] this problem may be immediately removed.

As all dependency pair problems were succesfully simplified with sound (and complete) processors until nothing remained, we conclude termination.


+++ Citations +++

[FuhKop19]  C. Fuhs, and C. Kop.  A static higher-order dependency pair framework.  In Proceedings of ESOP 2019, 2019.
[Kop12]  C. Kop.  Higher Order Termination.  PhD Thesis, 2012.
[KusIsoSakBla09]  K. Kusakari, Y. Isogai, M. Sakai, and F. Blanqui.  Static Dependency Pair Method Based On Strong Computability for Higher-Order Rewrite Systems.  In volume 92(10) of IEICE Transactions on Information and Systems.  2007--2015, 2009.
