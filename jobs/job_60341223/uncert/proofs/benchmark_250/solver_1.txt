YES
We consider the system m0LYv.

  Alphabet:

    O : [] --> b 
    app : [c * c] --> c 
    cons : [b * c] --> c 
    false : [] --> a 
    filter : [b -> a * c] --> c 
    filter2 : [a * b -> a * b * c] --> c 
    map : [b -> b * c] --> c 
    minus : [b * b] --> b 
    nil : [] --> c 
    plus : [b * b] --> b 
    quot : [b * b] --> b 
    s : [b] --> b 
    sum : [c] --> c 
    true : [] --> a 

  Rules:

    minus(X, O) => X 
    minus(s(X), s(Y)) => minus(X, Y) 
    minus(minus(X, Y), Z) => minus(X, plus(Y, Z)) 
    quot(O, s(X)) => O 
    quot(s(X), s(Y)) => s(quot(minus(X, Y), s(Y))) 
    plus(O, X) => X 
    plus(s(X), Y) => s(plus(X, Y)) 
    app(nil, X) => X 
    app(X, nil) => X 
    app(cons(X, Y), Z) => cons(X, app(Y, Z)) 
    sum(cons(X, nil)) => cons(X, nil) 
    sum(cons(X, cons(Y, Z))) => sum(cons(plus(X, Y), Z)) 
    sum(app(X, cons(Y, cons(Z, U)))) => sum(app(X, sum(cons(Y, cons(Z, U))))) 
    map(F, nil) => nil 
    map(F, cons(X, Y)) => cons(F X, map(F, Y)) 
    filter(F, nil) => nil 
    filter(F, cons(X, Y)) => filter2(F X, F, X, Y) 
    filter2(true, F, X, Y) => cons(X, filter(F, Y)) 
    filter2(false, F, X, Y) => filter(F, Y) 

We observe that the rules contain a first-order subset:

  minus(X, O) => X 
  minus(s(X), s(Y)) => minus(X, Y) 
  minus(minus(X, Y), Z) => minus(X, plus(Y, Z)) 
  quot(O, s(X)) => O 
  quot(s(X), s(Y)) => s(quot(minus(X, Y), s(Y))) 
  plus(O, X) => X 
  plus(s(X), Y) => s(plus(X, Y)) 
  app(nil, X) => X 
  app(X, nil) => X 
  app(cons(X, Y), Z) => cons(X, app(Y, Z)) 
  sum(cons(X, nil)) => cons(X, nil) 
  sum(cons(X, cons(Y, Z))) => sum(cons(plus(X, Y), Z)) 
  sum(app(X, cons(Y, cons(Z, U)))) => sum(app(X, sum(cons(Y, cons(Z, U))))) 

Moreover, the system is finitely branching.  Thus, by [Kop12, Thm. 7.55], we may omit all first-order dependency pairs from the dependency pair problem (DP(R), R) if this first-order part is Ce-terminating when seen as a many-sorted first-order TRS.

According to the external first-order termination prover, this system is indeed Ce-terminating:

 || Input TRS:
 ||     1: minus(PeRCenTX,O()) -> PeRCenTX
 ||     2: minus(s(PeRCenTX),s(PeRCenTY)) -> minus(PeRCenTX,PeRCenTY)
 ||     3: minus(minus(PeRCenTX,PeRCenTY),PeRCenTZ) -> minus(PeRCenTX,plus(PeRCenTY,PeRCenTZ))
 ||     4: quot(O(),s(PeRCenTX)) -> O()
 ||     5: quot(s(PeRCenTX),s(PeRCenTY)) -> s(quot(minus(PeRCenTX,PeRCenTY),s(PeRCenTY)))
 ||     6: plus(O(),PeRCenTX) -> PeRCenTX
 ||     7: plus(s(PeRCenTX),PeRCenTY) -> s(plus(PeRCenTX,PeRCenTY))
 ||     8: app(nil(),PeRCenTX) -> PeRCenTX
 ||     9: app(PeRCenTX,nil()) -> PeRCenTX
 ||     10: app(cons(PeRCenTX,PeRCenTY),PeRCenTZ) -> cons(PeRCenTX,app(PeRCenTY,PeRCenTZ))
 ||     11: sum(cons(PeRCenTX,nil())) -> cons(PeRCenTX,nil())
 ||     12: sum(cons(PeRCenTX,cons(PeRCenTY,PeRCenTZ))) -> sum(cons(plus(PeRCenTX,PeRCenTY),PeRCenTZ))
 ||     13: sum(app(PeRCenTX,cons(PeRCenTY,cons(PeRCenTZ,PeRCenTU)))) -> sum(app(PeRCenTX,sum(cons(PeRCenTY,cons(PeRCenTZ,PeRCenTU)))))
 ||     14: TIlDePAIR(PeRCenTX,PeRCenTY) -> PeRCenTX
 ||     15: TIlDePAIR(PeRCenTX,PeRCenTY) -> PeRCenTY
 || Number of strict rules: 15
 || Direct POLO(bPol) ... failed.
 || Uncurrying ... failed.
 || Dependency Pairs:
 ||    #1: #minus(s(PeRCenTX),s(PeRCenTY)) -> #minus(PeRCenTX,PeRCenTY)
 ||    #2: #sum(app(PeRCenTX,cons(PeRCenTY,cons(PeRCenTZ,PeRCenTU)))) -> #sum(app(PeRCenTX,sum(cons(PeRCenTY,cons(PeRCenTZ,PeRCenTU)))))
 ||    #3: #sum(app(PeRCenTX,cons(PeRCenTY,cons(PeRCenTZ,PeRCenTU)))) -> #app(PeRCenTX,sum(cons(PeRCenTY,cons(PeRCenTZ,PeRCenTU))))
 ||    #4: #sum(app(PeRCenTX,cons(PeRCenTY,cons(PeRCenTZ,PeRCenTU)))) -> #sum(cons(PeRCenTY,cons(PeRCenTZ,PeRCenTU)))
 ||    #5: #sum(cons(PeRCenTX,cons(PeRCenTY,PeRCenTZ))) -> #sum(cons(plus(PeRCenTX,PeRCenTY),PeRCenTZ))
 ||    #6: #sum(cons(PeRCenTX,cons(PeRCenTY,PeRCenTZ))) -> #plus(PeRCenTX,PeRCenTY)
 ||    #7: #plus(s(PeRCenTX),PeRCenTY) -> #plus(PeRCenTX,PeRCenTY)
 ||    #8: #app(cons(PeRCenTX,PeRCenTY),PeRCenTZ) -> #app(PeRCenTY,PeRCenTZ)
 ||    #9: #quot(s(PeRCenTX),s(PeRCenTY)) -> #quot(minus(PeRCenTX,PeRCenTY),s(PeRCenTY))
 ||    #10: #quot(s(PeRCenTX),s(PeRCenTY)) -> #minus(PeRCenTX,PeRCenTY)
 ||    #11: #minus(minus(PeRCenTX,PeRCenTY),PeRCenTZ) -> #minus(PeRCenTX,plus(PeRCenTY,PeRCenTZ))
 ||    #12: #minus(minus(PeRCenTX,PeRCenTY),PeRCenTZ) -> #plus(PeRCenTY,PeRCenTZ)
 || Number of SCCs: 6, DPs: 7
 ||   SCC { #7 }
 || POLO(Sum)... succeeded.
 ||       TIlDePAIR	w: 0
 ||       s 	w: x1 + 1
 ||       minus	w: 0
 ||       #plus	w: x1
 ||       O 	w: 0
 ||       sum	w: 0
 ||       quot	w: 0
 ||       nil	w: 0
 ||       #TIlDePAIR	w: 0
 ||       #app	w: 0
 ||       #minus	w: 0
 ||       plus	w: 0
 ||       cons	w: 0
 ||       #quot	w: 0
 ||       #sum	w: 0
 ||       app	w: 0
 ||     USABLE RULES: { }
 ||     Removed DPs: #7
 || Number of SCCs: 5, DPs: 6
 ||   SCC { #8 }
 || POLO(Sum)... succeeded.
 ||       TIlDePAIR	w: 0
 ||       s 	w: 1
 ||       minus	w: 0
 ||       #plus	w: 0
 ||       O 	w: 0
 ||       sum	w: 0
 ||       quot	w: 0
 ||       nil	w: 0
 ||       #TIlDePAIR	w: 0
 ||       #app	w: x1
 ||       #minus	w: 0
 ||       plus	w: 0
 ||       cons	w: x2 + 1
 ||       #quot	w: 0
 ||       #sum	w: 0
 ||       app	w: 0
 ||     USABLE RULES: { }
 ||     Removed DPs: #8
 || Number of SCCs: 4, DPs: 5
 ||   SCC { #9 }
 || POLO(Sum)... succeeded.
 ||       TIlDePAIR	w: 0
 ||       s 	w: x1 + 2
 ||       minus	w: x1 + 1
 ||       #plus	w: 0
 ||       O 	w: 1
 ||       sum	w: 0
 ||       quot	w: 0
 ||       nil	w: 0
 ||       #TIlDePAIR	w: 0
 ||       #app	w: 0
 ||       #minus	w: 0
 ||       plus	w: x1 + x2 + 1
 ||       cons	w: 1
 ||       #quot	w: x1
 ||       #sum	w: 0
 ||       app	w: 0
 ||     USABLE RULES: { 1..3 6 7 }
 ||     Removed DPs: #9
 || Number of SCCs: 3, DPs: 4
 ||   SCC { #5 }
 || POLO(Sum)... succeeded.
 ||       TIlDePAIR	w: 0
 ||       s 	w: x1 + 2
 ||       minus	w: x1 + 1
 ||       #plus	w: 0
 ||       O 	w: 1
 ||       sum	w: 0
 ||       quot	w: 0
 ||       nil	w: 0
 ||       #TIlDePAIR	w: 0
 ||       #app	w: 0
 ||       #minus	w: 0
 ||       plus	w: x1 + x2 + 1
 ||       cons	w: x1 + x2 + 2
 ||       #quot	w: x1
 ||       #sum	w: x1
 ||       app	w: 0
 ||     USABLE RULES: { 1..3 6 7 }
 ||     Removed DPs: #5
 || Number of SCCs: 2, DPs: 3
 ||   SCC { #2 }
 || POLO(Sum)... succeeded.
 ||       TIlDePAIR	w: 0
 ||       s 	w: x1 + 2
 ||       minus	w: x1 + 1
 ||       #plus	w: 0
 ||       O 	w: 1
 ||       sum	w: 3
 ||       quot	w: 0
 ||       nil	w: 1
 ||       #TIlDePAIR	w: 0
 ||       #app	w: 0
 ||       #minus	w: 0
 ||       plus	w: x1 + x2 + 1
 ||       cons	w: x2 + 2
 ||       #quot	w: x1
 ||       #sum	w: x1
 ||       app	w: x1 + x2 + 1
 ||     USABLE RULES: { 1..3 6..12 }
 ||     Removed DPs: #2
 || Number of SCCs: 1, DPs: 2
 ||   SCC { #1 #11 }
 || POLO(Sum)... succeeded.
 ||       TIlDePAIR	w: 0
 ||       s 	w: x1 + 2
 ||       minus	w: x1 + x2 + 2
 ||       #plus	w: 0
 ||       O 	w: 0
 ||       sum	w: 3
 ||       quot	w: 0
 ||       nil	w: 1
 ||       #TIlDePAIR	w: 0
 ||       #app	w: 0
 ||       #minus	w: x1 + x2
 ||       plus	w: x1 + x2 + 1
 ||       cons	w: x2 + 2
 ||       #quot	w: x1
 ||       #sum	w: x1
 ||       app	w: x1 + x2 + 1
 ||     USABLE RULES: { 1..3 6..12 }
 ||     Removed DPs: #1 #11
 || Number of SCCs: 0, DPs: 0
 || 
We use the dependency pair framework as described in [Kop12, Ch. 6/7], with static dependency pairs (see [KusIsoSakBla09] and the adaptation for AFSMs and accessible arguments in [FuhKop19]).

We thus obtain the following dependency pair problem (P_0, R_0, computable, formative):

  Dependency Pairs P_0:

    0] map#(F, cons(X, Y)) =#> map#(F, Y)   
    1] filter#(F, cons(X, Y)) =#> filter2#(F X, F, X, Y)   
    2] filter2#(true, F, X, Y) =#> filter#(F, Y)   
    3] filter2#(false, F, X, Y) =#> filter#(F, Y)   

  Rules R_0:

    minus(X, O) => X 
    minus(s(X), s(Y)) => minus(X, Y) 
    minus(minus(X, Y), Z) => minus(X, plus(Y, Z)) 
    quot(O, s(X)) => O 
    quot(s(X), s(Y)) => s(quot(minus(X, Y), s(Y))) 
    plus(O, X) => X 
    plus(s(X), Y) => s(plus(X, Y)) 
    app(nil, X) => X 
    app(X, nil) => X 
    app(cons(X, Y), Z) => cons(X, app(Y, Z)) 
    sum(cons(X, nil)) => cons(X, nil) 
    sum(cons(X, cons(Y, Z))) => sum(cons(plus(X, Y), Z)) 
    sum(app(X, cons(Y, cons(Z, U)))) => sum(app(X, sum(cons(Y, cons(Z, U))))) 
    map(F, nil) => nil 
    map(F, cons(X, Y)) => cons(F X, map(F, Y)) 
    filter(F, nil) => nil 
    filter(F, cons(X, Y)) => filter2(F X, F, X, Y) 
    filter2(true, F, X, Y) => cons(X, filter(F, Y)) 
    filter2(false, F, X, Y) => filter(F, Y) 

Thus, the original system is terminating if (P_0, R_0, computable, formative) is finite.

We consider the dependency pair problem (P_0, R_0, computable, formative).

We place the elements of P in a dependency graph approximation G (see e.g. [Kop12, Thm. 7.27, 7.29], as follows:

    * 0 : 0 
    * 1 : 2, 3 
    * 2 : 1 
    * 3 : 1 

This graph has the following strongly connected components:

  P_1:

    map#(F, cons(X, Y)) =#> map#(F, Y)   

  P_2:

    filter#(F, cons(X, Y)) =#> filter2#(F X, F, X, Y)   
    filter2#(true, F, X, Y) =#> filter#(F, Y)   
    filter2#(false, F, X, Y) =#> filter#(F, Y)   

By [Kop12, Thm. 7.31], we may replace any dependency pair problem (P_0, R_0, m, f) by (P_1, R_0, m, f) and (P_2, R_0, m, f).

Thus, the original system is terminating if each of (P_1, R_0, computable, formative) and (P_2, R_0, computable, formative) is finite.

We consider the dependency pair problem (P_2, R_0, computable, formative).

We apply the subterm criterion with the following projection function:

  nu(filter2#) = 4 
  nu(filter#) = 2 

Thus, we can orient the dependency pairs as follows:

  nu(filter#(F, cons(X, Y))) = cons(X, Y) |> Y = nu(filter2#(F X, F, X, Y)) 
  nu(filter2#(true, F, X, Y)) = Y = Y = nu(filter#(F, Y)) 
  nu(filter2#(false, F, X, Y)) = Y = Y = nu(filter#(F, Y)) 

By [FuhKop19, Thm. 61], we may replace a dependency pair problem (P_2, R_0, computable, f) by (P_3, R_0, computable, f), where P_3 contains:

  filter2#(true, F, X, Y) =#> filter#(F, Y)   
  filter2#(false, F, X, Y) =#> filter#(F, Y)   

Thus, the original system is terminating if each of (P_1, R_0, computable, formative) and (P_3, R_0, computable, formative) is finite.

We consider the dependency pair problem (P_3, R_0, computable, formative).

We place the elements of P in a dependency graph approximation G (see e.g. [Kop12, Thm. 7.27, 7.29], as follows:

    * 0 :  
    * 1 :  

This graph has no strongly connected components.  By [Kop12, Thm. 7.31], this implies finiteness of the dependency pair problem.

Thus, the original system is terminating if (P_1, R_0, computable, formative) is finite.

We consider the dependency pair problem (P_1, R_0, computable, formative).

We apply the subterm criterion with the following projection function:

  nu(map#) = 2 

Thus, we can orient the dependency pairs as follows:

  nu(map#(F, cons(X, Y))) = cons(X, Y) |> Y = nu(map#(F, Y)) 

By [FuhKop19, Thm. 61], we may replace a dependency pair problem (P_1, R_0, computable, f) by ({}, R_0, computable, f).  By the empty set processor [Kop12, Thm. 7.15] this problem may be immediately removed.

As all dependency pair problems were succesfully simplified with sound (and complete) processors until nothing remained, we conclude termination.


+++ Citations +++

[FuhKop19]  C. Fuhs, and C. Kop.  A static higher-order dependency pair framework.  In Proceedings of ESOP 2019, 2019.
[Kop12]  C. Kop.  Higher Order Termination.  PhD Thesis, 2012.
[KusIsoSakBla09]  K. Kusakari, Y. Isogai, M. Sakai, and F. Blanqui.  Static Dependency Pair Method Based On Strong Computability for Higher-Order Rewrite Systems.  In volume 92(10) of IEICE Transactions on Information and Systems.  2007--2015, 2009.
