YES
We consider the system bSdZr.

  Alphabet:

    cons : [a * alist] --> alist 
    foldl : [a -> a -> a * a * alist] --> a 
    nil : [] --> alist 
    xap : [a -> a -> a * a] --> a -> a 
    yap : [a -> a * a] --> a 

  Rules:

    foldl(/\x./\y.yap(xap(F, x), y), X, nil) => X 
    foldl(/\x./\y.yap(xap(F, x), y), X, cons(Y, Z)) => foldl(/\z./\u.yap(xap(F, z), u), yap(xap(F, X), Y), Z) 
    xap(F, X) => F X 
    yap(F, X) => F X 

Symbol xap is an encoding for application that is only used in innocuous ways.  We can simplify the program (without losing non-termination) by removing it.  This gives:

  Alphabet:

    cons : [a * alist] --> alist 
    foldl : [a -> a -> a * a * alist] --> a 
    nil : [] --> alist 
    yap : [a -> a * a] --> a 

  Rules:

    foldl(/\x./\y.yap(F[x], y), X, nil) => X 
    foldl(/\x./\y.yap(F[x], y), X, cons(Y, Z)) => foldl(/\z./\u.yap(F[z], u), yap(F[X], Y), Z) 
    yap(F, X) => F X 

We use rule removal, following [Kop12, Theorem 2.23].

This gives the following requirements (possibly using Theorems 2.25 and 2.26 in [Kop12]):

  foldl(/\x./\y.yap(F[x], y), X, nil) >? X 
  foldl(/\x./\y.yap(F[x], y), X, cons(Y, Z)) >? foldl(/\z./\u.yap(F[z], u), yap(F[X], Y), Z) 
  yap(F, X) >? F X 

We use a recursive path ordering as defined in [Kop12, Chapter 5].

Argument functions:

  [[foldl(x_1, x_2, x_3)]] = foldl(x_3, x_1, x_2) 

We choose Lex = {foldl} and Mul = {@_{o -> o}, cons, nil, yap}, and the following precedence: cons > nil > foldl > yap > @_{o -> o}

Taking the argument function into account, and fixing the greater / greater equal choices, the constraints can be denoted as follows:

  foldl(/\x./\y.yap(F[x], y), X, nil) >= X 
  foldl(/\x./\y.yap(F[x], y), X, cons(Y, Z)) >= foldl(/\x./\y.yap(F[x], y), yap(F[X], Y), Z) 
  yap(F, X) > @_{o -> o}(F, X) 

With these choices, we have:

  1] foldl(/\x./\y.yap(F[x], y), X, nil) >= X  because [2], by (Star) 
  2] foldl*(/\x./\y.yap(F[x], y), X, nil) >= X  because [3], by (Select) 
  3] X >= X  by (Meta) 

  4] foldl(/\x./\y.yap(F[x], y), X, cons(Y, Z)) >= foldl(/\x./\y.yap(F[x], y), yap(F[X], Y), Z)  because [5], by (Star) 
  5] foldl*(/\x./\y.yap(F[x], y), X, cons(Y, Z)) >= foldl(/\x./\y.yap(F[x], y), yap(F[X], Y), Z)  because foldl in Lex, [6], [9], [19] and [29], by (Stat) 
  6] cons(Y, Z) > Z  because [7], by definition 
  7] cons*(Y, Z) >= Z  because [8], by (Select) 
  8] Z >= Z  by (Meta) 
  9] foldl*(/\x./\y.yap(F[x], y), X, cons(Y, Z)) >= /\x./\y.yap(F[x], y)  because [10], by (F-Abs) 
  10] foldl*(/\x./\y.yap(F[x], y), X, cons(Y, Z), z) >= /\x.yap(F[z], x)  because [11], by (F-Abs) 
  11] foldl*(/\x./\y.yap(F[x], y), X, cons(Y, Z), z, u) >= yap(F[z], u)  because foldl > yap, [12] and [17], by (Copy) 
  12] foldl*(/\x./\y.yap(F[x], y), X, cons(Y, Z), z, u) >= F[z]  because [13], by (Select) 
  13] /\x.yap(F[foldl*(/\y./\v.yap(F[y], v), X, cons(Y, Z), z, u)], x) >= F[z]  because [14], by (Eta)[Kop13:2] 
  14] F[foldl*(/\x./\y.yap(F[x], y), X, cons(Y, Z), z, u)] >= F[z]  because [15], by (Meta) 
  15] foldl*(/\x./\y.yap(F[x], y), X, cons(Y, Z), z, u) >= z  because [16], by (Select) 
  16] z >= z  by (Var) 
  17] foldl*(/\x./\y.yap(F[x], y), X, cons(Y, Z), z, u) >= u  because [18], by (Select) 
  18] u >= u  by (Var) 
  19] foldl*(/\x./\y.yap(F[x], y), X, cons(Y, Z)) >= yap(F[X], Y)  because foldl > yap, [20] and [25], by (Copy) 
  20] foldl*(/\x./\y.yap(F[x], y), X, cons(Y, Z)) >= F[X]  because [21], by (Select) 
  21] /\x.yap(F[foldl*(/\y./\v.yap(F[y], v), X, cons(Y, Z))], x) >= F[X]  because [22], by (Eta)[Kop13:2] 
  22] F[foldl*(/\x./\y.yap(F[x], y), X, cons(Y, Z))] >= F[X]  because [23], by (Meta) 
  23] foldl*(/\x./\y.yap(F[x], y), X, cons(Y, Z)) >= X  because [24], by (Select) 
  24] X >= X  by (Meta) 
  25] foldl*(/\x./\y.yap(F[x], y), X, cons(Y, Z)) >= Y  because [26], by (Select) 
  26] cons(Y, Z) >= Y  because [27], by (Star) 
  27] cons*(Y, Z) >= Y  because [28], by (Select) 
  28] Y >= Y  by (Meta) 
  29] foldl*(/\x./\y.yap(F[x], y), X, cons(Y, Z)) >= Z  because [30], by (Select) 
  30] cons(Y, Z) >= Z  because [7], by (Star) 

  31] yap(F, X) > @_{o -> o}(F, X)  because [32], by definition 
  32] yap*(F, X) >= @_{o -> o}(F, X)  because yap > @_{o -> o}, [33] and [35], by (Copy) 
  33] yap*(F, X) >= F  because [34], by (Select) 
  34] F >= F  by (Meta) 
  35] yap*(F, X) >= X  because [36], by (Select) 
  36] X >= X  by (Meta) 

We can thus remove the following rules:

  yap(F, X) => F X 

We use rule removal, following [Kop12, Theorem 2.23].

This gives the following requirements (possibly using Theorems 2.25 and 2.26 in [Kop12]):

  foldl(/\x./\y.yap(F[x], y), X, nil) >? X 
  foldl(/\x./\y.yap(F[x], y), X, cons(Y, Z)) >? foldl(/\z./\u.yap(F[z], u), yap(F[X], Y), Z) 

We use a recursive path ordering as defined in [Kop12, Chapter 5].

Argument functions:

  [[foldl(x_1, x_2, x_3)]] = foldl(x_3, x_1, x_2) 

We choose Lex = {foldl} and Mul = {cons, nil, yap}, and the following precedence: nil > cons > yap > foldl

Taking the argument function into account, and fixing the greater / greater equal choices, the constraints can be denoted as follows:

  foldl(/\x./\y.yap(F[x], y), X, nil) > X 
  foldl(/\x./\y.yap(F[x], y), X, cons(Y, Z)) >= foldl(/\x./\y.yap(F[x], y), yap(F[X], Y), Z) 

With these choices, we have:

  1] foldl(/\x./\y.yap(F[x], y), X, nil) > X  because [2], by definition 
  2] foldl*(/\x./\y.yap(F[x], y), X, nil) >= X  because [3], by (Select) 
  3] X >= X  by (Meta) 

  4] foldl(/\x./\y.yap(F[x], y), X, cons(Y, Z)) >= foldl(/\x./\y.yap(F[x], y), yap(F[X], Y), Z)  because [5], by (Star) 
  5] foldl*(/\x./\y.yap(F[x], y), X, cons(Y, Z)) >= foldl(/\x./\y.yap(F[x], y), yap(F[X], Y), Z)  because foldl in Lex, [6], [9], [21] and [30], by (Stat) 
  6] cons(Y, Z) > Z  because [7], by definition 
  7] cons*(Y, Z) >= Z  because [8], by (Select) 
  8] Z >= Z  by (Meta) 
  9] foldl*(/\x./\y.yap(F[x], y), X, cons(Y, Z)) >= /\x./\y.yap(F[x], y)  because [10], by (F-Abs) 
  10] foldl*(/\x./\y.yap(F[x], y), X, cons(Y, Z), z) >= /\x.yap(F[z], x)  because [11], by (F-Abs) 
  11] foldl*(/\x./\y.yap(F[x], y), X, cons(Y, Z), z, u) >= yap(F[z], u)  because [12], by (Select) 
  12] yap(F[foldl*(/\x./\y.yap(F[x], y), X, cons(Y, Z), z, u)], foldl*(/\v./\w.yap(F[v], w), X, cons(Y, Z), z, u)) >= yap(F[z], u)  because yap in Mul, [13] and [19], by (Fun) 
  13] F[foldl*(/\x./\y.yap(F[x], y), X, cons(Y, Z), z, u)] >= F[z]  because [14], by (Meta) 
  14] foldl*(/\x./\y.yap(F[x], y), X, cons(Y, Z), z, u) >= z  because [15], by (Select) 
  15] yap(F[foldl*(/\x./\y.yap(F[x], y), X, cons(Y, Z), z, u)], foldl*(/\v./\w.yap(F[v], w), X, cons(Y, Z), z, u)) >= z  because [16], by (Star) 
  16] yap*(F[foldl*(/\x./\y.yap(F[x], y), X, cons(Y, Z), z, u)], foldl*(/\v./\w.yap(F[v], w), X, cons(Y, Z), z, u)) >= z  because [17], by (Select) 
  17] foldl*(/\x./\y.yap(F[x], y), X, cons(Y, Z), z, u) >= z  because [18], by (Select) 
  18] z >= z  by (Var) 
  19] foldl*(/\x./\y.yap(F[x], y), X, cons(Y, Z), z, u) >= u  because [20], by (Select) 
  20] u >= u  by (Var) 
  21] foldl*(/\x./\y.yap(F[x], y), X, cons(Y, Z)) >= yap(F[X], Y)  because [22], by (Select) 
  22] yap(F[foldl*(/\x./\y.yap(F[x], y), X, cons(Y, Z))], foldl*(/\v./\w.yap(F[v], w), X, cons(Y, Z))) >= yap(F[X], Y)  because yap in Mul, [23] and [26], by (Fun) 
  23] F[foldl*(/\x./\y.yap(F[x], y), X, cons(Y, Z))] >= F[X]  because [24], by (Meta) 
  24] foldl*(/\x./\y.yap(F[x], y), X, cons(Y, Z)) >= X  because [25], by (Select) 
  25] X >= X  by (Meta) 
  26] foldl*(/\x./\y.yap(F[x], y), X, cons(Y, Z)) >= Y  because [27], by (Select) 
  27] cons(Y, Z) >= Y  because [28], by (Star) 
  28] cons*(Y, Z) >= Y  because [29], by (Select) 
  29] Y >= Y  by (Meta) 
  30] foldl*(/\x./\y.yap(F[x], y), X, cons(Y, Z)) >= Z  because [31], by (Select) 
  31] cons(Y, Z) >= Z  because [7], by (Star) 

We can thus remove the following rules:

  foldl(/\x./\y.yap(F[x], y), X, nil) => X 

We use rule removal, following [Kop12, Theorem 2.23].

This gives the following requirements (possibly using Theorems 2.25 and 2.26 in [Kop12]):

  foldl(/\x./\y.yap(F[x], y), X, cons(Y, Z)) >? foldl(/\z./\u.yap(F[z], u), yap(F[X], Y), Z) 

We use a recursive path ordering as defined in [Kop12, Chapter 5].

Argument functions:

  [[foldl(x_1, x_2, x_3)]] = foldl(x_3, x_1, x_2) 

We choose Lex = {foldl} and Mul = {cons, yap}, and the following precedence: cons > yap > foldl

Taking the argument function into account, and fixing the greater / greater equal choices, the constraints can be denoted as follows:

  foldl(/\x./\y.yap(F[x], y), X, cons(Y, Z)) > foldl(/\x./\y.yap(F[x], y), yap(F[X], Y), Z) 

With these choices, we have:

  1] foldl(/\x./\y.yap(F[x], y), X, cons(Y, Z)) > foldl(/\x./\y.yap(F[x], y), yap(F[X], Y), Z)  because [2], by definition 
  2] foldl*(/\x./\y.yap(F[x], y), X, cons(Y, Z)) >= foldl(/\x./\y.yap(F[x], y), yap(F[X], Y), Z)  because foldl in Lex, [3], [6], [13] and [22], by (Stat) 
  3] cons(Y, Z) > Z  because [4], by definition 
  4] cons*(Y, Z) >= Z  because [5], by (Select) 
  5] Z >= Z  by (Meta) 
  6] foldl*(/\x./\y.yap(F[x], y), X, cons(Y, Z)) >= /\x./\y.yap(F[x], y)  because [7], by (Select) 
  7] /\x./\z.yap(F[x], z) >= /\x./\z.yap(F[x], z)  because [8], by (Abs) 
  8] /\z.yap(F[y], z) >= /\z.yap(F[y], z)  because [9], by (Abs) 
  9] yap(F[y], x) >= yap(F[y], x)  because yap in Mul, [10] and [12], by (Fun) 
  10] F[y] >= F[y]  because [11], by (Meta) 
  11] y >= y  by (Var) 
  12] x >= x  by (Var) 
  13] foldl*(/\z./\u.yap(F[z], u), X, cons(Y, Z)) >= yap(F[X], Y)  because [14], by (Select) 
  14] yap(F[foldl*(/\z./\u.yap(F[z], u), X, cons(Y, Z))], foldl*(/\v./\w.yap(F[v], w), X, cons(Y, Z))) >= yap(F[X], Y)  because yap in Mul, [15] and [18], by (Fun) 
  15] F[foldl*(/\z./\u.yap(F[z], u), X, cons(Y, Z))] >= F[X]  because [16], by (Meta) 
  16] foldl*(/\z./\u.yap(F[z], u), X, cons(Y, Z)) >= X  because [17], by (Select) 
  17] X >= X  by (Meta) 
  18] foldl*(/\z./\u.yap(F[z], u), X, cons(Y, Z)) >= Y  because [19], by (Select) 
  19] cons(Y, Z) >= Y  because [20], by (Star) 
  20] cons*(Y, Z) >= Y  because [21], by (Select) 
  21] Y >= Y  by (Meta) 
  22] foldl*(/\z./\u.yap(F[z], u), X, cons(Y, Z)) >= Z  because [23], by (Select) 
  23] yap(F[foldl*(/\z./\u.yap(F[z], u), X, cons(Y, Z))], foldl*(/\v./\w.yap(F[v], w), X, cons(Y, Z))) >= Z  because [24], by (Star) 
  24] yap*(F[foldl*(/\z./\u.yap(F[z], u), X, cons(Y, Z))], foldl*(/\v./\w.yap(F[v], w), X, cons(Y, Z))) >= Z  because [25], by (Select) 
  25] foldl*(/\z./\u.yap(F[z], u), X, cons(Y, Z)) >= Z  because [26], by (Select) 
  26] cons(Y, Z) >= Z  because [4], by (Star) 

We can thus remove the following rules:

  foldl(/\x./\y.yap(F[x], y), X, cons(Y, Z)) => foldl(/\z./\u.yap(F[z], u), yap(F[X], Y), Z) 

All rules were succesfully removed.  Thus, termination of the original system has been reduced to termination of the beta-rule, which is well-known to hold.


+++ Citations +++

[Kop12]  C. Kop.  Higher Order Termination.  PhD Thesis, 2012.
[Kop13:2]  C. Kop.  StarHorpo with an Eta-Rule.  Unpublished manuscript, http://cl-informatik.uibk.ac.at/users/kop/etahorpo.pdf, 2013.
