YES
We consider the system vq4ba.

  Alphabet:

    !times : [a * a] --> a 
    cons : [c * d] --> d 
    false : [] --> b 
    filter : [c -> b * d] --> d 
    filter2 : [b * c -> b * c * d] --> d 
    i : [a] --> a 
    map : [c -> c * d] --> d 
    nil : [] --> d 
    one : [] --> a 
    true : [] --> b 

  Rules:

    !times(one, X) => X 
    !times(X, one) => X 
    !times(i(X), X) => one 
    !times(X, i(X)) => one 
    !times(i(X), !times(X, Y)) => Y 
    !times(X, !times(i(X), Y)) => Y 
    !times(!times(X, Y), Z) => !times(X, !times(Y, Z)) 
    i(one) => one 
    i(i(X)) => X 
    i(!times(X, Y)) => !times(i(Y), i(X)) 
    map(F, nil) => nil 
    map(F, cons(X, Y)) => cons(F X, map(F, Y)) 
    filter(F, nil) => nil 
    filter(F, cons(X, Y)) => filter2(F X, F, X, Y) 
    filter2(true, F, X, Y) => cons(X, filter(F, Y)) 
    filter2(false, F, X, Y) => filter(F, Y) 

We use rule removal, following [Kop12, Theorem 2.23].

This gives the following requirements (possibly using Theorems 2.25 and 2.26 in [Kop12]):

  !times(one, X) >? X 
  !times(X, one) >? X 
  !times(i(X), X) >? one 
  !times(X, i(X)) >? one 
  !times(i(X), !times(X, Y)) >? Y 
  !times(X, !times(i(X), Y)) >? Y 
  !times(!times(X, Y), Z) >? !times(X, !times(Y, Z)) 
  i(one) >? one 
  i(i(X)) >? X 
  i(!times(X, Y)) >? !times(i(Y), i(X)) 
  map(F, nil) >? nil 
  map(F, cons(X, Y)) >? cons(F X, map(F, Y)) 
  filter(F, nil) >? nil 
  filter(F, cons(X, Y)) >? filter2(F X, F, X, Y) 
  filter2(true, F, X, Y) >? cons(X, filter(F, Y)) 
  filter2(false, F, X, Y) >? filter(F, Y) 

We orient these requirements with a polynomial interpretation in the natural numbers.

The following interpretation satisfies the requirements:

  !times = Lam[y0;y1].y0 + y1 
  cons = Lam[y0;y1].1 + y1 + 2*y0 
  false = 3 
  filter = Lam[G0;y1].2*y1 + G0(0) + y1*G0(y1) 
  filter2 = Lam[y0;G1;y2;y3].y0 + 2*y2 + 2*y3 + G1(0) + y3*G1(y3) 
  i = Lam[y0].y0 
  map = Lam[G0;y1].3*y1 + G0(0) + 2*y1*G0(y1) 
  nil = 0 
  one = 0 
  true = 3 

Using this interpretation, the requirements translate to:

  [[!times(one, _x0)]] = x0 >= x0 = [[_x0]] 
  [[!times(_x0, one)]] = x0 >= x0 = [[_x0]] 
  [[!times(i(_x0), _x0)]] = 2*x0 >= 0 = [[one]] 
  [[!times(_x0, i(_x0))]] = 2*x0 >= 0 = [[one]] 
  [[!times(i(_x0), !times(_x0, _x1))]] = x1 + 2*x0 >= x1 = [[_x1]] 
  [[!times(_x0, !times(i(_x0), _x1))]] = x1 + 2*x0 >= x1 = [[_x1]] 
  [[!times(!times(_x0, _x1), _x2)]] = x0 + x1 + x2 >= x0 + x1 + x2 = [[!times(_x0, !times(_x1, _x2))]] 
  [[i(one)]] = 0 >= 0 = [[one]] 
  [[i(i(_x0))]] = x0 >= x0 = [[_x0]] 
  [[i(!times(_x0, _x1))]] = x0 + x1 >= x0 + x1 = [[!times(i(_x1), i(_x0))]] 
  [[map(_F0, nil)]] = F0(0) >= 0 = [[nil]] 
  [[map(_F0, cons(_x1, _x2))]] = 3 + 3*x2 + 6*x1 + F0(0) + 2*x2*F0(1 + x2 + 2*x1) + 2*F0(1 + x2 + 2*x1) + 4*x1*F0(1 + x2 + 2*x1) > 1 + 2*x1 + 3*x2 + F0(0) + 2*x2*F0(x2) + 2*F0(x1) = [[cons(_F0 _x1, map(_F0, _x2))]] 
  [[filter(_F0, nil)]] = F0(0) >= 0 = [[nil]] 
  [[filter(_F0, cons(_x1, _x2))]] = 2 + 2*x2 + 4*x1 + F0(0) + F0(1 + x2 + 2*x1) + 2*x1*F0(1 + x2 + 2*x1) + x2*F0(1 + x2 + 2*x1) > 2*x2 + 3*x1 + F0(0) + F0(x1) + x2*F0(x2) = [[filter2(_F0 _x1, _F0, _x1, _x2)]] 
  [[filter2(true, _F0, _x1, _x2)]] = 3 + 2*x1 + 2*x2 + F0(0) + x2*F0(x2) > 1 + 2*x1 + 2*x2 + F0(0) + x2*F0(x2) = [[cons(_x1, filter(_F0, _x2))]] 
  [[filter2(false, _F0, _x1, _x2)]] = 3 + 2*x1 + 2*x2 + F0(0) + x2*F0(x2) > 2*x2 + F0(0) + x2*F0(x2) = [[filter(_F0, _x2)]] 

We can thus remove the following rules:

  map(F, cons(X, Y)) => cons(F X, map(F, Y)) 
  filter(F, cons(X, Y)) => filter2(F X, F, X, Y) 
  filter2(true, F, X, Y) => cons(X, filter(F, Y)) 
  filter2(false, F, X, Y) => filter(F, Y) 

We use rule removal, following [Kop12, Theorem 2.23].

This gives the following requirements (possibly using Theorems 2.25 and 2.26 in [Kop12]):

  !times(one, X) >? X 
  !times(X, one) >? X 
  !times(i(X), X) >? one 
  !times(X, i(X)) >? one 
  !times(i(X), !times(X, Y)) >? Y 
  !times(X, !times(i(X), Y)) >? Y 
  !times(!times(X, Y), Z) >? !times(X, !times(Y, Z)) 
  i(one) >? one 
  i(i(X)) >? X 
  i(!times(X, Y)) >? !times(i(Y), i(X)) 
  map(F, nil) >? nil 
  filter(F, nil) >? nil 

We orient these requirements with a polynomial interpretation in the natural numbers.

The following interpretation satisfies the requirements:

  !times = Lam[y0;y1].y0 + y1 
  filter = Lam[G0;y1].3 + 3*y1 + G0(0) 
  i = Lam[y0].2*y0 
  map = Lam[G0;y1].3 + 3*y1 + 2*G0(0) 
  nil = 0 
  one = 0 

Using this interpretation, the requirements translate to:

  [[!times(one, _x0)]] = x0 >= x0 = [[_x0]] 
  [[!times(_x0, one)]] = x0 >= x0 = [[_x0]] 
  [[!times(i(_x0), _x0)]] = 3*x0 >= 0 = [[one]] 
  [[!times(_x0, i(_x0))]] = 3*x0 >= 0 = [[one]] 
  [[!times(i(_x0), !times(_x0, _x1))]] = x1 + 3*x0 >= x1 = [[_x1]] 
  [[!times(_x0, !times(i(_x0), _x1))]] = x1 + 3*x0 >= x1 = [[_x1]] 
  [[!times(!times(_x0, _x1), _x2)]] = x0 + x1 + x2 >= x0 + x1 + x2 = [[!times(_x0, !times(_x1, _x2))]] 
  [[i(one)]] = 0 >= 0 = [[one]] 
  [[i(i(_x0))]] = 4*x0 >= x0 = [[_x0]] 
  [[i(!times(_x0, _x1))]] = 2*x0 + 2*x1 >= 2*x0 + 2*x1 = [[!times(i(_x1), i(_x0))]] 
  [[map(_F0, nil)]] = 3 + 2*F0(0) > 0 = [[nil]] 
  [[filter(_F0, nil)]] = 3 + F0(0) > 0 = [[nil]] 

We can thus remove the following rules:

  map(F, nil) => nil 
  filter(F, nil) => nil 

We use rule removal, following [Kop12, Theorem 2.23].

This gives the following requirements (possibly using Theorems 2.25 and 2.26 in [Kop12]):

  !times(one, X) >? X 
  !times(X, one) >? X 
  !times(i(X), X) >? one 
  !times(X, i(X)) >? one 
  !times(i(X), !times(X, Y)) >? Y 
  !times(X, !times(i(X), Y)) >? Y 
  !times(!times(X, Y), Z) >? !times(X, !times(Y, Z)) 
  i(one) >? one 
  i(i(X)) >? X 
  i(!times(X, Y)) >? !times(i(Y), i(X)) 

We orient these requirements with a polynomial interpretation in the natural numbers.

The following interpretation satisfies the requirements:

  !times = Lam[y0;y1].1 + y0 + y1 
  i = Lam[y0].2*y0 
  one = 0 

Using this interpretation, the requirements translate to:

  [[!times(one, _x0)]] = 1 + x0 > x0 = [[_x0]] 
  [[!times(_x0, one)]] = 1 + x0 > x0 = [[_x0]] 
  [[!times(i(_x0), _x0)]] = 1 + 3*x0 > 0 = [[one]] 
  [[!times(_x0, i(_x0))]] = 1 + 3*x0 > 0 = [[one]] 
  [[!times(i(_x0), !times(_x0, _x1))]] = 2 + x1 + 3*x0 > x1 = [[_x1]] 
  [[!times(_x0, !times(i(_x0), _x1))]] = 2 + x1 + 3*x0 > x1 = [[_x1]] 
  [[!times(!times(_x0, _x1), _x2)]] = 2 + x0 + x1 + x2 >= 2 + x0 + x1 + x2 = [[!times(_x0, !times(_x1, _x2))]] 
  [[i(one)]] = 0 >= 0 = [[one]] 
  [[i(i(_x0))]] = 4*x0 >= x0 = [[_x0]] 
  [[i(!times(_x0, _x1))]] = 2 + 2*x0 + 2*x1 > 1 + 2*x0 + 2*x1 = [[!times(i(_x1), i(_x0))]] 

We can thus remove the following rules:

  !times(one, X) => X 
  !times(X, one) => X 
  !times(i(X), X) => one 
  !times(X, i(X)) => one 
  !times(i(X), !times(X, Y)) => Y 
  !times(X, !times(i(X), Y)) => Y 
  i(!times(X, Y)) => !times(i(Y), i(X)) 

We use rule removal, following [Kop12, Theorem 2.23].

This gives the following requirements (possibly using Theorems 2.25 and 2.26 in [Kop12]):

  !times(!times(X, Y), Z) >? !times(X, !times(Y, Z)) 
  i(one) >? one 
  i(i(X)) >? X 

We orient these requirements with a polynomial interpretation in the natural numbers.

The following interpretation satisfies the requirements:

  !times = Lam[y0;y1].3 + y1 + 3*y0 
  i = Lam[y0].3 + 3*y0 
  one = 0 

Using this interpretation, the requirements translate to:

  [[!times(!times(_x0, _x1), _x2)]] = 12 + x2 + 3*x1 + 9*x0 > 6 + x2 + 3*x0 + 3*x1 = [[!times(_x0, !times(_x1, _x2))]] 
  [[i(one)]] = 3 > 0 = [[one]] 
  [[i(i(_x0))]] = 12 + 9*x0 > x0 = [[_x0]] 

We can thus remove the following rules:

  !times(!times(X, Y), Z) => !times(X, !times(Y, Z)) 
  i(one) => one 
  i(i(X)) => X 

All rules were succesfully removed.  Thus, termination of the original system has been reduced to termination of the beta-rule, which is well-known to hold.


+++ Citations +++

[Kop12]  C. Kop.  Higher Order Termination.  PhD Thesis, 2012.
