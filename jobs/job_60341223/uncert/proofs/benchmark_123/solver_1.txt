YES
We consider the system 5dCEE.

  Alphabet:

    fapp : [o * o] --> o 
    h : [o] --> o 
    lam : [o -> o] --> o 

  Rules:

    fapp(lam(F), X) => F h(X) 

We use the dependency pair framework as described in [Kop12, Ch. 6/7], with dynamic dependency pairs.

After applying [Kop12, Thm. 7.22] to denote collapsing dependency pairs in an extended form, we thus obtain the following dependency pair problem (P_0, R_0, minimal, formative):

  Dependency Pairs P_0:

    0] fapp#(lam(F), X) =#> F[h(X)]   

  Rules R_0:

    fapp(lam(F), X) => F h(X) 

Thus, the original system is terminating if (P_0, R_0, minimal, formative) is finite.

We consider the dependency pair problem (P_0, R_0, minimal, formative).

We will use the reduction pair processor [Kop12, Thm. 7.16].  As the system is abstraction-simple and the formative flag is set, it suffices to find a tagged reduction pair [Kop12, Def. 6.70].  Thus, we must orient:

  fapp#(lam(F), X) >? F[h(X)] 
  fapp(lam(F), X) >= F h(X) 

We orient these requirements with a polynomial interpretation in the natural numbers.

The following interpretation satisfies the requirements:

  fapp = Lam[y0;y1].3 + 3*y0 
  fapp# = Lam[y0;y1].3 + y0 
  h = Lam[y0].0 
  lam = Lam[G0].3 + G0(0) 

Using this interpretation, the requirements translate to:

  [[fapp#(lam(_F0), _x1)]] = 6 + F0(0) > F0(0) = [[_F0[h(_x1)]]] 
  [[fapp(lam(_F0), _x1)]] = 12 + 3*F0(0) >= F0(0) = [[_F0 h(_x1)]] 

By the observations in [Kop12, Sec. 6.6], this reduction pair suffices; we may thus replace a dependency pair problem (P_0, R_0) by ({}, R_0).  By the empty set processor [Kop12, Thm. 7.15] this problem may be immediately removed.

As all dependency pair problems were succesfully simplified with sound (and complete) processors until nothing remained, we conclude termination.


+++ Citations +++

[Kop12]  C. Kop.  Higher Order Termination.  PhD Thesis, 2012.
