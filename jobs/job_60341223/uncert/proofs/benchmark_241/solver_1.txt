YES
We consider the system xQX3e.

  Alphabet:

    a : [] --> a 
    b : [] --> a 
    cons : [e * f] --> f 
    f : [a] --> b 
    false : [] --> d 
    filter : [e -> d * f] --> f 
    filter2 : [d * e -> d * e * f] --> f 
    g : [a] --> c 
    map : [e -> e * f] --> f 
    nil : [] --> f 
    true : [] --> d 

  Rules:

    f(a) => f(b) 
    g(b) => g(a) 
    map(F, nil) => nil 
    map(F, cons(X, Y)) => cons(F X, map(F, Y)) 
    filter(F, nil) => nil 
    filter(F, cons(X, Y)) => filter2(F X, F, X, Y) 
    filter2(true, F, X, Y) => cons(X, filter(F, Y)) 
    filter2(false, F, X, Y) => filter(F, Y) 

We use rule removal, following [Kop12, Theorem 2.23].

This gives the following requirements (possibly using Theorems 2.25 and 2.26 in [Kop12]):

  f(a) >? f(b) 
  g(b) >? g(a) 
  map(F, nil) >? nil 
  map(F, cons(X, Y)) >? cons(F X, map(F, Y)) 
  filter(F, nil) >? nil 
  filter(F, cons(X, Y)) >? filter2(F X, F, X, Y) 
  filter2(true, F, X, Y) >? cons(X, filter(F, Y)) 
  filter2(false, F, X, Y) >? filter(F, Y) 

We orient these requirements with a polynomial interpretation in the natural numbers.

The following interpretation satisfies the requirements:

  a = 0 
  b = 0 
  cons = Lam[y0;y1].2 + y1 + 2*y0 
  f = Lam[y0].y0 
  false = 3 
  filter = Lam[G0;y1].2 + 2*y1 + G0(0) + y1*G0(y1) 
  filter2 = Lam[y0;G1;y2;y3].1 + y0 + 2*y3 + 3*y2 + G1(y2) + y3*G1(y3) 
  g = Lam[y0].2*y0 
  map = Lam[G0;y1].1 + 3*y1 + G0(0) + 2*y1*G0(y1) 
  nil = 0 
  true = 3 

Using this interpretation, the requirements translate to:

  [[f(a)]] = 0 >= 0 = [[f(b)]] 
  [[g(b)]] = 0 >= 0 = [[g(a)]] 
  [[map(_F0, nil)]] = 1 + F0(0) > 0 = [[nil]] 
  [[map(_F0, cons(_x1, _x2))]] = 7 + 3*x2 + 6*x1 + F0(0) + 2*x2*F0(2 + x2 + 2*x1) + 4*x1*F0(2 + x2 + 2*x1) + 4*F0(2 + x2 + 2*x1) > 3 + 2*x1 + 3*x2 + F0(0) + 2*x2*F0(x2) + 2*F0(x1) = [[cons(_F0 _x1, map(_F0, _x2))]] 
  [[filter(_F0, nil)]] = 2 + F0(0) > 0 = [[nil]] 
  [[filter(_F0, cons(_x1, _x2))]] = 6 + 2*x2 + 4*x1 + F0(0) + 2*x1*F0(2 + x2 + 2*x1) + 2*F0(2 + x2 + 2*x1) + x2*F0(2 + x2 + 2*x1) > 1 + 2*x2 + 4*x1 + 2*F0(x1) + x2*F0(x2) = [[filter2(_F0 _x1, _F0, _x1, _x2)]] 
  [[filter2(true, _F0, _x1, _x2)]] = 4 + 2*x2 + 3*x1 + F0(x1) + x2*F0(x2) >= 4 + 2*x1 + 2*x2 + F0(0) + x2*F0(x2) = [[cons(_x1, filter(_F0, _x2))]] 
  [[filter2(false, _F0, _x1, _x2)]] = 4 + 2*x2 + 3*x1 + F0(x1) + x2*F0(x2) > 2 + 2*x2 + F0(0) + x2*F0(x2) = [[filter(_F0, _x2)]] 

We can thus remove the following rules:

  map(F, nil) => nil 
  map(F, cons(X, Y)) => cons(F X, map(F, Y)) 
  filter(F, nil) => nil 
  filter(F, cons(X, Y)) => filter2(F X, F, X, Y) 
  filter2(false, F, X, Y) => filter(F, Y) 

We use rule removal, following [Kop12, Theorem 2.23].

This gives the following requirements (possibly using Theorems 2.25 and 2.26 in [Kop12]):

  f(a) >? f(b) 
  g(b) >? g(a) 
  filter2(true, F, X, Y) >? cons(X, filter(F, Y)) 

We orient these requirements with a polynomial interpretation in the natural numbers.

The following interpretation satisfies the requirements:

  a = 0 
  b = 0 
  cons = Lam[y0;y1].y0 + y1 
  f = Lam[y0].2*y0 
  filter = Lam[G0;y1].y1 + G0(0) 
  filter2 = Lam[y0;G1;y2;y3].3 + 3*y0 + 3*y2 + 3*y3 + G1(y0) + 2*G1(0) + 2*G1(y3) 
  g = Lam[y0].y0 
  true = 3 

Using this interpretation, the requirements translate to:

  [[f(a)]] = 0 >= 0 = [[f(b)]] 
  [[g(b)]] = 0 >= 0 = [[g(a)]] 
  [[filter2(true, _F0, _x1, _x2)]] = 12 + 3*x1 + 3*x2 + F0(3) + 2*F0(0) + 2*F0(x2) > x1 + x2 + F0(0) = [[cons(_x1, filter(_F0, _x2))]] 

We can thus remove the following rules:

  filter2(true, F, X, Y) => cons(X, filter(F, Y)) 

We observe that the rules contain a first-order subset:

  f(a) => f(b) 
  g(b) => g(a) 

Moreover, the system is orthogonal.  Thus, by [Kop12, Thm. 7.55], we may omit all first-order dependency pairs from the dependency pair problem (DP(R), R) if this first-order part is terminating when seen as a many-sorted first-order TRS.

According to the external first-order termination prover, this system is indeed terminating:

 || Input TRS:
 ||     1: f(a()) -> f(b())
 ||     2: g(b()) -> g(a())
 || Number of strict rules: 2
 || Direct POLO(bPol) ... failed.
 || Uncurrying f g
 || 1: f^1_a() -> f^1_b()
 || 2: g^1_b() -> g^1_a()
 || 3: g(a()) ->= g^1_a()
 || 4: g(b()) ->= g^1_b()
 || 5: f(a()) ->= f^1_a()
 || 6: f(b()) ->= f^1_b()
 || Number of strict rules: 2
 || Direct POLO(bPol) ... removes: 4 1 3 5 6 2
 ||       a 	w: 1
 ||       g^1_b	w: 1
 ||       b 	w: 1
 ||       g^1_a	w: 0
 ||       f^1_b	w: 0
 ||       f 	w: 2 * x1
 ||       f^1_a	w: 1
 ||       g 	w: 2 * x1
 || Number of strict rules: 0
 || 
We use the dependency pair framework as described in [Kop12, Ch. 6/7], with static dependency pairs (see [KusIsoSakBla09] and the adaptation for AFSMs in [Kop12, Ch. 7.8]).

We thus obtain the following dependency pair problem (P_0, R_0, minimal, formative):

  Dependency Pairs P_0:


  Rules R_0:

    f(a) => f(b) 
    g(b) => g(a) 

Thus, the original system is terminating if (P_0, R_0, minimal, formative) is finite.

We consider the dependency pair problem (P_0, R_0, minimal, formative).

We place the elements of P in a dependency graph approximation G (see e.g. [Kop12, Thm. 7.27, 7.29], as follows:


This graph has no strongly connected components.  By [Kop12, Thm. 7.31], this implies finiteness of the dependency pair problem.

As all dependency pair problems were succesfully simplified with sound (and complete) processors until nothing remained, we conclude termination.


+++ Citations +++

[Kop12]  C. Kop.  Higher Order Termination.  PhD Thesis, 2012.
[KusIsoSakBla09]  K. Kusakari, Y. Isogai, M. Sakai, and F. Blanqui.  Static Dependency Pair Method Based On Strong Computability for Higher-Order Rewrite Systems.  In volume 92(10) of IEICE Transactions on Information and Systems.  2007--2015, 2009.
