YES
We consider the system St7rD.

  Alphabet:

    cons : [a * alist] --> alist 
    map : [a -> a * alist] --> alist 
    nil : [] --> alist 
    o : [a -> a * a -> a] --> a -> a 
    xap : [a -> a * a] --> a 

  Rules:

    map(/\x.xap(F, x), nil) => nil 
    map(/\x.xap(F, x), cons(X, Y)) => cons(xap(F, X), map(/\y.xap(F, y), Y)) 
    map(/\x.xap(F, x), map(/\y.xap(G, y), X)) => map(o(/\z.xap(F, z), /\u.xap(G, u)), X) 
    o(F, G) X => F (G X) 
    xap(F, X) => F X 

Symbol xap is an encoding for application that is only used in innocuous ways.  We can simplify the program (without losing non-termination) by removing it.  This gives:

  Alphabet:

    cons : [a * alist] --> alist 
    map : [a -> a * alist] --> alist 
    nil : [] --> alist 
    o : [a -> a * a -> a] --> a -> a 

  Rules:

    map(/\x.X[x], nil) => nil 
    map(/\x.X[x], cons(Y, Z)) => cons(X[Y], map(/\y.X[y], Z)) 
    map(/\x.X[x], map(/\y.Y[y], Z)) => map(o(/\z.X[z], /\u.Y[u]), Z) 
    o(F, G) X => F (G X) 

We use the dependency pair framework as described in [Kop12, Ch. 6/7], with static dependency pairs (see [KusIsoSakBla09] and the adaptation for AFSMs and accessible arguments in [FuhKop19]).

In order to do so, we start by eta-expanding the system, which gives:

  map(/\x.X[x], nil) => nil 
  map(/\x.X[x], cons(Y, Z)) => cons(X[Y], map(/\y.X[y], Z)) 
  map(/\x.X[x], map(/\y.Y[y], Z)) => map(/\z.o(/\u.X[u], /\v.Y[v], z), Z) 
  o(F, G, X) => F (G X) 

We thus obtain the following dependency pair problem (P_0, R_0, computable, formative):

  Dependency Pairs P_0:

    0] map#(/\x.X[x], cons(Y, Z)) =#> map#(/\y.X[y], Z)   
    1] map#(/\x.X[x], map(/\y.Y[y], Z)) =#> map#(/\z.o(/\u.X[u], /\v.Y[v], z), Z)   
    2] map#(/\x.X[x], map(/\y.Y[y], Z)) =#> o#(/\z.X[z], /\u.Y[u], U)   

  Rules R_0:

    map(/\x.X[x], nil) => nil 
    map(/\x.X[x], cons(Y, Z)) => cons(X[Y], map(/\y.X[y], Z)) 
    map(/\x.X[x], map(/\y.Y[y], Z)) => map(/\z.o(/\u.X[u], /\v.Y[v], z), Z) 
    o(F, G, X) => F (G X) 

Thus, the original system is terminating if (P_0, R_0, computable, formative) is finite.

We consider the dependency pair problem (P_0, R_0, computable, formative).

We place the elements of P in a dependency graph approximation G (see e.g. [Kop12, Thm. 7.27, 7.29], as follows:

    * 0 : 0, 1, 2 
    * 1 : 0, 1, 2 
    * 2 :  

This graph has the following strongly connected components:

  P_1:

    map#(/\x.X[x], cons(Y, Z)) =#> map#(/\y.X[y], Z)   
    map#(/\x.X[x], map(/\y.Y[y], Z)) =#> map#(/\z.o(/\u.X[u], /\v.Y[v], z), Z)   

By [Kop12, Thm. 7.31], we may replace any dependency pair problem (P_0, R_0, m, f) by (P_1, R_0, m, f).

Thus, the original system is terminating if (P_1, R_0, computable, formative) is finite.

We consider the dependency pair problem (P_1, R_0, computable, formative).

We apply the subterm criterion with the following projection function:

  nu(map#) = 2 

Thus, we can orient the dependency pairs as follows:

  nu(map#(/\x.X[x], cons(Y, Z))) = cons(Y, Z) |> Z = nu(map#(/\y.X[y], Z)) 
  nu(map#(/\x.X[x], map(/\y.Y[y], Z))) = map(/\z.Y[z], Z) |> Z = nu(map#(/\y.o(/\u.X[u], /\v.Y[v], y), Z)) 

By [FuhKop19, Thm. 61], we may replace a dependency pair problem (P_1, R_0, computable, f) by ({}, R_0, computable, f).  By the empty set processor [Kop12, Thm. 7.15] this problem may be immediately removed.

As all dependency pair problems were succesfully simplified with sound (and complete) processors until nothing remained, we conclude termination.


+++ Citations +++

[FuhKop19]  C. Fuhs, and C. Kop.  A static higher-order dependency pair framework.  In Proceedings of ESOP 2019, 2019.
[Kop12]  C. Kop.  Higher Order Termination.  PhD Thesis, 2012.
[KusIsoSakBla09]  K. Kusakari, Y. Isogai, M. Sakai, and F. Blanqui.  Static Dependency Pair Method Based On Strong Computability for Higher-Order Rewrite Systems.  In volume 92(10) of IEICE Transactions on Information and Systems.  2007--2015, 2009.
