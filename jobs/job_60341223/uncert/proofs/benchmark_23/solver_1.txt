YES
We consider the system XHpOA.

  Alphabet:

    abs : [a -> b] --> ab 
    app : [ab * a] --> b 
    appBG : [BGaBGb * BGa] --> BGb 
    banga : [a] --> BGa 
    let : [BGa * a -> BGb] --> BGb 

  Rules:

    app(abs(F), X) => F X 
    abs(/\x.app(X, x)) => X 
    let(banga(X), F) => F X 
    let(X, /\x.appBG(Y, banga(x))) => appBG(Y, X) 

We use the dependency pair framework as described in [Kop12, Ch. 6/7], with static dependency pairs (see [KusIsoSakBla09] and the adaptation for AFSMs and accessible arguments in [FuhKop19]).

We thus obtain the following dependency pair problem (P_0, R_0, computable, all):

  Dependency Pairs P_0:


  Rules R_0:

    app(abs(F), X) => F X 
    abs(/\x.app(X, x)) => X 
    let(banga(X), F) => F X 
    let(X, /\x.appBG(Y, banga(x))) => appBG(Y, X) 

Thus, the original system is terminating if (P_0, R_0, computable, all) is finite.

We consider the dependency pair problem (P_0, R_0, computable, all).

We place the elements of P in a dependency graph approximation G (see e.g. [Kop12, Thm. 7.27, 7.29], as follows:


This graph has no strongly connected components.  By [Kop12, Thm. 7.31], this implies finiteness of the dependency pair problem.

As all dependency pair problems were succesfully simplified with sound (and complete) processors until nothing remained, we conclude termination.


+++ Citations +++

[FuhKop19]  C. Fuhs, and C. Kop.  A static higher-order dependency pair framework.  In Proceedings of ESOP 2019, 2019.
[Kop12]  C. Kop.  Higher Order Termination.  PhD Thesis, 2012.
[KusIsoSakBla09]  K. Kusakari, Y. Isogai, M. Sakai, and F. Blanqui.  Static Dependency Pair Method Based On Strong Computability for Higher-Order Rewrite Systems.  In volume 92(10) of IEICE Transactions on Information and Systems.  2007--2015, 2009.
