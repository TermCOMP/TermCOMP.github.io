YES
We consider the system fJHHM.

  Alphabet:

    abs : [a -> b] --> Arrab 
    app : [Arrab * a] --> b 
    box : [a] --> Boxa 
    unbox : [Boxa] --> a 

  Rules:

    app(abs(F), X) => F X 
    abs(/\x.app(X, x)) => X 
    unbox(box(X)) => X 
    box(unbox(X)) => X 

We observe that the rules contain a first-order subset:

  unbox(box(X)) => X 
  box(unbox(X)) => X 

Moreover, the system is finitely branching.  Thus, by [Kop12, Thm. 7.55], we may omit all first-order dependency pairs from the dependency pair problem (DP(R), R) if this first-order part is Ce-terminating when seen as a many-sorted first-order TRS.

According to the external first-order termination prover, this system is indeed Ce-terminating:

 || Input TRS:
 ||     1: unbox(box(PeRCenTX)) -> PeRCenTX
 ||     2: box(unbox(PeRCenTX)) -> PeRCenTX
 ||     3: TIlDePAIR(PeRCenTX,PeRCenTY) -> PeRCenTX
 ||     4: TIlDePAIR(PeRCenTX,PeRCenTY) -> PeRCenTY
 || Number of strict rules: 4
 || Direct POLO(bPol) ... removes: 4 1 3 2
 ||       TIlDePAIR	w: x1 + 2 * x2 + 1
 ||       box	w: 2 * x1 + 1
 ||       unbox	w: 2 * x1 + 1
 || Number of strict rules: 0
 || 
We use the dependency pair framework as described in [Kop12, Ch. 6/7], with static dependency pairs (see [KusIsoSakBla09] and the adaptation for AFSMs and accessible arguments in [FuhKop19]).

We thus obtain the following dependency pair problem (P_0, R_0, computable, all):

  Dependency Pairs P_0:


  Rules R_0:

    app(abs(F), X) => F X 
    abs(/\x.app(X, x)) => X 
    unbox(box(X)) => X 
    box(unbox(X)) => X 

Thus, the original system is terminating if (P_0, R_0, computable, all) is finite.

We consider the dependency pair problem (P_0, R_0, computable, all).

We place the elements of P in a dependency graph approximation G (see e.g. [Kop12, Thm. 7.27, 7.29], as follows:


This graph has no strongly connected components.  By [Kop12, Thm. 7.31], this implies finiteness of the dependency pair problem.

As all dependency pair problems were succesfully simplified with sound (and complete) processors until nothing remained, we conclude termination.


+++ Citations +++

[FuhKop19]  C. Fuhs, and C. Kop.  A static higher-order dependency pair framework.  In Proceedings of ESOP 2019, 2019.
[Kop12]  C. Kop.  Higher Order Termination.  PhD Thesis, 2012.
[KusIsoSakBla09]  K. Kusakari, Y. Isogai, M. Sakai, and F. Blanqui.  Static Dependency Pair Method Based On Strong Computability for Higher-Order Rewrite Systems.  In volume 92(10) of IEICE Transactions on Information and Systems.  2007--2015, 2009.
