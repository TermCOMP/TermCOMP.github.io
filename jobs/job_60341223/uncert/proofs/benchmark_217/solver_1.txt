NO
We consider the system ZA8NG.

  Alphabet:

    cons : [d * e] --> e 
    f : [b] --> a 
    false : [] --> c 
    filter : [d -> c * e] --> e 
    filter2 : [c * d -> c * d * e] --> e 
    map : [d -> d * e] --> e 
    nil : [] --> e 
    one : [] --> b 
    true : [] --> c 
    zero : [] --> b 

  Rules:

    f(zero) => f(zero) 
    zero => one 
    map(F, nil) => nil 
    map(F, cons(X, Y)) => cons(F X, map(F, Y)) 
    filter(F, nil) => nil 
    filter(F, cons(X, Y)) => filter2(F X, F, X, Y) 
    filter2(true, F, X, Y) => cons(X, filter(F, Y)) 
    filter2(false, F, X, Y) => filter(F, Y) 

It is easy to see that this system is non-terminating:

  f(zero) 
    => f(zero) 

That is, a term s reduces to a term t which instantiates s.

