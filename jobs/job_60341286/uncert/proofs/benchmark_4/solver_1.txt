YES

Problem 1: 

(VAR vu95NonEmpty a b c)
(RULES
App(App(App(S,a),b),c) -> App(App(a,c),App(b,c)) | a ->* I, b ->* I, c ->* I
App(App(K,a),b) -> a | a ->* I, b ->* I
App(I,a) -> a | a ->* I
)


Problem 1: 
Valid CTRS Processor:
-> Rules:
 App(App(App(S,a),b),c) -> App(App(a,c),App(b,c)) | a ->* I, b ->* I, c ->* I
 App(App(K,a),b) -> a | a ->* I, b ->* I
 App(I,a) -> a | a ->* I
-> The system is a 2-CTRS.

Problem 1: 
-> Pairs:
 APP(App(App(S,a),b),c) -> APP(App(a,c),App(b,c)) | a ->* I, b ->* I, c ->* I
 APP(App(App(S,a),b),c) -> APP(a,c) | a ->* I, b ->* I, c ->* I
 APP(App(App(S,a),b),c) -> APP(b,c) | a ->* I, b ->* I, c ->* I
-> QPairs:
 Empty
-> Rules:
 App(App(App(S,a),b),c) -> App(App(a,c),App(b,c)) | a ->* I, b ->* I, c ->* I
 App(App(K,a),b) -> a | a ->* I, b ->* I
 App(I,a) -> a | a ->* I

Problem 1: 

SCC Processor:
-> Pairs:
 APP(App(App(S,a),b),c) -> APP(App(a,c),App(b,c)) | a ->* I, b ->* I, c ->* I
 APP(App(App(S,a),b),c) -> APP(a,c) | a ->* I, b ->* I, c ->* I
 APP(App(App(S,a),b),c) -> APP(b,c) | a ->* I, b ->* I, c ->* I
-> QPairs:
 Empty
-> Rules:
 App(App(App(S,a),b),c) -> App(App(a,c),App(b,c)) | a ->* I, b ->* I, c ->* I
 App(App(K,a),b) -> a | a ->* I, b ->* I
 App(I,a) -> a | a ->* I
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 APP(App(App(S,a),b),c) -> APP(App(a,c),App(b,c)) | a ->* I, b ->* I, c ->* I
 APP(App(App(S,a),b),c) -> APP(a,c) | a ->* I, b ->* I, c ->* I
 APP(App(App(S,a),b),c) -> APP(b,c) | a ->* I, b ->* I, c ->* I
-> QPairs:
 Empty
->->-> Rules:
 App(App(App(S,a),b),c) -> App(App(a,c),App(b,c)) | a ->* I, b ->* I, c ->* I
 App(App(K,a),b) -> a | a ->* I, b ->* I
 App(I,a) -> a | a ->* I

Problem 1: 

Semantic Removal Triple Processor:
-> Pairs:
 APP(App(App(S,a),b),c) -> APP(App(a,c),App(b,c)) | a ->* I, b ->* I, c ->* I
 APP(App(App(S,a),b),c) -> APP(a,c) | a ->* I, b ->* I, c ->* I
 APP(App(App(S,a),b),c) -> APP(b,c) | a ->* I, b ->* I, c ->* I
-> Rules:
 App(App(App(S,a),b),c) -> App(App(a,c),App(b,c)) | a ->* I, b ->* I, c ->* I
 App(App(K,a),b) -> a | a ->* I, b ->* I
 App(I,a) -> a | a ->* I
-> Needed rules:
 App(App(App(S,a),b),c) -> App(App(a,c),App(b,c)) | a ->* I, b ->* I, c ->* I
 App(App(K,a),b) -> a | a ->* I, b ->* I
 App(I,a) -> a | a ->* I
-> Usable rules:
 Empty
->Mace4 Output:
 ============================== Mace4 =================================
Mace4 (64) version 2009-11A, November 2009.
Process 94 was started by ff862203 on n23m0088.hpc.itc.rwth-aachen.de,
Mon Aug 18 14:13:37 2025
The command was "./mace4 -c -f /tmp/mace421-17.in".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file /tmp/mace421-17.in

assign(max_seconds,20).

formulas(assumptions).
arrowStar_s0(x,x) # label(reflexivity).
arrow_s0(x,y) & arrowStar_s0(y,z) -> arrowStar_s0(x,z) # label(compatibility).
gtrsim_s0(x,y) & sqsupset_s0(y,z) -> sqsupset_s0(x,z) # label(compatibility).
succeq_s0(x,y) & sqsupset_s0(y,z) -> sqsupset_s0(x,z) # label(compatibility).
gtrsim_s0(x,y) & succeq_s0(y,z) -> gtrsim_s0(x,z) # label(compatibility).
arrow_s0(x1,y) -> arrow_s0(f2(x1,x2),f2(y,x2)) # label(congruence).
arrow_s0(x2,y) -> arrow_s0(f2(x1,x2),f2(x1,y)) # label(congruence).
arrow_s0(x1,y) -> arrow_s0(f10(x1,x2),f10(y,x2)) # label(congruence).
arrow_s0(x2,y) -> arrow_s0(f10(x1,x2),f10(x1,y)) # label(congruence).
arrowN_s0(x1,y) -> arrowN_s0(f2(x1,x2),f2(y,x2)) # label(congruence).
arrowN_s0(x2,y) -> arrowN_s0(f2(x1,x2),f2(x1,y)) # label(congruence).
arrowN_s0(x1,y) -> arrowN_s0(f9(x1,x2),f9(y,x2)) # label(congruence).
arrowN_s0(x2,y) -> arrowN_s0(f9(x1,x2),f9(x1,y)) # label(congruence).
arrowN_s0(x1,y) -> arrowN_s0(f10(x1,x2),f10(y,x2)) # label(congruence).
arrowN_s0(x2,y) -> arrowN_s0(f10(x1,x2),f10(x1,y)) # label(congruence).
arrow_s0(f10(x4,x5),x4) # label(replacement).
arrow_s0(f10(x4,x5),x5) # label(replacement).
arrowStar_s0(x1,f3) & arrowStar_s0(x2,f3) & arrowStar_s0(x3,f3) -> arrowN_s0(f2(f2(f2(f5,x1),x2),x3),f2(f2(x1,x3),f2(x2,x3))) # label(replacement).
arrowStar_s0(x1,f3) & arrowStar_s0(x2,f3) -> arrowN_s0(f2(f2(f4,x1),x2),x1) # label(replacement).
arrowStar_s0(x1,f3) -> arrowN_s0(f2(f3,x1),x1) # label(replacement).
arrowN_s0(x,y) -> gtrsim_s0(x,y) # label(inclusion).
arrowStar_s0(x1,f3) & arrowStar_s0(x2,f3) & arrowStar_s0(x3,f3) -> sqsupset_s0(f9(f2(f2(f5,x1),x2),x3),f9(f2(x1,x3),f2(x2,x3))) # label(replacement).
arrowStar_s0(x1,f3) & arrowStar_s0(x2,f3) & arrowStar_s0(x3,f3) -> succeq_s0(f9(f2(f2(f5,x1),x2),x3),f9(x1,x3)) # label(replacement).
arrowStar_s0(x1,f3) & arrowStar_s0(x2,f3) & arrowStar_s0(x3,f3) -> succeq_s0(f9(f2(f2(f5,x1),x2),x3),f9(x2,x3)) # label(replacement).
sqsupset_s0(x,y) -> sqsupsetStar_s0(x,y) # label(inclusion).
sqsupset_s0(x,y) & sqsupsetStar_s0(y,z) -> sqsupsetStar_s0(x,z) # label(compatibility).
end_of_list.

formulas(goals).
(exists x sqsupsetStar_s0(x,x)) # label(wellfoundedness).
end_of_list.

============================== end of input ==========================

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 arrow_s0(x,y) & arrowStar_s0(y,z) -> arrowStar_s0(x,z) # label(compatibility) # label(non_clause).  [assumption].
2 gtrsim_s0(x,y) & sqsupset_s0(y,z) -> sqsupset_s0(x,z) # label(compatibility) # label(non_clause).  [assumption].
3 succeq_s0(x,y) & sqsupset_s0(y,z) -> sqsupset_s0(x,z) # label(compatibility) # label(non_clause).  [assumption].
4 gtrsim_s0(x,y) & succeq_s0(y,z) -> gtrsim_s0(x,z) # label(compatibility) # label(non_clause).  [assumption].
5 arrow_s0(x1,y) -> arrow_s0(f2(x1,x2),f2(y,x2)) # label(congruence) # label(non_clause).  [assumption].
6 arrow_s0(x2,y) -> arrow_s0(f2(x1,x2),f2(x1,y)) # label(congruence) # label(non_clause).  [assumption].
7 arrow_s0(x1,y) -> arrow_s0(f10(x1,x2),f10(y,x2)) # label(congruence) # label(non_clause).  [assumption].
8 arrow_s0(x2,y) -> arrow_s0(f10(x1,x2),f10(x1,y)) # label(congruence) # label(non_clause).  [assumption].
9 arrowN_s0(x1,y) -> arrowN_s0(f2(x1,x2),f2(y,x2)) # label(congruence) # label(non_clause).  [assumption].
10 arrowN_s0(x2,y) -> arrowN_s0(f2(x1,x2),f2(x1,y)) # label(congruence) # label(non_clause).  [assumption].
11 arrowN_s0(x1,y) -> arrowN_s0(f9(x1,x2),f9(y,x2)) # label(congruence) # label(non_clause).  [assumption].
12 arrowN_s0(x2,y) -> arrowN_s0(f9(x1,x2),f9(x1,y)) # label(congruence) # label(non_clause).  [assumption].
13 arrowN_s0(x1,y) -> arrowN_s0(f10(x1,x2),f10(y,x2)) # label(congruence) # label(non_clause).  [assumption].
14 arrowN_s0(x2,y) -> arrowN_s0(f10(x1,x2),f10(x1,y)) # label(congruence) # label(non_clause).  [assumption].
15 arrowStar_s0(x1,f3) & arrowStar_s0(x2,f3) & arrowStar_s0(x3,f3) -> arrowN_s0(f2(f2(f2(f5,x1),x2),x3),f2(f2(x1,x3),f2(x2,x3))) # label(replacement) # label(non_clause).  [assumption].
16 arrowStar_s0(x1,f3) & arrowStar_s0(x2,f3) -> arrowN_s0(f2(f2(f4,x1),x2),x1) # label(replacement) # label(non_clause).  [assumption].
17 arrowStar_s0(x1,f3) -> arrowN_s0(f2(f3,x1),x1) # label(replacement) # label(non_clause).  [assumption].
18 arrowN_s0(x,y) -> gtrsim_s0(x,y) # label(inclusion) # label(non_clause).  [assumption].
19 arrowStar_s0(x1,f3) & arrowStar_s0(x2,f3) & arrowStar_s0(x3,f3) -> sqsupset_s0(f9(f2(f2(f5,x1),x2),x3),f9(f2(x1,x3),f2(x2,x3))) # label(replacement) # label(non_clause).  [assumption].
20 arrowStar_s0(x1,f3) & arrowStar_s0(x2,f3) & arrowStar_s0(x3,f3) -> succeq_s0(f9(f2(f2(f5,x1),x2),x3),f9(x1,x3)) # label(replacement) # label(non_clause).  [assumption].
21 arrowStar_s0(x1,f3) & arrowStar_s0(x2,f3) & arrowStar_s0(x3,f3) -> succeq_s0(f9(f2(f2(f5,x1),x2),x3),f9(x2,x3)) # label(replacement) # label(non_clause).  [assumption].
22 sqsupset_s0(x,y) -> sqsupsetStar_s0(x,y) # label(inclusion) # label(non_clause).  [assumption].
23 sqsupset_s0(x,y) & sqsupsetStar_s0(y,z) -> sqsupsetStar_s0(x,z) # label(compatibility) # label(non_clause).  [assumption].
24 (exists x sqsupsetStar_s0(x,x)) # label(wellfoundedness) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== CLAUSES FOR SEARCH ====================

formulas(mace4_clauses).
arrowStar_s0(x,x) # label(reflexivity).
-arrow_s0(x,y) | -arrowStar_s0(y,z) | arrowStar_s0(x,z) # label(compatibility).
-gtrsim_s0(x,y) | -sqsupset_s0(y,z) | sqsupset_s0(x,z) # label(compatibility).
-succeq_s0(x,y) | -sqsupset_s0(y,z) | sqsupset_s0(x,z) # label(compatibility).
-gtrsim_s0(x,y) | -succeq_s0(y,z) | gtrsim_s0(x,z) # label(compatibility).
-arrow_s0(x,y) | arrow_s0(f2(x,z),f2(y,z)) # label(congruence).
-arrow_s0(x,y) | arrow_s0(f2(z,x),f2(z,y)) # label(congruence).
-arrow_s0(x,y) | arrow_s0(f10(x,z),f10(y,z)) # label(congruence).
-arrow_s0(x,y) | arrow_s0(f10(z,x),f10(z,y)) # label(congruence).
-arrowN_s0(x,y) | arrowN_s0(f2(x,z),f2(y,z)) # label(congruence).
-arrowN_s0(x,y) | arrowN_s0(f2(z,x),f2(z,y)) # label(congruence).
-arrowN_s0(x,y) | arrowN_s0(f9(x,z),f9(y,z)) # label(congruence).
-arrowN_s0(x,y) | arrowN_s0(f9(z,x),f9(z,y)) # label(congruence).
-arrowN_s0(x,y) | arrowN_s0(f10(x,z),f10(y,z)) # label(congruence).
-arrowN_s0(x,y) | arrowN_s0(f10(z,x),f10(z,y)) # label(congruence).
arrow_s0(f10(x,y),x) # label(replacement).
arrow_s0(f10(x,y),y) # label(replacement).
-arrowStar_s0(x,f3) | -arrowStar_s0(y,f3) | -arrowStar_s0(z,f3) | arrowN_s0(f2(f2(f2(f5,x),y),z),f2(f2(x,z),f2(y,z))) # label(replacement).
-arrowStar_s0(x,f3) | -arrowStar_s0(y,f3) | arrowN_s0(f2(f2(f4,x),y),x) # label(replacement).
-arrowStar_s0(x,f3) | arrowN_s0(f2(f3,x),x) # label(replacement).
-arrowN_s0(x,y) | gtrsim_s0(x,y) # label(inclusion).
-arrowStar_s0(x,f3) | -arrowStar_s0(y,f3) | -arrowStar_s0(z,f3) | sqsupset_s0(f9(f2(f2(f5,x),y),z),f9(f2(x,z),f2(y,z))) # label(replacement).
-arrowStar_s0(x,f3) | -arrowStar_s0(y,f3) | -arrowStar_s0(z,f3) | succeq_s0(f9(f2(f2(f5,x),y),z),f9(x,z)) # label(replacement).
-arrowStar_s0(x,f3) | -arrowStar_s0(y,f3) | -arrowStar_s0(z,f3) | succeq_s0(f9(f2(f2(f5,x),y),z),f9(y,z)) # label(replacement).
-sqsupset_s0(x,y) | sqsupsetStar_s0(x,y) # label(inclusion).
-sqsupset_s0(x,y) | -sqsupsetStar_s0(y,z) | sqsupsetStar_s0(x,z) # label(compatibility).
-sqsupsetStar_s0(x,x) # label(wellfoundedness).
end_of_list.

============================== end of clauses for search =============

% There are no natural numbers in the input.

============================== DOMAIN SIZE 2 =========================

============================== MODEL =================================

interpretation( 2, [number=1, seconds=0], [

        function(f3, [ 0 ]),

        function(f4, [ 0 ]),

        function(f5, [ 1 ]),

        function(f10(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f2(_,_), [
			   0, 0,
			   1, 1 ]),

        function(f9(_,_), [
			   0, 0,
			   1, 1 ]),

        relation(arrowN_s0(_,_), [
			   1, 0,
			   1, 1 ]),

        relation(arrowStar_s0(_,_), [
			   1, 1,
			   0, 1 ]),

        relation(arrow_s0(_,_), [
			   1, 1,
			   0, 1 ]),

        relation(gtrsim_s0(_,_), [
			   1, 0,
			   1, 1 ]),

        relation(sqsupsetStar_s0(_,_), [
			   0, 0,
			   1, 0 ]),

        relation(sqsupset_s0(_,_), [
			   0, 0,
			   1, 0 ]),

        relation(succeq_s0(_,_), [
			   0, 0,
			   1, 0 ])
]).

============================== end of model ==========================

============================== STATISTICS ============================

For domain size 2.

Current CPU time: 0.00 seconds (total CPU time: 0.01 seconds).
Ground clauses: seen=178, kept=174.
Selections=556, assignments=1100, propagations=1444, current_models=1.
Rewrite_terms=35505, rewrite_bools=14922, indexes=7547.
Rules_from_neg_clauses=425, cross_offs=425.

============================== end of statistics =====================

User_CPU=0.01, System_CPU=0.00, Wall_clock=0.

Exiting with 1 model.

Process 94 exit (max_models) Mon Aug 18 14:13:37 2025
The process finished Mon Aug 18 14:13:37 2025


Mace4 cooked interpretation:

% number = 1
% seconds = 0

% Interpretation of size 2

f3 = 0.

f4 = 0.

f5 = 1.

f10(0,0) = 0.
f10(0,1) = 0.
f10(1,0) = 0.
f10(1,1) = 0.

f2(0,0) = 0.
f2(0,1) = 0.
f2(1,0) = 1.
f2(1,1) = 1.

f9(0,0) = 0.
f9(0,1) = 0.
f9(1,0) = 1.
f9(1,1) = 1.

  arrowN_s0(0,0).
- arrowN_s0(0,1).
  arrowN_s0(1,0).
  arrowN_s0(1,1).

  arrowStar_s0(0,0).
  arrowStar_s0(0,1).
- arrowStar_s0(1,0).
  arrowStar_s0(1,1).

  arrow_s0(0,0).
  arrow_s0(0,1).
- arrow_s0(1,0).
  arrow_s0(1,1).

  gtrsim_s0(0,0).
- gtrsim_s0(0,1).
  gtrsim_s0(1,0).
  gtrsim_s0(1,1).

- sqsupsetStar_s0(0,0).
- sqsupsetStar_s0(0,1).
  sqsupsetStar_s0(1,0).
- sqsupsetStar_s0(1,1).

- sqsupset_s0(0,0).
- sqsupset_s0(0,1).
  sqsupset_s0(1,0).
- sqsupset_s0(1,1).

- succeq_s0(0,0).
- succeq_s0(0,1).
  succeq_s0(1,0).
- succeq_s0(1,1).


Problem 1: 

SCC Processor:
-> Pairs:
 APP(App(App(S,a),b),c) -> APP(a,c) | a ->* I, b ->* I, c ->* I
 APP(App(App(S,a),b),c) -> APP(b,c) | a ->* I, b ->* I, c ->* I
-> QPairs:
 Empty
-> Rules:
 App(App(App(S,a),b),c) -> App(App(a,c),App(b,c)) | a ->* I, b ->* I, c ->* I
 App(App(K,a),b) -> a | a ->* I, b ->* I
 App(I,a) -> a | a ->* I
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 APP(App(App(S,a),b),c) -> APP(a,c) | a ->* I, b ->* I, c ->* I
 APP(App(App(S,a),b),c) -> APP(b,c) | a ->* I, b ->* I, c ->* I
-> QPairs:
 Empty
->->-> Rules:
 App(App(App(S,a),b),c) -> App(App(a,c),App(b,c)) | a ->* I, b ->* I, c ->* I
 App(App(K,a),b) -> a | a ->* I, b ->* I
 App(I,a) -> a | a ->* I

Problem 1: 

Subterm Processor:
-> Pairs:
 APP(App(App(S,a),b),c) -> APP(a,c) | a ->* I, b ->* I, c ->* I
 APP(App(App(S,a),b),c) -> APP(b,c) | a ->* I, b ->* I, c ->* I
-> QPairs:
 Empty
-> Rules:
 App(App(App(S,a),b),c) -> App(App(a,c),App(b,c)) | a ->* I, b ->* I, c ->* I
 App(App(K,a),b) -> a | a ->* I, b ->* I
 App(I,a) -> a | a ->* I
->Projection:
 pi(APP) = 1

Problem 1: 

SCC Processor:
-> Pairs:
 Empty
-> QPairs:
 Empty
-> Rules:
 App(App(App(S,a),b),c) -> App(App(a,c),App(b,c)) | a ->* I, b ->* I, c ->* I
 App(App(K,a),b) -> a | a ->* I, b ->* I
 App(I,a) -> a | a ->* I
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
