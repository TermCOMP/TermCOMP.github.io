YES

Problem 1: 

(VAR vu95NonEmpty x y)
(RULES
gcd(num0,s(y)) -> s(y)
gcd(s(x),num0) -> s(x)
gcd(s(x),s(y)) -> gcd(minus(x,y),s(y)) | less(y,x) ->* ftrue
gcd(s(x),s(y)) -> gcd(s(x),minus(y,x)) | less(x,y) ->* ftrue
gcd(x,x) -> x
less(num0,s(x)) -> ftrue
less(s(x),s(y)) -> less(x,y)
less(x,num0) -> ffalse
minus(num0,s(y)) -> num0
minus(s(x),s(y)) -> minus(x,y)
minus(x,num0) -> x
)


Problem 1: 
Valid CTRS Processor:
-> Rules:
 gcd(num0,s(y)) -> s(y)
 gcd(s(x),num0) -> s(x)
 gcd(s(x),s(y)) -> gcd(minus(x,y),s(y)) | less(y,x) ->* ftrue
 gcd(s(x),s(y)) -> gcd(s(x),minus(y,x)) | less(x,y) ->* ftrue
 gcd(x,x) -> x
 less(num0,s(x)) -> ftrue
 less(s(x),s(y)) -> less(x,y)
 less(x,num0) -> ffalse
 minus(num0,s(y)) -> num0
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
-> The system is a 2-CTRS.

Problem 1: 

Underlying TRS Transformation Processor:
-> Rules:
 gcd(num0,s(y)) -> s(y)
 gcd(s(x),num0) -> s(x)
 gcd(s(x),s(y)) -> gcd(minus(x,y),s(y)) | less(y,x) ->* ftrue
 gcd(s(x),s(y)) -> gcd(s(x),minus(y,x)) | less(x,y) ->* ftrue
 gcd(x,x) -> x
 less(num0,s(x)) -> ftrue
 less(s(x),s(y)) -> less(x,y)
 less(x,num0) -> ffalse
 minus(num0,s(y)) -> num0
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
-> New Rules:
 gcd(num0,s(y)) -> s(y)
 gcd(s(x),num0) -> s(x)
 gcd(s(x),s(y)) -> gcd(minus(x,y),s(y))
 gcd(s(x),s(y)) -> gcd(s(x),minus(y,x))
 gcd(x,x) -> x
 less(num0,s(x)) -> ftrue
 less(s(x),s(y)) -> less(x,y)
 less(x,num0) -> ffalse
 minus(num0,s(y)) -> num0
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x

Problem 1: 

(VAR vu95NonEmpty x y)
(RULES
gcd(num0,s(y)) -> s(y)
gcd(s(x),num0) -> s(x)
gcd(s(x),s(y)) -> gcd(minus(x,y),s(y))
gcd(s(x),s(y)) -> gcd(s(x),minus(y,x))
gcd(x,x) -> x
less(num0,s(x)) -> ftrue
less(s(x),s(y)) -> less(x,y)
less(x,num0) -> ffalse
minus(num0,s(y)) -> num0
minus(s(x),s(y)) -> minus(x,y)
minus(x,num0) -> x
)


Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 GCD(s(x),s(y)) -> GCD(minus(x,y),s(y))
 GCD(s(x),s(y)) -> GCD(s(x),minus(y,x))
 GCD(s(x),s(y)) -> MINUS(x,y)
 GCD(s(x),s(y)) -> MINUS(y,x)
 LESS(s(x),s(y)) -> LESS(x,y)
 MINUS(s(x),s(y)) -> MINUS(x,y)
-> Rules:
 gcd(num0,s(y)) -> s(y)
 gcd(s(x),num0) -> s(x)
 gcd(s(x),s(y)) -> gcd(minus(x,y),s(y))
 gcd(s(x),s(y)) -> gcd(s(x),minus(y,x))
 gcd(x,x) -> x
 less(num0,s(x)) -> ftrue
 less(s(x),s(y)) -> less(x,y)
 less(x,num0) -> ffalse
 minus(num0,s(y)) -> num0
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x

Problem 1: 

SCC Processor:
-> Pairs:
 GCD(s(x),s(y)) -> GCD(minus(x,y),s(y))
 GCD(s(x),s(y)) -> GCD(s(x),minus(y,x))
 GCD(s(x),s(y)) -> MINUS(x,y)
 GCD(s(x),s(y)) -> MINUS(y,x)
 LESS(s(x),s(y)) -> LESS(x,y)
 MINUS(s(x),s(y)) -> MINUS(x,y)
-> Rules:
 gcd(num0,s(y)) -> s(y)
 gcd(s(x),num0) -> s(x)
 gcd(s(x),s(y)) -> gcd(minus(x,y),s(y))
 gcd(s(x),s(y)) -> gcd(s(x),minus(y,x))
 gcd(x,x) -> x
 less(num0,s(x)) -> ftrue
 less(s(x),s(y)) -> less(x,y)
 less(x,num0) -> ffalse
 minus(num0,s(y)) -> num0
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 MINUS(s(x),s(y)) -> MINUS(x,y)
->->-> Rules:
 gcd(num0,s(y)) -> s(y)
 gcd(s(x),num0) -> s(x)
 gcd(s(x),s(y)) -> gcd(minus(x,y),s(y))
 gcd(s(x),s(y)) -> gcd(s(x),minus(y,x))
 gcd(x,x) -> x
 less(num0,s(x)) -> ftrue
 less(s(x),s(y)) -> less(x,y)
 less(x,num0) -> ffalse
 minus(num0,s(y)) -> num0
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
->->Cycle:
->->-> Pairs:
 LESS(s(x),s(y)) -> LESS(x,y)
->->-> Rules:
 gcd(num0,s(y)) -> s(y)
 gcd(s(x),num0) -> s(x)
 gcd(s(x),s(y)) -> gcd(minus(x,y),s(y))
 gcd(s(x),s(y)) -> gcd(s(x),minus(y,x))
 gcd(x,x) -> x
 less(num0,s(x)) -> ftrue
 less(s(x),s(y)) -> less(x,y)
 less(x,num0) -> ffalse
 minus(num0,s(y)) -> num0
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
->->Cycle:
->->-> Pairs:
 GCD(s(x),s(y)) -> GCD(minus(x,y),s(y))
 GCD(s(x),s(y)) -> GCD(s(x),minus(y,x))
->->-> Rules:
 gcd(num0,s(y)) -> s(y)
 gcd(s(x),num0) -> s(x)
 gcd(s(x),s(y)) -> gcd(minus(x,y),s(y))
 gcd(s(x),s(y)) -> gcd(s(x),minus(y,x))
 gcd(x,x) -> x
 less(num0,s(x)) -> ftrue
 less(s(x),s(y)) -> less(x,y)
 less(x,num0) -> ffalse
 minus(num0,s(y)) -> num0
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x


The problem is decomposed in 3 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 MINUS(s(x),s(y)) -> MINUS(x,y)
-> Rules:
 gcd(num0,s(y)) -> s(y)
 gcd(s(x),num0) -> s(x)
 gcd(s(x),s(y)) -> gcd(minus(x,y),s(y))
 gcd(s(x),s(y)) -> gcd(s(x),minus(y,x))
 gcd(x,x) -> x
 less(num0,s(x)) -> ftrue
 less(s(x),s(y)) -> less(x,y)
 less(x,num0) -> ffalse
 minus(num0,s(y)) -> num0
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
->Projection:
 pi(MINUS) = 1

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 gcd(num0,s(y)) -> s(y)
 gcd(s(x),num0) -> s(x)
 gcd(s(x),s(y)) -> gcd(minus(x,y),s(y))
 gcd(s(x),s(y)) -> gcd(s(x),minus(y,x))
 gcd(x,x) -> x
 less(num0,s(x)) -> ftrue
 less(s(x),s(y)) -> less(x,y)
 less(x,num0) -> ffalse
 minus(num0,s(y)) -> num0
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Subterm Processor:
-> Pairs:
 LESS(s(x),s(y)) -> LESS(x,y)
-> Rules:
 gcd(num0,s(y)) -> s(y)
 gcd(s(x),num0) -> s(x)
 gcd(s(x),s(y)) -> gcd(minus(x,y),s(y))
 gcd(s(x),s(y)) -> gcd(s(x),minus(y,x))
 gcd(x,x) -> x
 less(num0,s(x)) -> ftrue
 less(s(x),s(y)) -> less(x,y)
 less(x,num0) -> ffalse
 minus(num0,s(y)) -> num0
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
->Projection:
 pi(LESS) = 1

Problem 1.2: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 gcd(num0,s(y)) -> s(y)
 gcd(s(x),num0) -> s(x)
 gcd(s(x),s(y)) -> gcd(minus(x,y),s(y))
 gcd(s(x),s(y)) -> gcd(s(x),minus(y,x))
 gcd(x,x) -> x
 less(num0,s(x)) -> ftrue
 less(s(x),s(y)) -> less(x,y)
 less(x,num0) -> ffalse
 minus(num0,s(y)) -> num0
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.3: 

Reduction Pair Processor:
-> Pairs:
 GCD(s(x),s(y)) -> GCD(minus(x,y),s(y))
 GCD(s(x),s(y)) -> GCD(s(x),minus(y,x))
-> Rules:
 gcd(num0,s(y)) -> s(y)
 gcd(s(x),num0) -> s(x)
 gcd(s(x),s(y)) -> gcd(minus(x,y),s(y))
 gcd(s(x),s(y)) -> gcd(s(x),minus(y,x))
 gcd(x,x) -> x
 less(num0,s(x)) -> ftrue
 less(s(x),s(y)) -> less(x,y)
 less(x,num0) -> ffalse
 minus(num0,s(y)) -> num0
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
-> Usable rules:
 minus(num0,s(y)) -> num0
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[gcd](X1,X2) = 0
[less](X1,X2) = 0
[minus](X1,X2) = 2.X1
[num0] = 2
[fSNonEmpty] = 0
[ffalse] = 0
[s](X) = 2.X + 2
[ftrue] = 0
[GCD](X1,X2) = 2.X1 + 2.X2
[LESS](X1,X2) = 0
[MINUS](X1,X2) = 0

Problem 1.3: 

SCC Processor:
-> Pairs:
 GCD(s(x),s(y)) -> GCD(s(x),minus(y,x))
-> Rules:
 gcd(num0,s(y)) -> s(y)
 gcd(s(x),num0) -> s(x)
 gcd(s(x),s(y)) -> gcd(minus(x,y),s(y))
 gcd(s(x),s(y)) -> gcd(s(x),minus(y,x))
 gcd(x,x) -> x
 less(num0,s(x)) -> ftrue
 less(s(x),s(y)) -> less(x,y)
 less(x,num0) -> ffalse
 minus(num0,s(y)) -> num0
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 GCD(s(x),s(y)) -> GCD(s(x),minus(y,x))
->->-> Rules:
 gcd(num0,s(y)) -> s(y)
 gcd(s(x),num0) -> s(x)
 gcd(s(x),s(y)) -> gcd(minus(x,y),s(y))
 gcd(s(x),s(y)) -> gcd(s(x),minus(y,x))
 gcd(x,x) -> x
 less(num0,s(x)) -> ftrue
 less(s(x),s(y)) -> less(x,y)
 less(x,num0) -> ffalse
 minus(num0,s(y)) -> num0
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x

Problem 1.3: 

Reduction Pair Processor:
-> Pairs:
 GCD(s(x),s(y)) -> GCD(s(x),minus(y,x))
-> Rules:
 gcd(num0,s(y)) -> s(y)
 gcd(s(x),num0) -> s(x)
 gcd(s(x),s(y)) -> gcd(minus(x,y),s(y))
 gcd(s(x),s(y)) -> gcd(s(x),minus(y,x))
 gcd(x,x) -> x
 less(num0,s(x)) -> ftrue
 less(s(x),s(y)) -> less(x,y)
 less(x,num0) -> ffalse
 minus(num0,s(y)) -> num0
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
-> Usable rules:
 minus(num0,s(y)) -> num0
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[gcd](X1,X2) = 0
[less](X1,X2) = 0
[minus](X1,X2) = 2.X1 + 1
[num0] = 2
[fSNonEmpty] = 0
[ffalse] = 0
[s](X) = 2.X + 2
[ftrue] = 0
[GCD](X1,X2) = 2.X2
[LESS](X1,X2) = 0
[MINUS](X1,X2) = 0

Problem 1.3: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 gcd(num0,s(y)) -> s(y)
 gcd(s(x),num0) -> s(x)
 gcd(s(x),s(y)) -> gcd(minus(x,y),s(y))
 gcd(s(x),s(y)) -> gcd(s(x),minus(y,x))
 gcd(x,x) -> x
 less(num0,s(x)) -> ftrue
 less(s(x),s(y)) -> less(x,y)
 less(x,num0) -> ffalse
 minus(num0,s(y)) -> num0
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
