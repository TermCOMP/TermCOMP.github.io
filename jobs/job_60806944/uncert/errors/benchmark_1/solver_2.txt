Input TRS:
    1: minus(x,0()) -> x
    2: minus(s(x),s(y)) -> minus(x,y)
    3: div(0(),s(y)) -> 0()
    4: div(s(x),s(y)) -> s(div(minus(x,y),s(y)))
    5: divL(x,nil()) -> x
    6: divL(x,cons(y,xs())) -> divL(div(x,y),xs())
    7: app(nil(),y) -> y
    8: app(cons(n,x),y) -> cons(n,app(x,y))
    9: reverse(nil()) -> nil()
    10: reverse(cons(n,x)) -> app(reverse(x),cons(n,nil()))
    11: shuffle(nil()) -> nil()
    12: shuffle(cons(n,x)) -> cons(n,shuffle(reverse(x)))
    13: concat(leaf(),y) -> y
    14: concat(cons(u,v),y) -> cons(u,concat(v,y))
    15: less_leaves(x,leaf()) -> false()
    16: less_leaves(leaf(),cons(w,z)) -> true()
    17: less_leaves(cons(u,v),cons(w,z)) -> less_leaves(concat(u,v),concat(w,z))
    18: divL(z,cons(x,xs())) ->= divL(z,consSwap(x,xs()))
    19: shuffle(cons(x,xs())) ->= shuffle(consSwap(x,xs()))
    20: consSwap(x,xs()) ->= cons(x,xs())
    21: consSwap(x,cons(y,xs())) ->= cons(y,consSwap(x,xs()))
Number of strict rules: 17
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #minus(s(x),s(y)) -> #minus(x,y)
   #2: #divL(x,cons(y,xs())) -> #divL(div(x,y),xs())
   #3: #divL(x,cons(y,xs())) -> #div(x,y)
   #4: #shuffle(cons(n,x)) -> #shuffle(reverse(x))
   #5: #shuffle(cons(n,x)) -> #reverse(x)
   #6: #concat(cons(u,v),y) -> #concat(v,y)
   #7: #reverse(cons(n,x)) -> #app(reverse(x),cons(n,nil()))
   #8: #reverse(cons(n,x)) -> #reverse(x)
   #9: #less_leaves(cons(u,v),cons(w,z)) -> #less_leaves(concat(u,v),concat(w,z))
   #10: #less_leaves(cons(u,v),cons(w,z)) -> #concat(u,v)
   #11: #less_leaves(cons(u,v),cons(w,z)) -> #concat(w,z)
   #12: #shuffle(cons(x,xs())) ->? #shuffle(consSwap(x,xs()))
   #13: #app(cons(n,x),y) -> #app(x,y)
   #14: #div(s(x),s(y)) -> #div(minus(x,y),s(y))
   #15: #div(s(x),s(y)) -> #minus(x,y)
   #16: #divL(z,cons(x,xs())) ->? #divL(z,consSwap(x,xs()))
Number of SCCs: 8, DPs: 9, edges: 11
	SCC { #8 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
 #div(x1,x2)	weight: 0
     s(x1)	weight: 0
#reverse(x1)	weight: x1
 minus(x1,x2)	weight: 0
#less_leaves(x1,x2)	weight: 0
#concat(x1,x2)	weight: 0
 false()	weight: 0
   div(x1,x2)	weight: 0
reverse(x1)	weight: 0
  true()	weight: 0
shuffle(x1)	weight: 0
concat(x1,x2)	weight: 0
     0()	weight: 0
consSwap(x1,x2)	weight: 0
less_leaves(x1,x2)	weight: 0
   nil()	weight: 0
 #app(x1,x2)	weight: 0
  divL(x1,x2)	weight: 0
#minus(x1,x2)	weight: 0
#shuffle(x1)	weight: 0
  cons(x1,x2)	weight: (/ 1 2) + x2
    xs()	weight: 0
  leaf()	weight: 0
#divL(x1,x2)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #8
Number of SCCs: 7, DPs: 8, edges: 10
	SCC { #13 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
 #div(x1,x2)	weight: 0
     s(x1)	weight: 0
#reverse(x1)	weight: 0
 minus(x1,x2)	weight: 0
#less_leaves(x1,x2)	weight: 0
#concat(x1,x2)	weight: 0
 false()	weight: 0
   div(x1,x2)	weight: 0
reverse(x1)	weight: 0
  true()	weight: 0
shuffle(x1)	weight: 0
concat(x1,x2)	weight: 0
     0()	weight: 0
consSwap(x1,x2)	weight: 0
less_leaves(x1,x2)	weight: 0
   nil()	weight: 0
 #app(x1,x2)	weight: x1
  divL(x1,x2)	weight: 0
#minus(x1,x2)	weight: 0
#shuffle(x1)	weight: 0
  cons(x1,x2)	weight: (/ 1 2) + x2
    xs()	weight: 0
  leaf()	weight: 0
#divL(x1,x2)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #13
Number of SCCs: 6, DPs: 7, edges: 9
	SCC { #6 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
 #div(x1,x2)	weight: 0
     s(x1)	weight: 0
#reverse(x1)	weight: 0
 minus(x1,x2)	weight: 0
#less_leaves(x1,x2)	weight: 0
#concat(x1,x2)	weight: x1
 false()	weight: 0
   div(x1,x2)	weight: 0
reverse(x1)	weight: 0
  true()	weight: 0
shuffle(x1)	weight: 0
concat(x1,x2)	weight: 0
     0()	weight: 0
consSwap(x1,x2)	weight: 0
less_leaves(x1,x2)	weight: 0
   nil()	weight: 0
 #app(x1,x2)	weight: 0
  divL(x1,x2)	weight: 0
#minus(x1,x2)	weight: 0
#shuffle(x1)	weight: 0
  cons(x1,x2)	weight: (/ 1 2) + x2
    xs()	weight: 0
  leaf()	weight: 0
#divL(x1,x2)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #6
Number of SCCs: 5, DPs: 6, edges: 8
	SCC { #1 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
 #div(x1,x2)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
#reverse(x1)	weight: 0
 minus(x1,x2)	weight: 0
#less_leaves(x1,x2)	weight: 0
#concat(x1,x2)	weight: 0
 false()	weight: 0
   div(x1,x2)	weight: 0
reverse(x1)	weight: 0
  true()	weight: 0
shuffle(x1)	weight: 0
concat(x1,x2)	weight: 0
     0()	weight: 0
consSwap(x1,x2)	weight: 0
less_leaves(x1,x2)	weight: 0
   nil()	weight: 0
 #app(x1,x2)	weight: 0
  divL(x1,x2)	weight: 0
#minus(x1,x2)	weight: x2
#shuffle(x1)	weight: 0
  cons(x1,x2)	weight: (/ 1 2)
    xs()	weight: 0
  leaf()	weight: 0
#divL(x1,x2)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #1
Number of SCCs: 4, DPs: 5, edges: 7
	SCC { #16 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
