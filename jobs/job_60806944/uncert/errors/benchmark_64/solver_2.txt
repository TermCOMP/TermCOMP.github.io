Input TRS:
    1: le(0(),y) -> true()
    2: le(s(x),0()) -> false()
    3: le(s(x),s(y)) -> le(x,y)
    4: pred(s(x)) -> x
    5: minus(x,0()) -> x
    6: minus(x,s(y)) -> pred(minus(x,y))
    7: mod(0(),y) -> 0()
    8: mod(s(x),0()) -> 0()
    9: mod(s(x),s(y)) -> if_mod(le(y,x),s(x),s(y))
    10: if_mod(true(),s(x),s(y)) -> mod(minus(x,y),s(y))
    11: if_mod(false(),s(x),s(y)) -> s(x)
    12: rand(x) ->= x
    13: rand(x) ->= rand(s(x))
Number of strict rules: 11
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #minus(x,s(y)) -> #pred(minus(x,y))
   #2: #minus(x,s(y)) -> #minus(x,y)
   #3: #mod(s(x),s(y)) -> #if_mod(le(y,x),s(x),s(y))
   #4: #mod(s(x),s(y)) -> #le(y,x)
   #5: #if_mod(true(),s(x),s(y)) -> #mod(minus(x,y),s(y))
   #6: #if_mod(true(),s(x),s(y)) -> #minus(x,y)
   #7: #le(s(x),s(y)) -> #le(x,y)
Number of SCCs: 3, DPs: 4, edges: 4
	SCC { #2 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... succeeded.
    le(x1,x2)	weight: 0	status: []	precedence above: false true
     s(x1)	weight: x1	status: [x1]	precedence above: minus
  #le(x1,x2)	weight: (/ 1 2) + x1	status: [x1]	precedence above:
 minus(x1,x2)	weight: max{0, x1}	status: [x1]	precedence above:
   mod(x1,x2)	weight: max{0, (/ 1 2) + x1}	status: []	precedence above: le minus false true if_mod 0
 false()	weight: 0	status: []	precedence above:
  true()	weight: 0	status: []	precedence above:
  pred(x1)	weight: x1	status: x1
  rand(x1)	weight: (/ 1 2) + x1	status: []	precedence above:
if_mod(x1,x2,x3)	weight: max{0, (/ 1 2) + x2, (/ 1 2) + x1}	status: []	precedence above: le minus mod false true 0
     0()	weight: 0	status: []	precedence above:
#minus(x1,x2)	weight: (/ 1 2) + x2 + x1	status: [x2]	precedence above:
 #mod(x1,x2)	weight: max{0, x1}	status: [x1]	precedence above:
#if_mod(x1,x2,x3)	weight: max{0, (/ 1 2) + x3, (/ 1 2) + x1}	status: [x1,x3]	precedence above:
#pred(x1)	weight: x1	status: []	precedence above:
    Removed DPs: #2
Number of SCCs: 2, DPs: 3, edges: 3
	SCC { #7 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... succeeded.
    le(x1,x2)	weight: 0	status: []	precedence above: false true
     s(x1)	weight: x1	status: [x1]	precedence above: minus
  #le(x1,x2)	weight: (/ 1 2) + x1	status: [x1]	precedence above:
 minus(x1,x2)	weight: max{0, x1}	status: [x1]	precedence above:
   mod(x1,x2)	weight: max{0, (/ 1 2) + x1}	status: []	precedence above: le minus false true if_mod 0
 false()	weight: 0	status: []	precedence above:
  true()	weight: 0	status: []	precedence above:
  pred(x1)	weight: x1	status: x1
  rand(x1)	weight: (/ 1 2) + x1	status: []	precedence above:
if_mod(x1,x2,x3)	weight: max{0, (/ 1 2) + x2, (/ 1 2) + x1}	status: []	precedence above: le minus mod false true 0
     0()	weight: 0	status: []	precedence above:
#minus(x1,x2)	weight: (/ 1 2) + x2 + x1	status: [x2]	precedence above:
 #mod(x1,x2)	weight: max{0, x1}	status: [x1]	precedence above:
#if_mod(x1,x2,x3)	weight: max{0, (/ 1 2) + x3, (/ 1 2) + x1}	status: [x1,x3]	precedence above:
#pred(x1)	weight: x1	status: []	precedence above:
    Removed DPs: #7
Number of SCCs: 1, DPs: 2, edges: 2
	SCC { #3 #5 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... succeeded.
    le(x1,x2)	weight: 0	status: []	precedence above: false true
     s(x1)	weight: x1	status: [x1]	precedence above: le false true #mod #if_mod
  #le(x1,x2)	weight: (/ 1 2) + x1	status: [x1]	precedence above:
 minus(x1,x2)	weight: max{0, x1}	status: x1
   mod(x1,x2)	weight: max{0, (/ 1 2) + x1}	status: []	precedence above: le minus false true if_mod 0
 false()	weight: 0	status: []	precedence above:
  true()	weight: 0	status: []	precedence above:
  pred(x1)	weight: x1	status: x1
  rand(x1)	weight: (/ 1 2) + x1	status: []	precedence above:
if_mod(x1,x2,x3)	weight: max{0, (/ 1 2) + x2, (/ 1 2) + x1}	status: []	precedence above: le minus mod false true 0
     0()	weight: 0	status: []	precedence above:
#minus(x1,x2)	weight: (/ 1 2) + x2 + x1	status: [x2]	precedence above:
 #mod(x1,x2)	weight: max{0, x1}	status: [x1]	precedence above: le false true #if_mod
#if_mod(x1,x2,x3)	weight: max{0, x2, x1}	status: [x1,x2]	precedence above:
#pred(x1)	weight: x1	status: []	precedence above:
    Removed DPs: #3 #5
Number of SCCs: 0, DPs: 0, edges: 0
