Input TRS:
    1: le(0(),y) -> true()
    2: le(s(x),0()) -> false()
    3: le(s(x),s(y)) -> le(x,y)
    4: minus(0(),y) -> 0()
    5: minus(s(x),y) -> if_minus(le(s(x),y),s(x),y)
    6: if_minus(true(),s(x),y) -> 0()
    7: if_minus(false(),s(x),y) -> s(minus(x,y))
    8: quot(0(),s(y)) -> 0()
    9: quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
    10: log(s(0())) -> 0()
    11: log(s(s(x))) -> s(log(s(quot(x,s(s(0()))))))
    12: rand(x) ->= x
    13: rand(x) ->= rand(s(x))
Number of strict rules: 11
Direct Order(PosReal,>,Poly) ... failed.
Freezing log le
1: le❆1_0(y) -> true()
2: le❆1_s(x,0()) -> false()
3: le❆1_s(x,s(y)) -> le(x,y)
4: minus(0(),y) -> 0()
5: minus(s(x),y) -> if_minus(le❆1_s(x,y),s(x),y)
6: if_minus(true(),s(x),y) -> 0()
7: if_minus(false(),s(x),y) -> s(minus(x,y))
8: quot(0(),s(y)) -> 0()
9: quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
10: log❆1_s(0()) -> 0()
11: log❆1_s(s(x)) -> s(log❆1_s(quot(x,s(s(0())))))
12: rand(x) ->= x
13: rand(x) ->= rand(s(x))
14: le(0(),_1) ->= le❆1_0(_1)
15: le(s(_1),_2) ->= le❆1_s(_1,_2)
16: log(s(_1)) ->= log❆1_s(_1)
Number of strict rules: 11
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #quot(s(x),s(y)) -> #quot(minus(x,y),s(y))
   #2: #quot(s(x),s(y)) -> #minus(x,y)
   #3: #log❆1_s(s(x)) -> #log❆1_s(quot(x,s(s(0()))))
   #4: #log❆1_s(s(x)) -> #quot(x,s(s(0())))
   #5: #le(0(),_1) ->? #le❆1_0(_1)
   #6: #if_minus(false(),s(x),y) -> #minus(x,y)
   #7: #minus(s(x),y) -> #if_minus(le❆1_s(x,y),s(x),y)
   #8: #minus(s(x),y) -> #le❆1_s(x,y)
   #9: #log(s(_1)) ->? #log❆1_s(_1)
   #10: #le❆1_s(x,s(y)) -> #le(x,y)
   #11: #le(s(_1),_2) ->? #le❆1_s(_1,_2)
Number of SCCs: 4, DPs: 6, edges: 6
	SCC { #3 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... succeeded.
    le(x1,x2)	weight: 0	status: []	precedence above: false true le❆1_s le❆1_0
     s(x1)	weight: x1	status: [x1]	precedence above: le false true le❆1_s 0 le❆1_0
  #le(x1,x2)	weight: (/ 1 2) + x2 + x1	status: [x1,x2]	precedence above:
 minus(x1,x2)	weight: max{0, x1}	status: x1
 false()	weight: 0	status: []	precedence above:
 #log(x1)	weight: x1	status: []	precedence above:
  true()	weight: 0	status: []	precedence above:
#log❆1_s(x1)	weight: (/ 1 2) + x1	status: [x1]	precedence above:
  rand(x1)	weight: (/ 1 2) + x1	status: []	precedence above:
#le❆1_0(x1)	weight: (/ 1 2)	status: []	precedence above:
le❆1_s(x1,x2)	weight: 0	status: []	precedence above: le false true le❆1_0
   log(x1)	weight: (/ 1 2) + x1	status: [x1]	precedence above:
     0()	weight: 0	status: []	precedence above:
  quot(x1,x2)	weight: max{0, x1}	status: x1
#if_minus(x1,x2,x3)	weight: max{(/ 1 2) + x3, (/ 1 2) + x2, (/ 1 2) + x1}	status: [x2,x3,x1]	precedence above:
#le❆1_s(x1,x2)	weight: (/ 1 2) + x2	status: [x2]	precedence above:
#minus(x1,x2)	weight: max{(/ 1 2) + x2, (/ 1 2) + x1}	status: [x1,x2]	precedence above:
if_minus(x1,x2,x3)	weight: max{0, x2}	status: x2
#quot(x1,x2)	weight: max{0, (/ 1 2) + x2}	status: [x2]	precedence above:
le❆1_0(x1)	weight: 0	status: []	precedence above: true
log❆1_s(x1)	weight: x1	status: x1
    Removed DPs: #3
Number of SCCs: 3, DPs: 5, edges: 5
	SCC { #1 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... succeeded.
    le(x1,x2)	weight: 0	status: []	precedence above: false true le❆1_s le❆1_0
     s(x1)	weight: x1	status: [x1]	precedence above: le false true le❆1_s 0 le❆1_0
  #le(x1,x2)	weight: (/ 1 2) + x2 + x1	status: [x1,x2]	precedence above:
 minus(x1,x2)	weight: max{0, x1}	status: x1
 false()	weight: 0	status: []	precedence above:
 #log(x1)	weight: x1	status: []	precedence above:
  true()	weight: 0	status: []	precedence above:
#log❆1_s(x1)	weight: (/ 1 2) + x1	status: [x1]	precedence above:
  rand(x1)	weight: (/ 1 2) + x1	status: []	precedence above:
#le❆1_0(x1)	weight: (/ 1 2)	status: []	precedence above:
le❆1_s(x1,x2)	weight: 0	status: []	precedence above: le false true le❆1_0
   log(x1)	weight: (/ 1 2) + x1	status: [x1]	precedence above:
     0()	weight: 0	status: []	precedence above:
  quot(x1,x2)	weight: max{0, x1}	status: x1
#if_minus(x1,x2,x3)	weight: max{(/ 1 2) + x3, (/ 1 2) + x2, (/ 1 2) + x1}	status: [x2,x3,x1]	precedence above:
#le❆1_s(x1,x2)	weight: (/ 1 2) + x2	status: [x2]	precedence above:
#minus(x1,x2)	weight: max{(/ 1 2) + x2, (/ 1 2) + x1}	status: [x1,x2]	precedence above:
if_minus(x1,x2,x3)	weight: max{0, x2}	status: x2
#quot(x1,x2)	weight: max{(/ 1 2) + x2, (/ 1 2) + x1}	status: [x1,x2]	precedence above:
le❆1_0(x1)	weight: 0	status: []	precedence above: true
log❆1_s(x1)	weight: x1	status: x1
    Removed DPs: #1
Number of SCCs: 2, DPs: 4, edges: 4
	SCC { #10 #11 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... succeeded.
    le(x1,x2)	weight: 0	status: []	precedence above: false true le❆1_s le❆1_0
     s(x1)	weight: x1	status: [x1]	precedence above: le false true le❆1_s 0 le❆1_0
  #le(x1,x2)	weight: x2	status: x2
 minus(x1,x2)	weight: max{0, x1}	status: x1
 false()	weight: 0	status: []	precedence above:
 #log(x1)	weight: x1	status: []	precedence above:
  true()	weight: 0	status: []	precedence above:
#log❆1_s(x1)	weight: (/ 1 2) + x1	status: [x1]	precedence above:
  rand(x1)	weight: (/ 1 2) + x1	status: []	precedence above:
#le❆1_0(x1)	weight: (/ 1 2)	status: []	precedence above:
le❆1_s(x1,x2)	weight: 0	status: []	precedence above: le false true le❆1_0
   log(x1)	weight: (/ 1 2) + x1	status: [x1]	precedence above:
     0()	weight: 0	status: []	precedence above:
  quot(x1,x2)	weight: max{0, x1}	status: x1
#if_minus(x1,x2,x3)	weight: max{(/ 1 2) + x3, (/ 1 2) + x2, (/ 1 2) + x1}	status: [x2,x3,x1]	precedence above:
#le❆1_s(x1,x2)	weight: x2	status: x2
#minus(x1,x2)	weight: max{(/ 1 2) + x2, (/ 1 2) + x1}	status: [x1,x2]	precedence above:
if_minus(x1,x2,x3)	weight: max{0, x2}	status: x2
#quot(x1,x2)	weight: max{(/ 1 2) + x2, (/ 1 2) + x1}	status: [x1,x2]	precedence above:
le❆1_0(x1)	weight: 0	status: []	precedence above: true
log❆1_s(x1)	weight: x1	status: x1
    Removed DPs: #10
Number of SCCs: 1, DPs: 2, edges: 2
	SCC { #6 #7 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... succeeded.
    le(x1,x2)	weight: 0	status: []	precedence above: s false true le❆1_s 0 le❆1_0
     s(x1)	weight: x1	status: [x1]	precedence above: le false true le❆1_s 0 le❆1_0
  #le(x1,x2)	weight: x2	status: x2
 minus(x1,x2)	weight: max{0, x1}	status: x1
 false()	weight: 0	status: []	precedence above:
 #log(x1)	weight: x1	status: []	precedence above:
  true()	weight: 0	status: []	precedence above:
#log❆1_s(x1)	weight: (/ 1 2) + x1	status: [x1]	precedence above:
  rand(x1)	weight: (/ 1 2) + x1	status: []	precedence above:
#le❆1_0(x1)	weight: (/ 1 2)	status: []	precedence above:
le❆1_s(x1,x2)	weight: 0	status: []	precedence above: le s false true 0 le❆1_0
   log(x1)	weight: (/ 1 2) + x1	status: [x1]	precedence above:
     0()	weight: 0	status: []	precedence above:
  quot(x1,x2)	weight: max{0, x1}	status: x1
#if_minus(x1,x2,x3)	weight: max{0, (/ 1 2) + x2, (/ 1 2) + x1}	status: [x2]	precedence above: le s false true le❆1_s 0 #minus le❆1_0
#le❆1_s(x1,x2)	weight: x2	status: x2
#minus(x1,x2)	weight: max{0, (/ 1 2) + x1}	status: [x1]	precedence above: le s false true le❆1_s 0 #if_minus le❆1_0
if_minus(x1,x2,x3)	weight: max{0, x2}	status: x2
#quot(x1,x2)	weight: max{(/ 1 2) + x2, (/ 1 2) + x1}	status: [x1,x2]	precedence above:
le❆1_0(x1)	weight: 0	status: []	precedence above: true
log❆1_s(x1)	weight: x1	status: x1
    Removed DPs: #6
Number of SCCs: 0, DPs: 0, edges: 0
