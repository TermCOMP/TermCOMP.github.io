Input TRS:
    1: remove(nil(),x) -> nil()
    2: remove(cons(x,xs),0()) -> cons(x,xs)
    3: remove(cons(x,xs),s(y)) -> remove(xs,y)
    4: first(nil(),x) -> nil()
    5: first(cons(x,xs),0()) -> nil()
    6: first(cons(x,xs),s(y)) -> cons(x,first(xs,y))
    7: sublist(nil(),x) -> nil()
    8: sublist(cons(x,xs),0()) -> nil()
    9: sublist(cons(x,xs),s(y)) -> cons(cons(x,first(xs,y)),sublist(remove(xs,y),s(y)))
    10: sublist(cons(x,cons(y,xs)),z) ->= sublist(cons(y,cons(x,xs)),z)
Number of strict rules: 9
Direct Order(PosReal,>,Poly) ... failed.
Freezing sublist
1: remove(nil(),x) -> nil()
2: remove(cons(x,xs),0()) -> cons(x,xs)
3: remove(cons(x,xs),s(y)) -> remove(xs,y)
4: first(nil(),x) -> nil()
5: first(cons(x,xs),0()) -> nil()
6: first(cons(x,xs),s(y)) -> cons(x,first(xs,y))
7: sublist❆1_nil(x) -> nil()
8: sublist❆1_cons(x,xs,0()) -> nil()
9: sublist❆1_cons(x,xs,s(y)) -> cons(cons(x,first(xs,y)),sublist(remove(xs,y),s(y)))
10: sublist❆1_cons(x,cons(y,xs),z) ->= sublist❆1_cons(y,cons(x,xs),z)
11: sublist(cons(_1,_2),_3) ->= sublist❆1_cons(_1,_2,_3)
12: sublist(nil(),_1) ->= sublist❆1_nil(_1)
Number of strict rules: 9
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #first(cons(x,xs),s(y)) -> #first(xs,y)
   #2: #sublist❆1_cons(x,xs,s(y)) -> #first(xs,y)
   #3: #sublist❆1_cons(x,xs,s(y)) -> #sublist(remove(xs,y),s(y))
   #4: #sublist❆1_cons(x,xs,s(y)) -> #remove(xs,y)
   #5: #sublist(cons(_1,_2),_3) ->? #sublist❆1_cons(_1,_2,_3)
   #6: #sublist(nil(),_1) ->? #sublist❆1_nil(_1)
   #7: #sublist❆1_cons(x,cons(y,xs),z) ->? #sublist❆1_cons(y,cons(x,xs),z)
   #8: #remove(cons(x,xs),s(y)) -> #remove(xs,y)
Number of SCCs: 3, DPs: 5, edges: 7
	SCC { #1 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
     s(x1)	weight: (/ 1 2) + x1
sublist❆1_cons(x1,x2,x3)	weight: 0
#sublist❆1_nil(x1)	weight: 0
sublist(x1,x2)	weight: 0
#sublist(x1,x2)	weight: 0
#sublist❆1_cons(x1,x2,x3)	weight: 0
     0()	weight: 0
#first(x1,x2)	weight: x2
   nil()	weight: 0
sublist❆1_nil(x1)	weight: 0
 first(x1,x2)	weight: 0
  cons(x1,x2)	weight: (/ 1 2)
#remove(x1,x2)	weight: 0
remove(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #1
Number of SCCs: 2, DPs: 4, edges: 6
	SCC { #8 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
     s(x1)	weight: (/ 1 2) + x1
sublist❆1_cons(x1,x2,x3)	weight: 0
#sublist❆1_nil(x1)	weight: 0
sublist(x1,x2)	weight: 0
#sublist(x1,x2)	weight: 0
#sublist❆1_cons(x1,x2,x3)	weight: 0
     0()	weight: 0
#first(x1,x2)	weight: 0
   nil()	weight: 0
sublist❆1_nil(x1)	weight: 0
 first(x1,x2)	weight: 0
  cons(x1,x2)	weight: (/ 1 2)
#remove(x1,x2)	weight: x2
remove(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #8
Number of SCCs: 1, DPs: 3, edges: 5
	SCC { #3 #5 #7 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
     s(x1)	weight: (/ 1 4)
sublist❆1_cons(x1,x2,x3)	weight: 0
#sublist❆1_nil(x1)	weight: 0
sublist(x1,x2)	weight: 0
#sublist(x1,x2)	weight: x1
#sublist❆1_cons(x1,x2,x3)	weight: (/ 1 2) + x2
     0()	weight: 0
#first(x1,x2)	weight: 0
   nil()	weight: 0
sublist❆1_nil(x1)	weight: 0
 first(x1,x2)	weight: 0
  cons(x1,x2)	weight: (/ 3 4) + x2
#remove(x1,x2)	weight: 0
remove(x1,x2)	weight: (/ 1 4) + x1
    Usable rules: { 1..3 }
    Removed DPs: #3 #5
Number of SCCs: 1, DPs: 1, edges: 1
	SCC { #7 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
