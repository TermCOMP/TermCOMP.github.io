Input TRS:
    1: le(0(),y) -> true()
    2: le(s(x),0()) -> false()
    3: le(s(x),s(y)) -> le(x,y)
    4: pred(s(x)) -> x
    5: minus(x,0()) -> x
    6: minus(x,s(y)) -> pred(minus(x,y))
    7: gcd(0(),y) -> y
    8: gcd(s(x),0()) -> s(x)
    9: gcd(s(x),s(y)) -> if_gcd(le(y,x),s(x),s(y))
    10: if_gcd(true(),s(x),s(y)) -> gcd(minus(x,y),s(y))
    11: if_gcd(false(),s(x),s(y)) -> gcd(minus(y,x),s(x))
    12: gcdL(nil()) -> 0()
    13: gcdL(cons(x,nil())) -> x
    14: gcdL(cons(x,cons(y,xs))) -> gcdL(cons(gcd(x,y),xs))
    15: gcdL(cons(x,cons(y,xs))) ->= gcdL(cons(y,cons(x,xs)))
Number of strict rules: 14
Direct Order(PosReal,>,Poly) ... failed.
Freezing gcdL
1: le(0(),y) -> true()
2: le(s(x),0()) -> false()
3: le(s(x),s(y)) -> le(x,y)
4: pred(s(x)) -> x
5: minus(x,0()) -> x
6: minus(x,s(y)) -> pred(minus(x,y))
7: gcd(0(),y) -> y
8: gcd(s(x),0()) -> s(x)
9: gcd(s(x),s(y)) -> if_gcd(le(y,x),s(x),s(y))
10: if_gcd(true(),s(x),s(y)) -> gcd(minus(x,y),s(y))
11: if_gcd(false(),s(x),s(y)) -> gcd(minus(y,x),s(x))
12: gcdL❆1_nil() -> 0()
13: gcdL❆1_cons(x,nil()) -> x
14: gcdL❆1_cons(x,cons(y,xs)) -> gcdL❆1_cons(gcd(x,y),xs)
15: gcdL❆1_cons(x,cons(y,xs)) ->= gcdL❆1_cons(y,cons(x,xs))
16: gcdL(cons(_1,_2)) ->= gcdL❆1_cons(_1,_2)
17: gcdL(nil()) ->= gcdL❆1_nil()
Number of strict rules: 14
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #minus(x,s(y)) -> #pred(minus(x,y))
   #2: #minus(x,s(y)) -> #minus(x,y)
   #3: #gcd(s(x),s(y)) -> #if_gcd(le(y,x),s(x),s(y))
   #4: #gcd(s(x),s(y)) -> #le(y,x)
   #5: #if_gcd(false(),s(x),s(y)) -> #gcd(minus(y,x),s(x))
   #6: #if_gcd(false(),s(x),s(y)) -> #minus(y,x)
   #7: #gcdL❆1_cons(x,cons(y,xs)) -> #gcdL❆1_cons(gcd(x,y),xs)
   #8: #gcdL❆1_cons(x,cons(y,xs)) -> #gcd(x,y)
   #9: #if_gcd(true(),s(x),s(y)) -> #gcd(minus(x,y),s(y))
   #10: #if_gcd(true(),s(x),s(y)) -> #minus(x,y)
   #11: #gcdL(nil()) ->? #gcdL❆1_nil()
   #12: #gcdL(cons(_1,_2)) ->? #gcdL❆1_cons(_1,_2)
   #13: #le(s(x),s(y)) -> #le(x,y)
   #14: #gcdL❆1_cons(x,cons(y,xs)) ->? #gcdL❆1_cons(y,cons(x,xs))
Number of SCCs: 4, DPs: 7, edges: 10
	SCC { #2 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2)	weight: 0
 minus(x1,x2)	weight: 0
   gcd(x1,x2)	weight: 0
 false()	weight: 0
#gcdL❆1_nil()	weight: 0
  true()	weight: 0
  pred(x1)	weight: 0
#gcdL(x1)	weight: 0
#gcdL❆1_cons(x1,x2)	weight: 0
     0()	weight: 0
   nil()	weight: 0
#minus(x1,x2)	weight: x2
  gcdL(x1)	weight: 0
#pred(x1)	weight: 0
  cons(x1,x2)	weight: 0
if_gcd(x1,x2,x3)	weight: 0
#if_gcd(x1,x2,x3)	weight: 0
gcdL❆1_nil()	weight: 0
gcdL❆1_cons(x1,x2)	weight: 0
 #gcd(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #2
Number of SCCs: 3, DPs: 6, edges: 9
	SCC { #13 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2)	weight: x2
 minus(x1,x2)	weight: 0
   gcd(x1,x2)	weight: 0
 false()	weight: 0
#gcdL❆1_nil()	weight: 0
  true()	weight: 0
  pred(x1)	weight: 0
#gcdL(x1)	weight: 0
#gcdL❆1_cons(x1,x2)	weight: 0
     0()	weight: 0
   nil()	weight: 0
#minus(x1,x2)	weight: 0
  gcdL(x1)	weight: 0
#pred(x1)	weight: 0
  cons(x1,x2)	weight: 0
if_gcd(x1,x2,x3)	weight: 0
#if_gcd(x1,x2,x3)	weight: 0
gcdL❆1_nil()	weight: 0
gcdL❆1_cons(x1,x2)	weight: 0
 #gcd(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #13
Number of SCCs: 2, DPs: 5, edges: 8
	SCC { #7 #14 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: (/ 1 2) + x1
     s(x1)	weight: (/ 1 4) + x1
  #le(x1,x2)	weight: 0
 minus(x1,x2)	weight: (/ 1 4)
   gcd(x1,x2)	weight: (/ 1 4) + x1 + x2
 false()	weight: 0
#gcdL❆1_nil()	weight: 0
  true()	weight: 0
  pred(x1)	weight: (/ 1 2)
#gcdL(x1)	weight: 0
#gcdL❆1_cons(x1,x2)	weight: x2
     0()	weight: 0
   nil()	weight: 0
#minus(x1,x2)	weight: 0
  gcdL(x1)	weight: 0
#pred(x1)	weight: 0
  cons(x1,x2)	weight: (/ 1 4) + x2
if_gcd(x1,x2,x3)	weight: x1 + x2 + x3
#if_gcd(x1,x2,x3)	weight: 0
gcdL❆1_nil()	weight: 0
gcdL❆1_cons(x1,x2)	weight: 0
 #gcd(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #7
Number of SCCs: 2, DPs: 4, edges: 5
	SCC { #14 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
