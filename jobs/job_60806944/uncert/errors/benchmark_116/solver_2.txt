Input TRS:
    1: top(ok(left(car(x,y),z))) -> top(check(right(y,z)))
    2: top(ok(right(x,car(y,z)))) -> top(check(left(x,z)))
    3: top(ok(left(bot(),x))) -> top(check(right(bot(),x)))
    4: top(ok(right(x,bot()))) -> top(check(left(x,bot())))
    5: top(ok(left(car(x,y),z))) ->= top(check(left(y,z)))
    6: top(ok(right(x,car(y,z)))) ->= top(check(right(x,z)))
    7: bot() ->= car(new(),bot())
    8: check(old()) ->= ok(old())
    9: check(car(x,y)) ->= car(check(x),y)
    10: check(car(x,y)) ->= car(x,check(y))
    11: check(left(x,y)) ->= left(check(x),y)
    12: check(left(x,y)) ->= left(x,check(y))
    13: check(right(x,y)) ->= right(check(x),y)
    14: check(right(x,y)) ->= right(x,check(y))
    15: car(ok(x),y) ->= ok(car(x,y))
    16: car(x,ok(y)) ->= ok(car(x,y))
    17: left(ok(x),y) ->= ok(left(x,y))
    18: left(x,ok(y)) ->= ok(left(x,y))
    19: right(ok(x),y) ->= ok(right(x,y))
    20: right(x,ok(y)) ->= ok(right(x,y))
Number of strict rules: 4
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #top(ok(right(x,car(y,z)))) -> #top(check(left(x,z)))
   #2: #top(ok(right(x,car(y,z)))) ->? #top(check(right(x,z)))
   #3: #top(ok(left(car(x,y),z))) ->? #top(check(left(y,z)))
   #4: #top(ok(left(bot(),x))) -> #top(check(right(bot(),x)))
   #5: #top(ok(left(car(x,y),z))) -> #top(check(right(y,z)))
   #6: #top(ok(right(x,bot()))) -> #top(check(left(x,bot())))
Number of SCCs: 1, DPs: 6, edges: 18
	SCC { #1..6 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
