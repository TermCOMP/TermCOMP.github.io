Input TRS:
    1: eq(0(),0()) -> true()
    2: eq(0(),s(x)) -> false()
    3: eq(s(x),0()) -> false()
    4: eq(s(x),s(y)) -> eq(x,y)
    5: rm(n,nil()) -> nil()
    6: rm(n,cons(m,x)) -> ifrm(eq(n,m),n,cons(m,x))
    7: ifrm(true(),n,cons(m,x)) -> rm(n,x)
    8: ifrm(false(),n,cons(m,x)) -> cons(m,rm(n,x))
    9: purge(nil()) -> nil()
    10: purge(cons(n,x)) -> cons(n,purge(rm(n,x)))
    11: purge(cons(n,cons(m,x))) ->= purge(cons(m,cons(n,x)))
Number of strict rules: 10
Direct Order(PosReal,>,Poly) ... failed.
Freezing purge
1: eq(0(),0()) -> true()
2: eq(0(),s(x)) -> false()
3: eq(s(x),0()) -> false()
4: eq(s(x),s(y)) -> eq(x,y)
5: rm(n,nil()) -> nil()
6: rm(n,cons(m,x)) -> ifrm(eq(n,m),n,cons(m,x))
7: ifrm(true(),n,cons(m,x)) -> rm(n,x)
8: ifrm(false(),n,cons(m,x)) -> cons(m,rm(n,x))
9: purge❆1_nil() -> nil()
10: purge❆1_cons(n,x) -> cons(n,purge(rm(n,x)))
11: purge❆1_cons(n,cons(m,x)) ->= purge❆1_cons(m,cons(n,x))
12: purge(cons(_1,_2)) ->= purge❆1_cons(_1,_2)
13: purge(nil()) ->= purge❆1_nil()
Number of strict rules: 10
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #rm(n,cons(m,x)) -> #ifrm(eq(n,m),n,cons(m,x))
   #2: #rm(n,cons(m,x)) -> #eq(n,m)
   #3: #purge(nil()) ->? #purge❆1_nil()
   #4: #purge❆1_cons(n,cons(m,x)) ->? #purge❆1_cons(m,cons(n,x))
   #5: #purge(cons(_1,_2)) ->? #purge❆1_cons(_1,_2)
   #6: #ifrm(true(),n,cons(m,x)) -> #rm(n,x)
   #7: #purge❆1_cons(n,x) -> #purge(rm(n,x))
   #8: #purge❆1_cons(n,x) -> #rm(n,x)
   #9: #ifrm(false(),n,cons(m,x)) -> #rm(n,x)
   #10: #eq(s(x),s(y)) -> #eq(x,y)
Number of SCCs: 3, DPs: 7, edges: 10
	SCC { #10 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#ifrm(x1,x2,x3)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
purge❆1_nil()	weight: 0
#purge(x1)	weight: 0
    eq(x1,x2)	weight: 0
 false()	weight: 0
  true()	weight: 0
 purge(x1)	weight: 0
  #eq(x1,x2)	weight: x2
     0()	weight: 0
#purge❆1_cons(x1,x2)	weight: 0
  ifrm(x1,x2,x3)	weight: 0
   nil()	weight: 0
#purge❆1_nil()	weight: 0
  cons(x1,x2)	weight: 0
purge❆1_cons(x1,x2)	weight: 0
    rm(x1,x2)	weight: 0
  #rm(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #10
Number of SCCs: 2, DPs: 6, edges: 9
	SCC { #4 #5 #7 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#ifrm(x1,x2,x3)	weight: 0
     s(x1)	weight: (/ 1 4)
purge❆1_nil()	weight: 0
#purge(x1)	weight: x1
    eq(x1,x2)	weight: (/ 1 4)
 false()	weight: 0
  true()	weight: 0
 purge(x1)	weight: 0
  #eq(x1,x2)	weight: 0
     0()	weight: 0
#purge❆1_cons(x1,x2)	weight: (/ 1 2) + x2
  ifrm(x1,x2,x3)	weight: (/ 1 4) + x3
   nil()	weight: 0
#purge❆1_nil()	weight: 0
  cons(x1,x2)	weight: (/ 3 4) + x2
purge❆1_cons(x1,x2)	weight: 0
    rm(x1,x2)	weight: (/ 1 4) + x2
  #rm(x1,x2)	weight: 0
    Usable rules: { 5..8 }
    Removed DPs: #5 #7
Number of SCCs: 2, DPs: 4, edges: 5
	SCC { #4 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
