Input TRS:
    1: le(0(),y) -> true()
    2: le(s(x),0()) -> false()
    3: le(s(x),s(y)) -> le(x,y)
    4: minus(0(),y) -> 0()
    5: minus(s(x),y) -> ifminus(le(s(x),y),s(x),y)
    6: ifminus(true(),s(x),y) -> 0()
    7: ifminus(false(),s(x),y) -> s(minus(x,y))
    8: div(0(),s(y)) -> 0()
    9: div(s(x),s(y)) -> s(div(minus(x,y),s(y)))
    10: divL(x,nil()) -> x
    11: divL(x,cons(y,xs)) -> divL(div(x,y),xs)
    12: divL(z,cons(x,cons(y,xs))) ->= divL(z,cons(y,cons(x,xs)))
Number of strict rules: 11
Direct Order(PosReal,>,Poly) ... failed.
Freezing le
1: le❆1_0(y) -> true()
2: le❆1_s(x,0()) -> false()
3: le❆1_s(x,s(y)) -> le(x,y)
4: minus(0(),y) -> 0()
5: minus(s(x),y) -> ifminus(le❆1_s(x,y),s(x),y)
6: ifminus(true(),s(x),y) -> 0()
7: ifminus(false(),s(x),y) -> s(minus(x,y))
8: div(0(),s(y)) -> 0()
9: div(s(x),s(y)) -> s(div(minus(x,y),s(y)))
10: divL(x,nil()) -> x
11: divL(x,cons(y,xs)) -> divL(div(x,y),xs)
12: divL(z,cons(x,cons(y,xs))) ->= divL(z,cons(y,cons(x,xs)))
13: le(0(),_1) ->= le❆1_0(_1)
14: le(s(_1),_2) ->= le❆1_s(_1,_2)
Number of strict rules: 11
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #le(0(),_1) ->? #le❆1_0(_1)
   #2: #div(s(x),s(y)) -> #div(minus(x,y),s(y))
   #3: #div(s(x),s(y)) -> #minus(x,y)
   #4: #divL(x,cons(y,xs)) -> #divL(div(x,y),xs)
   #5: #divL(x,cons(y,xs)) -> #div(x,y)
   #6: #divL(z,cons(x,cons(y,xs))) ->? #divL(z,cons(y,cons(x,xs)))
   #7: #le(s(_1),_2) ->? #le❆1_s(_1,_2)
   #8: #ifminus(false(),s(x),y) -> #minus(x,y)
   #9: #minus(s(x),y) -> #ifminus(le❆1_s(x,y),s(x),y)
   #10: #minus(s(x),y) -> #le❆1_s(x,y)
   #11: #le❆1_s(x,s(y)) -> #le(x,y)
Number of SCCs: 4, DPs: 7, edges: 9
	SCC { #2 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: (/ 1 2)
 #div(x1,x2)	weight: x1
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2)	weight: 0
 minus(x1,x2)	weight: (/ 1 4) + x1
 false()	weight: 0
   div(x1,x2)	weight: 0
  true()	weight: 0
#le❆1_0(x1)	weight: 0
le❆1_s(x1,x2)	weight: (/ 1 4)
ifminus(x1,x2,x3)	weight: (/ 1 4) + x2
     0()	weight: 0
   nil()	weight: 0
#le❆1_s(x1,x2)	weight: 0
#ifminus(x1,x2,x3)	weight: 0
  divL(x1,x2)	weight: 0
#minus(x1,x2)	weight: 0
  cons(x1,x2)	weight: 0
le❆1_0(x1)	weight: (/ 3 4) + x1
#divL(x1,x2)	weight: 0
    Usable rules: { 4..7 }
    Removed DPs: #2
Number of SCCs: 3, DPs: 6, edges: 8
	SCC { #7 #11 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: (/ 1 2)
 #div(x1,x2)	weight: x1
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2)	weight: (/ 1 4) + x2
 minus(x1,x2)	weight: (/ 1 4) + x1
 false()	weight: 0
   div(x1,x2)	weight: 0
  true()	weight: 0
#le❆1_0(x1)	weight: 0
le❆1_s(x1,x2)	weight: (/ 1 4)
ifminus(x1,x2,x3)	weight: (/ 1 4) + x2
     0()	weight: 0
   nil()	weight: 0
#le❆1_s(x1,x2)	weight: x2
#ifminus(x1,x2,x3)	weight: 0
  divL(x1,x2)	weight: 0
#minus(x1,x2)	weight: 0
  cons(x1,x2)	weight: 0
le❆1_0(x1)	weight: (/ 3 4) + x1
#divL(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #7 #11
Number of SCCs: 2, DPs: 4, edges: 6
	SCC { #8 #9 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: (/ 1 2)
 #div(x1,x2)	weight: x1
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2)	weight: (/ 1 4)
 minus(x1,x2)	weight: (/ 1 4) + x1
 false()	weight: 0
   div(x1,x2)	weight: 0
  true()	weight: 0
#le❆1_0(x1)	weight: 0
le❆1_s(x1,x2)	weight: (/ 1 4)
ifminus(x1,x2,x3)	weight: (/ 1 4) + x2
     0()	weight: 0
   nil()	weight: 0
#le❆1_s(x1,x2)	weight: 0
#ifminus(x1,x2,x3)	weight: x2
  divL(x1,x2)	weight: 0
#minus(x1,x2)	weight: (/ 1 4) + x1
  cons(x1,x2)	weight: 0
le❆1_0(x1)	weight: (/ 3 4) + x1
#divL(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #8 #9
Number of SCCs: 1, DPs: 2, edges: 4
	SCC { #4 #6 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: (/ 1 2)
 #div(x1,x2)	weight: x1
     s(x1)	weight: (/ 1 2)
  #le(x1,x2)	weight: (/ 1 4)
 minus(x1,x2)	weight: (/ 1 4) + x1 + x2
 false()	weight: 0
   div(x1,x2)	weight: (/ 1 4) + x1
  true()	weight: 0
#le❆1_0(x1)	weight: 0
le❆1_s(x1,x2)	weight: (/ 1 4)
ifminus(x1,x2,x3)	weight: x2
     0()	weight: 0
   nil()	weight: 0
#le❆1_s(x1,x2)	weight: 0
#ifminus(x1,x2,x3)	weight: 0
  divL(x1,x2)	weight: 0
#minus(x1,x2)	weight: (/ 1 4)
  cons(x1,x2)	weight: (/ 1 4) + x1 + x2
le❆1_0(x1)	weight: (/ 3 4) + x1
#divL(x1,x2)	weight: x2
    Usable rules: { 4..7 }
    Removed DPs: #4
Number of SCCs: 1, DPs: 1, edges: 1
	SCC { #6 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
