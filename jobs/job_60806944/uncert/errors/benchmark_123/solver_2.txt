Input TRS:
    1: RAo(R()) -> R()
    2: RAn(R()) -> R()
    3: WAo(W()) -> W()
    4: WAn(W()) -> W()
    5: Rw() ->= RIn(Rw())
    6: Ww() ->= WIn(Ww())
    7: top(ok(system(r,W(),RIo(x),Ww(),p))) ->= top(check(system(RAo(r),W(),x,Ww(),p)))
    8: top(ok(system(r,W(),RIn(x),Ww(),p))) ->= top(check(system(RAn(r),W(),x,Ww(),p)))
    9: top(ok(system(R(),W(),Rw(),WIn(y),p))) ->= top(check(system(R(),WAn(W()),Rw(),y,p)))
    10: top(ok(system(R(),W(),Rw(),WIo(y),p))) ->= top(check(system(R(),WAo(W()),Rw(),y,p)))
    11: top(ok(system(r,W(),RIo(x),y,PR()))) ->= top(check(system(RAo(r),W(),x,y,PW())))
    12: top(ok(system(r,W(),RIn(x),y,PR()))) ->= top(check(system(RAn(r),W(),x,y,PW())))
    13: top(ok(system(R(),W(),x,WIo(y),PW()))) ->= top(check(system(R(),WAo(W()),x,y,PR())))
    14: top(ok(system(R(),W(),x,WIn(y),PW()))) ->= top(check(system(R(),WAn(W()),x,y,PR())))
    15: check(RIo(x)) ->= ok(RIo(x))
    16: check(RAo(x)) ->= RAo(check(x))
    17: check(RAn(x)) ->= RAn(check(x))
    18: check(WAo(x)) ->= WAo(check(x))
    19: check(WAn(x)) ->= WAn(check(x))
    20: check(RIo(x)) ->= RIo(check(x))
    21: check(RIn(x)) ->= RIn(check(x))
    22: check(WIo(x)) ->= WIo(check(x))
    23: check(WIn(x)) ->= WIn(check(x))
    24: check(system(v1,v2,v3,v4,v5)) ->= system(check(v1),v2,v3,v4,v5)
    25: check(system(v1,v2,v3,v4,v5)) ->= system(v1,check(v2),v3,v4,v5)
    26: check(system(v1,v2,v3,v4,v5)) ->= system(v1,v2,check(v3),v4,v5)
    27: check(system(v1,v2,v3,v4,v5)) ->= system(v1,v2,v3,check(v4),v5)
    28: check(system(v1,v2,v3,v4,v5)) ->= system(v1,v2,v3,v4,check(v5))
    29: RAo(ok(x)) ->= ok(RAo(x))
    30: RAn(ok(x)) ->= ok(RAn(x))
    31: WAo(ok(x)) ->= ok(WAo(x))
    32: WAn(ok(x)) ->= ok(WAn(x))
    33: RIo(ok(x)) ->= ok(RIo(x))
    34: RIn(ok(x)) ->= ok(RIn(x))
    35: WIo(ok(x)) ->= ok(WIo(x))
    36: WIn(ok(x)) ->= ok(WIn(x))
    37: system(ok(v1),v2,v3,v4,v5) ->= ok(system(v1,v2,v3,v4,v5))
    38: system(v1,ok(v2),v3,v4,v5) ->= ok(system(v1,v2,v3,v4,v5))
    39: system(v1,v2,ok(v3),v4,v5) ->= ok(system(v1,v2,v3,v4,v5))
    40: system(v1,v2,v3,ok(v4),v5) ->= ok(system(v1,v2,v3,v4,v5))
    41: system(v1,v2,v3,v4,ok(v5)) ->= ok(system(v1,v2,v3,v4,v5))
Number of strict rules: 4
Direct Order(PosReal,>,Poly) ... removes: 1 3 10 7 11 13
   RAo(x1)	weight: (/ 1 8) + x1
   RIo(x1)	weight: (/ 67629 4) + x1
     W()	weight: 0
   WIn(x1)	weight: x1
   top(x1)	weight: x1
    PR()	weight: 0
   WAo(x1)	weight: (/ 169897 8) + x1
system(x1,x2,x3,x4,x5)	weight: x1 + x2 + x3 + x4 + x5
    Ww()	weight: 0
   WIo(x1)	weight: (/ 84949 4) + x1
 check(x1)	weight: (/ 1 8) + x1
    ok(x1)	weight: (/ 1 8) + x1
    Rw()	weight: 0
     R()	weight: 0
   WAn(x1)	weight: x1
   RIn(x1)	weight: x1
    PW()	weight: 0
   RAn(x1)	weight: x1
Number of strict rules: 2
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #top(ok(system(R(),W(),Rw(),WIn(y),p))) ->? #top(check(system(R(),WAn(W()),Rw(),y,p)))
   #2: #top(ok(system(R(),W(),Rw(),WIn(y),p))) ->? #check(system(R(),WAn(W()),Rw(),y,p))
   #3: #top(ok(system(R(),W(),Rw(),WIn(y),p))) ->? #WAn(W())
   #4: #check(system(v1,v2,v3,v4,v5)) ->? #check(v1)
   #5: #check(WIn(x)) ->? #check(x)
   #6: #top(ok(system(r,W(),RIn(x),y,PR()))) ->? #top(check(system(RAn(r),W(),x,y,PW())))
   #7: #top(ok(system(r,W(),RIn(x),y,PR()))) ->? #check(system(RAn(r),W(),x,y,PW()))
   #8: #top(ok(system(r,W(),RIn(x),y,PR()))) ->? #RAn(r)
   #9: #top(ok(system(R(),W(),x,WIn(y),PW()))) ->? #top(check(system(R(),WAn(W()),x,y,PR())))
   #10: #top(ok(system(R(),W(),x,WIn(y),PW()))) ->? #check(system(R(),WAn(W()),x,y,PR()))
   #11: #top(ok(system(R(),W(),x,WIn(y),PW()))) ->? #WAn(W())
   #12: #RAn(ok(x)) ->? #RAn(x)
   #13: #check(system(v1,v2,v3,v4,v5)) ->? #check(v2)
   #14: #check(RIo(x)) ->? #check(x)
   #15: #check(system(v1,v2,v3,v4,v5)) ->? #check(v5)
   #16: #check(WIo(x)) ->? #check(x)
   #17: #check(system(v1,v2,v3,v4,v5)) ->? #check(v4)
   #18: #check(RAn(x)) ->? #RAn(check(x))
   #19: #check(RAn(x)) ->? #check(x)
   #20: #check(WAn(x)) ->? #WAn(check(x))
   #21: #check(WAn(x)) ->? #check(x)
   #22: #WAn(ok(x)) ->? #WAn(x)
   #23: #check(system(v1,v2,v3,v4,v5)) ->? #check(v3)
   #24: #check(RIn(x)) ->? #check(x)
   #25: #check(RAo(x)) ->? #check(x)
   #26: #top(ok(system(r,W(),RIn(x),Ww(),p))) ->? #top(check(system(RAn(r),W(),x,Ww(),p)))
   #27: #top(ok(system(r,W(),RIn(x),Ww(),p))) ->? #check(system(RAn(r),W(),x,Ww(),p))
   #28: #top(ok(system(r,W(),RIn(x),Ww(),p))) ->? #RAn(r)
   #29: #check(WAo(x)) ->? #check(x)
Number of SCCs: 4, DPs: 19, edges: 187
	SCC { #22 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
   RAo(x1)	weight: (/ 1 4) + x1
   RIo(x1)	weight: (/ 1 4) + x1
     W()	weight: 0
 #RAn(x1)	weight: 0
   WIn(x1)	weight: x1
   top(x1)	weight: 0
    PR()	weight: 0
#check(x1)	weight: 0
 #top(x1)	weight: 0
   WAo(x1)	weight: (/ 1 4) + x1
system(x1,x2,x3,x4,x5)	weight: (/ 1 4) + x1 + x2 + x3 + x4 + x5
 #WAn(x1)	weight: x1
    Ww()	weight: 0
   WIo(x1)	weight: (/ 1 4) + x1
 check(x1)	weight: (/ 1 4) + x1
    ok(x1)	weight: (/ 1 4) + x1
    Rw()	weight: 0
     R()	weight: 0
   WAn(x1)	weight: (/ 1 4) + x1
   RIn(x1)	weight: x1
    PW()	weight: 0
   RAn(x1)	weight: (/ 1 4) + x1
    Removed DPs: #22
Number of SCCs: 3, DPs: 18, edges: 186
	SCC { #12 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
   RAo(x1)	weight: (/ 1 4) + x1
   RIo(x1)	weight: (/ 1 4) + x1
     W()	weight: 0
 #RAn(x1)	weight: x1
   WIn(x1)	weight: x1
   top(x1)	weight: 0
    PR()	weight: 0
#check(x1)	weight: 0
 #top(x1)	weight: 0
   WAo(x1)	weight: (/ 1 4) + x1
system(x1,x2,x3,x4,x5)	weight: (/ 1 4) + x1 + x2 + x3 + x4 + x5
 #WAn(x1)	weight: 0
    Ww()	weight: 0
   WIo(x1)	weight: (/ 1 4) + x1
 check(x1)	weight: (/ 1 4) + x1
    ok(x1)	weight: (/ 1 4) + x1
    Rw()	weight: 0
     R()	weight: 0
   WAn(x1)	weight: (/ 1 4) + x1
   RIn(x1)	weight: x1
    PW()	weight: 0
   RAn(x1)	weight: (/ 1 4) + x1
    Removed DPs: #12
Number of SCCs: 2, DPs: 17, edges: 185
	SCC { #1 #6 #9 #26 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
