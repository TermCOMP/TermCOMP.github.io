Input TRS:
    1: pred(s(x)) -> x
    2: minus(x,0()) -> x
    3: minus(x,s(y)) -> pred(minus(x,y))
    4: div(0(),s(y)) -> 0()
    5: div(s(x),s(y)) -> s(div(minus(x,y),s(y)))
    6: divL(x,nil()) -> x
    7: divL(x,cons(y,xs)) -> divL(div(x,y),xs)
    8: divL(z,cons(x,xs)) ->= divL(z,consSwap(x,xs))
    9: consSwap(x,xs) ->= cons(x,xs)
    10: consSwap(x,cons(y,xs)) ->= cons(y,consSwap(x,xs))
Number of strict rules: 7
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #divL(x,cons(y,xs)) -> #divL(div(x,y),xs)
   #2: #divL(x,cons(y,xs)) -> #div(x,y)
   #3: #div(s(x),s(y)) -> #div(minus(x,y),s(y))
   #4: #div(s(x),s(y)) -> #minus(x,y)
   #5: #minus(x,s(y)) -> #pred(minus(x,y))
   #6: #minus(x,s(y)) -> #minus(x,y)
   #7: #divL(z,cons(x,xs)) ->? #divL(z,consSwap(x,xs))
Number of SCCs: 3, DPs: 4, edges: 6
	SCC { #6 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
 #div(x1,x2)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
 minus(x1,x2)	weight: 0
   div(x1,x2)	weight: 0
  pred(x1)	weight: 0
     0()	weight: 0
consSwap(x1,x2)	weight: 0
   nil()	weight: 0
  divL(x1,x2)	weight: 0
#minus(x1,x2)	weight: x2
#pred(x1)	weight: 0
  cons(x1,x2)	weight: 0
#divL(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #6
Number of SCCs: 2, DPs: 3, edges: 5
	SCC { #3 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
 #div(x1,x2)	weight: x1
     s(x1)	weight: (/ 1 2) + x1
 minus(x1,x2)	weight: (/ 1 4) + x1
   div(x1,x2)	weight: 0
  pred(x1)	weight: x1
     0()	weight: 0
consSwap(x1,x2)	weight: 0
   nil()	weight: 0
  divL(x1,x2)	weight: 0
#minus(x1,x2)	weight: 0
#pred(x1)	weight: 0
  cons(x1,x2)	weight: 0
#divL(x1,x2)	weight: 0
    Usable rules: { 1..3 }
    Removed DPs: #3
Number of SCCs: 1, DPs: 2, edges: 4
	SCC { #1 #7 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
 #div(x1,x2)	weight: x1
     s(x1)	weight: (/ 1 2) + x1
 minus(x1,x2)	weight: (/ 1 4) + x1
   div(x1,x2)	weight: (/ 1 4)
  pred(x1)	weight: x1
     0()	weight: 0
consSwap(x1,x2)	weight: (/ 1 4) + x1 + x2
   nil()	weight: 0
  divL(x1,x2)	weight: 0
#minus(x1,x2)	weight: 0
#pred(x1)	weight: 0
  cons(x1,x2)	weight: (/ 1 4) + x1 + x2
#divL(x1,x2)	weight: x2
    Usable rules: { 1..3 9 10 }
    Removed DPs: #1
Number of SCCs: 1, DPs: 1, edges: 1
	SCC { #7 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
