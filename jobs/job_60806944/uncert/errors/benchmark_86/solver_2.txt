Input TRS:
    1: top(left(car(x,y),car(old(),z))) -> top(right(y,car(old(),z)))
    2: top(left(car(x,car(old(),y)),z)) -> top(right(car(old(),y),z))
    3: top(right(x,car(y,car(old(),z)))) -> top(left(x,car(old(),z)))
    4: top(right(car(old(),x),car(y,z))) -> top(left(car(old(),x),z))
    5: top(left(bot(),car(old(),x))) -> top(right(bot(),car(old(),x)))
    6: top(right(car(old(),x),bot())) -> top(left(car(old(),x),bot()))
    7: top(left(car(x,y),z)) ->= top(left(y,z))
    8: top(right(x,car(y,z))) ->= top(right(x,z))
    9: bot() ->= car(new(),bot())
Number of strict rules: 6
Direct Order(PosReal,>,Poly) ... failed.
Freezing top
1: top❆1_left(car(x,y),car(old(),z)) -> top❆1_right(y,car(old(),z))
2: top❆1_left(car(x,car(old(),y)),z) -> top❆1_right(car(old(),y),z)
3: top❆1_right(x,car(y,car(old(),z))) -> top❆1_left(x,car(old(),z))
4: top❆1_right(car(old(),x),car(y,z)) -> top❆1_left(car(old(),x),z)
5: top❆1_left(bot(),car(old(),x)) -> top❆1_right(bot(),car(old(),x))
6: top❆1_right(car(old(),x),bot()) -> top❆1_left(car(old(),x),bot())
7: top❆1_left(car(x,y),z) ->= top❆1_left(y,z)
8: top❆1_right(x,car(y,z)) ->= top❆1_right(x,z)
9: bot() ->= car(new(),bot())
10: top(right(_1,_2)) ->= top❆1_right(_1,_2)
11: top(left(_1,_2)) ->= top❆1_left(_1,_2)
Number of strict rules: 6
Direct Order(PosReal,>,Poly) ... removes: 10 11
top❆1_right(x1,x2)	weight: x1 + x2
   new()	weight: 0
  left(x1,x2)	weight: (/ 1 4) + x1 + x2
   top(x1)	weight: 2 * x1
   bot()	weight: 0
top❆1_left(x1,x2)	weight: x1 + 2 * x2
   old()	weight: 0
 right(x1,x2)	weight: (/ 1 4) + x1 + x2
   car(x1,x2)	weight: x1 + 2 * x2
Number of strict rules: 6
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #top❆1_left(car(x,car(old(),y)),z) -> #top❆1_right(car(old(),y),z)
   #2: #top❆1_right(car(old(),x),bot()) -> #top❆1_left(car(old(),x),bot())
   #3: #top❆1_left(car(x,y),z) ->? #top❆1_left(y,z)
   #4: #top❆1_left(bot(),car(old(),x)) -> #top❆1_right(bot(),car(old(),x))
   #5: #top❆1_right(x,car(y,car(old(),z))) -> #top❆1_left(x,car(old(),z))
   #6: #top❆1_left(car(x,y),car(old(),z)) -> #top❆1_right(y,car(old(),z))
   #7: #top❆1_right(x,car(y,z)) ->? #top❆1_right(x,z)
   #8: #top❆1_right(car(old(),x),car(y,z)) -> #top❆1_left(car(old(),x),z)
Number of SCCs: 1, DPs: 8, edges: 26
	SCC { #1..8 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... succeeded.
top❆1_right(x1,x2)	weight: x2_1 + x1_1; x1_1 + x1_2
   new()	weight: 0; 0
  left(x1,x2)	weight: 0; 0
   top(x1)	weight: 0; 0
   bot()	weight: (/ 1 4); 0
top❆1_left(x1,x2)	weight: x2_1 + x1_1; x1_1
   old()	weight: (/ 1 4); (/ 1 4)
 right(x1,x2)	weight: 0; 0
#top❆1_left(x1,x2)	weight: x1_1; x2_1
#top❆1_right(x1,x2)	weight: x1_1 + x1_2; x2_1
   car(x1,x2)	weight: x2_1 + x2_2 + x1_1; x2_2 + x1_2
    Removed DPs: #2 #8
Number of SCCs: 1, DPs: 6, edges: 16
	SCC { #1 #3..7 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... succeeded.
top❆1_right(x1,x2)	weight: x2_1 + x1_1; x2_2 + x1_1 + x1_2
   new()	weight: 0; (/ 1 4)
  left(x1,x2)	weight: 0; 0
   top(x1)	weight: 0; 0
   bot()	weight: 0; 0
top❆1_left(x1,x2)	weight: x2_1 + x1_1; x2_2 + x1_1
   old()	weight: (/ 1 4); (/ 1 4)
 right(x1,x2)	weight: 0; 0
#top❆1_left(x1,x2)	weight: (/ 1 4) + x2_1 + x2_2; x2_1 + x2_2
#top❆1_right(x1,x2)	weight: x2_1 + x2_2; x2_1 + x2_2
   car(x1,x2)	weight: x2_1 + x2_2 + x1_1; x2_1 + x2_2 + x1_1
    Removed DPs: #1 #4..6
Number of SCCs: 2, DPs: 2, edges: 2
	SCC { #3 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
