Input TRS:
    1: le(0(),y) -> true()
    2: le(s(x),0()) -> false()
    3: le(s(x),s(y)) -> le(x,y)
    4: minus(0(),y) -> 0()
    5: minus(s(x),y) -> if_minus(le(s(x),y),s(x),y)
    6: if_minus(true(),s(x),y) -> 0()
    7: if_minus(false(),s(x),y) -> s(minus(x,y))
    8: gcd(0(),y) -> y
    9: gcd(s(x),0()) -> s(x)
    10: gcd(s(x),s(y)) -> if_gcd(le(y,x),s(x),s(y))
    11: if_gcd(true(),s(x),s(y)) -> gcd(minus(x,y),s(y))
    12: if_gcd(false(),s(x),s(y)) -> gcd(minus(y,x),s(x))
    13: gcdL(nil()) -> 0()
    14: gcdL(cons(x,nil())) -> x
    15: gcdL(cons(x,cons(y,xs))) -> gcdL(cons(gcd(x,y),xs))
    16: gcdL(cons(x,cons(y,xs))) ->= gcdL(cons(y,cons(x,xs)))
Number of strict rules: 15
Direct Order(PosReal,>,Poly) ... failed.
Freezing gcdL le
1: le❆1_0(y) -> true()
2: le❆1_s(x,0()) -> false()
3: le❆1_s(x,s(y)) -> le(x,y)
4: minus(0(),y) -> 0()
5: minus(s(x),y) -> if_minus(le❆1_s(x,y),s(x),y)
6: if_minus(true(),s(x),y) -> 0()
7: if_minus(false(),s(x),y) -> s(minus(x,y))
8: gcd(0(),y) -> y
9: gcd(s(x),0()) -> s(x)
10: gcd(s(x),s(y)) -> if_gcd(le(y,x),s(x),s(y))
11: if_gcd(true(),s(x),s(y)) -> gcd(minus(x,y),s(y))
12: if_gcd(false(),s(x),s(y)) -> gcd(minus(y,x),s(x))
13: gcdL❆1_nil() -> 0()
14: gcdL❆1_cons(x,nil()) -> x
15: gcdL❆1_cons(x,cons(y,xs)) -> gcdL❆1_cons(gcd(x,y),xs)
16: gcdL❆1_cons(x,cons(y,xs)) ->= gcdL❆1_cons(y,cons(x,xs))
17: le(0(),_1) ->= le❆1_0(_1)
18: le(s(_1),_2) ->= le❆1_s(_1,_2)
19: gcdL(cons(_1,_2)) ->= gcdL❆1_cons(_1,_2)
20: gcdL(nil()) ->= gcdL❆1_nil()
Number of strict rules: 15
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #if_gcd(true(),s(x),s(y)) -> #gcd(minus(x,y),s(y))
   #2: #if_gcd(true(),s(x),s(y)) -> #minus(x,y)
   #3: #if_gcd(false(),s(x),s(y)) -> #gcd(minus(y,x),s(x))
   #4: #if_gcd(false(),s(x),s(y)) -> #minus(y,x)
   #5: #gcdL(nil()) ->? #gcdL❆1_nil()
   #6: #if_minus(false(),s(x),y) -> #minus(x,y)
   #7: #gcd(s(x),s(y)) -> #if_gcd(le(y,x),s(x),s(y))
   #8: #gcd(s(x),s(y)) -> #le(y,x)
   #9: #minus(s(x),y) -> #if_minus(le❆1_s(x,y),s(x),y)
   #10: #minus(s(x),y) -> #le❆1_s(x,y)
   #11: #le(0(),_1) ->? #le❆1_0(_1)
   #12: #gcdL(cons(_1,_2)) ->? #gcdL❆1_cons(_1,_2)
   #13: #gcdL❆1_cons(x,cons(y,xs)) ->? #gcdL❆1_cons(y,cons(x,xs))
   #14: #le❆1_s(x,s(y)) -> #le(x,y)
   #15: #gcdL❆1_cons(x,cons(y,xs)) -> #gcdL❆1_cons(gcd(x,y),xs)
   #16: #gcdL❆1_cons(x,cons(y,xs)) -> #gcd(x,y)
   #17: #le(s(_1),_2) ->? #le❆1_s(_1,_2)
Number of SCCs: 4, DPs: 9, edges: 12
	SCC { #14 #17 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2)	weight: x1
 minus(x1,x2)	weight: 0
   gcd(x1,x2)	weight: 0
 false()	weight: 0
#gcdL❆1_nil()	weight: 0
  true()	weight: 0
#le❆1_0(x1)	weight: 0
le❆1_s(x1,x2)	weight: 0
#gcdL(x1)	weight: 0
#gcdL❆1_cons(x1,x2)	weight: 0
     0()	weight: 0
#if_minus(x1,x2,x3)	weight: 0
   nil()	weight: 0
#le❆1_s(x1,x2)	weight: (/ 1 4) + x1
#minus(x1,x2)	weight: 0
  gcdL(x1)	weight: 0
  cons(x1,x2)	weight: 0
if_minus(x1,x2,x3)	weight: 0
if_gcd(x1,x2,x3)	weight: 0
#if_gcd(x1,x2,x3)	weight: 0
le❆1_0(x1)	weight: 0
gcdL❆1_nil()	weight: 0
gcdL❆1_cons(x1,x2)	weight: 0
 #gcd(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #14 #17
Number of SCCs: 3, DPs: 7, edges: 10
	SCC { #6 #9 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: (/ 1 2) + x1
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2)	weight: 0
 minus(x1,x2)	weight: 0
   gcd(x1,x2)	weight: 0
 false()	weight: 0
#gcdL❆1_nil()	weight: 0
  true()	weight: 0
#le❆1_0(x1)	weight: 0
le❆1_s(x1,x2)	weight: (/ 1 4)
#gcdL(x1)	weight: 0
#gcdL❆1_cons(x1,x2)	weight: 0
     0()	weight: 0
#if_minus(x1,x2,x3)	weight: x2
   nil()	weight: 0
#le❆1_s(x1,x2)	weight: (/ 1 4)
#minus(x1,x2)	weight: (/ 1 4) + x1
  gcdL(x1)	weight: 0
  cons(x1,x2)	weight: 0
if_minus(x1,x2,x3)	weight: 0
if_gcd(x1,x2,x3)	weight: 0
#if_gcd(x1,x2,x3)	weight: 0
le❆1_0(x1)	weight: (/ 3 4)
gcdL❆1_nil()	weight: 0
gcdL❆1_cons(x1,x2)	weight: 0
 #gcd(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #6 #9
Number of SCCs: 2, DPs: 5, edges: 8
	SCC { #13 #15 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: (/ 1 2)
     s(x1)	weight: (/ 1 4)
  #le(x1,x2)	weight: 0
 minus(x1,x2)	weight: (/ 1 4)
   gcd(x1,x2)	weight: (/ 1 4) + x1 + x2
 false()	weight: 0
#gcdL❆1_nil()	weight: 0
  true()	weight: 0
#le❆1_0(x1)	weight: 0
le❆1_s(x1,x2)	weight: (/ 1 4)
#gcdL(x1)	weight: 0
#gcdL❆1_cons(x1,x2)	weight: x1 + x2
     0()	weight: 0
#if_minus(x1,x2,x3)	weight: 0
   nil()	weight: 0
#le❆1_s(x1,x2)	weight: (/ 1 4)
#minus(x1,x2)	weight: (/ 1 4)
  gcdL(x1)	weight: 0
  cons(x1,x2)	weight: (/ 1 2) + x1 + x2
if_minus(x1,x2,x3)	weight: (/ 1 4)
if_gcd(x1,x2,x3)	weight: (/ 3 4)
#if_gcd(x1,x2,x3)	weight: 0
le❆1_0(x1)	weight: (/ 3 4)
gcdL❆1_nil()	weight: 0
gcdL❆1_cons(x1,x2)	weight: 0
 #gcd(x1,x2)	weight: 0
    Usable rules: { 4..12 }
    Removed DPs: #15
Number of SCCs: 2, DPs: 4, edges: 5
	SCC { #13 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
