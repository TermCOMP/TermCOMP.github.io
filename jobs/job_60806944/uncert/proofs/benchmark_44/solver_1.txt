YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/wG5JW.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(4) RelADPP
(5) RelADPCleverAfsProof [SOUND, 39 ms]
(6) QDP
(7) MRRProof [EQUIVALENT, 0 ms]
(8) QDP
(9) MRRProof [EQUIVALENT, 5 ms]
(10) QDP
(11) QDPOrderProof [EQUIVALENT, 3 ms]
(12) QDP
(13) DependencyGraphProof [EQUIVALENT, 0 ms]
(14) TRUE


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   g(s(x)) -> f(x)
   f(0) -> s(0)
   f(s(x)) -> s(s(g(x)))
   g(0) -> 0

The relative TRS consists of the following S rules:

   rand(x) -> rand(s(x))
   rand(x) -> x


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   g(s(x)) -> F(x)
   f(0) -> s(0)
   f(s(x)) -> s(s(G(x)))
   g(0) -> 0

and relative ADPs:

   rand(x) -> RAND(s(x))
   rand(x) -> x


----------------------------------------

(3) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 1 subproblem.

----------------------------------------

(4)
Obligation:
Relative ADP Problem with
absolute ADPs:

   f(s(x)) -> s(s(G(x)))
   g(s(x)) -> F(x)

and relative ADPs:

   f(0) -> s(0)
   g(0) -> 0
   rand(x) -> rand(s(x))
   rand(x) -> x


----------------------------------------

(5) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:s_1 = 
G_1 = 
f_1 = 
0 = 
F_1 = 
rand_1 = 
g_1 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
G(x1)  =  G(x1)

s(x1)  =  s(x1)

F(x1)  =  x1


Recursive path order with status [RPO].
Quasi-Precedence: [G_1, s_1]

Status: G_1: multiset status
s_1: multiset status


----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G0(s0(x)) -> F0(x)
   F0(s0(x)) -> G0(x)

The TRS R consists of the following rules:

   f0(00) -> s0(00)
   g0(00) -> 00
   f0(s0(x)) -> s0(s0(g0(x)))
   rand0(x) -> rand0(s0(x))
   g0(s0(x)) -> f0(x)
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(7) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   rand0(x) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(F0(x_1)) = 2*x_1
   POL(G0(x_1)) = 2*x_1
   POL(f0(x_1)) = 2*x_1
   POL(g0(x_1)) = 2*x_1
   POL(rand0(x_1)) = 1 + 2*x_1
   POL(s0(x_1)) = x_1


----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G0(s0(x)) -> F0(x)
   F0(s0(x)) -> G0(x)

The TRS R consists of the following rules:

   f0(00) -> s0(00)
   g0(00) -> 00
   f0(s0(x)) -> s0(s0(g0(x)))
   rand0(x) -> rand0(s0(x))
   g0(s0(x)) -> f0(x)

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(9) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   f0(00) -> s0(00)
   g0(00) -> 00

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(F0(x_1)) = 2*x_1
   POL(G0(x_1)) = 2*x_1
   POL(f0(x_1)) = 2 + 2*x_1
   POL(g0(x_1)) = 2 + 2*x_1
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1


----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G0(s0(x)) -> F0(x)
   F0(s0(x)) -> G0(x)

The TRS R consists of the following rules:

   f0(s0(x)) -> s0(s0(g0(x)))
   rand0(x) -> rand0(s0(x))
   g0(s0(x)) -> f0(x)

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(11) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   G0(s0(x)) -> F0(x)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
G0(x1)  =  G0(x1)

s0(x1)  =  s0(x1)

F0(x1)  =  x1

f0(x1)  =  f0(x1)

g0(x1)  =  g0(x1)

rand0(x1)  =  rand0


Recursive path order with status [RPO].
Quasi-Precedence: [f0_1, g0_1] > [G0_1, s0_1]

Status: G0_1: multiset status
s0_1: multiset status
f0_1: multiset status
g0_1: multiset status
rand0: multiset status


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   f0(s0(x)) -> s0(s0(g0(x)))
   rand0(x) -> rand0(s0(x))
   g0(s0(x)) -> f0(x)


----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F0(s0(x)) -> G0(x)

The TRS R consists of the following rules:

   f0(s0(x)) -> s0(s0(g0(x)))
   rand0(x) -> rand0(s0(x))
   g0(s0(x)) -> f0(x)

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(13) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(14)
TRUE
