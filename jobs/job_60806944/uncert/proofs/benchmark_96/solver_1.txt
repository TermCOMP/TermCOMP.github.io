YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/PwssJ.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(4) RelADPP
(5) RelADPCleverAfsProof [SOUND, 35 ms]
(6) QDP
(7) MRRProof [EQUIVALENT, 16 ms]
(8) QDP
(9) PisEmptyProof [EQUIVALENT, 0 ms]
(10) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   t(f(x), g(y), f(z)) -> t(z, g(x), g(y))
   t(g(x), g(y), f(z)) -> t(f(y), f(z), x)

The relative TRS consists of the following S rules:

   g(g(x)) -> f(f(x))
   f(f(x)) -> g(g(x))
   g(f(x)) -> f(g(x))
   f(g(x)) -> g(f(x))


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   t(f(x), g(y), f(z)) -> T(z, g(x), g(y))
   t(f(x), g(y), f(z)) -> t(z, G(x), g(y))
   t(f(x), g(y), f(z)) -> t(z, g(x), G(y))
   t(g(x), g(y), f(z)) -> T(f(y), f(z), x)
   t(g(x), g(y), f(z)) -> t(F(y), f(z), x)
   t(g(x), g(y), f(z)) -> t(f(y), F(z), x)

and relative ADPs:

   g(g(x)) -> F(F(x))
   f(f(x)) -> G(G(x))
   g(f(x)) -> F(G(x))
   f(g(x)) -> G(F(x))


----------------------------------------

(3) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 1 subproblem.

----------------------------------------

(4)
Obligation:
Relative ADP Problem with
absolute ADPs:

   t(g(x), g(y), f(z)) -> T(f(y), f(z), x)
   t(f(x), g(y), f(z)) -> T(z, g(x), g(y))

and relative ADPs:

   t(f(x), g(y), f(z)) -> t(z, g(x), g(y))
   g(g(x)) -> f(f(x))
   f(f(x)) -> g(g(x))
   g(f(x)) -> f(g(x))
   t(g(x), g(y), f(z)) -> t(f(y), f(z), x)
   f(g(x)) -> g(f(x))


----------------------------------------

(5) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:t_3 = 
f_1 = 
T_3 = 
g_1 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Recursive path order with status [RPO].
Quasi-Precedence: T_3 > [f_1, g_1]

Status: T_3: multiset status
f_1: multiset status
g_1: multiset status


----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   T0(f0(x), g0(y), f0(z)) -> T0(z, g0(x), g0(y))
   T0(g0(x), g0(y), f0(z)) -> T0(f0(y), f0(z), x)

The TRS R consists of the following rules:

   t0(f0(x), g0(y), f0(z)) -> t0(z, g0(x), g0(y))
   g0(g0(x)) -> f0(f0(x))
   f0(f0(x)) -> g0(g0(x))
   g0(f0(x)) -> f0(g0(x))
   t0(g0(x), g0(y), f0(z)) -> t0(f0(y), f0(z), x)
   f0(g0(x)) -> g0(f0(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(7) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   T0(f0(x), g0(y), f0(z)) -> T0(z, g0(x), g0(y))
   T0(g0(x), g0(y), f0(z)) -> T0(f0(y), f0(z), x)

Strictly oriented rules of the TRS R:

   t0(f0(x), g0(y), f0(z)) -> t0(z, g0(x), g0(y))
   t0(g0(x), g0(y), f0(z)) -> t0(f0(y), f0(z), x)

Used ordering: Polynomial interpretation [POLO]:

   POL(T0(x_1, x_2, x_3)) = 2*x_1 + 2*x_2 + 2*x_3
   POL(f0(x_1)) = 2 + x_1
   POL(g0(x_1)) = 2 + x_1
   POL(t0(x_1, x_2, x_3)) = 2*x_1 + 2*x_2 + 2*x_3


----------------------------------------

(8)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   g0(g0(x)) -> f0(f0(x))
   f0(f0(x)) -> g0(g0(x))
   g0(f0(x)) -> f0(g0(x))
   f0(g0(x)) -> g0(f0(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(9) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(10)
YES
