YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/ZIdlI.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) RelADPP
        (6) RelADPCleverAfsProof [SOUND, 65 ms]
        (7) QDP
        (8) MRRProof [EQUIVALENT, 4 ms]
        (9) QDP
        (10) PisEmptyProof [EQUIVALENT, 0 ms]
        (11) YES
    (12) RelADPP
        (13) RelADPCleverAfsProof [SOUND, 104 ms]
        (14) QDP
        (15) MRRProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) PisEmptyProof [EQUIVALENT, 0 ms]
        (18) YES
    (19) RelADPP
        (20) RelADPReductionPairProof [EQUIVALENT, 53 ms]
        (21) RelADPP
        (22) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (23) YES
    (24) RelADPP
        (25) RelADPReductionPairProof [EQUIVALENT, 64 ms]
        (26) RelADPP
        (27) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (28) YES
    (29) RelADPP
        (30) RelADPReductionPairProof [EQUIVALENT, 72 ms]
        (31) RelADPP
        (32) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (33) YES
    (34) RelADPP
        (35) RelADPReductionPairProof [EQUIVALENT, 59 ms]
        (36) RelADPP
        (37) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (38) YES
    (39) RelADPP
        (40) RelADPReductionPairProof [EQUIVALENT, 39 ms]
        (41) RelADPP
        (42) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (43) YES
    (44) RelADPP
        (45) RelADPReductionPairProof [EQUIVALENT, 62 ms]
        (46) RelADPP
        (47) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (48) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   remove(nil, x) -> nil
   remove(cons(x, xs), 0) -> cons(x, xs)
   remove(cons(x, xs), s(y)) -> remove(xs, y)
   first(nil, x) -> nil
   first(cons(x, xs), 0) -> nil
   first(cons(x, xs), s(y)) -> cons(x, first(xs, y))
   sublist(nil, x) -> nil
   sublist(cons(x, xs), 0) -> nil
   sublist(cons(x, xs), s(y)) -> cons(cons(x, first(xs, y)), sublist(remove(xs, y), s(y)))

The relative TRS consists of the following S rules:

   consSwap(x, xs) -> cons(x, xs)
   sublist(cons(x, xs), z) -> sublist(consSwap(x, xs), z)
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   remove(nil, x) -> nil
   remove(cons(x, xs), 0) -> cons(x, xs)
   remove(cons(x, xs), s(y)) -> REMOVE(xs, y)
   first(nil, x) -> nil
   first(cons(x, xs), 0) -> nil
   first(cons(x, xs), s(y)) -> cons(x, FIRST(xs, y))
   sublist(nil, x) -> nil
   sublist(cons(x, xs), 0) -> nil
   sublist(cons(x, xs), s(y)) -> cons(cons(x, FIRST(xs, y)), sublist(remove(xs, y), s(y)))
   sublist(cons(x, xs), s(y)) -> cons(cons(x, first(xs, y)), SUBLIST(remove(xs, y), s(y)))
   sublist(cons(x, xs), s(y)) -> cons(cons(x, first(xs, y)), sublist(REMOVE(xs, y), s(y)))

and relative ADPs:

   consSwap(x, xs) -> cons(x, xs)
   sublist(cons(x, xs), z) -> SUBLIST(CONSSWAP(x, xs), z)
   consSwap(x, cons(y, xs)) -> cons(y, CONSSWAP(x, xs))


----------------------------------------

(3) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  3 SCCs with nodes from P_abs,
  5 Lassos,
Result: This relative DT problem is equivalent to 8 subproblems.

----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Relative ADP Problem with
absolute ADPs:

   remove(cons(x, xs), s(y)) -> REMOVE(xs, y)

and relative ADPs:

   consSwap(x, xs) -> cons(x, xs)
   remove(cons(x, xs), 0) -> cons(x, xs)
   sublist(cons(x, xs), s(y)) -> cons(cons(x, first(xs, y)), sublist(remove(xs, y), s(y)))
   first(nil, x) -> nil
   remove(nil, x) -> nil
   sublist(nil, x) -> nil
   sublist(cons(x, xs), 0) -> nil
   sublist(cons(x, xs), z) -> sublist(consSwap(x, xs), z)
   first(cons(x, xs), s(y)) -> cons(x, first(xs, y))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   first(cons(x, xs), 0) -> nil


----------------------------------------

(6) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:s_1 = 
REMOVE_2 = 0
0 = 
remove_2 = 0, 1
cons_2 = 0, 1
first_2 = 1
sublist_2 = 0, 1
consSwap_2 = 
nil = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
REMOVE(x1, x2)  =  REMOVE(x2)

cons(x1, x2)  =  cons

s(x1)  =  s(x1)

sublist(x1, x2)  =  sublist

first(x1, x2)  =  first(x1)

remove(x1, x2)  =  remove

0  =  0

nil  =  nil

consSwap(x1, x2)  =  consSwap(x1, x2)


Recursive path order with status [RPO].
Quasi-Precedence: sublist > [remove, nil] > [REMOVE_1, cons, s_1]
first_1 > [remove, nil] > [REMOVE_1, cons, s_1]
consSwap_2 > [REMOVE_1, cons, s_1]

Status: REMOVE_1: multiset status
cons: multiset status
s_1: multiset status
sublist: []
first_1: [1]
remove: multiset status
0: multiset status
nil: multiset status
consSwap_2: multiset status


----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REMOVE(s0(y)) -> REMOVE(y)

The TRS R consists of the following rules:

   consSwap0(x, xs) -> cons
   remove -> cons
   sublist -> cons
   first(nil0) -> nil0
   remove -> nil0
   sublist -> nil0
   sublist -> sublist
   first(cons) -> cons
   consSwap0(x, cons) -> cons
   remove -> remove
   first(cons) -> nil0

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(8) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   REMOVE(s0(y)) -> REMOVE(y)

Strictly oriented rules of the TRS R:

   consSwap0(x, xs) -> cons
   remove -> cons
   sublist -> cons
   first(nil0) -> nil0
   remove -> nil0
   sublist -> nil0
   first(cons) -> cons
   consSwap0(x, cons) -> cons
   first(cons) -> nil0

Used ordering: Knuth-Bendix order [KBO] with precedence:s0_1 > sublist > REMOVE_1 > remove > consSwap0_2 > first_1 > cons > nil0

and weight map:

   cons=2
   remove=4
   sublist=4
   nil0=3
   first_1=2
   REMOVE_1=1
   s0_1=0
   consSwap0_2=0

The variable weight is 1

----------------------------------------

(9)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   sublist -> sublist
   remove -> remove

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(10) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(11)
YES

----------------------------------------

(12)
Obligation:
Relative ADP Problem with
absolute ADPs:

   first(cons(x, xs), s(y)) -> cons(x, FIRST(xs, y))

and relative ADPs:

   consSwap(x, xs) -> cons(x, xs)
   remove(cons(x, xs), 0) -> cons(x, xs)
   sublist(cons(x, xs), s(y)) -> cons(cons(x, first(xs, y)), sublist(remove(xs, y), s(y)))
   first(nil, x) -> nil
   remove(nil, x) -> nil
   sublist(nil, x) -> nil
   sublist(cons(x, xs), 0) -> nil
   sublist(cons(x, xs), z) -> sublist(consSwap(x, xs), z)
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   remove(cons(x, xs), s(y)) -> remove(xs, y)
   first(cons(x, xs), 0) -> nil


----------------------------------------

(13) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:s_1 = 
FIRST_2 = 0
0 = 
cons_2 = 0, 1
remove_2 = 0, 1
first_2 = 1
sublist_2 = 0, 1
consSwap_2 = 
nil = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
FIRST(x1, x2)  =  FIRST(x2)

cons(x1, x2)  =  cons

s(x1)  =  s(x1)

sublist(x1, x2)  =  sublist

first(x1, x2)  =  first(x1)

remove(x1, x2)  =  remove

0  =  0

nil  =  nil

consSwap(x1, x2)  =  consSwap(x1, x2)


Recursive path order with status [RPO].
Quasi-Precedence: sublist > [remove, nil] > [FIRST_1, cons, s_1]
first_1 > [remove, nil] > [FIRST_1, cons, s_1]
consSwap_2 > [FIRST_1, cons, s_1]

Status: FIRST_1: multiset status
cons: multiset status
s_1: multiset status
sublist: []
first_1: [1]
remove: multiset status
0: multiset status
nil: multiset status
consSwap_2: multiset status


----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FIRST(s0(y)) -> FIRST(y)

The TRS R consists of the following rules:

   consSwap0(x, xs) -> cons
   remove -> cons
   sublist -> cons
   first(nil0) -> nil0
   remove -> nil0
   sublist -> nil0
   sublist -> sublist
   first(cons) -> cons
   consSwap0(x, cons) -> cons
   remove -> remove
   first(cons) -> nil0

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(15) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   FIRST(s0(y)) -> FIRST(y)

Strictly oriented rules of the TRS R:

   consSwap0(x, xs) -> cons
   remove -> cons
   sublist -> cons
   first(nil0) -> nil0
   remove -> nil0
   sublist -> nil0
   first(cons) -> cons
   consSwap0(x, cons) -> cons
   first(cons) -> nil0

Used ordering: Knuth-Bendix order [KBO] with precedence:s0_1 > sublist > FIRST_1 > remove > consSwap0_2 > first_1 > cons > nil0

and weight map:

   cons=2
   remove=4
   sublist=4
   nil0=3
   first_1=2
   FIRST_1=1
   s0_1=0
   consSwap0_2=0

The variable weight is 1

----------------------------------------

(16)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   sublist -> sublist
   remove -> remove

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(17) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(18)
YES

----------------------------------------

(19)
Obligation:
Relative ADP Problem with
absolute ADPs:

   sublist(cons(x, xs), s(y)) -> cons(cons(x, first(xs, y)), SUBLIST(remove(xs, y), s(y)))

and relative ADPs:

   consSwap(x, xs) -> cons(x, xs)
   remove(cons(x, xs), 0) -> cons(x, xs)
   sublist(cons(x, xs), s(y)) -> cons(cons(x, first(xs, y)), sublist(remove(xs, y), s(y)))
   first(nil, x) -> nil
   remove(nil, x) -> nil
   sublist(nil, x) -> nil
   sublist(cons(x, xs), 0) -> nil
   first(cons(x, xs), s(y)) -> cons(x, first(xs, y))
   sublist(cons(x, xs), z) -> SUBLIST(CONSSWAP(x, xs), z)
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   remove(cons(x, xs), s(y)) -> remove(xs, y)
   first(cons(x, xs), 0) -> nil


----------------------------------------

(20) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   sublist(cons(x, xs), s(y)) -> cons(cons(x, first(xs, y)), SUBLIST(remove(xs, y), s(y)))

Relative ADPs:

   consSwap(x, xs) -> cons(x, xs)
   remove(cons(x, xs), 0) -> cons(x, xs)
   sublist(cons(x, xs), s(y)) -> cons(cons(x, first(xs, y)), sublist(remove(xs, y), s(y)))
   first(nil, x) -> nil
   remove(nil, x) -> nil
   sublist(nil, x) -> nil
   sublist(cons(x, xs), 0) -> nil
   first(cons(x, xs), s(y)) -> cons(x, first(xs, y))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   remove(cons(x, xs), s(y)) -> remove(xs, y)
   first(cons(x, xs), 0) -> nil


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(CONSSWAP(x_1, x_2)) = 0
   POL(FIRST(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(REMOVE(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(SUBLIST(x_1, x_2)) = 3 + x_1 + 3*x_2
   POL(cons(x_1, x_2)) = 1 + 2*x_2
   POL(consSwap(x_1, x_2)) = 1 + 2*x_2
   POL(first(x_1, x_2)) = 1 + 3*x_1
   POL(nil) = 0
   POL(remove(x_1, x_2)) = x_1
   POL(s(x_1)) = 0
   POL(sublist(x_1, x_2)) = x_1

----------------------------------------

(21)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   consSwap(x, xs) -> cons(x, xs)
   sublist(cons(x, xs), s(y)) -> cons(cons(x, first(xs, y)), sublist(remove(xs, y), s(y)))
   remove(cons(x, xs), 0) -> cons(x, xs)
   first(nil, x) -> nil
   remove(nil, x) -> nil
   sublist(nil, x) -> nil
   sublist(cons(x, xs), 0) -> nil
   first(cons(x, xs), s(y)) -> cons(x, first(xs, y))
   sublist(cons(x, xs), z) -> SUBLIST(CONSSWAP(x, xs), z)
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   remove(cons(x, xs), s(y)) -> remove(xs, y)
   first(cons(x, xs), 0) -> nil


----------------------------------------

(22) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(23)
YES

----------------------------------------

(24)
Obligation:
Relative ADP Problem with
absolute ADPs:

   sublist(cons(x, xs), s(y)) -> cons(cons(x, first(xs, y)), SUBLIST(remove(xs, y), s(y)))

and relative ADPs:

   consSwap(x, xs) -> cons(x, xs)
   remove(cons(x, xs), 0) -> cons(x, xs)
   sublist(cons(x, xs), s(y)) -> cons(cons(x, first(xs, y)), sublist(remove(xs, y), s(y)))
   first(nil, x) -> nil
   remove(nil, x) -> nil
   sublist(nil, x) -> nil
   sublist(cons(x, xs), 0) -> nil
   first(cons(x, xs), s(y)) -> cons(x, first(xs, y))
   sublist(cons(x, xs), z) -> SUBLIST(CONSSWAP(x, xs), z)
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   remove(cons(x, xs), s(y)) -> remove(xs, y)
   first(cons(x, xs), 0) -> nil


----------------------------------------

(25) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   sublist(cons(x, xs), s(y)) -> cons(cons(x, first(xs, y)), SUBLIST(remove(xs, y), s(y)))

Relative ADPs:

   consSwap(x, xs) -> cons(x, xs)
   remove(cons(x, xs), 0) -> cons(x, xs)
   sublist(cons(x, xs), s(y)) -> cons(cons(x, first(xs, y)), sublist(remove(xs, y), s(y)))
   first(nil, x) -> nil
   remove(nil, x) -> nil
   sublist(nil, x) -> nil
   sublist(cons(x, xs), 0) -> nil
   first(cons(x, xs), s(y)) -> cons(x, first(xs, y))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   remove(cons(x, xs), s(y)) -> remove(xs, y)
   first(cons(x, xs), 0) -> nil


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(CONSSWAP(x_1, x_2)) = 0
   POL(FIRST(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(REMOVE(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(SUBLIST(x_1, x_2)) = 3 + x_1 + 3*x_2
   POL(cons(x_1, x_2)) = 1 + 2*x_2
   POL(consSwap(x_1, x_2)) = 1 + 2*x_2
   POL(first(x_1, x_2)) = 1 + 3*x_1
   POL(nil) = 0
   POL(remove(x_1, x_2)) = x_1
   POL(s(x_1)) = 0
   POL(sublist(x_1, x_2)) = x_1

----------------------------------------

(26)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   consSwap(x, xs) -> cons(x, xs)
   sublist(cons(x, xs), s(y)) -> cons(cons(x, first(xs, y)), sublist(remove(xs, y), s(y)))
   remove(cons(x, xs), 0) -> cons(x, xs)
   first(nil, x) -> nil
   remove(nil, x) -> nil
   sublist(nil, x) -> nil
   sublist(cons(x, xs), 0) -> nil
   first(cons(x, xs), s(y)) -> cons(x, first(xs, y))
   sublist(cons(x, xs), z) -> SUBLIST(CONSSWAP(x, xs), z)
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   remove(cons(x, xs), s(y)) -> remove(xs, y)
   first(cons(x, xs), 0) -> nil


----------------------------------------

(27) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(28)
YES

----------------------------------------

(29)
Obligation:
Relative ADP Problem with
absolute ADPs:

   sublist(cons(x, xs), 0) -> nil

and relative ADPs:

   consSwap(x, xs) -> cons(x, xs)
   remove(cons(x, xs), 0) -> cons(x, xs)
   sublist(cons(x, xs), s(y)) -> cons(cons(x, first(xs, y)), sublist(remove(xs, y), s(y)))
   first(nil, x) -> nil
   remove(nil, x) -> nil
   sublist(nil, x) -> nil
   first(cons(x, xs), s(y)) -> cons(x, first(xs, y))
   sublist(cons(x, xs), z) -> SUBLIST(CONSSWAP(x, xs), z)
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   remove(cons(x, xs), s(y)) -> remove(xs, y)
   first(cons(x, xs), 0) -> nil


----------------------------------------

(30) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   sublist(cons(x, xs), 0) -> nil

Relative ADPs:

   consSwap(x, xs) -> cons(x, xs)
   remove(cons(x, xs), 0) -> cons(x, xs)
   sublist(cons(x, xs), s(y)) -> cons(cons(x, first(xs, y)), sublist(remove(xs, y), s(y)))
   first(nil, x) -> nil
   remove(nil, x) -> nil
   sublist(nil, x) -> nil
   first(cons(x, xs), s(y)) -> cons(x, first(xs, y))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   remove(cons(x, xs), s(y)) -> remove(xs, y)
   first(cons(x, xs), 0) -> nil


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(0) = 2
   POL(CONSSWAP(x_1, x_2)) = 0
   POL(FIRST(x_1, x_2)) = 1 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(REMOVE(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(SUBLIST(x_1, x_2)) = x_2
   POL(cons(x_1, x_2)) = 0
   POL(consSwap(x_1, x_2)) = 0
   POL(first(x_1, x_2)) = 0
   POL(nil) = 0
   POL(remove(x_1, x_2)) = 0
   POL(s(x_1)) = 0
   POL(sublist(x_1, x_2)) = 0

----------------------------------------

(31)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   consSwap(x, xs) -> cons(x, xs)
   remove(cons(x, xs), 0) -> cons(x, xs)
   sublist(cons(x, xs), s(y)) -> cons(cons(x, first(xs, y)), sublist(remove(xs, y), s(y)))
   first(nil, x) -> nil
   remove(nil, x) -> nil
   sublist(nil, x) -> nil
   sublist(cons(x, xs), 0) -> nil
   first(cons(x, xs), s(y)) -> cons(x, first(xs, y))
   sublist(cons(x, xs), z) -> SUBLIST(CONSSWAP(x, xs), z)
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   remove(cons(x, xs), s(y)) -> remove(xs, y)
   first(cons(x, xs), 0) -> nil


----------------------------------------

(32) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(33)
YES

----------------------------------------

(34)
Obligation:
Relative ADP Problem with
absolute ADPs:

   sublist(nil, x) -> nil

and relative ADPs:

   consSwap(x, xs) -> cons(x, xs)
   remove(cons(x, xs), 0) -> cons(x, xs)
   sublist(cons(x, xs), s(y)) -> cons(cons(x, first(xs, y)), sublist(remove(xs, y), s(y)))
   first(nil, x) -> nil
   remove(nil, x) -> nil
   sublist(cons(x, xs), 0) -> nil
   first(cons(x, xs), s(y)) -> cons(x, first(xs, y))
   sublist(cons(x, xs), z) -> SUBLIST(CONSSWAP(x, xs), z)
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   remove(cons(x, xs), s(y)) -> remove(xs, y)
   first(cons(x, xs), 0) -> nil


----------------------------------------

(35) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   sublist(nil, x) -> nil

Relative ADPs:

   consSwap(x, xs) -> cons(x, xs)
   remove(cons(x, xs), 0) -> cons(x, xs)
   sublist(cons(x, xs), s(y)) -> cons(cons(x, first(xs, y)), sublist(remove(xs, y), s(y)))
   first(nil, x) -> nil
   remove(nil, x) -> nil
   sublist(cons(x, xs), 0) -> nil
   first(cons(x, xs), s(y)) -> cons(x, first(xs, y))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   remove(cons(x, xs), s(y)) -> remove(xs, y)
   first(cons(x, xs), 0) -> nil


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(CONSSWAP(x_1, x_2)) = 0
   POL(FIRST(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(REMOVE(x_1, x_2)) = 3 + 3*x_1 + x_1*x_2 + 3*x_2
   POL(SUBLIST(x_1, x_2)) = 1 + 3*x_2
   POL(cons(x_1, x_2)) = 0
   POL(consSwap(x_1, x_2)) = 0
   POL(first(x_1, x_2)) = 2*x_2
   POL(nil) = 0
   POL(remove(x_1, x_2)) = 0
   POL(s(x_1)) = 3 + x_1
   POL(sublist(x_1, x_2)) = 0

----------------------------------------

(36)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   consSwap(x, xs) -> cons(x, xs)
   remove(cons(x, xs), 0) -> cons(x, xs)
   sublist(cons(x, xs), s(y)) -> cons(cons(x, first(xs, y)), sublist(remove(xs, y), s(y)))
   first(nil, x) -> nil
   remove(nil, x) -> nil
   sublist(nil, x) -> nil
   sublist(cons(x, xs), 0) -> nil
   first(cons(x, xs), s(y)) -> cons(x, first(xs, y))
   sublist(cons(x, xs), z) -> SUBLIST(CONSSWAP(x, xs), z)
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   remove(cons(x, xs), s(y)) -> remove(xs, y)
   first(cons(x, xs), 0) -> nil


----------------------------------------

(37) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(38)
YES

----------------------------------------

(39)
Obligation:
Relative ADP Problem with
absolute ADPs:

   sublist(cons(x, xs), s(y)) -> cons(cons(x, FIRST(xs, y)), sublist(remove(xs, y), s(y)))

and relative ADPs:

   consSwap(x, xs) -> cons(x, xs)
   remove(cons(x, xs), 0) -> cons(x, xs)
   sublist(cons(x, xs), s(y)) -> cons(cons(x, first(xs, y)), sublist(remove(xs, y), s(y)))
   first(nil, x) -> nil
   remove(nil, x) -> nil
   sublist(nil, x) -> nil
   sublist(cons(x, xs), 0) -> nil
   first(cons(x, xs), s(y)) -> cons(x, first(xs, y))
   sublist(cons(x, xs), z) -> SUBLIST(CONSSWAP(x, xs), z)
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   remove(cons(x, xs), s(y)) -> remove(xs, y)
   first(cons(x, xs), 0) -> nil


----------------------------------------

(40) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   sublist(cons(x, xs), s(y)) -> cons(cons(x, FIRST(xs, y)), sublist(remove(xs, y), s(y)))

Relative ADPs:

   consSwap(x, xs) -> cons(x, xs)
   remove(cons(x, xs), 0) -> cons(x, xs)
   sublist(cons(x, xs), s(y)) -> cons(cons(x, first(xs, y)), sublist(remove(xs, y), s(y)))
   first(nil, x) -> nil
   remove(nil, x) -> nil
   sublist(nil, x) -> nil
   sublist(cons(x, xs), 0) -> nil
   first(cons(x, xs), s(y)) -> cons(x, first(xs, y))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   remove(cons(x, xs), s(y)) -> remove(xs, y)
   first(cons(x, xs), 0) -> nil


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(CONSSWAP(x_1, x_2)) = 0
   POL(FIRST(x_1, x_2)) = 1
   POL(REMOVE(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(SUBLIST(x_1, x_2)) = 2 + 2*x_2
   POL(cons(x_1, x_2)) = 0
   POL(consSwap(x_1, x_2)) = 0
   POL(first(x_1, x_2)) = 0
   POL(nil) = 0
   POL(remove(x_1, x_2)) = 0
   POL(s(x_1)) = 1
   POL(sublist(x_1, x_2)) = 0

----------------------------------------

(41)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   consSwap(x, xs) -> cons(x, xs)
   sublist(cons(x, xs), s(y)) -> cons(cons(x, first(xs, y)), sublist(remove(xs, y), s(y)))
   remove(cons(x, xs), 0) -> cons(x, xs)
   first(nil, x) -> nil
   remove(nil, x) -> nil
   sublist(nil, x) -> nil
   sublist(cons(x, xs), 0) -> nil
   first(cons(x, xs), s(y)) -> cons(x, first(xs, y))
   sublist(cons(x, xs), z) -> SUBLIST(CONSSWAP(x, xs), z)
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   remove(cons(x, xs), s(y)) -> remove(xs, y)
   first(cons(x, xs), 0) -> nil


----------------------------------------

(42) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(43)
YES

----------------------------------------

(44)
Obligation:
Relative ADP Problem with
absolute ADPs:

   sublist(cons(x, xs), s(y)) -> cons(cons(x, first(xs, y)), sublist(REMOVE(xs, y), s(y)))

and relative ADPs:

   consSwap(x, xs) -> cons(x, xs)
   remove(cons(x, xs), 0) -> cons(x, xs)
   sublist(cons(x, xs), s(y)) -> cons(cons(x, first(xs, y)), sublist(remove(xs, y), s(y)))
   first(nil, x) -> nil
   remove(nil, x) -> nil
   sublist(nil, x) -> nil
   sublist(cons(x, xs), 0) -> nil
   first(cons(x, xs), s(y)) -> cons(x, first(xs, y))
   sublist(cons(x, xs), z) -> SUBLIST(CONSSWAP(x, xs), z)
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   remove(cons(x, xs), s(y)) -> remove(xs, y)
   first(cons(x, xs), 0) -> nil


----------------------------------------

(45) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   sublist(cons(x, xs), s(y)) -> cons(cons(x, first(xs, y)), sublist(REMOVE(xs, y), s(y)))

Relative ADPs:

   consSwap(x, xs) -> cons(x, xs)
   remove(cons(x, xs), 0) -> cons(x, xs)
   sublist(cons(x, xs), s(y)) -> cons(cons(x, first(xs, y)), sublist(remove(xs, y), s(y)))
   first(nil, x) -> nil
   remove(nil, x) -> nil
   sublist(nil, x) -> nil
   sublist(cons(x, xs), 0) -> nil
   first(cons(x, xs), s(y)) -> cons(x, first(xs, y))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   remove(cons(x, xs), s(y)) -> remove(xs, y)
   first(cons(x, xs), 0) -> nil


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(CONSSWAP(x_1, x_2)) = 0
   POL(FIRST(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(REMOVE(x_1, x_2)) = 3 + 2*x_2
   POL(SUBLIST(x_1, x_2)) = 3 + x_2
   POL(cons(x_1, x_2)) = 0
   POL(consSwap(x_1, x_2)) = 0
   POL(first(x_1, x_2)) = 1 + x_2
   POL(nil) = 0
   POL(remove(x_1, x_2)) = 0
   POL(s(x_1)) = 3 + 3*x_1
   POL(sublist(x_1, x_2)) = 1 + 3*x_2

----------------------------------------

(46)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   consSwap(x, xs) -> cons(x, xs)
   sublist(cons(x, xs), s(y)) -> cons(cons(x, first(xs, y)), sublist(remove(xs, y), s(y)))
   remove(cons(x, xs), 0) -> cons(x, xs)
   first(nil, x) -> nil
   remove(nil, x) -> nil
   sublist(nil, x) -> nil
   sublist(cons(x, xs), 0) -> nil
   first(cons(x, xs), s(y)) -> cons(x, first(xs, y))
   sublist(cons(x, xs), z) -> SUBLIST(CONSSWAP(x, xs), z)
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   remove(cons(x, xs), s(y)) -> remove(xs, y)
   first(cons(x, xs), 0) -> nil


----------------------------------------

(47) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(48)
YES
