YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/sXUEL.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) RelADPP
        (6) RelADPCleverAfsProof [SOUND, 64 ms]
        (7) QDP
        (8) MRRProof [EQUIVALENT, 8 ms]
        (9) QDP
        (10) PisEmptyProof [EQUIVALENT, 0 ms]
        (11) YES
    (12) RelADPP
        (13) RelADPCleverAfsProof [SOUND, 70 ms]
        (14) QDP
        (15) MRRProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) PisEmptyProof [EQUIVALENT, 0 ms]
        (18) YES
    (19) RelADPP
        (20) RelADPReductionPairProof [EQUIVALENT, 48 ms]
        (21) RelADPP
        (22) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (23) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   rm(n, nil) -> nil
   rm(n, cons(m, x)) -> ifrm(eq(n, m), n, cons(m, x))
   ifrm(true, n, cons(m, x)) -> rm(n, x)
   ifrm(false, n, cons(m, x)) -> cons(m, rm(n, x))
   purge(nil) -> nil
   purge(cons(n, x)) -> cons(n, purge(rm(n, x)))

The relative TRS consists of the following S rules:

   purge(cons(n, cons(m, x))) -> purge(cons(m, cons(n, x)))


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> EQ(x, y)
   rm(n, nil) -> nil
   rm(n, cons(m, x)) -> IFRM(eq(n, m), n, cons(m, x))
   rm(n, cons(m, x)) -> ifrm(EQ(n, m), n, cons(m, x))
   ifrm(true, n, cons(m, x)) -> RM(n, x)
   ifrm(false, n, cons(m, x)) -> cons(m, RM(n, x))
   purge(nil) -> nil
   purge(cons(n, x)) -> cons(n, PURGE(rm(n, x)))
   purge(cons(n, x)) -> cons(n, purge(RM(n, x)))

and relative ADPs:

   purge(cons(n, cons(m, x))) -> PURGE(cons(m, cons(n, x)))


----------------------------------------

(3) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  3 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Relative ADP Problem with
absolute ADPs:

   eq(s(x), s(y)) -> EQ(x, y)

and relative ADPs:

   ifrm(true, n, cons(m, x)) -> rm(n, x)
   ifrm(false, n, cons(m, x)) -> cons(m, rm(n, x))
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(0, 0) -> true
   purge(cons(n, x)) -> cons(n, purge(rm(n, x)))
   rm(n, nil) -> nil
   rm(n, cons(m, x)) -> ifrm(eq(n, m), n, cons(m, x))
   purge(nil) -> nil
   purge(cons(n, cons(m, x))) -> purge(cons(m, cons(n, x)))


----------------------------------------

(6) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:s_1 = 
true = 
eq_2 = 0, 1
ifrm_3 = 1, 2
0 = 
purge_1 = 
cons_2 = 0
rm_2 = 0, 1
EQ_2 = 0
false = 
nil = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
EQ(x1, x2)  =  x2

s(x1)  =  s(x1)

purge(x1)  =  x1

cons(x1, x2)  =  x2

rm(x1, x2)  =  rm

ifrm(x1, x2, x3)  =  x1

eq(x1, x2)  =  eq

true  =  true

false  =  false

0  =  0

nil  =  nil


Recursive path order with status [RPO].
Quasi-Precedence: s_1 > [rm, eq, true, false, nil]
0 > [rm, eq, true, false, nil]

Status: s_1: [1]
rm: multiset status
eq: multiset status
true: multiset status
false: multiset status
0: multiset status
nil: multiset status


----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(s0(y)) -> EQ(y)

The TRS R consists of the following rules:

   ifrm(true0) -> rm
   ifrm(false0) -> cons(rm)
   eq -> false0
   eq -> eq
   eq -> true0
   purge0(cons(x)) -> cons(purge0(rm))
   rm -> nil0
   rm -> ifrm(eq)
   purge0(nil0) -> nil0
   purge0(cons(cons(x))) -> purge0(cons(cons(x)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(8) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   EQ(s0(y)) -> EQ(y)


Used ordering: Polynomial interpretation [POLO]:

   POL(EQ(x_1)) = 2*x_1
   POL(cons(x_1)) = x_1
   POL(eq) = 0
   POL(false0) = 0
   POL(ifrm(x_1)) = 2*x_1
   POL(nil0) = 0
   POL(purge0(x_1)) = x_1
   POL(rm) = 0
   POL(s0(x_1)) = 1 + 2*x_1
   POL(true0) = 0


----------------------------------------

(9)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   ifrm(true0) -> rm
   ifrm(false0) -> cons(rm)
   eq -> false0
   eq -> eq
   eq -> true0
   purge0(cons(x)) -> cons(purge0(rm))
   rm -> nil0
   rm -> ifrm(eq)
   purge0(nil0) -> nil0
   purge0(cons(cons(x))) -> purge0(cons(cons(x)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(10) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(11)
YES

----------------------------------------

(12)
Obligation:
Relative ADP Problem with
absolute ADPs:

   ifrm(false, n, cons(m, x)) -> cons(m, RM(n, x))
   ifrm(true, n, cons(m, x)) -> RM(n, x)
   rm(n, cons(m, x)) -> IFRM(eq(n, m), n, cons(m, x))

and relative ADPs:

   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   eq(0, 0) -> true
   purge(cons(n, x)) -> cons(n, purge(rm(n, x)))
   rm(n, nil) -> nil
   rm(n, cons(m, x)) -> ifrm(eq(n, m), n, cons(m, x))
   purge(nil) -> nil
   purge(cons(n, cons(m, x))) -> purge(cons(m, cons(n, x)))


----------------------------------------

(13) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:true = 
ifrm_3 = 0, 1
rm_2 = 0
IFRM_3 = 1
false = 
nil = 
s_1 = 
eq_2 = 0, 1
RM_2 = 0
0 = 
purge_1 = 
cons_2 = 0

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
RM(x1, x2)  =  RM(x2)

cons(x1, x2)  =  cons(x2)

IFRM(x1, x2, x3)  =  IFRM(x1, x3)

eq(x1, x2)  =  eq

false  =  false

true  =  true

0  =  0

s(x1)  =  x1

rm(x1, x2)  =  x2

ifrm(x1, x2, x3)  =  x3

purge(x1)  =  x1

nil  =  nil


Recursive path order with status [RPO].
Quasi-Precedence: cons_1 > [RM_1, IFRM_2]
cons_1 > eq > false
cons_1 > eq > [true, 0]

Status: RM_1: [1]
cons_1: [1]
IFRM_2: [1,2]
eq: multiset status
false: multiset status
true: multiset status
0: multiset status
nil: multiset status


----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   RM(cons(x)) -> IFRM(eq, cons(x))
   IFRM(false0, cons(x)) -> RM(x)
   IFRM(true0, cons(x)) -> RM(x)

The TRS R consists of the following rules:

   ifrm(cons(x)) -> rm(x)
   ifrm(cons(x)) -> cons(rm(x))
   eq -> false0
   eq -> eq
   eq -> true0
   purge0(cons(x)) -> cons(purge0(rm(x)))
   rm(nil0) -> nil0
   rm(cons(x)) -> ifrm(cons(x))
   purge0(nil0) -> nil0
   purge0(cons(cons(x))) -> purge0(cons(cons(x)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(15) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   RM(cons(x)) -> IFRM(eq, cons(x))
   IFRM(false0, cons(x)) -> RM(x)
   IFRM(true0, cons(x)) -> RM(x)

Strictly oriented rules of the TRS R:

   ifrm(cons(x)) -> rm(x)
   purge0(cons(x)) -> cons(purge0(rm(x)))
   purge0(nil0) -> nil0

Used ordering: Polynomial interpretation [POLO]:

   POL(IFRM(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(RM(x_1)) = 1 + 2*x_1
   POL(cons(x_1)) = 1 + x_1
   POL(eq) = 0
   POL(false0) = 0
   POL(ifrm(x_1)) = x_1
   POL(nil0) = 2
   POL(purge0(x_1)) = 2*x_1
   POL(rm(x_1)) = x_1
   POL(true0) = 0


----------------------------------------

(16)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   ifrm(cons(x)) -> cons(rm(x))
   eq -> false0
   eq -> eq
   eq -> true0
   rm(nil0) -> nil0
   rm(cons(x)) -> ifrm(cons(x))
   purge0(cons(cons(x))) -> purge0(cons(cons(x)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(17) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(18)
YES

----------------------------------------

(19)
Obligation:
Relative ADP Problem with
absolute ADPs:

   purge(cons(n, x)) -> cons(n, PURGE(rm(n, x)))

and relative ADPs:

   ifrm(true, n, cons(m, x)) -> rm(n, x)
   ifrm(false, n, cons(m, x)) -> cons(m, rm(n, x))
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   eq(0, 0) -> true
   purge(cons(n, x)) -> cons(n, purge(rm(n, x)))
   rm(n, nil) -> nil
   rm(n, cons(m, x)) -> ifrm(eq(n, m), n, cons(m, x))
   purge(nil) -> nil
   purge(cons(n, cons(m, x))) -> PURGE(cons(m, cons(n, x)))


----------------------------------------

(20) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   purge(cons(n, x)) -> cons(n, PURGE(rm(n, x)))

Relative ADPs:

   ifrm(true, n, cons(m, x)) -> rm(n, x)
   ifrm(false, n, cons(m, x)) -> cons(m, rm(n, x))
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   eq(0, 0) -> true
   purge(cons(n, x)) -> cons(n, purge(rm(n, x)))
   rm(n, nil) -> nil
   rm(n, cons(m, x)) -> ifrm(eq(n, m), n, cons(m, x))
   purge(nil) -> nil


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(EQ(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(IFRM(x_1, x_2, x_3)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_1*x_2*x_3 + 3*x_1*x_3 + 3*x_2 + 3*x_2*x_3 + 3*x_3
   POL(PURGE(x_1)) = 3 + 2*x_1
   POL(RM(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(cons(x_1, x_2)) = 2 + 2*x_2
   POL(eq(x_1, x_2)) = 0
   POL(false) = 0
   POL(ifrm(x_1, x_2, x_3)) = x_3
   POL(nil) = 0
   POL(purge(x_1)) = 2*x_1
   POL(rm(x_1, x_2)) = x_2
   POL(s(x_1)) = 3*x_1
   POL(true) = 0

----------------------------------------

(21)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   ifrm(true, n, cons(m, x)) -> rm(n, x)
   ifrm(false, n, cons(m, x)) -> cons(m, rm(n, x))
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   purge(cons(n, x)) -> cons(n, purge(rm(n, x)))
   eq(0, 0) -> true
   rm(n, nil) -> nil
   rm(n, cons(m, x)) -> ifrm(eq(n, m), n, cons(m, x))
   purge(nil) -> nil
   purge(cons(n, cons(m, x))) -> PURGE(cons(m, cons(n, x)))


----------------------------------------

(22) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(23)
YES
