YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/n7r5L.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) RelADPP
        (6) RelADPCleverAfsProof [SOUND, 45 ms]
        (7) QDP
        (8) MRRProof [EQUIVALENT, 8 ms]
        (9) QDP
        (10) MRRProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) MRRProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) PisEmptyProof [EQUIVALENT, 0 ms]
        (15) YES
    (16) RelADPP
        (17) RelADPCleverAfsProof [SOUND, 68 ms]
        (18) QDP
        (19) MRRProof [EQUIVALENT, 6 ms]
        (20) QDP
        (21) MRRProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) MRRProof [EQUIVALENT, 4 ms]
        (24) QDP
        (25) MRRProof [EQUIVALENT, 0 ms]
        (26) QDP
        (27) PisEmptyProof [EQUIVALENT, 0 ms]
        (28) YES
    (29) RelADPP
        (30) RelADPCleverAfsProof [SOUND, 55 ms]
        (31) QDP
        (32) MRRProof [EQUIVALENT, 9 ms]
        (33) QDP
        (34) MRRProof [EQUIVALENT, 0 ms]
        (35) QDP
        (36) MRRProof [EQUIVALENT, 5 ms]
        (37) QDP
        (38) MRRProof [EQUIVALENT, 0 ms]
        (39) QDP
        (40) MRRProof [EQUIVALENT, 0 ms]
        (41) QDP
        (42) MRRProof [EQUIVALENT, 0 ms]
        (43) QDP
        (44) PisEmptyProof [EQUIVALENT, 0 ms]
        (45) YES
    (46) RelADPP
        (47) RelADPReductionPairProof [EQUIVALENT, 57 ms]
        (48) RelADPP
        (49) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (50) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   minus(0, y) -> 0
   minus(s(x), y) -> ifminus(le(s(x), y), s(x), y)
   ifminus(true, s(x), y) -> 0
   ifminus(false, s(x), y) -> s(minus(x, y))
   div(0, s(y)) -> 0
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   divL(x, nil) -> x
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)

The relative TRS consists of the following S rules:

   divL(z, cons(x, cons(y, xs))) -> divL(z, cons(y, cons(x, xs)))


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> LE(x, y)
   minus(0, y) -> 0
   minus(s(x), y) -> IFMINUS(le(s(x), y), s(x), y)
   minus(s(x), y) -> ifminus(LE(s(x), y), s(x), y)
   ifminus(true, s(x), y) -> 0
   ifminus(false, s(x), y) -> s(MINUS(x, y))
   div(0, s(y)) -> 0
   div(s(x), s(y)) -> s(DIV(minus(x, y), s(y)))
   div(s(x), s(y)) -> s(div(MINUS(x, y), s(y)))
   divL(x, nil) -> x
   divL(x, cons(y, xs)) -> DIVL(div(x, y), xs)
   divL(x, cons(y, xs)) -> divL(DIV(x, y), xs)

and relative ADPs:

   divL(z, cons(x, cons(y, xs))) -> DIVL(z, cons(y, cons(x, xs)))


----------------------------------------

(3) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  4 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Relative ADP Problem with
absolute ADPs:

   le(s(x), s(y)) -> LE(x, y)

and relative ADPs:

   div(0, s(y)) -> 0
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   divL(z, cons(x, cons(y, xs))) -> divL(z, cons(y, cons(x, xs)))
   le(s(x), 0) -> false
   minus(s(x), y) -> ifminus(le(s(x), y), s(x), y)
   ifminus(true, s(x), y) -> 0
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   le(0, y) -> true
   ifminus(false, s(x), y) -> s(minus(x, y))
   minus(0, y) -> 0
   divL(x, nil) -> x


----------------------------------------

(6) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:true = 
ifminus_3 = 0, 2
divL_2 = 
false = 
nil = 
s_1 = 
div_2 = 
LE_2 = 0
le_2 = 0
0 = 
minus_2 = 1
cons_2 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
LE(x1, x2)  =  x2

s(x1)  =  s(x1)

minus(x1, x2)  =  x1

ifminus(x1, x2, x3)  =  x2

le(x1, x2)  =  le(x2)

div(x1, x2)  =  div(x1, x2)

0  =  0

false  =  false

true  =  true


Recursive path order with status [RPO].
Quasi-Precedence: le_1 > [0, false, true]
div_2 > s_1 > [0, false, true]

Status: s_1: multiset status
le_1: [1]
div_2: [2,1]
0: multiset status
false: multiset status
true: multiset status


----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s0(y)) -> LE(y)

The TRS R consists of the following rules:

   div0(00, s0(y)) -> 00
   divL0(x, cons0(y, xs)) -> divL0(div0(x, y), xs)
   divL0(z, cons0(x, cons0(y, xs))) -> divL0(z, cons0(y, cons0(x, xs)))
   le(s0(y)) -> le(y)
   le(00) -> false0
   minus(s0(x)) -> ifminus(s0(x))
   ifminus(s0(x)) -> 00
   div0(s0(x), s0(y)) -> s0(div0(minus(x), s0(y)))
   le(y) -> true0
   ifminus(s0(x)) -> s0(minus(x))
   minus(00) -> 00
   divL0(x, nil0) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(8) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   divL0(x, cons0(y, xs)) -> divL0(div0(x, y), xs)
   le(y) -> true0
   divL0(x, nil0) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(LE(x_1)) = 2*x_1
   POL(cons0(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(div0(x_1, x_2)) = x_1 + 2*x_2
   POL(divL0(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(false0) = 1
   POL(ifminus(x_1)) = x_1
   POL(le(x_1)) = 1 + 2*x_1
   POL(minus(x_1)) = x_1
   POL(nil0) = 2
   POL(s0(x_1)) = x_1
   POL(true0) = 0


----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s0(y)) -> LE(y)

The TRS R consists of the following rules:

   div0(00, s0(y)) -> 00
   divL0(z, cons0(x, cons0(y, xs))) -> divL0(z, cons0(y, cons0(x, xs)))
   le(s0(y)) -> le(y)
   le(00) -> false0
   minus(s0(x)) -> ifminus(s0(x))
   ifminus(s0(x)) -> 00
   div0(s0(x), s0(y)) -> s0(div0(minus(x), s0(y)))
   ifminus(s0(x)) -> s0(minus(x))
   minus(00) -> 00

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(10) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   le(00) -> false0

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(LE(x_1)) = x_1
   POL(cons0(x_1, x_2)) = x_1 + x_2
   POL(div0(x_1, x_2)) = x_1 + x_2
   POL(divL0(x_1, x_2)) = x_1 + x_2
   POL(false0) = 0
   POL(ifminus(x_1)) = x_1
   POL(le(x_1)) = 2 + 2*x_1
   POL(minus(x_1)) = x_1
   POL(s0(x_1)) = x_1


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s0(y)) -> LE(y)

The TRS R consists of the following rules:

   div0(00, s0(y)) -> 00
   divL0(z, cons0(x, cons0(y, xs))) -> divL0(z, cons0(y, cons0(x, xs)))
   le(s0(y)) -> le(y)
   minus(s0(x)) -> ifminus(s0(x))
   ifminus(s0(x)) -> 00
   div0(s0(x), s0(y)) -> s0(div0(minus(x), s0(y)))
   ifminus(s0(x)) -> s0(minus(x))
   minus(00) -> 00

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   LE(s0(y)) -> LE(y)

Strictly oriented rules of the TRS R:

   div0(00, s0(y)) -> 00
   le(s0(y)) -> le(y)
   div0(s0(x), s0(y)) -> s0(div0(minus(x), s0(y)))

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 2
   POL(LE(x_1)) = x_1
   POL(cons0(x_1, x_2)) = x_1 + x_2
   POL(div0(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(divL0(x_1, x_2)) = x_1 + x_2
   POL(ifminus(x_1)) = x_1
   POL(le(x_1)) = x_1
   POL(minus(x_1)) = x_1
   POL(s0(x_1)) = 2 + x_1


----------------------------------------

(13)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   divL0(z, cons0(x, cons0(y, xs))) -> divL0(z, cons0(y, cons0(x, xs)))
   minus(s0(x)) -> ifminus(s0(x))
   ifminus(s0(x)) -> 00
   ifminus(s0(x)) -> s0(minus(x))
   minus(00) -> 00

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(14) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
Relative ADP Problem with
absolute ADPs:

   minus(s(x), y) -> IFMINUS(le(s(x), y), s(x), y)
   ifminus(false, s(x), y) -> s(MINUS(x, y))

and relative ADPs:

   div(0, s(y)) -> 0
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   divL(z, cons(x, cons(y, xs))) -> divL(z, cons(y, cons(x, xs)))
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false
   minus(s(x), y) -> ifminus(le(s(x), y), s(x), y)
   ifminus(true, s(x), y) -> 0
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   le(0, y) -> true
   minus(0, y) -> 0
   divL(x, nil) -> x


----------------------------------------

(17) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:MINUS_2 = 1
true = 
ifminus_3 = 0, 2
divL_2 = 
IFMINUS_3 = 0, 2
false = 
nil = 
s_1 = 
div_2 = 1
le_2 = 0, 1
0 = 
minus_2 = 1
cons_2 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
MINUS(x1, x2)  =  MINUS(x1)

s(x1)  =  s(x1)

IFMINUS(x1, x2, x3)  =  IFMINUS(x2)

le(x1, x2)  =  le

false  =  false

0  =  0

true  =  true

minus(x1, x2)  =  x1

ifminus(x1, x2, x3)  =  x2

div(x1, x2)  =  x1


Recursive path order with status [RPO].
Quasi-Precedence: [le, false, true] > [MINUS_1, s_1, 0] > IFMINUS_1

Status: MINUS_1: multiset status
s_1: multiset status
IFMINUS_1: multiset status
le: []
false: multiset status
0: multiset status
true: multiset status


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s0(x)) -> IFMINUS(s0(x))
   IFMINUS(s0(x)) -> MINUS(x)

The TRS R consists of the following rules:

   div(00) -> 00
   divL0(x, cons0(y, xs)) -> divL0(div(x), xs)
   divL0(z, cons0(x, cons0(y, xs))) -> divL0(z, cons0(y, cons0(x, xs)))
   le -> le
   le -> false0
   minus(s0(x)) -> ifminus(s0(x))
   ifminus(s0(x)) -> 00
   div(s0(x)) -> s0(div(minus(x)))
   le -> true0
   ifminus(s0(x)) -> s0(minus(x))
   minus(00) -> 00
   divL0(x, nil0) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   divL0(x, cons0(y, xs)) -> divL0(div(x), xs)
   divL0(x, nil0) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(IFMINUS(x_1)) = x_1
   POL(MINUS(x_1)) = x_1
   POL(cons0(x_1, x_2)) = 2 + x_1 + x_2
   POL(div(x_1)) = x_1
   POL(divL0(x_1, x_2)) = 2*x_1 + x_2
   POL(false0) = 2
   POL(ifminus(x_1)) = x_1
   POL(le) = 2
   POL(minus(x_1)) = x_1
   POL(nil0) = 2
   POL(s0(x_1)) = x_1
   POL(true0) = 2


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s0(x)) -> IFMINUS(s0(x))
   IFMINUS(s0(x)) -> MINUS(x)

The TRS R consists of the following rules:

   div(00) -> 00
   divL0(z, cons0(x, cons0(y, xs))) -> divL0(z, cons0(y, cons0(x, xs)))
   le -> le
   le -> false0
   minus(s0(x)) -> ifminus(s0(x))
   ifminus(s0(x)) -> 00
   div(s0(x)) -> s0(div(minus(x)))
   le -> true0
   ifminus(s0(x)) -> s0(minus(x))
   minus(00) -> 00

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   le -> false0

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(IFMINUS(x_1)) = 2*x_1
   POL(MINUS(x_1)) = 2*x_1
   POL(cons0(x_1, x_2)) = x_1 + x_2
   POL(div(x_1)) = 2*x_1
   POL(divL0(x_1, x_2)) = x_1 + x_2
   POL(false0) = 0
   POL(ifminus(x_1)) = x_1
   POL(le) = 1
   POL(minus(x_1)) = x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 1


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s0(x)) -> IFMINUS(s0(x))
   IFMINUS(s0(x)) -> MINUS(x)

The TRS R consists of the following rules:

   div(00) -> 00
   divL0(z, cons0(x, cons0(y, xs))) -> divL0(z, cons0(y, cons0(x, xs)))
   le -> le
   minus(s0(x)) -> ifminus(s0(x))
   ifminus(s0(x)) -> 00
   div(s0(x)) -> s0(div(minus(x)))
   le -> true0
   ifminus(s0(x)) -> s0(minus(x))
   minus(00) -> 00

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(23) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   le -> true0

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(IFMINUS(x_1)) = x_1
   POL(MINUS(x_1)) = x_1
   POL(cons0(x_1, x_2)) = 2*x_1 + x_2
   POL(div(x_1)) = 2*x_1
   POL(divL0(x_1, x_2)) = x_1 + 2*x_2
   POL(ifminus(x_1)) = x_1
   POL(le) = 1
   POL(minus(x_1)) = x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 0


----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s0(x)) -> IFMINUS(s0(x))
   IFMINUS(s0(x)) -> MINUS(x)

The TRS R consists of the following rules:

   div(00) -> 00
   divL0(z, cons0(x, cons0(y, xs))) -> divL0(z, cons0(y, cons0(x, xs)))
   le -> le
   minus(s0(x)) -> ifminus(s0(x))
   ifminus(s0(x)) -> 00
   div(s0(x)) -> s0(div(minus(x)))
   ifminus(s0(x)) -> s0(minus(x))
   minus(00) -> 00

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(25) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   MINUS(s0(x)) -> IFMINUS(s0(x))
   IFMINUS(s0(x)) -> MINUS(x)

Strictly oriented rules of the TRS R:

   div(00) -> 00
   ifminus(s0(x)) -> 00
   div(s0(x)) -> s0(div(minus(x)))

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 1
   POL(IFMINUS(x_1)) = x_1
   POL(MINUS(x_1)) = 1 + 2*x_1
   POL(cons0(x_1, x_2)) = 2*x_1 + x_2
   POL(div(x_1)) = 1 + 2*x_1
   POL(divL0(x_1, x_2)) = x_1 + 2*x_2
   POL(ifminus(x_1)) = x_1
   POL(le) = 0
   POL(minus(x_1)) = x_1
   POL(s0(x_1)) = 2 + 2*x_1


----------------------------------------

(26)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   divL0(z, cons0(x, cons0(y, xs))) -> divL0(z, cons0(y, cons0(x, xs)))
   le -> le
   minus(s0(x)) -> ifminus(s0(x))
   ifminus(s0(x)) -> s0(minus(x))
   minus(00) -> 00

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(27) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(28)
YES

----------------------------------------

(29)
Obligation:
Relative ADP Problem with
absolute ADPs:

   div(s(x), s(y)) -> s(DIV(minus(x, y), s(y)))

and relative ADPs:

   div(0, s(y)) -> 0
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   divL(z, cons(x, cons(y, xs))) -> divL(z, cons(y, cons(x, xs)))
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false
   minus(s(x), y) -> ifminus(le(s(x), y), s(x), y)
   ifminus(true, s(x), y) -> 0
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   le(0, y) -> true
   ifminus(false, s(x), y) -> s(minus(x, y))
   minus(0, y) -> 0
   divL(x, nil) -> x


----------------------------------------

(30) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:true = 
ifminus_3 = 0, 2
divL_2 = 
false = 
nil = 
s_1 = 
div_2 = 
0 = 
le_2 = 0, 1
minus_2 = 1
cons_2 = 
DIV_2 = 1

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
DIV(x1, x2)  =  DIV(x1)

s(x1)  =  s(x1)

minus(x1, x2)  =  x1

ifminus(x1, x2, x3)  =  x2

le(x1, x2)  =  le

0  =  0

false  =  false

true  =  true

div(x1, x2)  =  div(x1, x2)


Recursive path order with status [RPO].
Quasi-Precedence: [le, false, true] > [DIV_1, s_1, 0]
div_2 > [DIV_1, s_1, 0]

Status: DIV_1: [1]
s_1: multiset status
le: multiset status
0: multiset status
false: multiset status
true: multiset status
div_2: [2,1]


----------------------------------------

(31)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(s0(x)) -> DIV(minus(x))

The TRS R consists of the following rules:

   div0(00, s0(y)) -> 00
   divL0(x, cons0(y, xs)) -> divL0(div0(x, y), xs)
   divL0(z, cons0(x, cons0(y, xs))) -> divL0(z, cons0(y, cons0(x, xs)))
   le -> le
   le -> false0
   minus(s0(x)) -> ifminus(s0(x))
   ifminus(s0(x)) -> 00
   div0(s0(x), s0(y)) -> s0(div0(minus(x), s0(y)))
   le -> true0
   ifminus(s0(x)) -> s0(minus(x))
   minus(00) -> 00
   divL0(x, nil0) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(32) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   divL0(x, nil0) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(DIV(x_1)) = 2*x_1
   POL(cons0(x_1, x_2)) = 2*x_1 + x_2
   POL(div0(x_1, x_2)) = x_1 + x_2
   POL(divL0(x_1, x_2)) = x_1 + x_2
   POL(false0) = 2
   POL(ifminus(x_1)) = x_1
   POL(le) = 2
   POL(minus(x_1)) = x_1
   POL(nil0) = 2
   POL(s0(x_1)) = x_1
   POL(true0) = 2


----------------------------------------

(33)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(s0(x)) -> DIV(minus(x))

The TRS R consists of the following rules:

   div0(00, s0(y)) -> 00
   divL0(x, cons0(y, xs)) -> divL0(div0(x, y), xs)
   divL0(z, cons0(x, cons0(y, xs))) -> divL0(z, cons0(y, cons0(x, xs)))
   le -> le
   le -> false0
   minus(s0(x)) -> ifminus(s0(x))
   ifminus(s0(x)) -> 00
   div0(s0(x), s0(y)) -> s0(div0(minus(x), s0(y)))
   le -> true0
   ifminus(s0(x)) -> s0(minus(x))
   minus(00) -> 00

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(34) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   le -> false0

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(DIV(x_1)) = x_1
   POL(cons0(x_1, x_2)) = 2*x_1 + x_2
   POL(div0(x_1, x_2)) = x_1 + x_2
   POL(divL0(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(false0) = 0
   POL(ifminus(x_1)) = x_1
   POL(le) = 1
   POL(minus(x_1)) = x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 1


----------------------------------------

(35)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(s0(x)) -> DIV(minus(x))

The TRS R consists of the following rules:

   div0(00, s0(y)) -> 00
   divL0(x, cons0(y, xs)) -> divL0(div0(x, y), xs)
   divL0(z, cons0(x, cons0(y, xs))) -> divL0(z, cons0(y, cons0(x, xs)))
   le -> le
   minus(s0(x)) -> ifminus(s0(x))
   ifminus(s0(x)) -> 00
   div0(s0(x), s0(y)) -> s0(div0(minus(x), s0(y)))
   le -> true0
   ifminus(s0(x)) -> s0(minus(x))
   minus(00) -> 00

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(36) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   divL0(x, cons0(y, xs)) -> divL0(div0(x, y), xs)

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(DIV(x_1)) = x_1
   POL(cons0(x_1, x_2)) = 1 + 2*x_1 + x_2
   POL(div0(x_1, x_2)) = x_1 + 2*x_2
   POL(divL0(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(ifminus(x_1)) = x_1
   POL(le) = 1
   POL(minus(x_1)) = x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 1


----------------------------------------

(37)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(s0(x)) -> DIV(minus(x))

The TRS R consists of the following rules:

   div0(00, s0(y)) -> 00
   divL0(z, cons0(x, cons0(y, xs))) -> divL0(z, cons0(y, cons0(x, xs)))
   le -> le
   minus(s0(x)) -> ifminus(s0(x))
   ifminus(s0(x)) -> 00
   div0(s0(x), s0(y)) -> s0(div0(minus(x), s0(y)))
   le -> true0
   ifminus(s0(x)) -> s0(minus(x))
   minus(00) -> 00

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(38) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   le -> true0

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(DIV(x_1)) = x_1
   POL(cons0(x_1, x_2)) = 2*x_1 + x_2
   POL(div0(x_1, x_2)) = x_1 + x_2
   POL(divL0(x_1, x_2)) = x_1 + x_2
   POL(ifminus(x_1)) = x_1
   POL(le) = 1
   POL(minus(x_1)) = x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 0


----------------------------------------

(39)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(s0(x)) -> DIV(minus(x))

The TRS R consists of the following rules:

   div0(00, s0(y)) -> 00
   divL0(z, cons0(x, cons0(y, xs))) -> divL0(z, cons0(y, cons0(x, xs)))
   le -> le
   minus(s0(x)) -> ifminus(s0(x))
   ifminus(s0(x)) -> 00
   div0(s0(x), s0(y)) -> s0(div0(minus(x), s0(y)))
   ifminus(s0(x)) -> s0(minus(x))
   minus(00) -> 00

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(40) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   div0(00, s0(y)) -> 00

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(DIV(x_1)) = x_1
   POL(cons0(x_1, x_2)) = 2*x_1 + x_2
   POL(div0(x_1, x_2)) = 1 + x_1 + 2*x_2
   POL(divL0(x_1, x_2)) = x_1 + 2*x_2
   POL(ifminus(x_1)) = x_1
   POL(le) = 0
   POL(minus(x_1)) = x_1
   POL(s0(x_1)) = x_1


----------------------------------------

(41)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(s0(x)) -> DIV(minus(x))

The TRS R consists of the following rules:

   divL0(z, cons0(x, cons0(y, xs))) -> divL0(z, cons0(y, cons0(x, xs)))
   le -> le
   minus(s0(x)) -> ifminus(s0(x))
   ifminus(s0(x)) -> 00
   div0(s0(x), s0(y)) -> s0(div0(minus(x), s0(y)))
   ifminus(s0(x)) -> s0(minus(x))
   minus(00) -> 00

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(42) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   DIV(s0(x)) -> DIV(minus(x))

Strictly oriented rules of the TRS R:

   ifminus(s0(x)) -> 00
   minus(00) -> 00

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 1
   POL(DIV(x_1)) = x_1
   POL(cons0(x_1, x_2)) = x_1 + x_2
   POL(div0(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(divL0(x_1, x_2)) = x_1 + 2*x_2
   POL(ifminus(x_1)) = 1 + x_1
   POL(le) = 0
   POL(minus(x_1)) = 1 + x_1
   POL(s0(x_1)) = 2 + x_1


----------------------------------------

(43)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   divL0(z, cons0(x, cons0(y, xs))) -> divL0(z, cons0(y, cons0(x, xs)))
   le -> le
   minus(s0(x)) -> ifminus(s0(x))
   div0(s0(x), s0(y)) -> s0(div0(minus(x), s0(y)))
   ifminus(s0(x)) -> s0(minus(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(44) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(45)
YES

----------------------------------------

(46)
Obligation:
Relative ADP Problem with
absolute ADPs:

   divL(x, cons(y, xs)) -> DIVL(div(x, y), xs)

and relative ADPs:

   div(0, s(y)) -> 0
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false
   minus(s(x), y) -> ifminus(le(s(x), y), s(x), y)
   ifminus(true, s(x), y) -> 0
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   le(0, y) -> true
   ifminus(false, s(x), y) -> s(minus(x, y))
   divL(z, cons(x, cons(y, xs))) -> DIVL(z, cons(y, cons(x, xs)))
   minus(0, y) -> 0
   divL(x, nil) -> x


----------------------------------------

(47) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   divL(x, cons(y, xs)) -> DIVL(div(x, y), xs)

Relative ADPs:

   div(0, s(y)) -> 0
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false
   minus(s(x), y) -> ifminus(le(s(x), y), s(x), y)
   ifminus(true, s(x), y) -> 0
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   le(0, y) -> true
   ifminus(false, s(x), y) -> s(minus(x, y))
   minus(0, y) -> 0
   divL(x, nil) -> x


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(DIV(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(DIVL(x_1, x_2)) = 3 + 2*x_1 + 3*x_2
   POL(IFMINUS(x_1, x_2, x_3)) = 2 + 3*x_1 + 3*x_1*x_2 + 3*x_1*x_2*x_3 + 3*x_1*x_3 + 3*x_2 + 3*x_2*x_3 + 2*x_3
   POL(LE(x_1, x_2)) = 2 + x_1 + 3*x_1*x_2 + 3*x_2
   POL(MINUS(x_1, x_2)) = 1 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(cons(x_1, x_2)) = 3 + x_2
   POL(div(x_1, x_2)) = 3 + x_1
   POL(divL(x_1, x_2)) = 3 + 2*x_1 + 3*x_2
   POL(false) = 0
   POL(ifminus(x_1, x_2, x_3)) = 2 + 2*x_2
   POL(le(x_1, x_2)) = 0
   POL(minus(x_1, x_2)) = 2 + 2*x_1
   POL(nil) = 3
   POL(s(x_1)) = 3
   POL(true) = 0

----------------------------------------

(48)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   div(0, s(y)) -> 0
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false
   minus(s(x), y) -> ifminus(le(s(x), y), s(x), y)
   ifminus(true, s(x), y) -> 0
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   le(0, y) -> true
   ifminus(false, s(x), y) -> s(minus(x, y))
   divL(z, cons(x, cons(y, xs))) -> DIVL(z, cons(y, cons(x, xs)))
   minus(0, y) -> 0
   divL(x, nil) -> x


----------------------------------------

(49) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(50)
YES
