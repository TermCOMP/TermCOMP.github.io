YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Z8GBP.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) RelADPP
        (6) RelADPCleverAfsProof [SOUND, 27 ms]
        (7) QDP
        (8) MRRProof [EQUIVALENT, 14 ms]
        (9) QDP
        (10) QDPOrderProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) PisEmptyProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) RelADPP
        (15) RelADPCleverAfsProof [SOUND, 29 ms]
        (16) QDP
        (17) MRRProof [EQUIVALENT, 14 ms]
        (18) QDP
        (19) PisEmptyProof [EQUIVALENT, 0 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   f(x, c(y)) -> f(x, s(f(y, y)))
   f(s(x), y) -> f(x, s(c(y)))

The relative TRS consists of the following S rules:

   rand(x) -> rand(s(x))
   rand(x) -> x


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   f(x, c(y)) -> F(x, s(f(y, y)))
   f(x, c(y)) -> f(x, s(F(y, y)))
   f(s(x), y) -> F(x, s(c(y)))

and relative ADPs:

   rand(x) -> RAND(s(x))
   rand(x) -> x


----------------------------------------

(3) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  2 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 2 subproblems.

----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Relative ADP Problem with
absolute ADPs:

   f(s(x), y) -> F(x, s(c(y)))

and relative ADPs:

   f(x, c(y)) -> f(x, s(f(y, y)))
   rand(x) -> rand(s(x))
   rand(x) -> x


----------------------------------------

(6) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:s_1 = 
c_1 = 
f_2 = 1
F_2 = 1
rand_1 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
F(x1, x2)  =  x1

s(x1)  =  s(x1)

c(x1)  =  x1

f(x1, x2)  =  f(x1)


Recursive path order with status [RPO].
Quasi-Precedence: f_1 > s_1

Status: s_1: multiset status
f_1: [1]


----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(s0(x)) -> F(x)

The TRS R consists of the following rules:

   f(x) -> f(x)
   rand0(x) -> rand0(s0(x))
   f(s0(x)) -> f(x)
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(8) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   rand0(x) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(F(x_1)) = 2*x_1
   POL(f(x_1)) = 2*x_1
   POL(rand0(x_1)) = 2 + 2*x_1
   POL(s0(x_1)) = x_1


----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(s0(x)) -> F(x)

The TRS R consists of the following rules:

   f(x) -> f(x)
   rand0(x) -> rand0(s0(x))
   f(s0(x)) -> f(x)

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(10) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   F(s0(x)) -> F(x)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
F(x1)  =  x1

s0(x1)  =  s0(x1)

f(x1)  =  f

rand0(x1)  =  rand0


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   s0_1=1
   f=1
   rand0=2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   f(x) -> f(x)
   rand0(x) -> rand0(s0(x))
   f(s0(x)) -> f(x)


----------------------------------------

(11)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   f(x) -> f(x)
   rand0(x) -> rand0(s0(x))
   f(s0(x)) -> f(x)

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Relative ADP Problem with
absolute ADPs:

   f(x, c(y)) -> f(x, s(F(y, y)))

and relative ADPs:

   f(x, c(y)) -> f(x, s(f(y, y)))
   rand(x) -> rand(s(x))
   f(s(x), y) -> f(x, s(c(y)))
   rand(x) -> x


----------------------------------------

(15) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:s_1 = 
c_1 = 
f_2 = 0, 1
F_2 = 0
rand_1 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
F(x1, x2)  =  F(x2)

c(x1)  =  c(x1)

f(x1, x2)  =  f

s(x1)  =  s(x1)


Recursive path order with status [RPO].
Quasi-Precedence: [F_1, c_1, f] > s_1

Status: F_1: multiset status
c_1: multiset status
f: []
s_1: multiset status


----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(c0(y)) -> F(y)

The TRS R consists of the following rules:

   f -> f
   rand0(x) -> rand0(s0(x))
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(17) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   F(c0(y)) -> F(y)


Used ordering: Polynomial interpretation [POLO]:

   POL(F(x_1)) = 2*x_1
   POL(c0(x_1)) = 2 + x_1
   POL(f) = 0
   POL(rand0(x_1)) = x_1
   POL(s0(x_1)) = x_1


----------------------------------------

(18)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   f -> f
   rand0(x) -> rand0(s0(x))
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(20)
YES
