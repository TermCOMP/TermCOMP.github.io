YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/FqYfU.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(4) RelADPP
(5) RelADPReductionPairProof [EQUIVALENT, 42 ms]
(6) RelADPP
(7) RelADPReductionPairProof [EQUIVALENT, 0 ms]
(8) RelADPP
(9) DAbsisEmptyProof [EQUIVALENT, 0 ms]
(10) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   f(a, g(y), z) -> f(b, g(y), g(y))
   f(b, g(y), z) -> f(a, y, z)
   a -> b

The relative TRS consists of the following S rules:

   f(x, y, z) -> f(x, y, g(z))


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   f(a, g(y), z) -> F(b, g(y), g(y))
   f(b, g(y), z) -> F(a, y, z)
   f(b, g(y), z) -> f(A, y, z)
   a -> b

and relative ADPs:

   f(x, y, z) -> F(x, y, g(z))


----------------------------------------

(3) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 1 subproblem.

----------------------------------------

(4)
Obligation:
Relative ADP Problem with
absolute ADPs:

   f(a, g(y), z) -> F(b, g(y), g(y))
   f(b, g(y), z) -> F(a, y, z)

and relative ADPs:

   a -> b
   f(x, y, z) -> F(x, y, g(z))
   f(b, g(y), z) -> f(a, y, z)


----------------------------------------

(5) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   f(a, g(y), z) -> F(b, g(y), g(y))

Relative ADPs:

   a -> b
   f(b, g(y), z) -> f(a, y, z)


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   f(b, g(y), z) -> F(a, y, z)

Relative ADPs:

   f(x, y, z) -> F(x, y, g(z))


Ordered with Polynomial interpretation [POLO]:

   POL(A) = 0
   POL(F(x_1, x_2, x_3)) = 3 + 3*x_1 + 3*x_2
   POL(a) = 3
   POL(b) = 2
   POL(f(x_1, x_2, x_3)) = x_1 + 2*x_2
   POL(g(x_1)) = 1 + 3*x_1

----------------------------------------

(6)
Obligation:
Relative ADP Problem with
absolute ADPs:

   f(b, g(y), z) -> F(a, y, z)

and relative ADPs:

   a -> b
   f(x, y, z) -> F(x, y, g(z))
   f(a, g(y), z) -> f(b, g(y), g(y))
   f(b, g(y), z) -> f(a, y, z)


----------------------------------------

(7) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   f(b, g(y), z) -> F(a, y, z)

Relative ADPs:

   a -> b
   f(a, g(y), z) -> f(b, g(y), g(y))
   f(b, g(y), z) -> f(a, y, z)


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A) = 0
   POL(F(x_1, x_2, x_3)) = 1 + x_1 + 3*x_2
   POL(a) = 3
   POL(b) = 3
   POL(f(x_1, x_2, x_3)) = 2*x_1 + 2*x_2
   POL(g(x_1)) = 1 + 3*x_1

----------------------------------------

(8)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   a -> b
   f(x, y, z) -> F(x, y, g(z))
   f(b, g(y), z) -> f(a, y, z)
   f(a, g(y), z) -> f(b, g(y), g(y))


----------------------------------------

(9) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(10)
YES
