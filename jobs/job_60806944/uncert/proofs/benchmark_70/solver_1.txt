YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/2Hxxe.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) RelADPP
        (6) RelADPCleverAfsProof [SOUND, 28 ms]
        (7) QDP
        (8) MRRProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) MRRProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPOrderProof [EQUIVALENT, 10 ms]
        (13) QDP
        (14) PisEmptyProof [EQUIVALENT, 0 ms]
        (15) YES
    (16) RelADPP
        (17) RelADPCleverAfsProof [SOUND, 14 ms]
        (18) QDP
        (19) MRRProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) MRRProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) QDPOrderProof [EQUIVALENT, 5 ms]
        (24) QDP
        (25) PisEmptyProof [EQUIVALENT, 0 ms]
        (26) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   half(0) -> 0
   half(s(s(x))) -> s(half(x))
   log(s(0)) -> 0
   log(s(s(x))) -> s(log(s(half(x))))

The relative TRS consists of the following S rules:

   rand(x) -> rand(s(x))
   rand(x) -> x


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   half(0) -> 0
   half(s(s(x))) -> s(HALF(x))
   log(s(0)) -> 0
   log(s(s(x))) -> s(LOG(s(half(x))))
   log(s(s(x))) -> s(log(s(HALF(x))))

and relative ADPs:

   rand(x) -> RAND(s(x))
   rand(x) -> x


----------------------------------------

(3) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  2 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 2 subproblems.

----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Relative ADP Problem with
absolute ADPs:

   half(s(s(x))) -> s(HALF(x))

and relative ADPs:

   log(s(0)) -> 0
   half(0) -> 0
   log(s(s(x))) -> s(log(s(half(x))))
   rand(x) -> rand(s(x))
   rand(x) -> x


----------------------------------------

(6) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:s_1 = 
half_1 = 
log_1 = 
0 = 
rand_1 = 
HALF_1 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
HALF(x1)  =  x1

s(x1)  =  s(x1)


Recursive path order with status [RPO].
Quasi-Precedence: trivial

Status: s_1: multiset status


----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   HALF0(s0(s0(x))) -> HALF0(x)

The TRS R consists of the following rules:

   log0(s0(00)) -> 00
   half0(s0(s0(x))) -> s0(half0(x))
   half0(00) -> 00
   log0(s0(s0(x))) -> s0(log0(s0(half0(x))))
   rand0(x) -> rand0(s0(x))
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(8) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   log0(s0(00)) -> 00

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(HALF0(x_1)) = 2*x_1
   POL(half0(x_1)) = x_1
   POL(log0(x_1)) = 1 + 2*x_1
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1


----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   HALF0(s0(s0(x))) -> HALF0(x)

The TRS R consists of the following rules:

   half0(s0(s0(x))) -> s0(half0(x))
   half0(00) -> 00
   log0(s0(s0(x))) -> s0(log0(s0(half0(x))))
   rand0(x) -> rand0(s0(x))
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(10) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   rand0(x) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 1
   POL(HALF0(x_1)) = 2*x_1
   POL(half0(x_1)) = x_1
   POL(log0(x_1)) = 1 + 2*x_1
   POL(rand0(x_1)) = 1 + 2*x_1
   POL(s0(x_1)) = x_1


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   HALF0(s0(s0(x))) -> HALF0(x)

The TRS R consists of the following rules:

   half0(s0(s0(x))) -> s0(half0(x))
   half0(00) -> 00
   log0(s0(s0(x))) -> s0(log0(s0(half0(x))))
   rand0(x) -> rand0(s0(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   HALF0(s0(s0(x))) -> HALF0(x)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( half0_1(x_1) ) = x_1
POL( s0_1(x_1) ) = 2x_1 + 1
POL( 00 ) = 2
POL( log0_1(x_1) ) = max{0, 2x_1 - 2}
POL( rand0_1(x_1) ) = 2
POL( HALF0_1(x_1) ) = 2x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   half0(s0(s0(x))) -> s0(half0(x))
   half0(00) -> 00
   log0(s0(s0(x))) -> s0(log0(s0(half0(x))))
   rand0(x) -> rand0(s0(x))


----------------------------------------

(13)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   half0(s0(s0(x))) -> s0(half0(x))
   half0(00) -> 00
   log0(s0(s0(x))) -> s0(log0(s0(half0(x))))
   rand0(x) -> rand0(s0(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(14) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
Relative ADP Problem with
absolute ADPs:

   log(s(s(x))) -> s(LOG(s(half(x))))

and relative ADPs:

   log(s(0)) -> 0
   half(s(s(x))) -> s(half(x))
   half(0) -> 0
   log(s(s(x))) -> s(log(s(half(x))))
   rand(x) -> rand(s(x))
   rand(x) -> x


----------------------------------------

(17) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:s_1 = 
half_1 = 
log_1 = 
0 = 
rand_1 = 
LOG_1 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
LOG(x1)  =  x1

s(x1)  =  s(x1)

half(x1)  =  half(x1)

0  =  0


Recursive path order with status [RPO].
Quasi-Precedence: s_1 > [half_1, 0]

Status: s_1: multiset status
half_1: multiset status
0: multiset status


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOG0(s0(s0(x))) -> LOG0(s0(half0(x)))

The TRS R consists of the following rules:

   log0(s0(00)) -> 00
   half0(s0(s0(x))) -> s0(half0(x))
   half0(00) -> 00
   log0(s0(s0(x))) -> s0(log0(s0(half0(x))))
   rand0(x) -> rand0(s0(x))
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   log0(s0(00)) -> 00

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 1
   POL(LOG0(x_1)) = 2*x_1
   POL(half0(x_1)) = x_1
   POL(log0(x_1)) = 2 + 2*x_1
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOG0(s0(s0(x))) -> LOG0(s0(half0(x)))

The TRS R consists of the following rules:

   half0(s0(s0(x))) -> s0(half0(x))
   half0(00) -> 00
   log0(s0(s0(x))) -> s0(log0(s0(half0(x))))
   rand0(x) -> rand0(s0(x))
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   rand0(x) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 2
   POL(LOG0(x_1)) = x_1
   POL(half0(x_1)) = x_1
   POL(log0(x_1)) = 2 + 2*x_1
   POL(rand0(x_1)) = 1 + 2*x_1
   POL(s0(x_1)) = x_1


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOG0(s0(s0(x))) -> LOG0(s0(half0(x)))

The TRS R consists of the following rules:

   half0(s0(s0(x))) -> s0(half0(x))
   half0(00) -> 00
   log0(s0(s0(x))) -> s0(log0(s0(half0(x))))
   rand0(x) -> rand0(s0(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(23) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   LOG0(s0(s0(x))) -> LOG0(s0(half0(x)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
LOG0(x1)  =  LOG0(x1)

s0(x1)  =  s0(x1)

half0(x1)  =  x1

00  =  00

log0(x1)  =  log0(x1)

rand0(x1)  =  rand0


Recursive path order with status [RPO].
Quasi-Precedence: [LOG0_1, s0_1, log0_1, rand0]

Status: LOG0_1: [1]
s0_1: multiset status
00: multiset status
log0_1: multiset status
rand0: []


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   half0(s0(s0(x))) -> s0(half0(x))
   half0(00) -> 00
   log0(s0(s0(x))) -> s0(log0(s0(half0(x))))
   rand0(x) -> rand0(s0(x))


----------------------------------------

(24)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   half0(s0(s0(x))) -> s0(half0(x))
   half0(00) -> 00
   log0(s0(s0(x))) -> s0(log0(s0(half0(x))))
   rand0(x) -> rand0(s0(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(25) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(26)
YES
