YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/C22jr.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) RelADPP
        (6) RelADPCleverAfsProof [SOUND, 35 ms]
        (7) QDP
        (8) MRRProof [EQUIVALENT, 7 ms]
        (9) QDP
        (10) MRRProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) MRRProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) MRRProof [EQUIVALENT, 3 ms]
        (15) QDP
        (16) PisEmptyProof [EQUIVALENT, 0 ms]
        (17) YES
    (18) RelADPP
        (19) RelADPCleverAfsProof [SOUND, 35 ms]
        (20) QDP
        (21) MRRProof [EQUIVALENT, 6 ms]
        (22) QDP
        (23) MRRProof [EQUIVALENT, 0 ms]
        (24) QDP
        (25) MRRProof [EQUIVALENT, 5 ms]
        (26) QDP
        (27) MRRProof [EQUIVALENT, 0 ms]
        (28) QDP
        (29) DependencyGraphProof [EQUIVALENT, 0 ms]
        (30) TRUE


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   rev(nil) -> nil
   rev(cons(x, l)) -> cons(rev1(x, l), rev2(x, l))
   rev1(0, nil) -> 0
   rev1(s(x), nil) -> s(x)
   rev1(x, cons(y, l)) -> rev1(y, l)
   rev2(x, nil) -> nil
   rev2(x, cons(y, l)) -> rev(cons(x, rev2(y, l)))

The relative TRS consists of the following S rules:

   rand(x) -> rand(s(x))
   rand(x) -> x


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   rev(nil) -> nil
   rev(cons(x, l)) -> cons(REV1(x, l), rev2(x, l))
   rev(cons(x, l)) -> cons(rev1(x, l), REV2(x, l))
   rev1(0, nil) -> 0
   rev1(s(x), nil) -> s(x)
   rev1(x, cons(y, l)) -> REV1(y, l)
   rev2(x, nil) -> nil
   rev2(x, cons(y, l)) -> REV(cons(x, rev2(y, l)))
   rev2(x, cons(y, l)) -> rev(cons(x, REV2(y, l)))

and relative ADPs:

   rand(x) -> RAND(s(x))
   rand(x) -> x


----------------------------------------

(3) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  2 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 2 subproblems.

----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Relative ADP Problem with
absolute ADPs:

   rev1(x, cons(y, l)) -> REV1(y, l)

and relative ADPs:

   rev2(x, cons(y, l)) -> rev(cons(x, rev2(y, l)))
   rev1(0, nil) -> 0
   rev(nil) -> nil
   rev(cons(x, l)) -> cons(rev1(x, l), rev2(x, l))
   rand(x) -> rand(s(x))
   rev1(s(x), nil) -> s(x)
   rev2(x, nil) -> nil
   rand(x) -> x


----------------------------------------

(6) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:s_1 = 0
0 = 
cons_2 = 0
rev2_2 = 0
rev1_2 = 0, 1
rev_1 = 
rand_1 = 
REV1_2 = 0
nil = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
REV1(x1, x2)  =  REV1(x2)

cons(x1, x2)  =  cons(x2)

rev(x1)  =  x1

rev1(x1, x2)  =  rev1

rev2(x1, x2)  =  x2

0  =  0

nil  =  nil

s(x1)  =  s


Recursive path order with status [RPO].
Quasi-Precedence: [REV1_1, cons_1] > [rev1, 0, s]
nil > [rev1, 0, s]

Status: REV1_1: multiset status
cons_1: multiset status
rev1: multiset status
0: multiset status
nil: multiset status
s: multiset status


----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REV1(cons(l)) -> REV1(l)

The TRS R consists of the following rules:

   rev2(cons(l)) -> rev0(cons(rev2(l)))
   rev1 -> 00
   rev0(nil0) -> nil0
   rev0(cons(l)) -> cons(rev2(l))
   rev1 -> rev1
   rand0(x) -> rand0(s)
   rev1 -> s
   rev2(nil0) -> nil0
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(8) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   rev1 -> s

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 2
   POL(REV1(x_1)) = 2*x_1
   POL(cons(x_1)) = x_1
   POL(nil0) = 0
   POL(rand0(x_1)) = x_1
   POL(rev0(x_1)) = x_1
   POL(rev1) = 2
   POL(rev2(x_1)) = x_1
   POL(s) = 0


----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REV1(cons(l)) -> REV1(l)

The TRS R consists of the following rules:

   rev2(cons(l)) -> rev0(cons(rev2(l)))
   rev1 -> 00
   rev0(nil0) -> nil0
   rev0(cons(l)) -> cons(rev2(l))
   rev1 -> rev1
   rand0(x) -> rand0(s)
   rev2(nil0) -> nil0
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(10) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   rand0(x) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 2
   POL(REV1(x_1)) = 2*x_1
   POL(cons(x_1)) = x_1
   POL(nil0) = 0
   POL(rand0(x_1)) = 1 + x_1
   POL(rev0(x_1)) = x_1
   POL(rev1) = 2
   POL(rev2(x_1)) = x_1
   POL(s) = 0


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REV1(cons(l)) -> REV1(l)

The TRS R consists of the following rules:

   rev2(cons(l)) -> rev0(cons(rev2(l)))
   rev1 -> 00
   rev0(nil0) -> nil0
   rev0(cons(l)) -> cons(rev2(l))
   rev1 -> rev1
   rand0(x) -> rand0(s)
   rev2(nil0) -> nil0

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   rev1 -> 00

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(REV1(x_1)) = 2*x_1
   POL(cons(x_1)) = x_1
   POL(nil0) = 0
   POL(rand0(x_1)) = x_1
   POL(rev0(x_1)) = x_1
   POL(rev1) = 1
   POL(rev2(x_1)) = x_1
   POL(s) = 0


----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REV1(cons(l)) -> REV1(l)

The TRS R consists of the following rules:

   rev2(cons(l)) -> rev0(cons(rev2(l)))
   rev0(nil0) -> nil0
   rev0(cons(l)) -> cons(rev2(l))
   rev1 -> rev1
   rand0(x) -> rand0(s)
   rev2(nil0) -> nil0

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(14) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   REV1(cons(l)) -> REV1(l)


Used ordering: Polynomial interpretation [POLO]:

   POL(REV1(x_1)) = x_1
   POL(cons(x_1)) = 1 + x_1
   POL(nil0) = 0
   POL(rand0(x_1)) = x_1
   POL(rev0(x_1)) = x_1
   POL(rev1) = 0
   POL(rev2(x_1)) = x_1
   POL(s) = 0


----------------------------------------

(15)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   rev2(cons(l)) -> rev0(cons(rev2(l)))
   rev0(nil0) -> nil0
   rev0(cons(l)) -> cons(rev2(l))
   rev1 -> rev1
   rand0(x) -> rand0(s)
   rev2(nil0) -> nil0

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(16) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(17)
YES

----------------------------------------

(18)
Obligation:
Relative ADP Problem with
absolute ADPs:

   rev(cons(x, l)) -> cons(rev1(x, l), REV2(x, l))
   rev2(x, cons(y, l)) -> rev(cons(x, REV2(y, l)))
   rev2(x, cons(y, l)) -> REV(cons(x, rev2(y, l)))

and relative ADPs:

   rev1(0, nil) -> 0
   rev(nil) -> nil
   rev(cons(x, l)) -> cons(rev1(x, l), rev2(x, l))
   rev1(x, cons(y, l)) -> rev1(y, l)
   rand(x) -> rand(s(x))
   rev1(s(x), nil) -> s(x)
   rev2(x, nil) -> nil
   rand(x) -> x


----------------------------------------

(19) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:s_1 = 0
REV_1 = 
REV2_2 = 0
0 = 
cons_2 = 0
rev2_2 = 0
rev1_2 = 0
rev_1 = 
rand_1 = 
nil = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
REV2(x1, x2)  =  REV2(x2)

cons(x1, x2)  =  cons(x2)

REV(x1)  =  x1

rev2(x1, x2)  =  x2

rev(x1)  =  x1

nil  =  nil

rev1(x1, x2)  =  x2

0  =  0

s(x1)  =  s


Recursive path order with status [RPO].
Quasi-Precedence: [REV2_1, cons_1]
[nil, s] > 0

Status: REV2_1: [1]
cons_1: [1]
nil: multiset status
0: multiset status
s: multiset status


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REV2(cons(l)) -> REV2(l)
   REV0(cons(l)) -> REV2(l)
   REV2(cons(l)) -> REV0(cons(rev2(l)))

The TRS R consists of the following rules:

   rev2(cons(l)) -> rev0(cons(rev2(l)))
   rev1(nil0) -> 00
   rev0(nil0) -> nil0
   rev0(cons(l)) -> cons(rev2(l))
   rev1(cons(l)) -> rev1(l)
   rand0(x) -> rand0(s)
   rev1(nil0) -> s
   rev2(nil0) -> nil0
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   rev1(nil0) -> s

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 2
   POL(REV0(x_1)) = x_1
   POL(REV2(x_1)) = x_1
   POL(cons(x_1)) = x_1
   POL(nil0) = 0
   POL(rand0(x_1)) = x_1
   POL(rev0(x_1)) = x_1
   POL(rev1(x_1)) = 2 + 2*x_1
   POL(rev2(x_1)) = x_1
   POL(s) = 0


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REV2(cons(l)) -> REV2(l)
   REV0(cons(l)) -> REV2(l)
   REV2(cons(l)) -> REV0(cons(rev2(l)))

The TRS R consists of the following rules:

   rev2(cons(l)) -> rev0(cons(rev2(l)))
   rev1(nil0) -> 00
   rev0(nil0) -> nil0
   rev0(cons(l)) -> cons(rev2(l))
   rev1(cons(l)) -> rev1(l)
   rand0(x) -> rand0(s)
   rev2(nil0) -> nil0
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(23) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   rev1(nil0) -> 00

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(REV0(x_1)) = x_1
   POL(REV2(x_1)) = x_1
   POL(cons(x_1)) = x_1
   POL(nil0) = 0
   POL(rand0(x_1)) = x_1
   POL(rev0(x_1)) = x_1
   POL(rev1(x_1)) = 1 + 2*x_1
   POL(rev2(x_1)) = x_1
   POL(s) = 0


----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REV2(cons(l)) -> REV2(l)
   REV0(cons(l)) -> REV2(l)
   REV2(cons(l)) -> REV0(cons(rev2(l)))

The TRS R consists of the following rules:

   rev2(cons(l)) -> rev0(cons(rev2(l)))
   rev0(nil0) -> nil0
   rev0(cons(l)) -> cons(rev2(l))
   rev1(cons(l)) -> rev1(l)
   rand0(x) -> rand0(s)
   rev2(nil0) -> nil0
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(25) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   rand0(x) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(REV0(x_1)) = x_1
   POL(REV2(x_1)) = x_1
   POL(cons(x_1)) = x_1
   POL(nil0) = 0
   POL(rand0(x_1)) = 1 + x_1
   POL(rev0(x_1)) = x_1
   POL(rev1(x_1)) = 2*x_1
   POL(rev2(x_1)) = x_1
   POL(s) = 0


----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REV2(cons(l)) -> REV2(l)
   REV0(cons(l)) -> REV2(l)
   REV2(cons(l)) -> REV0(cons(rev2(l)))

The TRS R consists of the following rules:

   rev2(cons(l)) -> rev0(cons(rev2(l)))
   rev0(nil0) -> nil0
   rev0(cons(l)) -> cons(rev2(l))
   rev1(cons(l)) -> rev1(l)
   rand0(x) -> rand0(s)
   rev2(nil0) -> nil0

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(27) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   REV2(cons(l)) -> REV2(l)
   REV0(cons(l)) -> REV2(l)

Strictly oriented rules of the TRS R:

   rev1(cons(l)) -> rev1(l)

Used ordering: Polynomial interpretation [POLO]:

   POL(REV0(x_1)) = x_1
   POL(REV2(x_1)) = x_1
   POL(cons(x_1)) = 1 + x_1
   POL(nil0) = 0
   POL(rand0(x_1)) = x_1
   POL(rev0(x_1)) = x_1
   POL(rev1(x_1)) = 2*x_1
   POL(rev2(x_1)) = x_1
   POL(s) = 0


----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REV2(cons(l)) -> REV0(cons(rev2(l)))

The TRS R consists of the following rules:

   rev2(cons(l)) -> rev0(cons(rev2(l)))
   rev0(nil0) -> nil0
   rev0(cons(l)) -> cons(rev2(l))
   rand0(x) -> rand0(s)
   rev2(nil0) -> nil0

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(29) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(30)
TRUE
