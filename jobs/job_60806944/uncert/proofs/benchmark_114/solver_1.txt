YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Xc013.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) RelADPP
        (6) RelADPCleverAfsProof [SOUND, 8 ms]
        (7) QDP
        (8) MRRProof [EQUIVALENT, 3 ms]
        (9) QDP
        (10) MRRProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPOrderProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) PisEmptyProof [EQUIVALENT, 0 ms]
        (15) YES
    (16) RelADPP
        (17) RelADPCleverAfsProof [SOUND, 11 ms]
        (18) QDP
        (19) MRRProof [EQUIVALENT, 7 ms]
        (20) QDP
        (21) PisEmptyProof [EQUIVALENT, 0 ms]
        (22) YES
    (23) RelADPP
        (24) RelADPReductionPairProof [EQUIVALENT, 17 ms]
        (25) RelADPP
        (26) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (27) YES
    (28) RelADPP
        (29) RelADPReductionPairProof [EQUIVALENT, 15 ms]
        (30) RelADPP
        (31) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (32) YES
    (33) RelADPP
        (34) RelADPReductionPairProof [EQUIVALENT, 10 ms]
        (35) RelADPP
        (36) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (37) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   l(m(x)) -> m(l(x))
   m(r(x)) -> r(m(x))
   f(m(x), y) -> f(x, m(y))

The relative TRS consists of the following S rules:

   f(x, y) -> f(x, r(y))
   b -> l(b)


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   l(m(x)) -> M(l(x))
   l(m(x)) -> m(L(x))
   m(r(x)) -> r(M(x))
   f(m(x), y) -> F(x, m(y))
   f(m(x), y) -> f(x, M(y))

and relative ADPs:

   f(x, y) -> F(x, r(y))
   b -> L(B)


----------------------------------------

(3) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  3 SCCs with nodes from P_abs,
  2 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Relative ADP Problem with
absolute ADPs:

   m(r(x)) -> r(M(x))

and relative ADPs:

   f(m(x), y) -> f(x, m(y))
   f(x, y) -> f(x, r(y))
   l(m(x)) -> m(l(x))
   b -> l(b)


----------------------------------------

(6) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:r_1 = 
M_1 = 
b = 
m_1 = 
f_2 = 
l_1 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
M(x1)  =  x1

r(x1)  =  r(x1)


Recursive path order with status [RPO].
Quasi-Precedence: trivial

Status: r_1: [1]


----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   M0(r0(x)) -> M0(x)

The TRS R consists of the following rules:

   m0(r0(x)) -> r0(m0(x))
   f0(m0(x), y) -> f0(x, m0(y))
   f0(x, y) -> f0(x, r0(y))
   l0(m0(x)) -> m0(l0(x))
   b0 -> l0(b0)

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(8) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   l0(m0(x)) -> m0(l0(x))

Used ordering: Polynomial interpretation [POLO]:

   POL(M0(x_1)) = 2*x_1
   POL(b0) = 0
   POL(f0(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(l0(x_1)) = 2*x_1
   POL(m0(x_1)) = 1 + x_1
   POL(r0(x_1)) = x_1


----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   M0(r0(x)) -> M0(x)

The TRS R consists of the following rules:

   m0(r0(x)) -> r0(m0(x))
   f0(m0(x), y) -> f0(x, m0(y))
   f0(x, y) -> f0(x, r0(y))
   b0 -> l0(b0)

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(10) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   f0(m0(x), y) -> f0(x, m0(y))

Used ordering: Polynomial interpretation [POLO]:

   POL(M0(x_1)) = 2*x_1
   POL(b0) = 0
   POL(f0(x_1, x_2)) = 2*x_1 + x_2
   POL(l0(x_1)) = x_1
   POL(m0(x_1)) = 1 + x_1
   POL(r0(x_1)) = x_1


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   M0(r0(x)) -> M0(x)

The TRS R consists of the following rules:

   m0(r0(x)) -> r0(m0(x))
   f0(x, y) -> f0(x, r0(y))
   b0 -> l0(b0)

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   M0(r0(x)) -> M0(x)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
M0(x1)  =  x1

r0(x1)  =  r0(x1)

m0(x1)  =  m0(x1)

f0(x1, x2)  =  x1

b0  =  b0

l0(x1)  =  l0


Recursive path order with status [RPO].
Quasi-Precedence: [r0_1, m0_1]
b0 > l0

Status: r0_1: multiset status
m0_1: multiset status
b0: multiset status
l0: []


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   m0(r0(x)) -> r0(m0(x))
   f0(x, y) -> f0(x, r0(y))
   b0 -> l0(b0)


----------------------------------------

(13)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   m0(r0(x)) -> r0(m0(x))
   f0(x, y) -> f0(x, r0(y))
   b0 -> l0(b0)

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(14) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
Relative ADP Problem with
absolute ADPs:

   l(m(x)) -> m(L(x))

and relative ADPs:

   m(r(x)) -> r(m(x))
   f(m(x), y) -> f(x, m(y))
   f(x, y) -> f(x, r(y))
   l(m(x)) -> m(l(x))
   b -> l(b)


----------------------------------------

(17) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:L_1 = 
r_1 = 
b = 
m_1 = 
f_2 = 
l_1 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
L(x1)  =  x1

m(x1)  =  m(x1)


Recursive path order with status [RPO].
Quasi-Precedence: trivial

Status: m_1: [1]


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   L0(m0(x)) -> L0(x)

The TRS R consists of the following rules:

   m0(r0(x)) -> r0(m0(x))
   f0(m0(x), y) -> f0(x, m0(y))
   f0(x, y) -> f0(x, r0(y))
   l0(m0(x)) -> m0(l0(x))
   b0 -> l0(b0)

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   L0(m0(x)) -> L0(x)

Strictly oriented rules of the TRS R:

   l0(m0(x)) -> m0(l0(x))

Used ordering: Polynomial interpretation [POLO]:

   POL(L0(x_1)) = 2*x_1
   POL(b0) = 0
   POL(f0(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(l0(x_1)) = 2*x_1
   POL(m0(x_1)) = 1 + x_1
   POL(r0(x_1)) = x_1


----------------------------------------

(20)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   m0(r0(x)) -> r0(m0(x))
   f0(m0(x), y) -> f0(x, m0(y))
   f0(x, y) -> f0(x, r0(y))
   b0 -> l0(b0)

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(22)
YES

----------------------------------------

(23)
Obligation:
Relative ADP Problem with
absolute ADPs:

   f(m(x), y) -> F(x, m(y))

and relative ADPs:

   f(x, y) -> F(x, r(y))
   m(r(x)) -> r(m(x))
   f(m(x), y) -> f(x, m(y))
   l(m(x)) -> m(l(x))
   b -> l(b)


----------------------------------------

(24) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   f(m(x), y) -> F(x, m(y))

Relative ADPs:

   m(r(x)) -> r(m(x))
   f(m(x), y) -> f(x, m(y))
   l(m(x)) -> m(l(x))
   b -> l(b)


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(B) = 0
   POL(F(x_1, x_2)) = 3 + x_1
   POL(L(x_1)) = 3 + 3*x_1 + 3*x_1^2
   POL(M(x_1)) = 3 + 3*x_1 + 3*x_1^2
   POL(b) = 0
   POL(f(x_1, x_2)) = 3*x_1
   POL(l(x_1)) = x_1
   POL(m(x_1)) = 2 + 2*x_1
   POL(r(x_1)) = 0

----------------------------------------

(25)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   f(x, y) -> F(x, r(y))
   f(m(x), y) -> f(x, m(y))
   m(r(x)) -> r(m(x))
   l(m(x)) -> m(l(x))
   b -> l(b)


----------------------------------------

(26) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(27)
YES

----------------------------------------

(28)
Obligation:
Relative ADP Problem with
absolute ADPs:

   l(m(x)) -> m(L(x))

and relative ADPs:

   b -> L(B)
   m(r(x)) -> r(m(x))
   f(m(x), y) -> f(x, m(y))
   f(x, y) -> f(x, r(y))
   l(m(x)) -> m(l(x))


----------------------------------------

(29) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   l(m(x)) -> m(L(x))

Relative ADPs:

   m(r(x)) -> r(m(x))
   f(m(x), y) -> f(x, m(y))
   f(x, y) -> f(x, r(y))
   l(m(x)) -> m(l(x))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(B) = 0
   POL(F(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + x_2
   POL(L(x_1)) = 3*x_1
   POL(M(x_1)) = 3 + 3*x_1 + 3*x_1^2
   POL(b) = 0
   POL(f(x_1, x_2)) = 3*x_1
   POL(l(x_1)) = 2*x_1
   POL(m(x_1)) = 2 + 2*x_1
   POL(r(x_1)) = 0

----------------------------------------

(30)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   b -> L(B)
   m(r(x)) -> r(m(x))
   f(m(x), y) -> f(x, m(y))
   f(x, y) -> f(x, r(y))
   l(m(x)) -> m(l(x))


----------------------------------------

(31) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(32)
YES

----------------------------------------

(33)
Obligation:
Relative ADP Problem with
absolute ADPs:

   l(m(x)) -> M(l(x))

and relative ADPs:

   b -> L(B)
   m(r(x)) -> r(m(x))
   f(m(x), y) -> f(x, m(y))
   f(x, y) -> f(x, r(y))
   l(m(x)) -> m(l(x))


----------------------------------------

(34) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   l(m(x)) -> M(l(x))

Relative ADPs:

   m(r(x)) -> r(m(x))
   f(m(x), y) -> f(x, m(y))
   f(x, y) -> f(x, r(y))
   l(m(x)) -> m(l(x))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(B) = 0
   POL(F(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + x_2
   POL(L(x_1)) = 2*x_1
   POL(M(x_1)) = 2
   POL(b) = 0
   POL(f(x_1, x_2)) = 3*x_1
   POL(l(x_1)) = 2*x_1
   POL(m(x_1)) = 2 + x_1
   POL(r(x_1)) = 0

----------------------------------------

(35)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   b -> L(B)
   m(r(x)) -> r(m(x))
   f(m(x), y) -> f(x, m(y))
   f(x, y) -> f(x, r(y))
   l(m(x)) -> m(l(x))


----------------------------------------

(36) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(37)
YES
