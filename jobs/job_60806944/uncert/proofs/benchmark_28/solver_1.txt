YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/n8fHE.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) RelADPP
        (6) RelADPCleverAfsProof [SOUND, 68 ms]
        (7) QDP
        (8) MRRProof [EQUIVALENT, 7 ms]
        (9) QDP
        (10) PisEmptyProof [EQUIVALENT, 0 ms]
        (11) YES
    (12) RelADPP
        (13) RelADPCleverAfsProof [SOUND, 73 ms]
        (14) QDP
        (15) MRRProof [EQUIVALENT, 7 ms]
        (16) QDP
        (17) PisEmptyProof [EQUIVALENT, 0 ms]
        (18) YES
    (19) RelADPP
        (20) RelADPReductionPairProof [EQUIVALENT, 87 ms]
        (21) RelADPP
        (22) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (23) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   remove(nil, x) -> nil
   remove(cons(x, xs), 0) -> cons(x, xs)
   remove(cons(x, xs), s(y)) -> remove(xs, y)
   first(nil, x) -> nil
   first(cons(x, xs), 0) -> nil
   first(cons(x, xs), s(y)) -> cons(x, first(xs, y))
   sublist(nil, x) -> nil
   sublist(cons(x, xs), 0) -> nil
   sublist(cons(x, xs), s(y)) -> cons(cons(x, first(xs, y)), sublist(remove(xs, y), s(y)))

The relative TRS consists of the following S rules:

   sublist(cons(x, cons(y, xs)), z) -> sublist(cons(y, cons(x, xs)), z)


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   remove(nil, x) -> nil
   remove(cons(x, xs), 0) -> cons(x, xs)
   remove(cons(x, xs), s(y)) -> REMOVE(xs, y)
   first(nil, x) -> nil
   first(cons(x, xs), 0) -> nil
   first(cons(x, xs), s(y)) -> cons(x, FIRST(xs, y))
   sublist(nil, x) -> nil
   sublist(cons(x, xs), 0) -> nil
   sublist(cons(x, xs), s(y)) -> cons(cons(x, FIRST(xs, y)), sublist(remove(xs, y), s(y)))
   sublist(cons(x, xs), s(y)) -> cons(cons(x, first(xs, y)), SUBLIST(remove(xs, y), s(y)))
   sublist(cons(x, xs), s(y)) -> cons(cons(x, first(xs, y)), sublist(REMOVE(xs, y), s(y)))

and relative ADPs:

   sublist(cons(x, cons(y, xs)), z) -> SUBLIST(cons(y, cons(x, xs)), z)


----------------------------------------

(3) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  3 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Relative ADP Problem with
absolute ADPs:

   first(cons(x, xs), s(y)) -> cons(x, FIRST(xs, y))

and relative ADPs:

   remove(cons(x, xs), 0) -> cons(x, xs)
   sublist(cons(x, xs), s(y)) -> cons(cons(x, first(xs, y)), sublist(remove(xs, y), s(y)))
   first(nil, x) -> nil
   remove(nil, x) -> nil
   sublist(nil, x) -> nil
   sublist(cons(x, xs), 0) -> nil
   sublist(cons(x, cons(y, xs)), z) -> sublist(cons(y, cons(x, xs)), z)
   remove(cons(x, xs), s(y)) -> remove(xs, y)
   first(cons(x, xs), 0) -> nil


----------------------------------------

(6) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:s_1 = 
FIRST_2 = 0
0 = 
cons_2 = 0, 1
remove_2 = 0
first_2 = 1
sublist_2 = 1
nil = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
FIRST(x1, x2)  =  FIRST(x2)

cons(x1, x2)  =  cons

s(x1)  =  s(x1)

sublist(x1, x2)  =  sublist(x1)

first(x1, x2)  =  first(x1)

remove(x1, x2)  =  x2

0  =  0

nil  =  nil


Recursive path order with status [RPO].
Quasi-Precedence: sublist_1 > [cons, first_1] > [FIRST_1, s_1] > nil
0 > [cons, first_1] > [FIRST_1, s_1] > nil

Status: FIRST_1: multiset status
cons: multiset status
s_1: multiset status
sublist_1: [1]
first_1: multiset status
0: multiset status
nil: multiset status


----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FIRST(s0(y)) -> FIRST(y)

The TRS R consists of the following rules:

   remove(00) -> cons
   sublist(cons) -> cons
   first(nil0) -> nil0
   remove(x) -> nil0
   sublist(nil0) -> nil0
   sublist(cons) -> nil0
   sublist(cons) -> sublist(cons)
   first(cons) -> cons
   remove(s0(y)) -> remove(y)
   first(cons) -> nil0

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(8) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   FIRST(s0(y)) -> FIRST(y)

Strictly oriented rules of the TRS R:

   remove(00) -> cons
   remove(x) -> nil0
   remove(s0(y)) -> remove(y)

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(FIRST(x_1)) = x_1
   POL(cons) = 0
   POL(first(x_1)) = x_1
   POL(nil0) = 0
   POL(remove(x_1)) = 1 + 2*x_1
   POL(s0(x_1)) = 2 + 2*x_1
   POL(sublist(x_1)) = x_1


----------------------------------------

(9)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   sublist(cons) -> cons
   first(nil0) -> nil0
   sublist(nil0) -> nil0
   sublist(cons) -> nil0
   sublist(cons) -> sublist(cons)
   first(cons) -> cons
   first(cons) -> nil0

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(10) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(11)
YES

----------------------------------------

(12)
Obligation:
Relative ADP Problem with
absolute ADPs:

   remove(cons(x, xs), s(y)) -> REMOVE(xs, y)

and relative ADPs:

   remove(cons(x, xs), 0) -> cons(x, xs)
   sublist(cons(x, xs), s(y)) -> cons(cons(x, first(xs, y)), sublist(remove(xs, y), s(y)))
   first(nil, x) -> nil
   remove(nil, x) -> nil
   sublist(nil, x) -> nil
   sublist(cons(x, xs), 0) -> nil
   sublist(cons(x, cons(y, xs)), z) -> sublist(cons(y, cons(x, xs)), z)
   first(cons(x, xs), s(y)) -> cons(x, first(xs, y))
   first(cons(x, xs), 0) -> nil


----------------------------------------

(13) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:s_1 = 
REMOVE_2 = 0
0 = 
remove_2 = 0
cons_2 = 0, 1
first_2 = 1
sublist_2 = 1
nil = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
REMOVE(x1, x2)  =  REMOVE(x2)

cons(x1, x2)  =  cons

s(x1)  =  s(x1)

sublist(x1, x2)  =  sublist(x1)

first(x1, x2)  =  first(x1)

remove(x1, x2)  =  x2

0  =  0

nil  =  nil


Recursive path order with status [RPO].
Quasi-Precedence: sublist_1 > [cons, first_1] > [REMOVE_1, s_1] > nil
0 > [cons, first_1] > [REMOVE_1, s_1] > nil

Status: REMOVE_1: multiset status
cons: multiset status
s_1: multiset status
sublist_1: [1]
first_1: multiset status
0: multiset status
nil: multiset status


----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REMOVE(s0(y)) -> REMOVE(y)

The TRS R consists of the following rules:

   remove(00) -> cons
   sublist(cons) -> cons
   first(nil0) -> nil0
   remove(x) -> nil0
   sublist(nil0) -> nil0
   sublist(cons) -> nil0
   sublist(cons) -> sublist(cons)
   first(cons) -> cons
   remove(s0(y)) -> remove(y)
   first(cons) -> nil0

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(15) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   REMOVE(s0(y)) -> REMOVE(y)

Strictly oriented rules of the TRS R:

   remove(00) -> cons
   remove(x) -> nil0
   remove(s0(y)) -> remove(y)

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(REMOVE(x_1)) = x_1
   POL(cons) = 0
   POL(first(x_1)) = x_1
   POL(nil0) = 0
   POL(remove(x_1)) = 1 + 2*x_1
   POL(s0(x_1)) = 2 + 2*x_1
   POL(sublist(x_1)) = x_1


----------------------------------------

(16)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   sublist(cons) -> cons
   first(nil0) -> nil0
   sublist(nil0) -> nil0
   sublist(cons) -> nil0
   sublist(cons) -> sublist(cons)
   first(cons) -> cons
   first(cons) -> nil0

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(17) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(18)
YES

----------------------------------------

(19)
Obligation:
Relative ADP Problem with
absolute ADPs:

   sublist(cons(x, xs), s(y)) -> cons(cons(x, first(xs, y)), SUBLIST(remove(xs, y), s(y)))

and relative ADPs:

   remove(cons(x, xs), 0) -> cons(x, xs)
   sublist(cons(x, xs), s(y)) -> cons(cons(x, first(xs, y)), sublist(remove(xs, y), s(y)))
   first(nil, x) -> nil
   remove(nil, x) -> nil
   sublist(nil, x) -> nil
   sublist(cons(x, xs), 0) -> nil
   sublist(cons(x, cons(y, xs)), z) -> SUBLIST(cons(y, cons(x, xs)), z)
   first(cons(x, xs), s(y)) -> cons(x, first(xs, y))
   remove(cons(x, xs), s(y)) -> remove(xs, y)
   first(cons(x, xs), 0) -> nil


----------------------------------------

(20) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   sublist(cons(x, xs), s(y)) -> cons(cons(x, first(xs, y)), SUBLIST(remove(xs, y), s(y)))

Relative ADPs:

   remove(cons(x, xs), 0) -> cons(x, xs)
   sublist(cons(x, xs), s(y)) -> cons(cons(x, first(xs, y)), sublist(remove(xs, y), s(y)))
   first(nil, x) -> nil
   remove(nil, x) -> nil
   sublist(nil, x) -> nil
   sublist(cons(x, xs), 0) -> nil
   first(cons(x, xs), s(y)) -> cons(x, first(xs, y))
   remove(cons(x, xs), s(y)) -> remove(xs, y)
   first(cons(x, xs), 0) -> nil


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(FIRST(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(REMOVE(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(SUBLIST(x_1, x_2)) = 3 + 2*x_1 + 3*x_2
   POL(cons(x_1, x_2)) = 1 + x_2
   POL(first(x_1, x_2)) = 2*x_1
   POL(nil) = 0
   POL(remove(x_1, x_2)) = x_1
   POL(s(x_1)) = 0
   POL(sublist(x_1, x_2)) = 1 + x_1

----------------------------------------

(21)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   sublist(cons(x, xs), s(y)) -> cons(cons(x, first(xs, y)), sublist(remove(xs, y), s(y)))
   remove(cons(x, xs), 0) -> cons(x, xs)
   first(nil, x) -> nil
   remove(nil, x) -> nil
   sublist(nil, x) -> nil
   sublist(cons(x, xs), 0) -> nil
   sublist(cons(x, cons(y, xs)), z) -> SUBLIST(cons(y, cons(x, xs)), z)
   first(cons(x, xs), s(y)) -> cons(x, first(xs, y))
   remove(cons(x, xs), s(y)) -> remove(xs, y)
   first(cons(x, xs), 0) -> nil


----------------------------------------

(22) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(23)
YES
