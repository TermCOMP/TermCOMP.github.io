YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/hSuGB.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) RelADPP
        (6) RelADPReductionPairProof [EQUIVALENT, 20 ms]
        (7) RelADPP
        (8) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (9) YES
    (10) RelADPP
        (11) RelADPReductionPairProof [EQUIVALENT, 21 ms]
        (12) RelADPP
        (13) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (14) YES
    (15) RelADPP
        (16) RelADPReductionPairProof [EQUIVALENT, 19 ms]
        (17) RelADPP
        (18) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (19) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   f(el(x), y) -> f(x, el(y))

The relative TRS consists of the following S rules:

   l(el(x)) -> el(l(x))
   f(x, y) -> f(l(x), y)
   el(r(x)) -> r(el(x))
   f(x, y) -> f(x, r(y))


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   f(el(x), y) -> F(x, el(y))
   f(el(x), y) -> f(x, EL(y))

and relative ADPs:

   l(el(x)) -> EL(L(x))
   f(x, y) -> F(L(x), y)
   el(r(x)) -> r(EL(x))
   f(x, y) -> F(x, r(y))


----------------------------------------

(3) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  2 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Relative ADP Problem with
absolute ADPs:

   f(el(x), y) -> F(x, el(y))

and relative ADPs:

   f(el(x), y) -> f(x, el(y))
   f(x, y) -> F(x, r(y))
   l(el(x)) -> el(l(x))
   el(r(x)) -> r(el(x))
   f(x, y) -> F(L(x), y)


----------------------------------------

(6) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   f(el(x), y) -> F(x, el(y))

Relative ADPs:

   f(el(x), y) -> f(x, el(y))
   l(el(x)) -> el(l(x))
   el(r(x)) -> r(el(x))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(EL(x_1)) = 3 + 3*x_1 + 3*x_1^2
   POL(F(x_1, x_2)) = 3 + 3*x_1 + 2*x_2
   POL(L(x_1)) = 0
   POL(el(x_1)) = 3 + x_1
   POL(f(x_1, x_2)) = x_1
   POL(l(x_1)) = x_1
   POL(r(x_1)) = 0

----------------------------------------

(7)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   f(el(x), y) -> f(x, el(y))
   f(x, y) -> F(x, r(y))
   l(el(x)) -> el(l(x))
   el(r(x)) -> r(el(x))
   f(x, y) -> F(L(x), y)


----------------------------------------

(8) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(9)
YES

----------------------------------------

(10)
Obligation:
Relative ADP Problem with
absolute ADPs:

   f(el(x), y) -> f(x, EL(y))

and relative ADPs:

   f(el(x), y) -> f(x, el(y))
   f(x, y) -> F(x, r(y))
   l(el(x)) -> el(l(x))
   el(r(x)) -> r(el(x))
   f(x, y) -> F(L(x), y)


----------------------------------------

(11) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   f(el(x), y) -> f(x, EL(y))

Relative ADPs:

   f(el(x), y) -> f(x, el(y))
   l(el(x)) -> el(l(x))
   el(r(x)) -> r(el(x))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(EL(x_1)) = 1 + 3*x_1
   POL(F(x_1, x_2)) = 3 + 3*x_1 + 3*x_2
   POL(L(x_1)) = 0
   POL(el(x_1)) = 1 + 2*x_1
   POL(f(x_1, x_2)) = 2*x_1
   POL(l(x_1)) = x_1
   POL(r(x_1)) = 0

----------------------------------------

(12)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   f(el(x), y) -> f(x, el(y))
   f(x, y) -> F(x, r(y))
   l(el(x)) -> el(l(x))
   el(r(x)) -> r(el(x))
   f(x, y) -> F(L(x), y)


----------------------------------------

(13) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(14)
YES

----------------------------------------

(15)
Obligation:
Relative ADP Problem with
absolute ADPs:

   f(el(x), y) -> F(x, el(y))

and relative ADPs:

   f(el(x), y) -> f(x, el(y))
   f(x, y) -> F(x, r(y))
   l(el(x)) -> el(l(x))
   el(r(x)) -> r(el(x))
   f(x, y) -> F(L(x), y)


----------------------------------------

(16) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   f(el(x), y) -> F(x, el(y))

Relative ADPs:

   f(el(x), y) -> f(x, el(y))
   l(el(x)) -> el(l(x))
   el(r(x)) -> r(el(x))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(EL(x_1)) = 3 + 3*x_1 + 3*x_1^2
   POL(F(x_1, x_2)) = 3 + 3*x_1 + 2*x_2
   POL(L(x_1)) = 0
   POL(el(x_1)) = 3 + x_1
   POL(f(x_1, x_2)) = x_1
   POL(l(x_1)) = x_1
   POL(r(x_1)) = 0

----------------------------------------

(17)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   f(el(x), y) -> f(x, el(y))
   f(x, y) -> F(x, r(y))
   l(el(x)) -> el(l(x))
   el(r(x)) -> r(el(x))
   f(x, y) -> F(L(x), y)


----------------------------------------

(18) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(19)
YES
