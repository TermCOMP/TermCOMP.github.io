YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/iuuX3.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) RelADPP
        (6) RelADPCleverAfsProof [SOUND, 34 ms]
        (7) QDP
        (8) MRRProof [EQUIVALENT, 8 ms]
        (9) QDP
        (10) MRRProof [EQUIVALENT, 5 ms]
        (11) QDP
        (12) MRRProof [EQUIVALENT, 4 ms]
        (13) QDP
        (14) MRRProof [EQUIVALENT, 7 ms]
        (15) QDP
        (16) PisEmptyProof [EQUIVALENT, 0 ms]
        (17) YES
    (18) RelADPP
        (19) RelADPDerelatifyingProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) QDPOrderProof [EQUIVALENT, 16 ms]
        (22) QDP
        (23) PisEmptyProof [EQUIVALENT, 0 ms]
        (24) YES
    (25) RelADPP
        (26) RelADPCleverAfsProof [SOUND, 24 ms]
        (27) QDP
        (28) MRRProof [EQUIVALENT, 14 ms]
        (29) QDP
        (30) MRRProof [EQUIVALENT, 6 ms]
        (31) QDP
        (32) MRRProof [EQUIVALENT, 4 ms]
        (33) QDP
        (34) MRRProof [EQUIVALENT, 2 ms]
        (35) QDP
        (36) MRRProof [EQUIVALENT, 2 ms]
        (37) QDP
        (38) MRRProof [EQUIVALENT, 3 ms]
        (39) QDP
        (40) PisEmptyProof [EQUIVALENT, 0 ms]
        (41) YES
    (42) RelADPP
        (43) RelADPCleverAfsProof [SOUND, 24 ms]
        (44) QDP
        (45) MRRProof [EQUIVALENT, 10 ms]
        (46) QDP
        (47) MRRProof [EQUIVALENT, 5 ms]
        (48) QDP
        (49) PisEmptyProof [EQUIVALENT, 0 ms]
        (50) YES
    (51) RelADPP
        (52) RelADPDerelatifyingProof [EQUIVALENT, 0 ms]
        (53) QDP
        (54) QDPOrderProof [EQUIVALENT, 13 ms]
        (55) QDP
        (56) PisEmptyProof [EQUIVALENT, 0 ms]
        (57) YES
    (58) RelADPP
        (59) RelADPDerelatifyingProof [EQUIVALENT, 0 ms]
        (60) QDP
        (61) QDPOrderProof [EQUIVALENT, 11 ms]
        (62) QDP
        (63) PisEmptyProof [EQUIVALENT, 0 ms]
        (64) YES
    (65) RelADPP
        (66) RelADPReductionPairProof [EQUIVALENT, 68 ms]
        (67) RelADPP
        (68) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (69) YES
    (70) RelADPP
        (71) RelADPReductionPairProof [EQUIVALENT, 51 ms]
        (72) RelADPP
        (73) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (74) YES
    (75) RelADPP
        (76) RelADPReductionPairProof [EQUIVALENT, 52 ms]
        (77) RelADPP
        (78) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (79) YES
    (80) RelADPP
        (81) RelADPReductionPairProof [EQUIVALENT, 66 ms]
        (82) RelADPP
        (83) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (84) YES
    (85) RelADPP
        (86) RelADPReductionPairProof [EQUIVALENT, 75 ms]
        (87) RelADPP
        (88) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (89) YES
    (90) RelADPP
        (91) RelADPReductionPairProof [EQUIVALENT, 71 ms]
        (92) RelADPP
        (93) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (94) YES
    (95) RelADPP
        (96) RelADPReductionPairProof [EQUIVALENT, 69 ms]
        (97) RelADPP
        (98) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (99) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   div(0, s(y)) -> 0
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   divL(x, nil) -> x
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   app(nil, y) -> y
   app(cons(n, x), y) -> cons(n, app(x, y))
   reverse(nil) -> nil
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   shuffle(nil) -> nil
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   less_leaves(x, leaf) -> false
   less_leaves(leaf, cons(w, z)) -> true
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))

The relative TRS consists of the following S rules:

   shuffle(cons(x, xs)) -> shuffle(consSwap(x, xs))
   consSwap(x, xs) -> cons(x, xs)
   divL(z, cons(x, xs)) -> divL(z, consSwap(x, xs))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> MINUS(x, y)
   div(0, s(y)) -> 0
   div(s(x), s(y)) -> s(DIV(minus(x, y), s(y)))
   div(s(x), s(y)) -> s(div(MINUS(x, y), s(y)))
   divL(x, nil) -> x
   divL(x, cons(y, xs)) -> DIVL(div(x, y), xs)
   divL(x, cons(y, xs)) -> divL(DIV(x, y), xs)
   app(nil, y) -> y
   app(cons(n, x), y) -> cons(n, APP(x, y))
   reverse(nil) -> nil
   reverse(cons(n, x)) -> APP(reverse(x), cons(n, nil))
   reverse(cons(n, x)) -> app(REVERSE(x), cons(n, nil))
   shuffle(nil) -> nil
   shuffle(cons(n, x)) -> cons(n, SHUFFLE(reverse(x)))
   shuffle(cons(n, x)) -> cons(n, shuffle(REVERSE(x)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, CONCAT(v, y))
   less_leaves(x, leaf) -> false
   less_leaves(leaf, cons(w, z)) -> true
   less_leaves(cons(u, v), cons(w, z)) -> LESS_LEAVES(concat(u, v), concat(w, z))
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(CONCAT(u, v), concat(w, z))
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), CONCAT(w, z))

and relative ADPs:

   shuffle(cons(x, xs)) -> SHUFFLE(CONSSWAP(x, xs))
   consSwap(x, xs) -> cons(x, xs)
   divL(z, cons(x, xs)) -> DIVL(z, CONSSWAP(x, xs))
   consSwap(x, cons(y, xs)) -> cons(y, CONSSWAP(x, xs))


----------------------------------------

(3) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  7 SCCs with nodes from P_abs,
  6 Lassos,
Result: This relative DT problem is equivalent to 13 subproblems.

----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Relative ADP Problem with
absolute ADPs:

   minus(s(x), s(y)) -> MINUS(x, y)

and relative ADPs:

   div(0, s(y)) -> 0
   shuffle(cons(x, xs)) -> shuffle(consSwap(x, xs))
   consSwap(x, xs) -> cons(x, xs)
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   divL(z, cons(x, xs)) -> divL(z, consSwap(x, xs))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   shuffle(nil) -> nil
   divL(x, nil) -> x
   reverse(nil) -> nil
   less_leaves(x, leaf) -> false
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   less_leaves(leaf, cons(w, z)) -> true
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   minus(x, 0) -> x
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))


----------------------------------------

(6) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:MINUS_2 = 1
true = 
less_leaves_2 = 
app_2 = 
concat_2 = 
leaf = 
divL_2 = 
xs = 
shuffle_1 = 
nil = 
false = 
s_1 = 
reverse_1 = 
div_2 = 1
0 = 
minus_2 = 1
cons_2 = 
consSwap_2 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
MINUS(x1, x2)  =  MINUS(x1)

s(x1)  =  s(x1)

div(x1, x2)  =  x1

minus(x1, x2)  =  x1

0  =  0


Recursive path order with status [RPO].
Quasi-Precedence: trivial

Status: MINUS_1: [1]
s_1: multiset status
0: multiset status


----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s0(x)) -> MINUS(x)

The TRS R consists of the following rules:

   div(00) -> 00
   shuffle0(cons0(x, xs0)) -> shuffle0(consSwap0(x, xs0))
   consSwap0(x, xs0) -> cons0(x, xs0)
   div(s0(x)) -> s0(div(minus(x)))
   concat0(leaf0, y) -> y
   concat0(cons0(u, v), y) -> cons0(u, concat0(v, y))
   divL0(z, cons0(x, xs0)) -> divL0(z, consSwap0(x, xs0))
   consSwap0(x, cons0(y, xs0)) -> cons0(y, consSwap0(x, xs0))
   divL0(x, cons0(y, xs0)) -> divL0(div(x), xs0)
   shuffle0(nil0) -> nil0
   divL0(x, nil0) -> x
   reverse0(nil0) -> nil0
   less_leaves0(x, leaf0) -> false0
   app0(cons0(n, x), y) -> cons0(n, app0(x, y))
   shuffle0(cons0(n, x)) -> cons0(n, shuffle0(reverse0(x)))
   less_leaves0(leaf0, cons0(w, z)) -> true0
   reverse0(cons0(n, x)) -> app0(reverse0(x), cons0(n, nil0))
   app0(nil0, y) -> y
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   less_leaves0(cons0(u, v), cons0(w, z)) -> less_leaves0(concat0(u, v), concat0(w, z))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(8) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   concat0(leaf0, y) -> y
   concat0(cons0(u, v), y) -> cons0(u, concat0(v, y))
   divL0(x, cons0(y, xs0)) -> divL0(div(x), xs0)
   shuffle0(cons0(n, x)) -> cons0(n, shuffle0(reverse0(x)))
   less_leaves0(leaf0, cons0(w, z)) -> true0
   less_leaves0(cons0(u, v), cons0(w, z)) -> less_leaves0(concat0(u, v), concat0(w, z))

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(MINUS(x_1)) = 2*x_1
   POL(app0(x_1, x_2)) = x_1 + x_2
   POL(concat0(x_1, x_2)) = 2*x_1 + x_2
   POL(cons0(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(consSwap0(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(div(x_1)) = x_1
   POL(divL0(x_1, x_2)) = x_1 + 2*x_2
   POL(false0) = 2
   POL(leaf0) = 1
   POL(less_leaves0(x_1, x_2)) = 1 + 2*x_1 + x_2
   POL(minus(x_1)) = x_1
   POL(nil0) = 0
   POL(reverse0(x_1)) = x_1
   POL(s0(x_1)) = x_1
   POL(shuffle0(x_1)) = 2*x_1
   POL(true0) = 0
   POL(xs0) = 2


----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s0(x)) -> MINUS(x)

The TRS R consists of the following rules:

   div(00) -> 00
   shuffle0(cons0(x, xs0)) -> shuffle0(consSwap0(x, xs0))
   consSwap0(x, xs0) -> cons0(x, xs0)
   div(s0(x)) -> s0(div(minus(x)))
   divL0(z, cons0(x, xs0)) -> divL0(z, consSwap0(x, xs0))
   consSwap0(x, cons0(y, xs0)) -> cons0(y, consSwap0(x, xs0))
   shuffle0(nil0) -> nil0
   divL0(x, nil0) -> x
   reverse0(nil0) -> nil0
   less_leaves0(x, leaf0) -> false0
   app0(cons0(n, x), y) -> cons0(n, app0(x, y))
   reverse0(cons0(n, x)) -> app0(reverse0(x), cons0(n, nil0))
   app0(nil0, y) -> y
   minus(s0(x)) -> minus(x)
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(10) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   shuffle0(nil0) -> nil0
   less_leaves0(x, leaf0) -> false0

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(MINUS(x_1)) = 2*x_1
   POL(app0(x_1, x_2)) = x_1 + x_2
   POL(cons0(x_1, x_2)) = x_1 + x_2
   POL(consSwap0(x_1, x_2)) = x_1 + x_2
   POL(div(x_1)) = 2*x_1
   POL(divL0(x_1, x_2)) = x_1 + x_2
   POL(false0) = 2
   POL(leaf0) = 1
   POL(less_leaves0(x_1, x_2)) = 1 + x_1 + 2*x_2
   POL(minus(x_1)) = x_1
   POL(nil0) = 0
   POL(reverse0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1
   POL(shuffle0(x_1)) = 2 + 2*x_1
   POL(xs0) = 0


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s0(x)) -> MINUS(x)

The TRS R consists of the following rules:

   div(00) -> 00
   shuffle0(cons0(x, xs0)) -> shuffle0(consSwap0(x, xs0))
   consSwap0(x, xs0) -> cons0(x, xs0)
   div(s0(x)) -> s0(div(minus(x)))
   divL0(z, cons0(x, xs0)) -> divL0(z, consSwap0(x, xs0))
   consSwap0(x, cons0(y, xs0)) -> cons0(y, consSwap0(x, xs0))
   divL0(x, nil0) -> x
   reverse0(nil0) -> nil0
   app0(cons0(n, x), y) -> cons0(n, app0(x, y))
   reverse0(cons0(n, x)) -> app0(reverse0(x), cons0(n, nil0))
   app0(nil0, y) -> y
   minus(s0(x)) -> minus(x)
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   divL0(x, nil0) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(MINUS(x_1)) = 2*x_1
   POL(app0(x_1, x_2)) = x_1 + 2*x_2
   POL(cons0(x_1, x_2)) = 2*x_1 + x_2
   POL(consSwap0(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(div(x_1)) = 2*x_1
   POL(divL0(x_1, x_2)) = 1 + x_1 + 2*x_2
   POL(minus(x_1)) = x_1
   POL(nil0) = 0
   POL(reverse0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1
   POL(shuffle0(x_1)) = 2*x_1
   POL(xs0) = 0


----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s0(x)) -> MINUS(x)

The TRS R consists of the following rules:

   div(00) -> 00
   shuffle0(cons0(x, xs0)) -> shuffle0(consSwap0(x, xs0))
   consSwap0(x, xs0) -> cons0(x, xs0)
   div(s0(x)) -> s0(div(minus(x)))
   divL0(z, cons0(x, xs0)) -> divL0(z, consSwap0(x, xs0))
   consSwap0(x, cons0(y, xs0)) -> cons0(y, consSwap0(x, xs0))
   reverse0(nil0) -> nil0
   app0(cons0(n, x), y) -> cons0(n, app0(x, y))
   reverse0(cons0(n, x)) -> app0(reverse0(x), cons0(n, nil0))
   app0(nil0, y) -> y
   minus(s0(x)) -> minus(x)
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(14) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   MINUS(s0(x)) -> MINUS(x)

Strictly oriented rules of the TRS R:

   div(00) -> 00
   div(s0(x)) -> s0(div(minus(x)))
   consSwap0(x, cons0(y, xs0)) -> cons0(y, consSwap0(x, xs0))
   reverse0(nil0) -> nil0
   reverse0(cons0(n, x)) -> app0(reverse0(x), cons0(n, nil0))
   app0(nil0, y) -> y
   minus(s0(x)) -> minus(x)

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 1
   POL(MINUS(x_1)) = 2*x_1
   POL(app0(x_1, x_2)) = x_1 + x_2
   POL(cons0(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(consSwap0(x_1, x_2)) = 2 + 2*x_1 + 2*x_2
   POL(div(x_1)) = 1 + 2*x_1
   POL(divL0(x_1, x_2)) = x_1 + 2*x_2
   POL(minus(x_1)) = x_1
   POL(nil0) = 1
   POL(reverse0(x_1)) = 1 + 2*x_1
   POL(s0(x_1)) = 2 + 2*x_1
   POL(shuffle0(x_1)) = 2*x_1
   POL(xs0) = 0


----------------------------------------

(15)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   shuffle0(cons0(x, xs0)) -> shuffle0(consSwap0(x, xs0))
   consSwap0(x, xs0) -> cons0(x, xs0)
   divL0(z, cons0(x, xs0)) -> divL0(z, consSwap0(x, xs0))
   app0(cons0(n, x), y) -> cons0(n, app0(x, y))
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(16) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(17)
YES

----------------------------------------

(18)
Obligation:
Relative ADP Problem with
absolute ADPs:

   app(cons(n, x), y) -> cons(n, APP(x, y))

and relative ADPs:

   div(0, s(y)) -> 0
   shuffle(cons(x, xs)) -> shuffle(consSwap(x, xs))
   consSwap(x, xs) -> cons(x, xs)
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   divL(z, cons(x, xs)) -> divL(z, consSwap(x, xs))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   shuffle(nil) -> nil
   divL(x, nil) -> x
   reverse(nil) -> nil
   less_leaves(x, leaf) -> false
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   less_leaves(leaf, cons(w, z)) -> true
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))


----------------------------------------

(19) RelADPDerelatifyingProof (EQUIVALENT)


We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.
----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(cons(n, x), y) -> APP(x, y)

The TRS R consists of the following rules:

   div(0, s(y)) -> 0
   shuffle(cons(x, xs)) -> shuffle(consSwap(x, xs))
   consSwap(x, xs) -> cons(x, xs)
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   divL(z, cons(x, xs)) -> divL(z, consSwap(x, xs))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   shuffle(nil) -> nil
   divL(x, nil) -> x
   reverse(nil) -> nil
   less_leaves(x, leaf) -> false
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   less_leaves(leaf, cons(w, z)) -> true
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   APP(cons(n, x), y) -> APP(x, y)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( div_2(x_1, x_2) ) = max{0, -2}
POL( 0 ) = 0
POL( s_1(x_1) ) = x_1
POL( shuffle_1(x_1) ) = x_1 + 2
POL( cons_2(x_1, x_2) ) = x_1 + x_2 + 2
POL( xs ) = 2
POL( consSwap_2(x_1, x_2) ) = x_1 + 2x_2
POL( minus_2(x_1, x_2) ) = 2x_1 + 2
POL( concat_2(x_1, x_2) ) = 2x_1 + 2x_2 + 2
POL( leaf ) = 0
POL( divL_2(x_1, x_2) ) = 2x_1 + 2x_2
POL( nil ) = 0
POL( reverse_1(x_1) ) = x_1
POL( less_leaves_2(x_1, x_2) ) = 1
POL( false ) = 1
POL( app_2(x_1, x_2) ) = x_1 + x_2
POL( true ) = 0
POL( APP_2(x_1, x_2) ) = 2x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   div(0, s(y)) -> 0
   shuffle(cons(x, xs)) -> shuffle(consSwap(x, xs))
   consSwap(x, xs) -> cons(x, xs)
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   divL(z, cons(x, xs)) -> divL(z, consSwap(x, xs))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   shuffle(nil) -> nil
   divL(x, nil) -> x
   reverse(nil) -> nil
   less_leaves(x, leaf) -> false
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   less_leaves(leaf, cons(w, z)) -> true
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))


----------------------------------------

(22)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   div(0, s(y)) -> 0
   shuffle(cons(x, xs)) -> shuffle(consSwap(x, xs))
   consSwap(x, xs) -> cons(x, xs)
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   divL(z, cons(x, xs)) -> divL(z, consSwap(x, xs))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   shuffle(nil) -> nil
   divL(x, nil) -> x
   reverse(nil) -> nil
   less_leaves(x, leaf) -> false
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   less_leaves(leaf, cons(w, z)) -> true
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(23) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(24)
YES

----------------------------------------

(25)
Obligation:
Relative ADP Problem with
absolute ADPs:

   div(s(x), s(y)) -> s(DIV(minus(x, y), s(y)))

and relative ADPs:

   div(0, s(y)) -> 0
   shuffle(cons(x, xs)) -> shuffle(consSwap(x, xs))
   consSwap(x, xs) -> cons(x, xs)
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   divL(z, cons(x, xs)) -> divL(z, consSwap(x, xs))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   shuffle(nil) -> nil
   divL(x, nil) -> x
   reverse(nil) -> nil
   less_leaves(x, leaf) -> false
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   less_leaves(leaf, cons(w, z)) -> true
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))


----------------------------------------

(26) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:true = 
less_leaves_2 = 
app_2 = 
concat_2 = 
leaf = 
divL_2 = 
xs = 
shuffle_1 = 
nil = 
false = 
s_1 = 
reverse_1 = 
div_2 = 
0 = 
minus_2 = 1
cons_2 = 
consSwap_2 = 
DIV_2 = 1

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
DIV(x1, x2)  =  DIV(x1)

s(x1)  =  s(x1)

minus(x1, x2)  =  x1

0  =  0

div(x1, x2)  =  div(x1, x2)


Recursive path order with status [RPO].
Quasi-Precedence: DIV_1 > s_1
div_2 > 0 > s_1

Status: DIV_1: [1]
s_1: multiset status
0: multiset status
div_2: [2,1]


----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(s0(x)) -> DIV(minus(x))

The TRS R consists of the following rules:

   div0(00, s0(y)) -> 00
   shuffle0(cons0(x, xs0)) -> shuffle0(consSwap0(x, xs0))
   consSwap0(x, xs0) -> cons0(x, xs0)
   div0(s0(x), s0(y)) -> s0(div0(minus(x), s0(y)))
   concat0(leaf0, y) -> y
   concat0(cons0(u, v), y) -> cons0(u, concat0(v, y))
   divL0(z, cons0(x, xs0)) -> divL0(z, consSwap0(x, xs0))
   consSwap0(x, cons0(y, xs0)) -> cons0(y, consSwap0(x, xs0))
   divL0(x, cons0(y, xs0)) -> divL0(div0(x, y), xs0)
   shuffle0(nil0) -> nil0
   divL0(x, nil0) -> x
   reverse0(nil0) -> nil0
   less_leaves0(x, leaf0) -> false0
   app0(cons0(n, x), y) -> cons0(n, app0(x, y))
   shuffle0(cons0(n, x)) -> cons0(n, shuffle0(reverse0(x)))
   less_leaves0(leaf0, cons0(w, z)) -> true0
   reverse0(cons0(n, x)) -> app0(reverse0(x), cons0(n, nil0))
   app0(nil0, y) -> y
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   less_leaves0(cons0(u, v), cons0(w, z)) -> less_leaves0(concat0(u, v), concat0(w, z))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(28) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   concat0(leaf0, y) -> y
   less_leaves0(x, leaf0) -> false0

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(DIV(x_1)) = x_1
   POL(app0(x_1, x_2)) = x_1 + x_2
   POL(concat0(x_1, x_2)) = 2*x_1 + x_2
   POL(cons0(x_1, x_2)) = 2*x_1 + x_2
   POL(consSwap0(x_1, x_2)) = 2*x_1 + x_2
   POL(div0(x_1, x_2)) = x_1 + 2*x_2
   POL(divL0(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(false0) = 2
   POL(leaf0) = 1
   POL(less_leaves0(x_1, x_2)) = 1 + x_1 + 2*x_2
   POL(minus(x_1)) = x_1
   POL(nil0) = 0
   POL(reverse0(x_1)) = x_1
   POL(s0(x_1)) = x_1
   POL(shuffle0(x_1)) = 2*x_1
   POL(true0) = 2
   POL(xs0) = 0


----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(s0(x)) -> DIV(minus(x))

The TRS R consists of the following rules:

   div0(00, s0(y)) -> 00
   shuffle0(cons0(x, xs0)) -> shuffle0(consSwap0(x, xs0))
   consSwap0(x, xs0) -> cons0(x, xs0)
   div0(s0(x), s0(y)) -> s0(div0(minus(x), s0(y)))
   concat0(cons0(u, v), y) -> cons0(u, concat0(v, y))
   divL0(z, cons0(x, xs0)) -> divL0(z, consSwap0(x, xs0))
   consSwap0(x, cons0(y, xs0)) -> cons0(y, consSwap0(x, xs0))
   divL0(x, cons0(y, xs0)) -> divL0(div0(x, y), xs0)
   shuffle0(nil0) -> nil0
   divL0(x, nil0) -> x
   reverse0(nil0) -> nil0
   app0(cons0(n, x), y) -> cons0(n, app0(x, y))
   shuffle0(cons0(n, x)) -> cons0(n, shuffle0(reverse0(x)))
   less_leaves0(leaf0, cons0(w, z)) -> true0
   reverse0(cons0(n, x)) -> app0(reverse0(x), cons0(n, nil0))
   app0(nil0, y) -> y
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   less_leaves0(cons0(u, v), cons0(w, z)) -> less_leaves0(concat0(u, v), concat0(w, z))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(30) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   less_leaves0(leaf0, cons0(w, z)) -> true0

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(DIV(x_1)) = x_1
   POL(app0(x_1, x_2)) = x_1 + x_2
   POL(concat0(x_1, x_2)) = x_1 + x_2
   POL(cons0(x_1, x_2)) = 2*x_1 + x_2
   POL(consSwap0(x_1, x_2)) = 2*x_1 + x_2
   POL(div0(x_1, x_2)) = x_1 + 2*x_2
   POL(divL0(x_1, x_2)) = x_1 + x_2
   POL(leaf0) = 1
   POL(less_leaves0(x_1, x_2)) = 1 + 2*x_1 + 2*x_2
   POL(minus(x_1)) = x_1
   POL(nil0) = 0
   POL(reverse0(x_1)) = x_1
   POL(s0(x_1)) = x_1
   POL(shuffle0(x_1)) = 2*x_1
   POL(true0) = 2
   POL(xs0) = 0


----------------------------------------

(31)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(s0(x)) -> DIV(minus(x))

The TRS R consists of the following rules:

   div0(00, s0(y)) -> 00
   shuffle0(cons0(x, xs0)) -> shuffle0(consSwap0(x, xs0))
   consSwap0(x, xs0) -> cons0(x, xs0)
   div0(s0(x), s0(y)) -> s0(div0(minus(x), s0(y)))
   concat0(cons0(u, v), y) -> cons0(u, concat0(v, y))
   divL0(z, cons0(x, xs0)) -> divL0(z, consSwap0(x, xs0))
   consSwap0(x, cons0(y, xs0)) -> cons0(y, consSwap0(x, xs0))
   divL0(x, cons0(y, xs0)) -> divL0(div0(x, y), xs0)
   shuffle0(nil0) -> nil0
   divL0(x, nil0) -> x
   reverse0(nil0) -> nil0
   app0(cons0(n, x), y) -> cons0(n, app0(x, y))
   shuffle0(cons0(n, x)) -> cons0(n, shuffle0(reverse0(x)))
   reverse0(cons0(n, x)) -> app0(reverse0(x), cons0(n, nil0))
   app0(nil0, y) -> y
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   less_leaves0(cons0(u, v), cons0(w, z)) -> less_leaves0(concat0(u, v), concat0(w, z))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(32) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   consSwap0(x, cons0(y, xs0)) -> cons0(y, consSwap0(x, xs0))
   divL0(x, cons0(y, xs0)) -> divL0(div0(x, y), xs0)
   shuffle0(cons0(n, x)) -> cons0(n, shuffle0(reverse0(x)))
   less_leaves0(cons0(u, v), cons0(w, z)) -> less_leaves0(concat0(u, v), concat0(w, z))

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(DIV(x_1)) = x_1
   POL(app0(x_1, x_2)) = x_1 + x_2
   POL(concat0(x_1, x_2)) = x_1 + x_2
   POL(cons0(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(consSwap0(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(div0(x_1, x_2)) = x_1 + 2*x_2
   POL(divL0(x_1, x_2)) = x_1 + x_2
   POL(less_leaves0(x_1, x_2)) = x_1 + 2*x_2
   POL(minus(x_1)) = x_1
   POL(nil0) = 0
   POL(reverse0(x_1)) = x_1
   POL(s0(x_1)) = x_1
   POL(shuffle0(x_1)) = 2*x_1
   POL(xs0) = 2


----------------------------------------

(33)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(s0(x)) -> DIV(minus(x))

The TRS R consists of the following rules:

   div0(00, s0(y)) -> 00
   shuffle0(cons0(x, xs0)) -> shuffle0(consSwap0(x, xs0))
   consSwap0(x, xs0) -> cons0(x, xs0)
   div0(s0(x), s0(y)) -> s0(div0(minus(x), s0(y)))
   concat0(cons0(u, v), y) -> cons0(u, concat0(v, y))
   divL0(z, cons0(x, xs0)) -> divL0(z, consSwap0(x, xs0))
   shuffle0(nil0) -> nil0
   divL0(x, nil0) -> x
   reverse0(nil0) -> nil0
   app0(cons0(n, x), y) -> cons0(n, app0(x, y))
   reverse0(cons0(n, x)) -> app0(reverse0(x), cons0(n, nil0))
   app0(nil0, y) -> y
   minus(s0(x)) -> minus(x)
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(34) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   shuffle0(nil0) -> nil0

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(DIV(x_1)) = 2*x_1
   POL(app0(x_1, x_2)) = x_1 + x_2
   POL(concat0(x_1, x_2)) = x_1 + 2*x_2
   POL(cons0(x_1, x_2)) = 2*x_1 + x_2
   POL(consSwap0(x_1, x_2)) = 2*x_1 + x_2
   POL(div0(x_1, x_2)) = x_1 + x_2
   POL(divL0(x_1, x_2)) = x_1 + 2*x_2
   POL(minus(x_1)) = x_1
   POL(nil0) = 0
   POL(reverse0(x_1)) = x_1
   POL(s0(x_1)) = x_1
   POL(shuffle0(x_1)) = 2 + 2*x_1
   POL(xs0) = 0


----------------------------------------

(35)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(s0(x)) -> DIV(minus(x))

The TRS R consists of the following rules:

   div0(00, s0(y)) -> 00
   shuffle0(cons0(x, xs0)) -> shuffle0(consSwap0(x, xs0))
   consSwap0(x, xs0) -> cons0(x, xs0)
   div0(s0(x), s0(y)) -> s0(div0(minus(x), s0(y)))
   concat0(cons0(u, v), y) -> cons0(u, concat0(v, y))
   divL0(z, cons0(x, xs0)) -> divL0(z, consSwap0(x, xs0))
   divL0(x, nil0) -> x
   reverse0(nil0) -> nil0
   app0(cons0(n, x), y) -> cons0(n, app0(x, y))
   reverse0(cons0(n, x)) -> app0(reverse0(x), cons0(n, nil0))
   app0(nil0, y) -> y
   minus(s0(x)) -> minus(x)
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(36) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   divL0(x, nil0) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(DIV(x_1)) = x_1
   POL(app0(x_1, x_2)) = x_1 + x_2
   POL(concat0(x_1, x_2)) = x_1 + 2*x_2
   POL(cons0(x_1, x_2)) = x_1 + x_2
   POL(consSwap0(x_1, x_2)) = x_1 + 2*x_2
   POL(div0(x_1, x_2)) = x_1 + 2*x_2
   POL(divL0(x_1, x_2)) = 1 + x_1 + 2*x_2
   POL(minus(x_1)) = x_1
   POL(nil0) = 0
   POL(reverse0(x_1)) = x_1
   POL(s0(x_1)) = x_1
   POL(shuffle0(x_1)) = 2*x_1
   POL(xs0) = 0


----------------------------------------

(37)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(s0(x)) -> DIV(minus(x))

The TRS R consists of the following rules:

   div0(00, s0(y)) -> 00
   shuffle0(cons0(x, xs0)) -> shuffle0(consSwap0(x, xs0))
   consSwap0(x, xs0) -> cons0(x, xs0)
   div0(s0(x), s0(y)) -> s0(div0(minus(x), s0(y)))
   concat0(cons0(u, v), y) -> cons0(u, concat0(v, y))
   divL0(z, cons0(x, xs0)) -> divL0(z, consSwap0(x, xs0))
   reverse0(nil0) -> nil0
   app0(cons0(n, x), y) -> cons0(n, app0(x, y))
   reverse0(cons0(n, x)) -> app0(reverse0(x), cons0(n, nil0))
   app0(nil0, y) -> y
   minus(s0(x)) -> minus(x)
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(38) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   DIV(s0(x)) -> DIV(minus(x))

Strictly oriented rules of the TRS R:

   div0(00, s0(y)) -> 00
   div0(s0(x), s0(y)) -> s0(div0(minus(x), s0(y)))
   minus(s0(x)) -> minus(x)

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 1
   POL(DIV(x_1)) = 2*x_1
   POL(app0(x_1, x_2)) = x_1 + 2*x_2
   POL(concat0(x_1, x_2)) = x_1 + 2*x_2
   POL(cons0(x_1, x_2)) = x_1 + x_2
   POL(consSwap0(x_1, x_2)) = x_1 + 2*x_2
   POL(div0(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(divL0(x_1, x_2)) = x_1 + 2*x_2
   POL(minus(x_1)) = x_1
   POL(nil0) = 0
   POL(reverse0(x_1)) = 2*x_1
   POL(s0(x_1)) = 1 + x_1
   POL(shuffle0(x_1)) = 2*x_1
   POL(xs0) = 0


----------------------------------------

(39)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   shuffle0(cons0(x, xs0)) -> shuffle0(consSwap0(x, xs0))
   consSwap0(x, xs0) -> cons0(x, xs0)
   concat0(cons0(u, v), y) -> cons0(u, concat0(v, y))
   divL0(z, cons0(x, xs0)) -> divL0(z, consSwap0(x, xs0))
   reverse0(nil0) -> nil0
   app0(cons0(n, x), y) -> cons0(n, app0(x, y))
   reverse0(cons0(n, x)) -> app0(reverse0(x), cons0(n, nil0))
   app0(nil0, y) -> y
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(40) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(41)
YES

----------------------------------------

(42)
Obligation:
Relative ADP Problem with
absolute ADPs:

   concat(cons(u, v), y) -> cons(u, CONCAT(v, y))

and relative ADPs:

   div(0, s(y)) -> 0
   shuffle(cons(x, xs)) -> shuffle(consSwap(x, xs))
   consSwap(x, xs) -> cons(x, xs)
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   concat(leaf, y) -> y
   divL(z, cons(x, xs)) -> divL(z, consSwap(x, xs))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   shuffle(nil) -> nil
   divL(x, nil) -> x
   reverse(nil) -> nil
   less_leaves(x, leaf) -> false
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   less_leaves(leaf, cons(w, z)) -> true
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))


----------------------------------------

(43) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:true = 
CONCAT_2 = 1
less_leaves_2 = 
app_2 = 
concat_2 = 
leaf = 
divL_2 = 
xs = 
shuffle_1 = 
nil = 
false = 
s_1 = 
reverse_1 = 
div_2 = 0
0 = 
minus_2 = 1
cons_2 = 
consSwap_2 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
CONCAT(x1, x2)  =  x1

cons(x1, x2)  =  cons(x1, x2)

div(x1, x2)  =  div(x2)

s(x1)  =  x1

minus(x1, x2)  =  x1

0  =  0


Recursive path order with status [RPO].
Quasi-Precedence: div_1 > 0

Status: cons_2: [1,2]
div_1: multiset status
0: multiset status


----------------------------------------

(44)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CONCAT(cons0(u, v)) -> CONCAT(v)

The TRS R consists of the following rules:

   div(s0(y)) -> 00
   shuffle0(cons0(x, xs0)) -> shuffle0(consSwap0(x, xs0))
   consSwap0(x, xs0) -> cons0(x, xs0)
   div(s0(y)) -> s0(div(s0(y)))
   concat0(leaf0, y) -> y
   concat0(cons0(u, v), y) -> cons0(u, concat0(v, y))
   divL0(z, cons0(x, xs0)) -> divL0(z, consSwap0(x, xs0))
   consSwap0(x, cons0(y, xs0)) -> cons0(y, consSwap0(x, xs0))
   divL0(x, cons0(y, xs0)) -> divL0(div(y), xs0)
   shuffle0(nil0) -> nil0
   divL0(x, nil0) -> x
   reverse0(nil0) -> nil0
   less_leaves0(x, leaf0) -> false0
   app0(cons0(n, x), y) -> cons0(n, app0(x, y))
   shuffle0(cons0(n, x)) -> cons0(n, shuffle0(reverse0(x)))
   less_leaves0(leaf0, cons0(w, z)) -> true0
   reverse0(cons0(n, x)) -> app0(reverse0(x), cons0(n, nil0))
   app0(nil0, y) -> y
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   less_leaves0(cons0(u, v), cons0(w, z)) -> less_leaves0(concat0(u, v), concat0(w, z))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(45) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   concat0(leaf0, y) -> y
   less_leaves0(x, leaf0) -> false0
   less_leaves0(leaf0, cons0(w, z)) -> true0

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(CONCAT(x_1)) = 2*x_1
   POL(app0(x_1, x_2)) = x_1 + x_2
   POL(concat0(x_1, x_2)) = 2*x_1 + x_2
   POL(cons0(x_1, x_2)) = 2*x_1 + x_2
   POL(consSwap0(x_1, x_2)) = 2*x_1 + x_2
   POL(div(x_1)) = 2*x_1
   POL(divL0(x_1, x_2)) = x_1 + 2*x_2
   POL(false0) = 2
   POL(leaf0) = 1
   POL(less_leaves0(x_1, x_2)) = 1 + 2*x_1 + 2*x_2
   POL(minus(x_1)) = 2*x_1
   POL(nil0) = 0
   POL(reverse0(x_1)) = x_1
   POL(s0(x_1)) = x_1
   POL(shuffle0(x_1)) = x_1
   POL(true0) = 2
   POL(xs0) = 0


----------------------------------------

(46)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CONCAT(cons0(u, v)) -> CONCAT(v)

The TRS R consists of the following rules:

   div(s0(y)) -> 00
   shuffle0(cons0(x, xs0)) -> shuffle0(consSwap0(x, xs0))
   consSwap0(x, xs0) -> cons0(x, xs0)
   div(s0(y)) -> s0(div(s0(y)))
   concat0(cons0(u, v), y) -> cons0(u, concat0(v, y))
   divL0(z, cons0(x, xs0)) -> divL0(z, consSwap0(x, xs0))
   consSwap0(x, cons0(y, xs0)) -> cons0(y, consSwap0(x, xs0))
   divL0(x, cons0(y, xs0)) -> divL0(div(y), xs0)
   shuffle0(nil0) -> nil0
   divL0(x, nil0) -> x
   reverse0(nil0) -> nil0
   app0(cons0(n, x), y) -> cons0(n, app0(x, y))
   shuffle0(cons0(n, x)) -> cons0(n, shuffle0(reverse0(x)))
   reverse0(cons0(n, x)) -> app0(reverse0(x), cons0(n, nil0))
   app0(nil0, y) -> y
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   less_leaves0(cons0(u, v), cons0(w, z)) -> less_leaves0(concat0(u, v), concat0(w, z))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(47) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   CONCAT(cons0(u, v)) -> CONCAT(v)

Strictly oriented rules of the TRS R:

   concat0(cons0(u, v), y) -> cons0(u, concat0(v, y))
   consSwap0(x, cons0(y, xs0)) -> cons0(y, consSwap0(x, xs0))
   divL0(x, cons0(y, xs0)) -> divL0(div(y), xs0)
   shuffle0(cons0(n, x)) -> cons0(n, shuffle0(reverse0(x)))
   less_leaves0(cons0(u, v), cons0(w, z)) -> less_leaves0(concat0(u, v), concat0(w, z))

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(CONCAT(x_1)) = 2*x_1
   POL(app0(x_1, x_2)) = x_1 + x_2
   POL(concat0(x_1, x_2)) = 2*x_1 + x_2
   POL(cons0(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(consSwap0(x_1, x_2)) = 1 + 2*x_1 + 2*x_2
   POL(div(x_1)) = 2*x_1
   POL(divL0(x_1, x_2)) = x_1 + 2*x_2
   POL(less_leaves0(x_1, x_2)) = 2*x_1 + x_2
   POL(minus(x_1)) = 2*x_1
   POL(nil0) = 0
   POL(reverse0(x_1)) = x_1
   POL(s0(x_1)) = x_1
   POL(shuffle0(x_1)) = 2*x_1
   POL(xs0) = 1


----------------------------------------

(48)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   div(s0(y)) -> 00
   shuffle0(cons0(x, xs0)) -> shuffle0(consSwap0(x, xs0))
   consSwap0(x, xs0) -> cons0(x, xs0)
   div(s0(y)) -> s0(div(s0(y)))
   divL0(z, cons0(x, xs0)) -> divL0(z, consSwap0(x, xs0))
   shuffle0(nil0) -> nil0
   divL0(x, nil0) -> x
   reverse0(nil0) -> nil0
   app0(cons0(n, x), y) -> cons0(n, app0(x, y))
   reverse0(cons0(n, x)) -> app0(reverse0(x), cons0(n, nil0))
   app0(nil0, y) -> y
   minus(s0(x)) -> minus(x)
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(49) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(50)
YES

----------------------------------------

(51)
Obligation:
Relative ADP Problem with
absolute ADPs:

   less_leaves(cons(u, v), cons(w, z)) -> LESS_LEAVES(concat(u, v), concat(w, z))

and relative ADPs:

   div(0, s(y)) -> 0
   shuffle(cons(x, xs)) -> shuffle(consSwap(x, xs))
   consSwap(x, xs) -> cons(x, xs)
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   divL(z, cons(x, xs)) -> divL(z, consSwap(x, xs))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   shuffle(nil) -> nil
   divL(x, nil) -> x
   reverse(nil) -> nil
   less_leaves(x, leaf) -> false
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   less_leaves(leaf, cons(w, z)) -> true
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))


----------------------------------------

(52) RelADPDerelatifyingProof (EQUIVALENT)


We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.
----------------------------------------

(53)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LESS_LEAVES(cons(u, v), cons(w, z)) -> LESS_LEAVES(concat(u, v), concat(w, z))

The TRS R consists of the following rules:

   div(0, s(y)) -> 0
   shuffle(cons(x, xs)) -> shuffle(consSwap(x, xs))
   consSwap(x, xs) -> cons(x, xs)
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   divL(z, cons(x, xs)) -> divL(z, consSwap(x, xs))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   shuffle(nil) -> nil
   divL(x, nil) -> x
   reverse(nil) -> nil
   less_leaves(x, leaf) -> false
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   less_leaves(leaf, cons(w, z)) -> true
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(54) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   LESS_LEAVES(cons(u, v), cons(w, z)) -> LESS_LEAVES(concat(u, v), concat(w, z))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( div_2(x_1, x_2) ) = max{0, -2}
POL( 0 ) = 0
POL( s_1(x_1) ) = x_1
POL( shuffle_1(x_1) ) = max{0, 2x_1 - 2}
POL( cons_2(x_1, x_2) ) = 2x_1 + x_2 + 2
POL( xs ) = 0
POL( consSwap_2(x_1, x_2) ) = 2x_1 + 2x_2 + 2
POL( minus_2(x_1, x_2) ) = x_1 + 2
POL( concat_2(x_1, x_2) ) = 2x_1 + x_2
POL( leaf ) = 1
POL( divL_2(x_1, x_2) ) = 2x_1
POL( nil ) = 0
POL( reverse_1(x_1) ) = x_1
POL( less_leaves_2(x_1, x_2) ) = x_1 + 1
POL( false ) = 1
POL( app_2(x_1, x_2) ) = x_1 + x_2
POL( true ) = 1
POL( LESS_LEAVES_2(x_1, x_2) ) = max{0, x_2 - 1}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   div(0, s(y)) -> 0
   shuffle(cons(x, xs)) -> shuffle(consSwap(x, xs))
   consSwap(x, xs) -> cons(x, xs)
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   divL(z, cons(x, xs)) -> divL(z, consSwap(x, xs))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   shuffle(nil) -> nil
   divL(x, nil) -> x
   reverse(nil) -> nil
   less_leaves(x, leaf) -> false
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   less_leaves(leaf, cons(w, z)) -> true
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))


----------------------------------------

(55)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   div(0, s(y)) -> 0
   shuffle(cons(x, xs)) -> shuffle(consSwap(x, xs))
   consSwap(x, xs) -> cons(x, xs)
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   divL(z, cons(x, xs)) -> divL(z, consSwap(x, xs))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   shuffle(nil) -> nil
   divL(x, nil) -> x
   reverse(nil) -> nil
   less_leaves(x, leaf) -> false
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   less_leaves(leaf, cons(w, z)) -> true
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(56) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(57)
YES

----------------------------------------

(58)
Obligation:
Relative ADP Problem with
absolute ADPs:

   reverse(cons(n, x)) -> app(REVERSE(x), cons(n, nil))

and relative ADPs:

   div(0, s(y)) -> 0
   shuffle(cons(x, xs)) -> shuffle(consSwap(x, xs))
   consSwap(x, xs) -> cons(x, xs)
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   divL(z, cons(x, xs)) -> divL(z, consSwap(x, xs))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   shuffle(nil) -> nil
   divL(x, nil) -> x
   reverse(nil) -> nil
   less_leaves(x, leaf) -> false
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   less_leaves(leaf, cons(w, z)) -> true
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))


----------------------------------------

(59) RelADPDerelatifyingProof (EQUIVALENT)


We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.
----------------------------------------

(60)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REVERSE(cons(n, x)) -> REVERSE(x)

The TRS R consists of the following rules:

   div(0, s(y)) -> 0
   shuffle(cons(x, xs)) -> shuffle(consSwap(x, xs))
   consSwap(x, xs) -> cons(x, xs)
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   divL(z, cons(x, xs)) -> divL(z, consSwap(x, xs))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   shuffle(nil) -> nil
   divL(x, nil) -> x
   reverse(nil) -> nil
   less_leaves(x, leaf) -> false
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   less_leaves(leaf, cons(w, z)) -> true
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(61) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   REVERSE(cons(n, x)) -> REVERSE(x)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( div_2(x_1, x_2) ) = max{0, -2}
POL( 0 ) = 0
POL( s_1(x_1) ) = x_1
POL( shuffle_1(x_1) ) = x_1 + 2
POL( cons_2(x_1, x_2) ) = x_1 + x_2 + 2
POL( xs ) = 2
POL( consSwap_2(x_1, x_2) ) = x_1 + 2x_2
POL( minus_2(x_1, x_2) ) = 2x_1 + 2
POL( concat_2(x_1, x_2) ) = 2x_1 + 2x_2 + 2
POL( leaf ) = 0
POL( divL_2(x_1, x_2) ) = 2x_1 + 2x_2
POL( nil ) = 0
POL( reverse_1(x_1) ) = x_1
POL( less_leaves_2(x_1, x_2) ) = 1
POL( false ) = 1
POL( app_2(x_1, x_2) ) = x_1 + x_2
POL( true ) = 0
POL( REVERSE_1(x_1) ) = 2x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   div(0, s(y)) -> 0
   shuffle(cons(x, xs)) -> shuffle(consSwap(x, xs))
   consSwap(x, xs) -> cons(x, xs)
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   divL(z, cons(x, xs)) -> divL(z, consSwap(x, xs))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   shuffle(nil) -> nil
   divL(x, nil) -> x
   reverse(nil) -> nil
   less_leaves(x, leaf) -> false
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   less_leaves(leaf, cons(w, z)) -> true
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))


----------------------------------------

(62)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   div(0, s(y)) -> 0
   shuffle(cons(x, xs)) -> shuffle(consSwap(x, xs))
   consSwap(x, xs) -> cons(x, xs)
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   divL(z, cons(x, xs)) -> divL(z, consSwap(x, xs))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   shuffle(nil) -> nil
   divL(x, nil) -> x
   reverse(nil) -> nil
   less_leaves(x, leaf) -> false
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   less_leaves(leaf, cons(w, z)) -> true
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(63) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(64)
YES

----------------------------------------

(65)
Obligation:
Relative ADP Problem with
absolute ADPs:

   shuffle(cons(n, x)) -> cons(n, SHUFFLE(reverse(x)))

and relative ADPs:

   div(0, s(y)) -> 0
   consSwap(x, xs) -> cons(x, xs)
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   concat(leaf, y) -> y
   shuffle(cons(x, xs)) -> SHUFFLE(CONSSWAP(x, xs))
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   divL(z, cons(x, xs)) -> divL(z, consSwap(x, xs))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   shuffle(nil) -> nil
   divL(x, nil) -> x
   reverse(nil) -> nil
   less_leaves(x, leaf) -> false
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   less_leaves(leaf, cons(w, z)) -> true
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))


----------------------------------------

(66) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   shuffle(cons(n, x)) -> cons(n, SHUFFLE(reverse(x)))

Relative ADPs:

   div(0, s(y)) -> 0
   consSwap(x, xs) -> cons(x, xs)
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   divL(z, cons(x, xs)) -> divL(z, consSwap(x, xs))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   shuffle(nil) -> nil
   divL(x, nil) -> x
   reverse(nil) -> nil
   less_leaves(x, leaf) -> false
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   less_leaves(leaf, cons(w, z)) -> true
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(APP(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(CONCAT(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(CONSSWAP(x_1, x_2)) = 0
   POL(DIV(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(DIVL(x_1, x_2)) = 1 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(LESS_LEAVES(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(MINUS(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(REVERSE(x_1)) = 1 + 3*x_1 + 3*x_1^2
   POL(SHUFFLE(x_1)) = 3 + x_1
   POL(app(x_1, x_2)) = x_1 + x_2
   POL(concat(x_1, x_2)) = x_1 + 2*x_2
   POL(cons(x_1, x_2)) = 2 + x_2
   POL(consSwap(x_1, x_2)) = 2 + x_2
   POL(div(x_1, x_2)) = 0
   POL(divL(x_1, x_2)) = 3 + x_1
   POL(false) = 3
   POL(leaf) = 3
   POL(less_leaves(x_1, x_2)) = 3
   POL(minus(x_1, x_2)) = x_1
   POL(nil) = 0
   POL(reverse(x_1)) = x_1
   POL(s(x_1)) = 2*x_1
   POL(shuffle(x_1)) = 2 + x_1
   POL(true) = 3
   POL(xs) = 2

----------------------------------------

(67)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   div(0, s(y)) -> 0
   consSwap(x, xs) -> cons(x, xs)
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   concat(leaf, y) -> y
   shuffle(cons(x, xs)) -> SHUFFLE(CONSSWAP(x, xs))
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   divL(z, cons(x, xs)) -> divL(z, consSwap(x, xs))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   shuffle(nil) -> nil
   divL(x, nil) -> x
   reverse(nil) -> nil
   less_leaves(x, leaf) -> false
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   less_leaves(leaf, cons(w, z)) -> true
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))


----------------------------------------

(68) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(69)
YES

----------------------------------------

(70)
Obligation:
Relative ADP Problem with
absolute ADPs:

   shuffle(cons(n, x)) -> cons(n, shuffle(REVERSE(x)))

and relative ADPs:

   div(0, s(y)) -> 0
   consSwap(x, xs) -> cons(x, xs)
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   concat(leaf, y) -> y
   shuffle(cons(x, xs)) -> SHUFFLE(CONSSWAP(x, xs))
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   divL(z, cons(x, xs)) -> divL(z, consSwap(x, xs))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   shuffle(nil) -> nil
   divL(x, nil) -> x
   reverse(nil) -> nil
   less_leaves(x, leaf) -> false
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   less_leaves(leaf, cons(w, z)) -> true
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))


----------------------------------------

(71) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   shuffle(cons(n, x)) -> cons(n, shuffle(REVERSE(x)))

Relative ADPs:

   div(0, s(y)) -> 0
   consSwap(x, xs) -> cons(x, xs)
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   divL(z, cons(x, xs)) -> divL(z, consSwap(x, xs))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   shuffle(nil) -> nil
   divL(x, nil) -> x
   reverse(nil) -> nil
   less_leaves(x, leaf) -> false
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   less_leaves(leaf, cons(w, z)) -> true
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(APP(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(CONCAT(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(CONSSWAP(x_1, x_2)) = 0
   POL(DIV(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(DIVL(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(LESS_LEAVES(x_1, x_2)) = 2 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(MINUS(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(REVERSE(x_1)) = 1
   POL(SHUFFLE(x_1)) = 3
   POL(app(x_1, x_2)) = 2 + x_2
   POL(concat(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(cons(x_1, x_2)) = 2
   POL(consSwap(x_1, x_2)) = 2*x_2
   POL(div(x_1, x_2)) = 1
   POL(divL(x_1, x_2)) = 3 + x_1 + 3*x_2
   POL(false) = 3
   POL(leaf) = 3
   POL(less_leaves(x_1, x_2)) = 3
   POL(minus(x_1, x_2)) = x_1
   POL(nil) = 0
   POL(reverse(x_1)) = 2*x_1
   POL(s(x_1)) = x_1
   POL(shuffle(x_1)) = 2
   POL(true) = 3
   POL(xs) = 1

----------------------------------------

(72)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   div(0, s(y)) -> 0
   consSwap(x, xs) -> cons(x, xs)
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   concat(leaf, y) -> y
   shuffle(cons(x, xs)) -> SHUFFLE(CONSSWAP(x, xs))
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   divL(z, cons(x, xs)) -> divL(z, consSwap(x, xs))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   shuffle(nil) -> nil
   divL(x, nil) -> x
   reverse(nil) -> nil
   less_leaves(x, leaf) -> false
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   less_leaves(leaf, cons(w, z)) -> true
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))


----------------------------------------

(73) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(74)
YES

----------------------------------------

(75)
Obligation:
Relative ADP Problem with
absolute ADPs:

   shuffle(nil) -> nil

and relative ADPs:

   div(0, s(y)) -> 0
   consSwap(x, xs) -> cons(x, xs)
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   concat(leaf, y) -> y
   shuffle(cons(x, xs)) -> SHUFFLE(CONSSWAP(x, xs))
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   divL(z, cons(x, xs)) -> divL(z, consSwap(x, xs))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   divL(x, nil) -> x
   reverse(nil) -> nil
   less_leaves(x, leaf) -> false
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   less_leaves(leaf, cons(w, z)) -> true
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))


----------------------------------------

(76) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   shuffle(nil) -> nil

Relative ADPs:

   div(0, s(y)) -> 0
   consSwap(x, xs) -> cons(x, xs)
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   divL(z, cons(x, xs)) -> divL(z, consSwap(x, xs))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   divL(x, nil) -> x
   reverse(nil) -> nil
   less_leaves(x, leaf) -> false
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   less_leaves(leaf, cons(w, z)) -> true
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(APP(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(CONCAT(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(CONSSWAP(x_1, x_2)) = 2*x_2
   POL(DIV(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(DIVL(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(LESS_LEAVES(x_1, x_2)) = 3 + x_1 + 3*x_1*x_2 + 3*x_2
   POL(MINUS(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(REVERSE(x_1)) = 3 + 3*x_1 + 3*x_1^2
   POL(SHUFFLE(x_1)) = 1
   POL(app(x_1, x_2)) = 2*x_2
   POL(concat(x_1, x_2)) = 2 + 2*x_2
   POL(cons(x_1, x_2)) = 0
   POL(consSwap(x_1, x_2)) = 0
   POL(div(x_1, x_2)) = 0
   POL(divL(x_1, x_2)) = 3 + 2*x_1
   POL(false) = 3
   POL(leaf) = 3
   POL(less_leaves(x_1, x_2)) = 3
   POL(minus(x_1, x_2)) = 2*x_1
   POL(nil) = 0
   POL(reverse(x_1)) = 0
   POL(s(x_1)) = x_1
   POL(shuffle(x_1)) = 0
   POL(true) = 3
   POL(xs) = 0

----------------------------------------

(77)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   div(0, s(y)) -> 0
   consSwap(x, xs) -> cons(x, xs)
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   concat(leaf, y) -> y
   shuffle(cons(x, xs)) -> SHUFFLE(CONSSWAP(x, xs))
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   divL(z, cons(x, xs)) -> divL(z, consSwap(x, xs))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   shuffle(nil) -> nil
   divL(x, nil) -> x
   reverse(nil) -> nil
   less_leaves(x, leaf) -> false
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   less_leaves(leaf, cons(w, z)) -> true
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))


----------------------------------------

(78) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(79)
YES

----------------------------------------

(80)
Obligation:
Relative ADP Problem with
absolute ADPs:

   shuffle(cons(n, x)) -> cons(n, SHUFFLE(reverse(x)))

and relative ADPs:

   div(0, s(y)) -> 0
   consSwap(x, xs) -> cons(x, xs)
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   concat(leaf, y) -> y
   shuffle(cons(x, xs)) -> SHUFFLE(CONSSWAP(x, xs))
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   divL(z, cons(x, xs)) -> divL(z, consSwap(x, xs))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   shuffle(nil) -> nil
   divL(x, nil) -> x
   reverse(nil) -> nil
   less_leaves(x, leaf) -> false
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   less_leaves(leaf, cons(w, z)) -> true
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))


----------------------------------------

(81) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   shuffle(cons(n, x)) -> cons(n, SHUFFLE(reverse(x)))

Relative ADPs:

   div(0, s(y)) -> 0
   consSwap(x, xs) -> cons(x, xs)
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   divL(z, cons(x, xs)) -> divL(z, consSwap(x, xs))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   shuffle(nil) -> nil
   divL(x, nil) -> x
   reverse(nil) -> nil
   less_leaves(x, leaf) -> false
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   less_leaves(leaf, cons(w, z)) -> true
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(APP(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(CONCAT(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(CONSSWAP(x_1, x_2)) = 0
   POL(DIV(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(DIVL(x_1, x_2)) = 1 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(LESS_LEAVES(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(MINUS(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(REVERSE(x_1)) = 1 + 3*x_1 + 3*x_1^2
   POL(SHUFFLE(x_1)) = 3 + x_1
   POL(app(x_1, x_2)) = x_1 + x_2
   POL(concat(x_1, x_2)) = x_1 + 2*x_2
   POL(cons(x_1, x_2)) = 2 + x_2
   POL(consSwap(x_1, x_2)) = 2 + x_2
   POL(div(x_1, x_2)) = 0
   POL(divL(x_1, x_2)) = 3 + x_1
   POL(false) = 3
   POL(leaf) = 3
   POL(less_leaves(x_1, x_2)) = 3
   POL(minus(x_1, x_2)) = x_1
   POL(nil) = 0
   POL(reverse(x_1)) = x_1
   POL(s(x_1)) = 2*x_1
   POL(shuffle(x_1)) = 2 + x_1
   POL(true) = 3
   POL(xs) = 2

----------------------------------------

(82)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   div(0, s(y)) -> 0
   consSwap(x, xs) -> cons(x, xs)
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   concat(leaf, y) -> y
   shuffle(cons(x, xs)) -> SHUFFLE(CONSSWAP(x, xs))
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   divL(z, cons(x, xs)) -> divL(z, consSwap(x, xs))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   shuffle(nil) -> nil
   divL(x, nil) -> x
   reverse(nil) -> nil
   less_leaves(x, leaf) -> false
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   less_leaves(leaf, cons(w, z)) -> true
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))


----------------------------------------

(83) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(84)
YES

----------------------------------------

(85)
Obligation:
Relative ADP Problem with
absolute ADPs:

   divL(x, cons(y, xs)) -> divL(DIV(x, y), xs)

and relative ADPs:

   div(0, s(y)) -> 0
   shuffle(cons(x, xs)) -> shuffle(consSwap(x, xs))
   divL(z, cons(x, xs)) -> DIVL(z, CONSSWAP(x, xs))
   consSwap(x, xs) -> cons(x, xs)
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   shuffle(nil) -> nil
   divL(x, nil) -> x
   reverse(nil) -> nil
   less_leaves(x, leaf) -> false
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   less_leaves(leaf, cons(w, z)) -> true
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))


----------------------------------------

(86) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   divL(x, cons(y, xs)) -> divL(DIV(x, y), xs)

Relative ADPs:

   div(0, s(y)) -> 0
   shuffle(cons(x, xs)) -> shuffle(consSwap(x, xs))
   consSwap(x, xs) -> cons(x, xs)
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   shuffle(nil) -> nil
   divL(x, nil) -> x
   reverse(nil) -> nil
   less_leaves(x, leaf) -> false
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   less_leaves(leaf, cons(w, z)) -> true
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(APP(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(CONCAT(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(CONSSWAP(x_1, x_2)) = 2*x_2
   POL(DIV(x_1, x_2)) = 1 + 2*x_1
   POL(DIVL(x_1, x_2)) = 3 + 3*x_1
   POL(LESS_LEAVES(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(MINUS(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(REVERSE(x_1)) = 3 + 3*x_1 + 3*x_1^2
   POL(SHUFFLE(x_1)) = 3 + 3*x_1 + 3*x_1^2
   POL(app(x_1, x_2)) = 2*x_2
   POL(concat(x_1, x_2)) = 2 + 2*x_2
   POL(cons(x_1, x_2)) = 0
   POL(consSwap(x_1, x_2)) = 0
   POL(div(x_1, x_2)) = 0
   POL(divL(x_1, x_2)) = 3 + 2*x_1
   POL(false) = 3
   POL(leaf) = 3
   POL(less_leaves(x_1, x_2)) = 3
   POL(minus(x_1, x_2)) = 2*x_1
   POL(nil) = 0
   POL(reverse(x_1)) = 0
   POL(s(x_1)) = 2*x_1
   POL(shuffle(x_1)) = 0
   POL(true) = 3
   POL(xs) = 0

----------------------------------------

(87)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   div(0, s(y)) -> 0
   shuffle(cons(x, xs)) -> shuffle(consSwap(x, xs))
   divL(z, cons(x, xs)) -> DIVL(z, CONSSWAP(x, xs))
   consSwap(x, xs) -> cons(x, xs)
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   shuffle(nil) -> nil
   divL(x, nil) -> x
   reverse(nil) -> nil
   less_leaves(x, leaf) -> false
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   less_leaves(leaf, cons(w, z)) -> true
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))


----------------------------------------

(88) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(89)
YES

----------------------------------------

(90)
Obligation:
Relative ADP Problem with
absolute ADPs:

   divL(x, nil) -> x

and relative ADPs:

   div(0, s(y)) -> 0
   shuffle(cons(x, xs)) -> shuffle(consSwap(x, xs))
   divL(z, cons(x, xs)) -> DIVL(z, CONSSWAP(x, xs))
   consSwap(x, xs) -> cons(x, xs)
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   shuffle(nil) -> nil
   reverse(nil) -> nil
   less_leaves(x, leaf) -> false
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   less_leaves(leaf, cons(w, z)) -> true
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))


----------------------------------------

(91) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   divL(x, nil) -> x

Relative ADPs:

   div(0, s(y)) -> 0
   shuffle(cons(x, xs)) -> shuffle(consSwap(x, xs))
   consSwap(x, xs) -> cons(x, xs)
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   shuffle(nil) -> nil
   reverse(nil) -> nil
   less_leaves(x, leaf) -> false
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   less_leaves(leaf, cons(w, z)) -> true
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(APP(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(CONCAT(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(CONSSWAP(x_1, x_2)) = 2*x_2
   POL(DIV(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(DIVL(x_1, x_2)) = 1
   POL(LESS_LEAVES(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(MINUS(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(REVERSE(x_1)) = 3 + 3*x_1 + 3*x_1^2
   POL(SHUFFLE(x_1)) = 3 + 3*x_1 + 3*x_1^2
   POL(app(x_1, x_2)) = 2*x_2
   POL(concat(x_1, x_2)) = x_2
   POL(cons(x_1, x_2)) = 0
   POL(consSwap(x_1, x_2)) = 2
   POL(div(x_1, x_2)) = 0
   POL(divL(x_1, x_2)) = 3 + 2*x_1
   POL(false) = 3
   POL(leaf) = 3
   POL(less_leaves(x_1, x_2)) = 3
   POL(minus(x_1, x_2)) = x_1
   POL(nil) = 0
   POL(reverse(x_1)) = 0
   POL(s(x_1)) = x_1
   POL(shuffle(x_1)) = 0
   POL(true) = 3
   POL(xs) = 0

----------------------------------------

(92)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   div(0, s(y)) -> 0
   shuffle(cons(x, xs)) -> shuffle(consSwap(x, xs))
   divL(z, cons(x, xs)) -> DIVL(z, CONSSWAP(x, xs))
   consSwap(x, xs) -> cons(x, xs)
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   shuffle(nil) -> nil
   divL(x, nil) -> x
   reverse(nil) -> nil
   less_leaves(x, leaf) -> false
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   less_leaves(leaf, cons(w, z)) -> true
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))


----------------------------------------

(93) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(94)
YES

----------------------------------------

(95)
Obligation:
Relative ADP Problem with
absolute ADPs:

   divL(x, cons(y, xs)) -> DIVL(div(x, y), xs)

and relative ADPs:

   div(0, s(y)) -> 0
   shuffle(cons(x, xs)) -> shuffle(consSwap(x, xs))
   divL(z, cons(x, xs)) -> DIVL(z, CONSSWAP(x, xs))
   consSwap(x, xs) -> cons(x, xs)
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   shuffle(nil) -> nil
   divL(x, nil) -> x
   reverse(nil) -> nil
   less_leaves(x, leaf) -> false
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   less_leaves(leaf, cons(w, z)) -> true
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))


----------------------------------------

(96) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   divL(x, cons(y, xs)) -> DIVL(div(x, y), xs)

Relative ADPs:

   div(0, s(y)) -> 0
   shuffle(cons(x, xs)) -> shuffle(consSwap(x, xs))
   consSwap(x, xs) -> cons(x, xs)
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   shuffle(nil) -> nil
   divL(x, nil) -> x
   reverse(nil) -> nil
   less_leaves(x, leaf) -> false
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   less_leaves(leaf, cons(w, z)) -> true
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(APP(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(CONCAT(x_1, x_2)) = 1 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(CONSSWAP(x_1, x_2)) = 2*x_2
   POL(DIV(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(DIVL(x_1, x_2)) = 3 + 2*x_2
   POL(LESS_LEAVES(x_1, x_2)) = 1 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(MINUS(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(REVERSE(x_1)) = 1 + 3*x_1 + 3*x_1^2
   POL(SHUFFLE(x_1)) = 1 + 3*x_1 + 3*x_1^2
   POL(app(x_1, x_2)) = 2 + x_2
   POL(concat(x_1, x_2)) = 2 + 3*x_1 + 2*x_2
   POL(cons(x_1, x_2)) = 2
   POL(consSwap(x_1, x_2)) = 2
   POL(div(x_1, x_2)) = 0
   POL(divL(x_1, x_2)) = 3 + 2*x_1
   POL(false) = 3
   POL(leaf) = 3
   POL(less_leaves(x_1, x_2)) = 3
   POL(minus(x_1, x_2)) = 2*x_1
   POL(nil) = 0
   POL(reverse(x_1)) = 2*x_1
   POL(s(x_1)) = x_1
   POL(shuffle(x_1)) = 2 + 3*x_1
   POL(true) = 3
   POL(xs) = 0

----------------------------------------

(97)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   div(0, s(y)) -> 0
   shuffle(cons(x, xs)) -> shuffle(consSwap(x, xs))
   divL(z, cons(x, xs)) -> DIVL(z, CONSSWAP(x, xs))
   consSwap(x, xs) -> cons(x, xs)
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   shuffle(nil) -> nil
   divL(x, nil) -> x
   reverse(nil) -> nil
   less_leaves(x, leaf) -> false
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   less_leaves(leaf, cons(w, z)) -> true
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))


----------------------------------------

(98) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(99)
YES
