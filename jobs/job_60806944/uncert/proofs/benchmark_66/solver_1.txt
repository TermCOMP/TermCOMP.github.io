YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/IHsMH.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) RelADPP
        (6) RelADPCleverAfsProof [SOUND, 68 ms]
        (7) QDP
        (8) MRRProof [EQUIVALENT, 18 ms]
        (9) QDP
        (10) MRRProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) MRRProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) MRRProof [EQUIVALENT, 0 ms]
        (15) QDP
        (16) MRRProof [EQUIVALENT, 2 ms]
        (17) QDP
        (18) QDPOrderProof [EQUIVALENT, 0 ms]
        (19) QDP
        (20) PisEmptyProof [EQUIVALENT, 0 ms]
        (21) YES
    (22) RelADPP
        (23) RelADPCleverAfsProof [SOUND, 68 ms]
        (24) QDP
        (25) MRRProof [EQUIVALENT, 10 ms]
        (26) QDP
        (27) MRRProof [EQUIVALENT, 0 ms]
        (28) QDP
        (29) MRRProof [EQUIVALENT, 0 ms]
        (30) QDP
        (31) MRRProof [EQUIVALENT, 3 ms]
        (32) QDP
        (33) MRRProof [EQUIVALENT, 0 ms]
        (34) QDP
        (35) QDPOrderProof [EQUIVALENT, 0 ms]
        (36) QDP
        (37) PisEmptyProof [EQUIVALENT, 0 ms]
        (38) YES
    (39) RelADPP
        (40) RelADPCleverAfsProof [SOUND, 76 ms]
        (41) QDP
        (42) MRRProof [EQUIVALENT, 12 ms]
        (43) QDP
        (44) MRRProof [EQUIVALENT, 0 ms]
        (45) QDP
        (46) MRRProof [EQUIVALENT, 4 ms]
        (47) QDP
        (48) QDPOrderProof [EQUIVALENT, 8 ms]
        (49) QDP
        (50) DependencyGraphProof [EQUIVALENT, 0 ms]
        (51) TRUE


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   mod(0, y) -> 0
   mod(s(x), 0) -> 0
   mod(s(x), s(y)) -> if_mod(le(y, x), s(x), s(y))
   if_mod(true, s(x), s(y)) -> mod(minus(x, y), s(y))
   if_mod(false, s(x), s(y)) -> s(x)

The relative TRS consists of the following S rules:

   rand(x) -> rand(s(x))
   rand(x) -> x


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> LE(x, y)
   minus(x, 0) -> x
   minus(s(x), s(y)) -> MINUS(x, y)
   mod(0, y) -> 0
   mod(s(x), 0) -> 0
   mod(s(x), s(y)) -> IF_MOD(le(y, x), s(x), s(y))
   mod(s(x), s(y)) -> if_mod(LE(y, x), s(x), s(y))
   if_mod(true, s(x), s(y)) -> MOD(minus(x, y), s(y))
   if_mod(true, s(x), s(y)) -> mod(MINUS(x, y), s(y))
   if_mod(false, s(x), s(y)) -> s(x)

and relative ADPs:

   rand(x) -> RAND(s(x))
   rand(x) -> x


----------------------------------------

(3) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  3 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Relative ADP Problem with
absolute ADPs:

   minus(s(x), s(y)) -> MINUS(x, y)

and relative ADPs:

   mod(s(x), s(y)) -> if_mod(le(y, x), s(x), s(y))
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false
   mod(0, y) -> 0
   if_mod(true, s(x), s(y)) -> mod(minus(x, y), s(y))
   if_mod(false, s(x), s(y)) -> s(x)
   le(0, y) -> true
   mod(s(x), 0) -> 0
   minus(x, 0) -> x
   rand(x) -> rand(s(x))
   rand(x) -> x


----------------------------------------

(6) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:s_1 = 
MINUS_2 = 0
mod_2 = 1
if_mod_3 = 0, 2
true = 
le_2 = 0, 1
0 = 
minus_2 = 1
rand_1 = 
false = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
MINUS(x1, x2)  =  MINUS(x2)

s(x1)  =  s(x1)

mod(x1, x2)  =  mod(x1)

if_mod(x1, x2, x3)  =  x2

le(x1, x2)  =  le

true  =  true

minus(x1, x2)  =  minus(x1)

0  =  0

false  =  false


Recursive path order with status [RPO].
Quasi-Precedence: [MINUS_1, s_1, le, true, false] > mod_1 > minus_1
[MINUS_1, s_1, le, true, false] > 0 > minus_1

Status: MINUS_1: [1]
s_1: multiset status
mod_1: multiset status
le: []
true: multiset status
minus_1: multiset status
0: multiset status
false: multiset status


----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s0(y)) -> MINUS(y)

The TRS R consists of the following rules:

   mod(s0(x)) -> if_mod(s0(x))
   le -> le
   le -> false0
   mod(00) -> 00
   if_mod(s0(x)) -> mod(minus(x))
   if_mod(s0(x)) -> s0(x)
   le -> true0
   minus(s0(x)) -> minus(x)
   mod(s0(x)) -> 00
   minus(x) -> x
   rand0(x) -> rand0(s0(x))
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(8) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   mod(00) -> 00
   if_mod(s0(x)) -> s0(x)

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 1
   POL(MINUS(x_1)) = 2*x_1
   POL(false0) = 2
   POL(if_mod(x_1)) = 1 + 2*x_1
   POL(le) = 2
   POL(minus(x_1)) = x_1
   POL(mod(x_1)) = 1 + 2*x_1
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 2


----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s0(y)) -> MINUS(y)

The TRS R consists of the following rules:

   mod(s0(x)) -> if_mod(s0(x))
   le -> le
   le -> false0
   if_mod(s0(x)) -> mod(minus(x))
   le -> true0
   minus(s0(x)) -> minus(x)
   mod(s0(x)) -> 00
   minus(x) -> x
   rand0(x) -> rand0(s0(x))
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(10) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   rand0(x) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 2
   POL(MINUS(x_1)) = 2*x_1
   POL(false0) = 2
   POL(if_mod(x_1)) = 2 + x_1
   POL(le) = 2
   POL(minus(x_1)) = x_1
   POL(mod(x_1)) = 2 + x_1
   POL(rand0(x_1)) = 1 + 2*x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 2


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s0(y)) -> MINUS(y)

The TRS R consists of the following rules:

   mod(s0(x)) -> if_mod(s0(x))
   le -> le
   le -> false0
   if_mod(s0(x)) -> mod(minus(x))
   le -> true0
   minus(s0(x)) -> minus(x)
   mod(s0(x)) -> 00
   minus(x) -> x
   rand0(x) -> rand0(s0(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   le -> false0

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 2
   POL(MINUS(x_1)) = 2*x_1
   POL(false0) = 0
   POL(if_mod(x_1)) = 2 + x_1
   POL(le) = 2
   POL(minus(x_1)) = x_1
   POL(mod(x_1)) = 2 + x_1
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 2


----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s0(y)) -> MINUS(y)

The TRS R consists of the following rules:

   mod(s0(x)) -> if_mod(s0(x))
   le -> le
   if_mod(s0(x)) -> mod(minus(x))
   le -> true0
   minus(s0(x)) -> minus(x)
   mod(s0(x)) -> 00
   minus(x) -> x
   rand0(x) -> rand0(s0(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(14) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   le -> true0

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 2
   POL(MINUS(x_1)) = 2*x_1
   POL(if_mod(x_1)) = 2 + x_1
   POL(le) = 1
   POL(minus(x_1)) = x_1
   POL(mod(x_1)) = 2 + x_1
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 0


----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s0(y)) -> MINUS(y)

The TRS R consists of the following rules:

   mod(s0(x)) -> if_mod(s0(x))
   le -> le
   if_mod(s0(x)) -> mod(minus(x))
   minus(s0(x)) -> minus(x)
   mod(s0(x)) -> 00
   minus(x) -> x
   rand0(x) -> rand0(s0(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(16) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   mod(s0(x)) -> 00

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(MINUS(x_1)) = 2*x_1
   POL(if_mod(x_1)) = 2 + x_1
   POL(le) = 0
   POL(minus(x_1)) = x_1
   POL(mod(x_1)) = 2 + x_1
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1


----------------------------------------

(17)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s0(y)) -> MINUS(y)

The TRS R consists of the following rules:

   mod(s0(x)) -> if_mod(s0(x))
   le -> le
   if_mod(s0(x)) -> mod(minus(x))
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   rand0(x) -> rand0(s0(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(18) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MINUS(s0(y)) -> MINUS(y)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
MINUS(x1)  =  x1

s0(x1)  =  s0(x1)

mod(x1)  =  x1

if_mod(x1)  =  x1

le  =  le

minus(x1)  =  x1

rand0(x1)  =  rand0


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   le=1
   s0_1=1
   rand0=2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mod(s0(x)) -> if_mod(s0(x))
   le -> le
   if_mod(s0(x)) -> mod(minus(x))
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   rand0(x) -> rand0(s0(x))


----------------------------------------

(19)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   mod(s0(x)) -> if_mod(s0(x))
   le -> le
   if_mod(s0(x)) -> mod(minus(x))
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   rand0(x) -> rand0(s0(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(20) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(21)
YES

----------------------------------------

(22)
Obligation:
Relative ADP Problem with
absolute ADPs:

   le(s(x), s(y)) -> LE(x, y)

and relative ADPs:

   mod(s(x), s(y)) -> if_mod(le(y, x), s(x), s(y))
   le(s(x), 0) -> false
   mod(0, y) -> 0
   if_mod(true, s(x), s(y)) -> mod(minus(x, y), s(y))
   if_mod(false, s(x), s(y)) -> s(x)
   le(0, y) -> true
   minus(s(x), s(y)) -> minus(x, y)
   mod(s(x), 0) -> 0
   minus(x, 0) -> x
   rand(x) -> rand(s(x))
   rand(x) -> x


----------------------------------------

(23) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:s_1 = 
mod_2 = 
if_mod_3 = 0
true = 
LE_2 = 1
le_2 = 0, 1
0 = 
minus_2 = 1
rand_1 = 
false = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
LE(x1, x2)  =  x1

s(x1)  =  s(x1)

mod(x1, x2)  =  mod(x1, x2)

if_mod(x1, x2, x3)  =  if_mod(x2, x3)

le(x1, x2)  =  le

true  =  true

minus(x1, x2)  =  minus(x1)

0  =  0

false  =  false


Recursive path order with status [RPO].
Quasi-Precedence: [le, 0, false] > true > [s_1, mod_2, if_mod_2, minus_1]

Status: s_1: [1]
mod_2: multiset status
if_mod_2: multiset status
le: multiset status
true: multiset status
minus_1: [1]
0: multiset status
false: multiset status


----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s0(x)) -> LE(x)

The TRS R consists of the following rules:

   mod0(s0(x), s0(y)) -> if_mod(s0(x), s0(y))
   le -> le
   le -> false0
   mod0(00, y) -> 00
   if_mod(s0(x), s0(y)) -> mod0(minus(x), s0(y))
   if_mod(s0(x), s0(y)) -> s0(x)
   le -> true0
   minus(s0(x)) -> minus(x)
   mod0(s0(x), 00) -> 00
   minus(x) -> x
   rand0(x) -> rand0(s0(x))
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(25) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   rand0(x) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(LE(x_1)) = 2*x_1
   POL(false0) = 2
   POL(if_mod(x_1, x_2)) = 2*x_1 + x_2
   POL(le) = 2
   POL(minus(x_1)) = x_1
   POL(mod0(x_1, x_2)) = 2*x_1 + x_2
   POL(rand0(x_1)) = 1 + 2*x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 2


----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s0(x)) -> LE(x)

The TRS R consists of the following rules:

   mod0(s0(x), s0(y)) -> if_mod(s0(x), s0(y))
   le -> le
   le -> false0
   mod0(00, y) -> 00
   if_mod(s0(x), s0(y)) -> mod0(minus(x), s0(y))
   if_mod(s0(x), s0(y)) -> s0(x)
   le -> true0
   minus(s0(x)) -> minus(x)
   mod0(s0(x), 00) -> 00
   minus(x) -> x
   rand0(x) -> rand0(s0(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(27) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   le -> false0

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(LE(x_1)) = 2*x_1
   POL(false0) = 0
   POL(if_mod(x_1, x_2)) = 2*x_1 + x_2
   POL(le) = 1
   POL(minus(x_1)) = x_1
   POL(mod0(x_1, x_2)) = 2*x_1 + x_2
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 1


----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s0(x)) -> LE(x)

The TRS R consists of the following rules:

   mod0(s0(x), s0(y)) -> if_mod(s0(x), s0(y))
   le -> le
   mod0(00, y) -> 00
   if_mod(s0(x), s0(y)) -> mod0(minus(x), s0(y))
   if_mod(s0(x), s0(y)) -> s0(x)
   le -> true0
   minus(s0(x)) -> minus(x)
   mod0(s0(x), 00) -> 00
   minus(x) -> x
   rand0(x) -> rand0(s0(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(29) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   le -> true0

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(LE(x_1)) = 2*x_1
   POL(if_mod(x_1, x_2)) = 2*x_1 + x_2
   POL(le) = 1
   POL(minus(x_1)) = x_1
   POL(mod0(x_1, x_2)) = 2*x_1 + x_2
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 0


----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s0(x)) -> LE(x)

The TRS R consists of the following rules:

   mod0(s0(x), s0(y)) -> if_mod(s0(x), s0(y))
   le -> le
   mod0(00, y) -> 00
   if_mod(s0(x), s0(y)) -> mod0(minus(x), s0(y))
   if_mod(s0(x), s0(y)) -> s0(x)
   minus(s0(x)) -> minus(x)
   mod0(s0(x), 00) -> 00
   minus(x) -> x
   rand0(x) -> rand0(s0(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(31) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   mod0(00, y) -> 00
   mod0(s0(x), 00) -> 00

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 1
   POL(LE(x_1)) = 2*x_1
   POL(if_mod(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(le) = 0
   POL(minus(x_1)) = x_1
   POL(mod0(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1


----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s0(x)) -> LE(x)

The TRS R consists of the following rules:

   mod0(s0(x), s0(y)) -> if_mod(s0(x), s0(y))
   le -> le
   if_mod(s0(x), s0(y)) -> mod0(minus(x), s0(y))
   if_mod(s0(x), s0(y)) -> s0(x)
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   rand0(x) -> rand0(s0(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(33) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   if_mod(s0(x), s0(y)) -> s0(x)

Used ordering: Polynomial interpretation [POLO]:

   POL(LE(x_1)) = 2*x_1
   POL(if_mod(x_1, x_2)) = 2 + x_1 + x_2
   POL(le) = 0
   POL(minus(x_1)) = x_1
   POL(mod0(x_1, x_2)) = 2 + x_1 + x_2
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1


----------------------------------------

(34)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s0(x)) -> LE(x)

The TRS R consists of the following rules:

   mod0(s0(x), s0(y)) -> if_mod(s0(x), s0(y))
   le -> le
   if_mod(s0(x), s0(y)) -> mod0(minus(x), s0(y))
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   rand0(x) -> rand0(s0(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(35) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   LE(s0(x)) -> LE(x)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( mod0_2(x_1, x_2) ) = max{0, x_1 - 2}
POL( s0_1(x_1) ) = 2x_1 + 2
POL( if_mod_2(x_1, x_2) ) = max{0, x_1 - 2}
POL( le ) = 0
POL( minus_1(x_1) ) = x_1
POL( rand0_1(x_1) ) = max{0, -2}
POL( LE_1(x_1) ) = 2x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mod0(s0(x), s0(y)) -> if_mod(s0(x), s0(y))
   le -> le
   if_mod(s0(x), s0(y)) -> mod0(minus(x), s0(y))
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   rand0(x) -> rand0(s0(x))


----------------------------------------

(36)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   mod0(s0(x), s0(y)) -> if_mod(s0(x), s0(y))
   le -> le
   if_mod(s0(x), s0(y)) -> mod0(minus(x), s0(y))
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   rand0(x) -> rand0(s0(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(37) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(38)
YES

----------------------------------------

(39)
Obligation:
Relative ADP Problem with
absolute ADPs:

   if_mod(true, s(x), s(y)) -> MOD(minus(x, y), s(y))
   mod(s(x), s(y)) -> IF_MOD(le(y, x), s(x), s(y))

and relative ADPs:

   mod(s(x), s(y)) -> if_mod(le(y, x), s(x), s(y))
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false
   mod(0, y) -> 0
   if_mod(true, s(x), s(y)) -> mod(minus(x, y), s(y))
   if_mod(false, s(x), s(y)) -> s(x)
   le(0, y) -> true
   minus(s(x), s(y)) -> minus(x, y)
   mod(s(x), 0) -> 0
   minus(x, 0) -> x
   rand(x) -> rand(s(x))
   rand(x) -> x


----------------------------------------

(40) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:s_1 = 
mod_2 = 1
if_mod_3 = 0, 2
true = 
le_2 = 0, 1
0 = 
MOD_2 = 1
minus_2 = 1
IF_MOD_3 = 2
rand_1 = 
false = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
MOD(x1, x2)  =  MOD(x1)

s(x1)  =  s(x1)

IF_MOD(x1, x2, x3)  =  IF_MOD(x1, x2)

le(x1, x2)  =  le

true  =  true

minus(x1, x2)  =  x1

0  =  0

false  =  false

mod(x1, x2)  =  mod(x1)

if_mod(x1, x2, x3)  =  if_mod(x2)


Recursive path order with status [RPO].
Quasi-Precedence: [MOD_1, s_1, le, true, mod_1, if_mod_1] > [0, false] > IF_MOD_2

Status: MOD_1: multiset status
s_1: multiset status
IF_MOD_2: multiset status
le: multiset status
true: multiset status
0: multiset status
false: multiset status
mod_1: multiset status
if_mod_1: multiset status


----------------------------------------

(41)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MOD(s0(x)) -> IF_MOD(le, s0(x))
   IF_MOD(true0, s0(x)) -> MOD(minus(x))

The TRS R consists of the following rules:

   mod(s0(x)) -> if_mod(s0(x))
   le -> le
   le -> false0
   mod(00) -> 00
   if_mod(s0(x)) -> mod(minus(x))
   if_mod(s0(x)) -> s0(x)
   le -> true0
   minus(s0(x)) -> minus(x)
   mod(s0(x)) -> 00
   minus(x) -> x
   rand0(x) -> rand0(s0(x))
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(42) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   rand0(x) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(IF_MOD(x_1, x_2)) = x_1 + x_2
   POL(MOD(x_1)) = x_1
   POL(false0) = 0
   POL(if_mod(x_1)) = 2*x_1
   POL(le) = 0
   POL(minus(x_1)) = x_1
   POL(mod(x_1)) = 2*x_1
   POL(rand0(x_1)) = 1 + 2*x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 0


----------------------------------------

(43)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MOD(s0(x)) -> IF_MOD(le, s0(x))
   IF_MOD(true0, s0(x)) -> MOD(minus(x))

The TRS R consists of the following rules:

   mod(s0(x)) -> if_mod(s0(x))
   le -> le
   le -> false0
   mod(00) -> 00
   if_mod(s0(x)) -> mod(minus(x))
   if_mod(s0(x)) -> s0(x)
   le -> true0
   minus(s0(x)) -> minus(x)
   mod(s0(x)) -> 00
   minus(x) -> x
   rand0(x) -> rand0(s0(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(44) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   mod(00) -> 00
   if_mod(s0(x)) -> s0(x)
   mod(s0(x)) -> 00

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(IF_MOD(x_1, x_2)) = 2*x_1 + x_2
   POL(MOD(x_1)) = x_1
   POL(false0) = 0
   POL(if_mod(x_1)) = 1 + 2*x_1
   POL(le) = 0
   POL(minus(x_1)) = x_1
   POL(mod(x_1)) = 1 + 2*x_1
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 0


----------------------------------------

(45)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MOD(s0(x)) -> IF_MOD(le, s0(x))
   IF_MOD(true0, s0(x)) -> MOD(minus(x))

The TRS R consists of the following rules:

   mod(s0(x)) -> if_mod(s0(x))
   le -> le
   le -> false0
   if_mod(s0(x)) -> mod(minus(x))
   le -> true0
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   rand0(x) -> rand0(s0(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(46) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   le -> false0

Used ordering: Polynomial interpretation [POLO]:

   POL(IF_MOD(x_1, x_2)) = x_1 + x_2
   POL(MOD(x_1)) = 1 + x_1
   POL(false0) = 0
   POL(if_mod(x_1)) = 2*x_1
   POL(le) = 1
   POL(minus(x_1)) = x_1
   POL(mod(x_1)) = 2*x_1
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 1


----------------------------------------

(47)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MOD(s0(x)) -> IF_MOD(le, s0(x))
   IF_MOD(true0, s0(x)) -> MOD(minus(x))

The TRS R consists of the following rules:

   mod(s0(x)) -> if_mod(s0(x))
   le -> le
   if_mod(s0(x)) -> mod(minus(x))
   le -> true0
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   rand0(x) -> rand0(s0(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(48) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   IF_MOD(true0, s0(x)) -> MOD(minus(x))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( mod_1(x_1) ) = max{0, 2x_1 - 2}
POL( s0_1(x_1) ) = 2x_1 + 2
POL( if_mod_1(x_1) ) = max{0, 2x_1 - 2}
POL( le ) = 2
POL( minus_1(x_1) ) = x_1 + 1
POL( true0 ) = 2
POL( rand0_1(x_1) ) = max{0, -2}
POL( MOD_1(x_1) ) = 2x_1 + 2
POL( IF_MOD_2(x_1, x_2) ) = max{0, 2x_1 + 2x_2 - 2}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mod(s0(x)) -> if_mod(s0(x))
   le -> le
   if_mod(s0(x)) -> mod(minus(x))
   le -> true0
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   rand0(x) -> rand0(s0(x))


----------------------------------------

(49)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MOD(s0(x)) -> IF_MOD(le, s0(x))

The TRS R consists of the following rules:

   mod(s0(x)) -> if_mod(s0(x))
   le -> le
   if_mod(s0(x)) -> mod(minus(x))
   le -> true0
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   rand0(x) -> rand0(s0(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(50) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(51)
TRUE
