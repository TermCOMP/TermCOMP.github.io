YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/vfNj4.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) RelADPP
        (6) RelADPCleverAfsProof [SOUND, 60 ms]
        (7) QDP
        (8) MRRProof [EQUIVALENT, 11 ms]
        (9) QDP
        (10) MRRProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) MRRProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) QDPOrderProof [EQUIVALENT, 0 ms]
        (15) QDP
        (16) PisEmptyProof [EQUIVALENT, 0 ms]
        (17) YES
    (18) RelADPP
        (19) RelADPCleverAfsProof [SOUND, 75 ms]
        (20) QDP
        (21) MRRProof [EQUIVALENT, 14 ms]
        (22) QDP
        (23) MRRProof [EQUIVALENT, 0 ms]
        (24) QDP
        (25) MRRProof [EQUIVALENT, 0 ms]
        (26) QDP
        (27) MRRProof [EQUIVALENT, 3 ms]
        (28) QDP
        (29) MRRProof [EQUIVALENT, 0 ms]
        (30) QDP
        (31) QDPOrderProof [EQUIVALENT, 0 ms]
        (32) QDP
        (33) PisEmptyProof [EQUIVALENT, 0 ms]
        (34) YES
    (35) RelADPP
        (36) RelADPCleverAfsProof [SOUND, 66 ms]
        (37) QDP
        (38) MRRProof [EQUIVALENT, 16 ms]
        (39) QDP
        (40) MRRProof [EQUIVALENT, 0 ms]
        (41) QDP
        (42) QDPOrderProof [EQUIVALENT, 9 ms]
        (43) QDP
        (44) DependencyGraphProof [EQUIVALENT, 0 ms]
        (45) TRUE


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   pred(s(x)) -> x
   minus(x, 0) -> x
   minus(x, s(y)) -> pred(minus(x, y))
   mod(0, y) -> 0
   mod(s(x), 0) -> 0
   mod(s(x), s(y)) -> if_mod(le(y, x), s(x), s(y))
   if_mod(true, s(x), s(y)) -> mod(minus(x, y), s(y))
   if_mod(false, s(x), s(y)) -> s(x)

The relative TRS consists of the following S rules:

   rand(x) -> rand(s(x))
   rand(x) -> x


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> LE(x, y)
   pred(s(x)) -> x
   minus(x, 0) -> x
   minus(x, s(y)) -> PRED(minus(x, y))
   minus(x, s(y)) -> pred(MINUS(x, y))
   mod(0, y) -> 0
   mod(s(x), 0) -> 0
   mod(s(x), s(y)) -> IF_MOD(le(y, x), s(x), s(y))
   mod(s(x), s(y)) -> if_mod(LE(y, x), s(x), s(y))
   if_mod(true, s(x), s(y)) -> MOD(minus(x, y), s(y))
   if_mod(true, s(x), s(y)) -> mod(MINUS(x, y), s(y))
   if_mod(false, s(x), s(y)) -> s(x)

and relative ADPs:

   rand(x) -> RAND(s(x))
   rand(x) -> x


----------------------------------------

(3) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  3 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Relative ADP Problem with
absolute ADPs:

   minus(x, s(y)) -> pred(MINUS(x, y))

and relative ADPs:

   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false
   if_mod(false, s(x), s(y)) -> s(x)
   rand(x) -> rand(s(x))
   pred(s(x)) -> x
   mod(s(x), s(y)) -> if_mod(le(y, x), s(x), s(y))
   minus(x, s(y)) -> pred(minus(x, y))
   mod(0, y) -> 0
   if_mod(true, s(x), s(y)) -> mod(minus(x, y), s(y))
   le(0, y) -> true
   mod(s(x), 0) -> 0
   minus(x, 0) -> x
   rand(x) -> x


----------------------------------------

(6) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:s_1 = 
MINUS_2 = 0
mod_2 = 1
if_mod_3 = 0, 2
true = 
pred_1 = 
le_2 = 0, 1
0 = 
minus_2 = 1
rand_1 = 
false = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
MINUS(x1, x2)  =  MINUS(x2)

s(x1)  =  s(x1)

mod(x1, x2)  =  x1

if_mod(x1, x2, x3)  =  x2

le(x1, x2)  =  le

true  =  true

minus(x1, x2)  =  minus(x1)

pred(x1)  =  x1

0  =  0

false  =  false


Recursive path order with status [RPO].
Quasi-Precedence: [le, true, false] > [MINUS_1, s_1, minus_1] > 0

Status: MINUS_1: multiset status
s_1: multiset status
le: multiset status
true: multiset status
minus_1: multiset status
0: multiset status
false: multiset status


----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s0(y)) -> MINUS(y)

The TRS R consists of the following rules:

   le -> le
   le -> false0
   if_mod(s0(x)) -> s0(x)
   rand0(x) -> rand0(s0(x))
   pred0(s0(x)) -> x
   mod(s0(x)) -> if_mod(s0(x))
   minus(x) -> pred0(minus(x))
   mod(00) -> 00
   if_mod(s0(x)) -> mod(minus(x))
   le -> true0
   mod(s0(x)) -> 00
   minus(x) -> x
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(8) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   if_mod(s0(x)) -> s0(x)
   mod(00) -> 00
   mod(s0(x)) -> 00

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 1
   POL(MINUS(x_1)) = 2*x_1
   POL(false0) = 2
   POL(if_mod(x_1)) = 2 + 2*x_1
   POL(le) = 2
   POL(minus(x_1)) = x_1
   POL(mod(x_1)) = 2 + 2*x_1
   POL(pred0(x_1)) = x_1
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 2


----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s0(y)) -> MINUS(y)

The TRS R consists of the following rules:

   le -> le
   le -> false0
   rand0(x) -> rand0(s0(x))
   pred0(s0(x)) -> x
   mod(s0(x)) -> if_mod(s0(x))
   minus(x) -> pred0(minus(x))
   if_mod(s0(x)) -> mod(minus(x))
   le -> true0
   minus(x) -> x
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(10) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   rand0(x) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(MINUS(x_1)) = 2*x_1
   POL(false0) = 2
   POL(if_mod(x_1)) = 2 + 2*x_1
   POL(le) = 2
   POL(minus(x_1)) = x_1
   POL(mod(x_1)) = 2 + 2*x_1
   POL(pred0(x_1)) = x_1
   POL(rand0(x_1)) = 1 + 2*x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 2


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s0(y)) -> MINUS(y)

The TRS R consists of the following rules:

   le -> le
   le -> false0
   rand0(x) -> rand0(s0(x))
   pred0(s0(x)) -> x
   mod(s0(x)) -> if_mod(s0(x))
   minus(x) -> pred0(minus(x))
   if_mod(s0(x)) -> mod(minus(x))
   le -> true0
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   le -> false0
   le -> true0

Used ordering: Polynomial interpretation [POLO]:

   POL(MINUS(x_1)) = 2*x_1
   POL(false0) = 0
   POL(if_mod(x_1)) = 2 + x_1
   POL(le) = 1
   POL(minus(x_1)) = x_1
   POL(mod(x_1)) = 2 + x_1
   POL(pred0(x_1)) = x_1
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 0


----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s0(y)) -> MINUS(y)

The TRS R consists of the following rules:

   le -> le
   rand0(x) -> rand0(s0(x))
   pred0(s0(x)) -> x
   mod(s0(x)) -> if_mod(s0(x))
   minus(x) -> pred0(minus(x))
   if_mod(s0(x)) -> mod(minus(x))
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(14) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MINUS(s0(y)) -> MINUS(y)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( le ) = 0
POL( rand0_1(x_1) ) = 0
POL( s0_1(x_1) ) = 2x_1 + 1
POL( pred0_1(x_1) ) = max{0, x_1 - 1}
POL( mod_1(x_1) ) = max{0, -2}
POL( if_mod_1(x_1) ) = max{0, -2}
POL( minus_1(x_1) ) = 2x_1
POL( MINUS_1(x_1) ) = 2x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   le -> le
   rand0(x) -> rand0(s0(x))
   pred0(s0(x)) -> x
   mod(s0(x)) -> if_mod(s0(x))
   minus(x) -> pred0(minus(x))
   if_mod(s0(x)) -> mod(minus(x))
   minus(x) -> x


----------------------------------------

(15)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   le -> le
   rand0(x) -> rand0(s0(x))
   pred0(s0(x)) -> x
   mod(s0(x)) -> if_mod(s0(x))
   minus(x) -> pred0(minus(x))
   if_mod(s0(x)) -> mod(minus(x))
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(16) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(17)
YES

----------------------------------------

(18)
Obligation:
Relative ADP Problem with
absolute ADPs:

   le(s(x), s(y)) -> LE(x, y)

and relative ADPs:

   mod(s(x), s(y)) -> if_mod(le(y, x), s(x), s(y))
   minus(x, s(y)) -> pred(minus(x, y))
   le(s(x), 0) -> false
   mod(0, y) -> 0
   if_mod(true, s(x), s(y)) -> mod(minus(x, y), s(y))
   if_mod(false, s(x), s(y)) -> s(x)
   le(0, y) -> true
   mod(s(x), 0) -> 0
   minus(x, 0) -> x
   rand(x) -> rand(s(x))
   rand(x) -> x
   pred(s(x)) -> x


----------------------------------------

(19) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:s_1 = 
mod_2 = 
if_mod_3 = 0
true = 
LE_2 = 
le_2 = 0, 1
pred_1 = 
0 = 
minus_2 = 1
rand_1 = 
false = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
LE(x1, x2)  =  LE(x1, x2)

s(x1)  =  s(x1)

mod(x1, x2)  =  mod(x1, x2)

if_mod(x1, x2, x3)  =  if_mod(x2, x3)

le(x1, x2)  =  le

true  =  true

minus(x1, x2)  =  minus(x1)

pred(x1)  =  x1

0  =  0

false  =  false


Recursive path order with status [RPO].
Quasi-Precedence: [s_1, le, minus_1, 0] > LE_2
[s_1, le, minus_1, 0] > [mod_2, if_mod_2]
[s_1, le, minus_1, 0] > true
[s_1, le, minus_1, 0] > false

Status: LE_2: [2,1]
s_1: multiset status
mod_2: multiset status
if_mod_2: multiset status
le: multiset status
true: multiset status
minus_1: multiset status
0: multiset status
false: multiset status


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE0(s0(x), s0(y)) -> LE0(x, y)

The TRS R consists of the following rules:

   le -> le
   le -> false0
   if_mod(s0(x), s0(y)) -> s0(x)
   rand0(x) -> rand0(s0(x))
   pred0(s0(x)) -> x
   mod0(s0(x), s0(y)) -> if_mod(s0(x), s0(y))
   minus(x) -> pred0(minus(x))
   mod0(00, y) -> 00
   if_mod(s0(x), s0(y)) -> mod0(minus(x), s0(y))
   le -> true0
   mod0(s0(x), 00) -> 00
   minus(x) -> x
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   rand0(x) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(LE0(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(false0) = 2
   POL(if_mod(x_1, x_2)) = 2*x_1 + x_2
   POL(le) = 2
   POL(minus(x_1)) = x_1
   POL(mod0(x_1, x_2)) = 2*x_1 + x_2
   POL(pred0(x_1)) = x_1
   POL(rand0(x_1)) = 1 + 2*x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 2


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE0(s0(x), s0(y)) -> LE0(x, y)

The TRS R consists of the following rules:

   le -> le
   le -> false0
   if_mod(s0(x), s0(y)) -> s0(x)
   rand0(x) -> rand0(s0(x))
   pred0(s0(x)) -> x
   mod0(s0(x), s0(y)) -> if_mod(s0(x), s0(y))
   minus(x) -> pred0(minus(x))
   mod0(00, y) -> 00
   if_mod(s0(x), s0(y)) -> mod0(minus(x), s0(y))
   le -> true0
   mod0(s0(x), 00) -> 00
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(23) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   le -> true0

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(LE0(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(false0) = 1
   POL(if_mod(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(le) = 1
   POL(minus(x_1)) = x_1
   POL(mod0(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(pred0(x_1)) = x_1
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 0


----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE0(s0(x), s0(y)) -> LE0(x, y)

The TRS R consists of the following rules:

   le -> le
   le -> false0
   if_mod(s0(x), s0(y)) -> s0(x)
   rand0(x) -> rand0(s0(x))
   pred0(s0(x)) -> x
   mod0(s0(x), s0(y)) -> if_mod(s0(x), s0(y))
   minus(x) -> pred0(minus(x))
   mod0(00, y) -> 00
   if_mod(s0(x), s0(y)) -> mod0(minus(x), s0(y))
   mod0(s0(x), 00) -> 00
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(25) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   le -> false0

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(LE0(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(false0) = 0
   POL(if_mod(x_1, x_2)) = 2*x_1 + x_2
   POL(le) = 1
   POL(minus(x_1)) = x_1
   POL(mod0(x_1, x_2)) = 2*x_1 + x_2
   POL(pred0(x_1)) = x_1
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1


----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE0(s0(x), s0(y)) -> LE0(x, y)

The TRS R consists of the following rules:

   le -> le
   if_mod(s0(x), s0(y)) -> s0(x)
   rand0(x) -> rand0(s0(x))
   pred0(s0(x)) -> x
   mod0(s0(x), s0(y)) -> if_mod(s0(x), s0(y))
   minus(x) -> pred0(minus(x))
   mod0(00, y) -> 00
   if_mod(s0(x), s0(y)) -> mod0(minus(x), s0(y))
   mod0(s0(x), 00) -> 00
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(27) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   mod0(00, y) -> 00
   mod0(s0(x), 00) -> 00

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 1
   POL(LE0(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(if_mod(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(le) = 0
   POL(minus(x_1)) = x_1
   POL(mod0(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(pred0(x_1)) = x_1
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1


----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE0(s0(x), s0(y)) -> LE0(x, y)

The TRS R consists of the following rules:

   le -> le
   if_mod(s0(x), s0(y)) -> s0(x)
   rand0(x) -> rand0(s0(x))
   pred0(s0(x)) -> x
   mod0(s0(x), s0(y)) -> if_mod(s0(x), s0(y))
   minus(x) -> pred0(minus(x))
   if_mod(s0(x), s0(y)) -> mod0(minus(x), s0(y))
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(29) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   if_mod(s0(x), s0(y)) -> s0(x)

Used ordering: Polynomial interpretation [POLO]:

   POL(LE0(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(if_mod(x_1, x_2)) = 2 + x_1 + x_2
   POL(le) = 0
   POL(minus(x_1)) = x_1
   POL(mod0(x_1, x_2)) = 2 + x_1 + x_2
   POL(pred0(x_1)) = x_1
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1


----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE0(s0(x), s0(y)) -> LE0(x, y)

The TRS R consists of the following rules:

   le -> le
   rand0(x) -> rand0(s0(x))
   pred0(s0(x)) -> x
   mod0(s0(x), s0(y)) -> if_mod(s0(x), s0(y))
   minus(x) -> pred0(minus(x))
   if_mod(s0(x), s0(y)) -> mod0(minus(x), s0(y))
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(31) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   LE0(s0(x), s0(y)) -> LE0(x, y)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( le ) = 0
POL( rand0_1(x_1) ) = max{0, -2}
POL( s0_1(x_1) ) = x_1 + 2
POL( pred0_1(x_1) ) = max{0, x_1 - 2}
POL( mod0_2(x_1, x_2) ) = max{0, -2}
POL( if_mod_2(x_1, x_2) ) = 0
POL( minus_1(x_1) ) = 2x_1
POL( LE0_2(x_1, x_2) ) = x_1 + x_2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   le -> le
   rand0(x) -> rand0(s0(x))
   pred0(s0(x)) -> x
   mod0(s0(x), s0(y)) -> if_mod(s0(x), s0(y))
   minus(x) -> pred0(minus(x))
   if_mod(s0(x), s0(y)) -> mod0(minus(x), s0(y))
   minus(x) -> x


----------------------------------------

(32)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   le -> le
   rand0(x) -> rand0(s0(x))
   pred0(s0(x)) -> x
   mod0(s0(x), s0(y)) -> if_mod(s0(x), s0(y))
   minus(x) -> pred0(minus(x))
   if_mod(s0(x), s0(y)) -> mod0(minus(x), s0(y))
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(33) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(34)
YES

----------------------------------------

(35)
Obligation:
Relative ADP Problem with
absolute ADPs:

   if_mod(true, s(x), s(y)) -> MOD(minus(x, y), s(y))
   mod(s(x), s(y)) -> IF_MOD(le(y, x), s(x), s(y))

and relative ADPs:

   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false
   if_mod(false, s(x), s(y)) -> s(x)
   rand(x) -> rand(s(x))
   pred(s(x)) -> x
   mod(s(x), s(y)) -> if_mod(le(y, x), s(x), s(y))
   minus(x, s(y)) -> pred(minus(x, y))
   mod(0, y) -> 0
   if_mod(true, s(x), s(y)) -> mod(minus(x, y), s(y))
   le(0, y) -> true
   mod(s(x), 0) -> 0
   minus(x, 0) -> x
   rand(x) -> x


----------------------------------------

(36) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:if_mod_3 = 0, 2
true = 
pred_1 = 
IF_MOD_3 = 0
rand_1 = 
false = 
s_1 = 
mod_2 = 1
le_2 = 
0 = 
MOD_2 = 
minus_2 = 1

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
MOD(x1, x2)  =  MOD(x1, x2)

s(x1)  =  s(x1)

IF_MOD(x1, x2, x3)  =  IF_MOD(x2, x3)

le(x1, x2)  =  le(x1, x2)

true  =  true

minus(x1, x2)  =  minus(x1)

pred(x1)  =  x1

0  =  0

false  =  false

if_mod(x1, x2, x3)  =  x2

mod(x1, x2)  =  x1


Recursive path order with status [RPO].
Quasi-Precedence: [MOD_2, IF_MOD_2] > [s_1, 0] > le_2
[MOD_2, IF_MOD_2] > [s_1, 0] > true
[MOD_2, IF_MOD_2] > [s_1, 0] > minus_1
[MOD_2, IF_MOD_2] > [s_1, 0] > false

Status: MOD_2: [2,1]
s_1: [1]
IF_MOD_2: [2,1]
le_2: multiset status
true: multiset status
minus_1: [1]
0: multiset status
false: multiset status


----------------------------------------

(37)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MOD0(s0(x), s0(y)) -> IF_MOD(s0(x), s0(y))
   IF_MOD(s0(x), s0(y)) -> MOD0(minus(x), s0(y))

The TRS R consists of the following rules:

   le0(s0(x), s0(y)) -> le0(x, y)
   le0(s0(x), 00) -> false0
   if_mod(s0(x)) -> s0(x)
   rand0(x) -> rand0(s0(x))
   pred0(s0(x)) -> x
   mod(s0(x)) -> if_mod(s0(x))
   minus(x) -> pred0(minus(x))
   mod(00) -> 00
   if_mod(s0(x)) -> mod(minus(x))
   le0(00, y) -> true0
   mod(s0(x)) -> 00
   minus(x) -> x
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(38) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   le0(s0(x), 00) -> false0
   if_mod(s0(x)) -> s0(x)
   mod(00) -> 00
   le0(00, y) -> true0
   mod(s0(x)) -> 00

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 1
   POL(IF_MOD(x_1, x_2)) = 2 + x_1 + x_2
   POL(MOD0(x_1, x_2)) = 2 + x_1 + x_2
   POL(false0) = 2
   POL(if_mod(x_1)) = 2 + x_1
   POL(le0(x_1, x_2)) = 1 + 2*x_1 + 2*x_2
   POL(minus(x_1)) = x_1
   POL(mod(x_1)) = 2 + x_1
   POL(pred0(x_1)) = x_1
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 2


----------------------------------------

(39)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MOD0(s0(x), s0(y)) -> IF_MOD(s0(x), s0(y))
   IF_MOD(s0(x), s0(y)) -> MOD0(minus(x), s0(y))

The TRS R consists of the following rules:

   le0(s0(x), s0(y)) -> le0(x, y)
   rand0(x) -> rand0(s0(x))
   pred0(s0(x)) -> x
   mod(s0(x)) -> if_mod(s0(x))
   minus(x) -> pred0(minus(x))
   if_mod(s0(x)) -> mod(minus(x))
   minus(x) -> x
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(40) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   rand0(x) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(IF_MOD(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(MOD0(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(if_mod(x_1)) = 2 + x_1
   POL(le0(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(minus(x_1)) = x_1
   POL(mod(x_1)) = 2 + x_1
   POL(pred0(x_1)) = x_1
   POL(rand0(x_1)) = 1 + 2*x_1
   POL(s0(x_1)) = x_1


----------------------------------------

(41)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MOD0(s0(x), s0(y)) -> IF_MOD(s0(x), s0(y))
   IF_MOD(s0(x), s0(y)) -> MOD0(minus(x), s0(y))

The TRS R consists of the following rules:

   le0(s0(x), s0(y)) -> le0(x, y)
   rand0(x) -> rand0(s0(x))
   pred0(s0(x)) -> x
   mod(s0(x)) -> if_mod(s0(x))
   minus(x) -> pred0(minus(x))
   if_mod(s0(x)) -> mod(minus(x))
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(42) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   IF_MOD(s0(x), s0(y)) -> MOD0(minus(x), s0(y))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( le0_2(x_1, x_2) ) = x_1 + x_2
POL( s0_1(x_1) ) = 2x_1 + 2
POL( rand0_1(x_1) ) = 0
POL( pred0_1(x_1) ) = x_1
POL( mod_1(x_1) ) = 2x_1 + 2
POL( if_mod_1(x_1) ) = x_1
POL( minus_1(x_1) ) = x_1
POL( MOD0_2(x_1, x_2) ) = max{0, 2x_1 - 2}
POL( IF_MOD_2(x_1, x_2) ) = x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   le0(s0(x), s0(y)) -> le0(x, y)
   rand0(x) -> rand0(s0(x))
   pred0(s0(x)) -> x
   mod(s0(x)) -> if_mod(s0(x))
   minus(x) -> pred0(minus(x))
   if_mod(s0(x)) -> mod(minus(x))
   minus(x) -> x


----------------------------------------

(43)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MOD0(s0(x), s0(y)) -> IF_MOD(s0(x), s0(y))

The TRS R consists of the following rules:

   le0(s0(x), s0(y)) -> le0(x, y)
   rand0(x) -> rand0(s0(x))
   pred0(s0(x)) -> x
   mod(s0(x)) -> if_mod(s0(x))
   minus(x) -> pred0(minus(x))
   if_mod(s0(x)) -> mod(minus(x))
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(44) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(45)
TRUE
