YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/VFnyv.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(4) RelADPP
(5) RelADPReductionPairProof [EQUIVALENT, 89 ms]
(6) RelADPP
(7) RelADPReductionPairProof [EQUIVALENT, 0 ms]
(8) RelADPP
(9) DAbsisEmptyProof [EQUIVALENT, 0 ms]
(10) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   top(left(car(x, y), car(old, z))) -> top(right(y, car(old, z)))
   top(left(car(x, car(old, y)), z)) -> top(right(car(old, y), z))
   top(right(x, car(y, car(old, z)))) -> top(left(x, car(old, z)))
   top(right(car(old, x), car(y, z))) -> top(left(car(old, x), z))
   top(left(bot, car(old, x))) -> top(right(bot, car(old, x)))
   top(right(car(old, x), bot)) -> top(left(car(old, x), bot))

The relative TRS consists of the following S rules:

   bot -> car(new, bot)
   top(right(x, car(y, z))) -> top(right(x, z))
   top(left(car(x, y), z)) -> top(left(y, z))


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   top(left(car(x, y), car(old, z))) -> TOP(right(y, car(old, z)))
   top(left(car(x, car(old, y)), z)) -> TOP(right(car(old, y), z))
   top(right(x, car(y, car(old, z)))) -> TOP(left(x, car(old, z)))
   top(right(car(old, x), car(y, z))) -> TOP(left(car(old, x), z))
   top(left(bot, car(old, x))) -> TOP(right(bot, car(old, x)))
   top(left(bot, car(old, x))) -> top(right(BOT, car(old, x)))
   top(right(car(old, x), bot)) -> TOP(left(car(old, x), bot))
   top(right(car(old, x), bot)) -> top(left(car(old, x), BOT))

and relative ADPs:

   bot -> car(new, BOT)
   top(right(x, car(y, z))) -> TOP(right(x, z))
   top(left(car(x, y), z)) -> TOP(left(y, z))


----------------------------------------

(3) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 1 subproblem.

----------------------------------------

(4)
Obligation:
Relative ADP Problem with
absolute ADPs:

   top(right(car(old, x), bot)) -> TOP(left(car(old, x), bot))
   top(right(x, car(y, car(old, z)))) -> TOP(left(x, car(old, z)))
   top(left(bot, car(old, x))) -> TOP(right(bot, car(old, x)))
   top(left(car(x, y), car(old, z))) -> TOP(right(y, car(old, z)))
   top(right(car(old, x), car(y, z))) -> TOP(left(car(old, x), z))
   top(left(car(x, car(old, y)), z)) -> TOP(right(car(old, y), z))

and relative ADPs:

   top(left(bot, car(old, x))) -> top(right(bot, car(old, x)))
   top(right(car(old, x), bot)) -> top(left(car(old, x), bot))
   bot -> car(new, bot)
   top(right(x, car(y, z))) -> TOP(right(x, z))
   top(left(car(x, y), z)) -> TOP(left(y, z))


----------------------------------------

(5) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   top(left(car(x, car(old, y)), z)) -> TOP(right(car(old, y), z))

Relative ADPs:

   top(left(bot, car(old, x))) -> top(right(bot, car(old, x)))
   top(right(car(old, x), bot)) -> top(left(car(old, x), bot))
   bot -> car(new, bot)


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   top(right(car(old, x), bot)) -> TOP(left(car(old, x), bot))
   top(right(x, car(y, car(old, z)))) -> TOP(left(x, car(old, z)))
   top(left(bot, car(old, x))) -> TOP(right(bot, car(old, x)))
   top(left(car(x, y), car(old, z))) -> TOP(right(y, car(old, z)))
   top(right(car(old, x), car(y, z))) -> TOP(left(car(old, x), z))

Relative ADPs:

   top(right(x, car(y, z))) -> TOP(right(x, z))
   top(left(car(x, y), z)) -> TOP(left(y, z))


Ordered with Polynomial interpretation [POLO]:

   POL(BOT) = 0
   POL(TOP(x_1)) = 3 + 3*x_1
   POL(bot) = 0
   POL(car(x_1, x_2)) = 3*x_1 + 3*x_2
   POL(left(x_1, x_2)) = 3 + 3*x_1
   POL(new) = 0
   POL(old) = 1
   POL(right(x_1, x_2)) = 3 + 3*x_1
   POL(top(x_1)) = x_1

----------------------------------------

(6)
Obligation:
Relative ADP Problem with
absolute ADPs:

   top(right(car(old, x), bot)) -> TOP(left(car(old, x), bot))
   top(right(x, car(y, car(old, z)))) -> TOP(left(x, car(old, z)))
   top(left(bot, car(old, x))) -> TOP(right(bot, car(old, x)))
   top(left(car(x, y), car(old, z))) -> TOP(right(y, car(old, z)))
   top(right(car(old, x), car(y, z))) -> TOP(left(car(old, x), z))

and relative ADPs:

   top(left(bot, car(old, x))) -> top(right(bot, car(old, x)))
   top(right(car(old, x), bot)) -> top(left(car(old, x), bot))
   bot -> car(new, bot)
   top(right(x, car(y, z))) -> TOP(right(x, z))
   top(left(car(x, car(old, y)), z)) -> top(right(car(old, y), z))
   top(left(car(x, y), z)) -> TOP(left(y, z))


----------------------------------------

(7) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   top(right(car(old, x), bot)) -> TOP(left(car(old, x), bot))
   top(right(x, car(y, car(old, z)))) -> TOP(left(x, car(old, z)))
   top(left(bot, car(old, x))) -> TOP(right(bot, car(old, x)))
   top(left(car(x, y), car(old, z))) -> TOP(right(y, car(old, z)))
   top(right(car(old, x), car(y, z))) -> TOP(left(car(old, x), z))

Relative ADPs:

   top(left(bot, car(old, x))) -> top(right(bot, car(old, x)))
   top(right(car(old, x), bot)) -> top(left(car(old, x), bot))
   bot -> car(new, bot)
   top(left(car(x, car(old, y)), z)) -> top(right(car(old, y), z))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(BOT) = 0
   POL(TOP(x_1)) = 3 + 2*x_1
   POL(bot) = 0
   POL(car(x_1, x_2)) = 3*x_1 + 3*x_2
   POL(left(x_1, x_2)) = 1 + x_1 + 2*x_2
   POL(new) = 0
   POL(old) = 1
   POL(right(x_1, x_2)) = 2 + 3*x_1 + x_2
   POL(top(x_1)) = 0

----------------------------------------

(8)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   top(right(car(old, x), car(y, z))) -> top(left(car(old, x), z))
   top(left(bot, car(old, x))) -> top(right(bot, car(old, x)))
   top(right(car(old, x), bot)) -> top(left(car(old, x), bot))
   top(left(car(x, y), car(old, z))) -> top(right(y, car(old, z)))
   bot -> car(new, bot)
   top(right(x, car(y, z))) -> TOP(right(x, z))
   top(right(x, car(y, car(old, z)))) -> top(left(x, car(old, z)))
   top(left(car(x, car(old, y)), z)) -> top(right(car(old, y), z))
   top(left(car(x, y), z)) -> TOP(left(y, z))


----------------------------------------

(9) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(10)
YES
