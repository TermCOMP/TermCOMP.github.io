YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/vfXWi.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) RelADPP
        (6) RelADPCleverAfsProof [SOUND, 32 ms]
        (7) QDP
        (8) MRRProof [EQUIVALENT, 10 ms]
        (9) QDP
        (10) MRRProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPOrderProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) PisEmptyProof [EQUIVALENT, 0 ms]
        (15) YES
    (16) RelADPP
        (17) RelADPCleverAfsProof [SOUND, 30 ms]
        (18) QDP
        (19) MRRProof [EQUIVALENT, 10 ms]
        (20) QDP
        (21) QDPOrderProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) DependencyGraphProof [EQUIVALENT, 0 ms]
        (24) TRUE


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   f(0) -> s(0)
   f(s(x)) -> minus(s(x), g(f(x)))
   g(0) -> 0
   g(s(x)) -> minus(s(x), f(g(x)))

The relative TRS consists of the following S rules:

   rand(x) -> rand(s(x))
   rand(x) -> x


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> MINUS(x, y)
   f(0) -> s(0)
   f(s(x)) -> MINUS(s(x), g(f(x)))
   f(s(x)) -> minus(s(x), G(f(x)))
   f(s(x)) -> minus(s(x), g(F(x)))
   g(0) -> 0
   g(s(x)) -> MINUS(s(x), f(g(x)))
   g(s(x)) -> minus(s(x), F(g(x)))
   g(s(x)) -> minus(s(x), f(G(x)))

and relative ADPs:

   rand(x) -> RAND(s(x))
   rand(x) -> x


----------------------------------------

(3) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  2 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 2 subproblems.

----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Relative ADP Problem with
absolute ADPs:

   minus(s(x), s(y)) -> MINUS(x, y)

and relative ADPs:

   f(0) -> s(0)
   g(s(x)) -> minus(s(x), f(g(x)))
   g(0) -> 0
   f(s(x)) -> minus(s(x), g(f(x)))
   minus(x, 0) -> x
   rand(x) -> rand(s(x))
   rand(x) -> x


----------------------------------------

(6) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:s_1 = 
MINUS_2 = 0
f_1 = 
0 = 
minus_2 = 1
rand_1 = 
g_1 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
MINUS(x1, x2)  =  MINUS(x2)

s(x1)  =  s(x1)

f(x1)  =  f(x1)

minus(x1, x2)  =  x1

g(x1)  =  g(x1)

0  =  0


Recursive path order with status [RPO].
Quasi-Precedence: f_1 > [MINUS_1, s_1] > g_1
0 > [MINUS_1, s_1] > g_1

Status: MINUS_1: multiset status
s_1: multiset status
f_1: multiset status
g_1: multiset status
0: multiset status


----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s0(y)) -> MINUS(y)

The TRS R consists of the following rules:

   f0(00) -> s0(00)
   g0(s0(x)) -> minus(s0(x))
   g0(00) -> 00
   minus(s0(x)) -> minus(x)
   f0(s0(x)) -> minus(s0(x))
   minus(x) -> x
   rand0(x) -> rand0(s0(x))
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(8) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   f0(00) -> s0(00)
   g0(s0(x)) -> minus(s0(x))
   g0(00) -> 00
   f0(s0(x)) -> minus(s0(x))
   minus(x) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 2
   POL(MINUS(x_1)) = 2*x_1
   POL(f0(x_1)) = 2 + 2*x_1
   POL(g0(x_1)) = 2 + x_1
   POL(minus(x_1)) = 1 + x_1
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1


----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s0(y)) -> MINUS(y)

The TRS R consists of the following rules:

   minus(s0(x)) -> minus(x)
   rand0(x) -> rand0(s0(x))
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(10) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   rand0(x) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(MINUS(x_1)) = 2*x_1
   POL(minus(x_1)) = 2*x_1
   POL(rand0(x_1)) = 2 + 2*x_1
   POL(s0(x_1)) = x_1


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s0(y)) -> MINUS(y)

The TRS R consists of the following rules:

   minus(s0(x)) -> minus(x)
   rand0(x) -> rand0(s0(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MINUS(s0(y)) -> MINUS(y)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
MINUS(x1)  =  x1

s0(x1)  =  s0(x1)

minus(x1)  =  minus

rand0(x1)  =  rand0


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   s0_1=1
   minus=1
   rand0=2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   minus(s0(x)) -> minus(x)
   rand0(x) -> rand0(s0(x))


----------------------------------------

(13)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   minus(s0(x)) -> minus(x)
   rand0(x) -> rand0(s0(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(14) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
Relative ADP Problem with
absolute ADPs:

   f(s(x)) -> minus(s(x), g(F(x)))
   g(s(x)) -> minus(s(x), F(g(x)))
   g(s(x)) -> minus(s(x), f(G(x)))
   f(s(x)) -> minus(s(x), G(f(x)))

and relative ADPs:

   f(0) -> s(0)
   g(s(x)) -> minus(s(x), f(g(x)))
   g(0) -> 0
   minus(s(x), s(y)) -> minus(x, y)
   f(s(x)) -> minus(s(x), g(f(x)))
   minus(x, 0) -> x
   rand(x) -> rand(s(x))
   rand(x) -> x


----------------------------------------

(17) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:s_1 = 
G_1 = 
f_1 = 
0 = 
minus_2 = 1
F_1 = 
rand_1 = 
g_1 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
F(x1)  =  F(x1)

s(x1)  =  s(x1)

G(x1)  =  G(x1)

f(x1)  =  f(x1)

g(x1)  =  g(x1)

minus(x1, x2)  =  minus(x1)

0  =  0


Recursive path order with status [RPO].
Quasi-Precedence: 0 > [s_1, f_1] > [F_1, G_1, g_1] > minus_1

Status: F_1: multiset status
s_1: multiset status
G_1: multiset status
f_1: multiset status
g_1: multiset status
minus_1: multiset status
0: multiset status


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F0(s0(x)) -> F0(x)
   G0(s0(x)) -> G0(x)
   F0(s0(x)) -> G0(f0(x))
   G0(s0(x)) -> F0(g0(x))

The TRS R consists of the following rules:

   f0(00) -> s0(00)
   g0(s0(x)) -> minus(s0(x))
   g0(00) -> 00
   minus(s0(x)) -> minus(x)
   f0(s0(x)) -> minus(s0(x))
   minus(x) -> x
   rand0(x) -> rand0(s0(x))
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   rand0(x) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(F0(x_1)) = x_1
   POL(G0(x_1)) = x_1
   POL(f0(x_1)) = x_1
   POL(g0(x_1)) = x_1
   POL(minus(x_1)) = x_1
   POL(rand0(x_1)) = 1 + 2*x_1
   POL(s0(x_1)) = x_1


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F0(s0(x)) -> F0(x)
   G0(s0(x)) -> G0(x)
   F0(s0(x)) -> G0(f0(x))
   G0(s0(x)) -> F0(g0(x))

The TRS R consists of the following rules:

   f0(00) -> s0(00)
   g0(s0(x)) -> minus(s0(x))
   g0(00) -> 00
   minus(s0(x)) -> minus(x)
   f0(s0(x)) -> minus(s0(x))
   minus(x) -> x
   rand0(x) -> rand0(s0(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   F0(s0(x)) -> F0(x)
   G0(s0(x)) -> G0(x)
   G0(s0(x)) -> F0(g0(x))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( f0_1(x_1) ) = x_1 + 2
POL( 00 ) = 0
POL( s0_1(x_1) ) = 2x_1 + 2
POL( g0_1(x_1) ) = 2x_1
POL( minus_1(x_1) ) = x_1 + 2
POL( rand0_1(x_1) ) = max{0, -2}
POL( F0_1(x_1) ) = max{0, 2x_1 - 2}
POL( G0_1(x_1) ) = max{0, 2x_1 - 2}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   f0(00) -> s0(00)
   g0(s0(x)) -> minus(s0(x))
   g0(00) -> 00
   minus(s0(x)) -> minus(x)
   f0(s0(x)) -> minus(s0(x))
   minus(x) -> x
   rand0(x) -> rand0(s0(x))


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F0(s0(x)) -> G0(f0(x))

The TRS R consists of the following rules:

   f0(00) -> s0(00)
   g0(s0(x)) -> minus(s0(x))
   g0(00) -> 00
   minus(s0(x)) -> minus(x)
   f0(s0(x)) -> minus(s0(x))
   minus(x) -> x
   rand0(x) -> rand0(s0(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(23) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(24)
TRUE
