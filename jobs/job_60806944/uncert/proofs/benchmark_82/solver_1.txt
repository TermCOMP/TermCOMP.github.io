YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/5eXZl.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) RelADPP
        (6) RelADPCleverAfsProof [SOUND, 27 ms]
        (7) QDP
        (8) MRRProof [EQUIVALENT, 14 ms]
        (9) QDP
        (10) MRRProof [EQUIVALENT, 6 ms]
        (11) QDP
        (12) MRRProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) MRRProof [EQUIVALENT, 3 ms]
        (15) QDP
        (16) MRRProof [EQUIVALENT, 0 ms]
        (17) QDP
        (18) MRRProof [EQUIVALENT, 0 ms]
        (19) QDP
        (20) QDPBoundsTAProof [EQUIVALENT, 0 ms]
        (21) QDP
        (22) PisEmptyProof [EQUIVALENT, 0 ms]
        (23) YES
    (24) RelADPP
        (25) RelADPCleverAfsProof [SOUND, 21 ms]
        (26) QDP
        (27) MRRProof [EQUIVALENT, 16 ms]
        (28) QDP
        (29) MRRProof [EQUIVALENT, 8 ms]
        (30) QDP
        (31) MRRProof [EQUIVALENT, 0 ms]
        (32) QDP
        (33) PisEmptyProof [EQUIVALENT, 0 ms]
        (34) YES
    (35) RelADPP
        (36) RelADPDerelatifyingProof [EQUIVALENT, 0 ms]
        (37) QDP
        (38) MRRProof [EQUIVALENT, 9 ms]
        (39) QDP
        (40) MRRProof [EQUIVALENT, 0 ms]
        (41) QDP
        (42) MRRProof [EQUIVALENT, 0 ms]
        (43) QDP
        (44) PisEmptyProof [EQUIVALENT, 0 ms]
        (45) YES
    (46) RelADPP
        (47) RelADPDerelatifyingProof [EQUIVALENT, 0 ms]
        (48) QDP
        (49) MRRProof [EQUIVALENT, 0 ms]
        (50) QDP
        (51) MRRProof [EQUIVALENT, 6 ms]
        (52) QDP
        (53) MRRProof [EQUIVALENT, 0 ms]
        (54) QDP
        (55) MRRProof [EQUIVALENT, 4 ms]
        (56) QDP
        (57) MRRProof [EQUIVALENT, 0 ms]
        (58) QDP
        (59) TransformationProof [EQUIVALENT, 0 ms]
        (60) QDP
        (61) TransformationProof [EQUIVALENT, 0 ms]
        (62) QDP
        (63) QDPBoundsTAProof [EQUIVALENT, 5 ms]
        (64) QDP
        (65) PisEmptyProof [EQUIVALENT, 0 ms]
        (66) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   +(0, y) -> y
   +(s(x), y) -> s(+(x, y))
   sum1(nil) -> 0
   sum1(cons(x, y)) -> +(x, sum1(y))
   sum2(nil, z) -> z
   sum2(cons(x, y), z) -> sum2(y, +(x, z))
   tests(0) -> true
   tests(s(x)) -> and(test(rands(rand(0), nil)), x)
   test(done(y)) -> eq(f(y), g(y))
   eq(x, x) -> true
   rands(0, y) -> done(y)
   rands(s(x), y) -> rands(x, ::(rand(0), y))

The relative TRS consists of the following S rules:

   rand(x) -> rand(s(x))
   rand(x) -> x


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   +(0, y) -> y
   +(s(x), y) -> s(+^1(x, y))
   sum1(nil) -> 0
   sum1(cons(x, y)) -> +^1(x, sum1(y))
   sum1(cons(x, y)) -> +(x, SUM1(y))
   sum2(nil, z) -> z
   sum2(cons(x, y), z) -> SUM2(y, +(x, z))
   sum2(cons(x, y), z) -> sum2(y, +^1(x, z))
   tests(0) -> true
   tests(s(x)) -> and(TEST(rands(rand(0), nil)), x)
   tests(s(x)) -> and(test(RANDS(rand(0), nil)), x)
   tests(s(x)) -> and(test(rands(RAND(0), nil)), x)
   test(done(y)) -> EQ(f(y), g(y))
   eq(x, x) -> true
   rands(0, y) -> done(y)
   rands(s(x), y) -> RANDS(x, ::(rand(0), y))
   rands(s(x), y) -> rands(x, ::(RAND(0), y))

and relative ADPs:

   rand(x) -> RAND(s(x))
   rand(x) -> x


----------------------------------------

(3) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  4 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Relative ADP Problem with
absolute ADPs:

   +(s(x), y) -> s(+^1(x, y))

and relative ADPs:

   rands(0, y) -> done(y)
   rands(s(x), y) -> rands(x, ::(rand(0), y))
   sum1(nil) -> 0
   tests(0) -> true
   sum2(cons(x, y), z) -> sum2(y, +(x, z))
   rand(x) -> rand(s(x))
   eq(x, x) -> true
   sum1(cons(x, y)) -> +(x, sum1(y))
   sum2(nil, z) -> z
   tests(s(x)) -> and(test(rands(rand(0), nil)), x)
   test(done(y)) -> eq(f(y), g(y))
   +(0, y) -> y
   rand(x) -> x


----------------------------------------

(6) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:rands_2 = 
true = 
done_1 = 0
sum1_1 = 
and_2 = 
rand_1 = 
g_1 = 0
nil = 
s_1 = 
eq_2 = 0
+_2 = 
::_2 = 
tests_1 = 
f_1 = 
0 = 
+^1_2 = 
cons_2 = 
test_1 = 0
sum2_2 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
+^1(x1, x2)  =  +^1(x1, x2)

s(x1)  =  s(x1)

test(x1)  =  test

done(x1)  =  done

eq(x1, x2)  =  eq(x2)

f(x1)  =  f(x1)

g(x1)  =  g

true  =  true


Recursive path order with status [RPO].
Quasi-Precedence: [+^1_2, s_1]
test > [done, f_1]
test > eq_1 > true
test > g

Status: +^1_2: [1,2]
s_1: [1]
test: []
done: multiset status
eq_1: [1]
f_1: multiset status
g: multiset status
true: multiset status


----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   +^10(s0(x), y) -> +^10(x, y)

The TRS R consists of the following rules:

   rands0(00, y) -> done
   rands0(s0(x), y) -> rands0(x, ::0(rand0(00), y))
   sum10(nil0) -> 00
   tests0(00) -> true0
   sum20(cons0(x, y), z) -> sum20(y, +0(x, z))
   rand0(x) -> rand0(s0(x))
   eq(x) -> true0
   sum10(cons0(x, y)) -> +0(x, sum10(y))
   sum20(nil0, z) -> z
   tests0(s0(x)) -> and0(test, x)
   +0(s0(x), y) -> s0(+0(x, y))
   test -> eq(g)
   +0(00, y) -> y
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(8) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   sum10(nil0) -> 00
   tests0(00) -> true0
   sum20(nil0, z) -> z

Used ordering: Polynomial interpretation [POLO]:

   POL(+0(x_1, x_2)) = x_1 + x_2
   POL(+^10(x_1, x_2)) = 2*x_1 + x_2
   POL(00) = 0
   POL(::0(x_1, x_2)) = x_1 + x_2
   POL(and0(x_1, x_2)) = 2*x_1 + x_2
   POL(cons0(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(done) = 2
   POL(eq(x_1)) = x_1
   POL(g) = 1
   POL(nil0) = 1
   POL(rand0(x_1)) = 2*x_1
   POL(rands0(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(s0(x_1)) = x_1
   POL(sum10(x_1)) = 2*x_1
   POL(sum20(x_1, x_2)) = 2*x_1 + x_2
   POL(test) = 1
   POL(tests0(x_1)) = 2 + x_1
   POL(true0) = 0


----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   +^10(s0(x), y) -> +^10(x, y)

The TRS R consists of the following rules:

   rands0(00, y) -> done
   rands0(s0(x), y) -> rands0(x, ::0(rand0(00), y))
   sum20(cons0(x, y), z) -> sum20(y, +0(x, z))
   rand0(x) -> rand0(s0(x))
   eq(x) -> true0
   sum10(cons0(x, y)) -> +0(x, sum10(y))
   tests0(s0(x)) -> and0(test, x)
   +0(s0(x), y) -> s0(+0(x, y))
   test -> eq(g)
   +0(00, y) -> y
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(10) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   rands0(00, y) -> done

Used ordering: Polynomial interpretation [POLO]:

   POL(+0(x_1, x_2)) = x_1 + x_2
   POL(+^10(x_1, x_2)) = 2*x_1 + x_2
   POL(00) = 0
   POL(::0(x_1, x_2)) = x_1 + x_2
   POL(and0(x_1, x_2)) = x_1 + 2*x_2
   POL(cons0(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(done) = 0
   POL(eq(x_1)) = 2*x_1
   POL(g) = 1
   POL(rand0(x_1)) = 2*x_1
   POL(rands0(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(s0(x_1)) = x_1
   POL(sum10(x_1)) = 2*x_1
   POL(sum20(x_1, x_2)) = 2*x_1 + x_2
   POL(test) = 2
   POL(tests0(x_1)) = 2 + 2*x_1
   POL(true0) = 0


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   +^10(s0(x), y) -> +^10(x, y)

The TRS R consists of the following rules:

   rands0(s0(x), y) -> rands0(x, ::0(rand0(00), y))
   sum20(cons0(x, y), z) -> sum20(y, +0(x, z))
   rand0(x) -> rand0(s0(x))
   eq(x) -> true0
   sum10(cons0(x, y)) -> +0(x, sum10(y))
   tests0(s0(x)) -> and0(test, x)
   +0(s0(x), y) -> s0(+0(x, y))
   test -> eq(g)
   +0(00, y) -> y
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   eq(x) -> true0

Used ordering: Polynomial interpretation [POLO]:

   POL(+0(x_1, x_2)) = x_1 + x_2
   POL(+^10(x_1, x_2)) = 2*x_1 + x_2
   POL(00) = 0
   POL(::0(x_1, x_2)) = x_1 + x_2
   POL(and0(x_1, x_2)) = x_1 + x_2
   POL(cons0(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(eq(x_1)) = 2 + x_1
   POL(g) = 0
   POL(rand0(x_1)) = 2*x_1
   POL(rands0(x_1, x_2)) = 2*x_1 + x_2
   POL(s0(x_1)) = x_1
   POL(sum10(x_1)) = 2*x_1
   POL(sum20(x_1, x_2)) = 2*x_1 + x_2
   POL(test) = 2
   POL(tests0(x_1)) = 2 + x_1
   POL(true0) = 0


----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   +^10(s0(x), y) -> +^10(x, y)

The TRS R consists of the following rules:

   rands0(s0(x), y) -> rands0(x, ::0(rand0(00), y))
   sum20(cons0(x, y), z) -> sum20(y, +0(x, z))
   rand0(x) -> rand0(s0(x))
   sum10(cons0(x, y)) -> +0(x, sum10(y))
   tests0(s0(x)) -> and0(test, x)
   +0(s0(x), y) -> s0(+0(x, y))
   test -> eq(g)
   +0(00, y) -> y
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(14) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   test -> eq(g)

Used ordering: Polynomial interpretation [POLO]:

   POL(+0(x_1, x_2)) = x_1 + x_2
   POL(+^10(x_1, x_2)) = 2*x_1 + x_2
   POL(00) = 0
   POL(::0(x_1, x_2)) = x_1 + x_2
   POL(and0(x_1, x_2)) = x_1 + 2*x_2
   POL(cons0(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(eq(x_1)) = x_1
   POL(g) = 0
   POL(rand0(x_1)) = 2*x_1
   POL(rands0(x_1, x_2)) = 2*x_1 + x_2
   POL(s0(x_1)) = x_1
   POL(sum10(x_1)) = 2*x_1
   POL(sum20(x_1, x_2)) = 2*x_1 + x_2
   POL(test) = 2
   POL(tests0(x_1)) = 2 + 2*x_1


----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   +^10(s0(x), y) -> +^10(x, y)

The TRS R consists of the following rules:

   rands0(s0(x), y) -> rands0(x, ::0(rand0(00), y))
   sum20(cons0(x, y), z) -> sum20(y, +0(x, z))
   rand0(x) -> rand0(s0(x))
   sum10(cons0(x, y)) -> +0(x, sum10(y))
   tests0(s0(x)) -> and0(test, x)
   +0(s0(x), y) -> s0(+0(x, y))
   +0(00, y) -> y
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(16) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   tests0(s0(x)) -> and0(test, x)

Used ordering: Polynomial interpretation [POLO]:

   POL(+0(x_1, x_2)) = x_1 + x_2
   POL(+^10(x_1, x_2)) = 2*x_1 + x_2
   POL(00) = 0
   POL(::0(x_1, x_2)) = x_1 + x_2
   POL(and0(x_1, x_2)) = x_1 + 2*x_2
   POL(cons0(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(rand0(x_1)) = 2*x_1
   POL(rands0(x_1, x_2)) = 2*x_1 + x_2
   POL(s0(x_1)) = x_1
   POL(sum10(x_1)) = 2*x_1
   POL(sum20(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(test) = 0
   POL(tests0(x_1)) = 1 + 2*x_1


----------------------------------------

(17)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   +^10(s0(x), y) -> +^10(x, y)

The TRS R consists of the following rules:

   rands0(s0(x), y) -> rands0(x, ::0(rand0(00), y))
   sum20(cons0(x, y), z) -> sum20(y, +0(x, z))
   rand0(x) -> rand0(s0(x))
   sum10(cons0(x, y)) -> +0(x, sum10(y))
   +0(s0(x), y) -> s0(+0(x, y))
   +0(00, y) -> y
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(18) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   sum20(cons0(x, y), z) -> sum20(y, +0(x, z))
   sum10(cons0(x, y)) -> +0(x, sum10(y))
   +0(00, y) -> y

Used ordering: Polynomial interpretation [POLO]:

   POL(+0(x_1, x_2)) = 1 + x_1 + x_2
   POL(+^10(x_1, x_2)) = 2*x_1 + x_2
   POL(00) = 0
   POL(::0(x_1, x_2)) = x_1 + x_2
   POL(cons0(x_1, x_2)) = 2 + 2*x_1 + 2*x_2
   POL(rand0(x_1)) = 2*x_1
   POL(rands0(x_1, x_2)) = 2*x_1 + x_2
   POL(s0(x_1)) = x_1
   POL(sum10(x_1)) = 2*x_1
   POL(sum20(x_1, x_2)) = x_1 + x_2


----------------------------------------

(19)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   +^10(s0(x), y) -> +^10(x, y)

The TRS R consists of the following rules:

   rands0(s0(x), y) -> rands0(x, ::0(rand0(00), y))
   rand0(x) -> rand0(s0(x))
   +0(s0(x), y) -> s0(+0(x, y))
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(20) QDPBoundsTAProof (EQUIVALENT)
The DP-Problem (P, R) could be shown to be Match-DP-Bounded [TAB_NONLEFTLINEAR] by 0 for the Rule: 
   +^10(s0(x), y) -> +^10(x, y)
by considering the usable rules: 
none

The compatible tree automaton used to show the Match-DP-Boundedness is represented by: 
final states : [0]
transitions: 
#0() -> 1
#0() -> 2
+^100(1, 2) -> 0

----------------------------------------

(21)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   rands0(s0(x), y) -> rands0(x, ::0(rand0(00), y))
   rand0(x) -> rand0(s0(x))
   +0(s0(x), y) -> s0(+0(x, y))
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(22) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(23)
YES

----------------------------------------

(24)
Obligation:
Relative ADP Problem with
absolute ADPs:

   sum2(cons(x, y), z) -> SUM2(y, +(x, z))

and relative ADPs:

   rands(0, y) -> done(y)
   rands(s(x), y) -> rands(x, ::(rand(0), y))
   sum1(nil) -> 0
   tests(0) -> true
   sum2(cons(x, y), z) -> sum2(y, +(x, z))
   rand(x) -> rand(s(x))
   eq(x, x) -> true
   sum1(cons(x, y)) -> +(x, sum1(y))
   sum2(nil, z) -> z
   tests(s(x)) -> and(test(rands(rand(0), nil)), x)
   +(s(x), y) -> s(+(x, y))
   test(done(y)) -> eq(f(y), g(y))
   +(0, y) -> y
   rand(x) -> x


----------------------------------------

(25) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:rands_2 = 
true = 
done_1 = 
sum1_1 = 
and_2 = 
rand_1 = 
g_1 = 0
nil = 
s_1 = 
eq_2 = 0
+_2 = 
::_2 = 
tests_1 = 
f_1 = 
0 = 
cons_2 = 
SUM2_2 = 
test_1 = 
sum2_2 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
SUM2(x1, x2)  =  SUM2(x1, x2)

cons(x1, x2)  =  cons(x1, x2)

+(x1, x2)  =  +(x1, x2)

s(x1)  =  x1

0  =  0

test(x1)  =  test(x1)

done(x1)  =  x1

eq(x1, x2)  =  eq(x2)

f(x1)  =  f(x1)

g(x1)  =  g

true  =  true


Recursive path order with status [RPO].
Quasi-Precedence: cons_2 > SUM2_2 > +_2 > g
0 > g
[test_1, eq_1] > true > g
f_1 > g

Status: SUM2_2: [1,2]
cons_2: [1,2]
+_2: multiset status
0: multiset status
test_1: [1]
eq_1: [1]
f_1: multiset status
g: multiset status
true: multiset status


----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SUM20(cons0(x, y), z) -> SUM20(y, +0(x, z))

The TRS R consists of the following rules:

   rands0(00, y) -> done0(y)
   rands0(s0(x), y) -> rands0(x, ::0(rand0(00), y))
   sum10(nil0) -> 00
   tests0(00) -> true0
   sum20(cons0(x, y), z) -> sum20(y, +0(x, z))
   rand0(x) -> rand0(s0(x))
   eq(x) -> true0
   sum10(cons0(x, y)) -> +0(x, sum10(y))
   sum20(nil0, z) -> z
   tests0(s0(x)) -> and0(test0(rands0(rand0(00), nil0)), x)
   +0(s0(x), y) -> s0(+0(x, y))
   test0(done0(y)) -> eq(g)
   +0(00, y) -> y
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(27) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   tests0(00) -> true0
   tests0(s0(x)) -> and0(test0(rands0(rand0(00), nil0)), x)

Used ordering: Polynomial interpretation [POLO]:

   POL(+0(x_1, x_2)) = x_1 + x_2
   POL(00) = 0
   POL(::0(x_1, x_2)) = x_1 + x_2
   POL(SUM20(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(and0(x_1, x_2)) = x_1 + 2*x_2
   POL(cons0(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(done0(x_1)) = 2*x_1
   POL(eq(x_1)) = x_1
   POL(g) = 0
   POL(nil0) = 0
   POL(rand0(x_1)) = 2*x_1
   POL(rands0(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(s0(x_1)) = x_1
   POL(sum10(x_1)) = x_1
   POL(sum20(x_1, x_2)) = 2*x_1 + x_2
   POL(test0(x_1)) = x_1
   POL(tests0(x_1)) = 2 + 2*x_1
   POL(true0) = 0


----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SUM20(cons0(x, y), z) -> SUM20(y, +0(x, z))

The TRS R consists of the following rules:

   rands0(00, y) -> done0(y)
   rands0(s0(x), y) -> rands0(x, ::0(rand0(00), y))
   sum10(nil0) -> 00
   sum20(cons0(x, y), z) -> sum20(y, +0(x, z))
   rand0(x) -> rand0(s0(x))
   eq(x) -> true0
   sum10(cons0(x, y)) -> +0(x, sum10(y))
   sum20(nil0, z) -> z
   +0(s0(x), y) -> s0(+0(x, y))
   test0(done0(y)) -> eq(g)
   +0(00, y) -> y
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(29) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   rands0(00, y) -> done0(y)
   sum10(nil0) -> 00
   sum20(nil0, z) -> z

Used ordering: Polynomial interpretation [POLO]:

   POL(+0(x_1, x_2)) = 2*x_1 + x_2
   POL(00) = 0
   POL(::0(x_1, x_2)) = x_1 + x_2
   POL(SUM20(x_1, x_2)) = 2*x_1 + x_2
   POL(cons0(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(done0(x_1)) = 2*x_1
   POL(eq(x_1)) = x_1
   POL(g) = 0
   POL(nil0) = 1
   POL(rand0(x_1)) = 2*x_1
   POL(rands0(x_1, x_2)) = 2 + 2*x_1 + 2*x_2
   POL(s0(x_1)) = x_1
   POL(sum10(x_1)) = 2*x_1
   POL(sum20(x_1, x_2)) = 2*x_1 + x_2
   POL(test0(x_1)) = x_1
   POL(true0) = 0


----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SUM20(cons0(x, y), z) -> SUM20(y, +0(x, z))

The TRS R consists of the following rules:

   rands0(s0(x), y) -> rands0(x, ::0(rand0(00), y))
   sum20(cons0(x, y), z) -> sum20(y, +0(x, z))
   rand0(x) -> rand0(s0(x))
   eq(x) -> true0
   sum10(cons0(x, y)) -> +0(x, sum10(y))
   +0(s0(x), y) -> s0(+0(x, y))
   test0(done0(y)) -> eq(g)
   +0(00, y) -> y
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(31) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   SUM20(cons0(x, y), z) -> SUM20(y, +0(x, z))

Strictly oriented rules of the TRS R:

   sum20(cons0(x, y), z) -> sum20(y, +0(x, z))
   sum10(cons0(x, y)) -> +0(x, sum10(y))

Used ordering: Polynomial interpretation [POLO]:

   POL(+0(x_1, x_2)) = x_1 + x_2
   POL(00) = 0
   POL(::0(x_1, x_2)) = x_1 + x_2
   POL(SUM20(x_1, x_2)) = 2*x_1 + x_2
   POL(cons0(x_1, x_2)) = 1 + 2*x_1 + 2*x_2
   POL(done0(x_1)) = x_1
   POL(eq(x_1)) = 2*x_1
   POL(g) = 0
   POL(rand0(x_1)) = 2*x_1
   POL(rands0(x_1, x_2)) = 2*x_1 + x_2
   POL(s0(x_1)) = x_1
   POL(sum10(x_1)) = x_1
   POL(sum20(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(test0(x_1)) = x_1
   POL(true0) = 0


----------------------------------------

(32)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   rands0(s0(x), y) -> rands0(x, ::0(rand0(00), y))
   rand0(x) -> rand0(s0(x))
   eq(x) -> true0
   +0(s0(x), y) -> s0(+0(x, y))
   test0(done0(y)) -> eq(g)
   +0(00, y) -> y
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(33) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(34)
YES

----------------------------------------

(35)
Obligation:
Relative ADP Problem with
absolute ADPs:

   sum1(cons(x, y)) -> +(x, SUM1(y))

and relative ADPs:

   rands(0, y) -> done(y)
   rands(s(x), y) -> rands(x, ::(rand(0), y))
   sum1(nil) -> 0
   tests(0) -> true
   sum2(cons(x, y), z) -> sum2(y, +(x, z))
   rand(x) -> rand(s(x))
   eq(x, x) -> true
   sum1(cons(x, y)) -> +(x, sum1(y))
   sum2(nil, z) -> z
   tests(s(x)) -> and(test(rands(rand(0), nil)), x)
   +(s(x), y) -> s(+(x, y))
   test(done(y)) -> eq(f(y), g(y))
   +(0, y) -> y
   rand(x) -> x


----------------------------------------

(36) RelADPDerelatifyingProof (EQUIVALENT)


We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.
----------------------------------------

(37)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SUM1(cons(x, y)) -> SUM1(y)

The TRS R consists of the following rules:

   rands(0, y) -> done(y)
   rands(s(x), y) -> rands(x, ::(rand(0), y))
   sum1(nil) -> 0
   tests(0) -> true
   sum2(cons(x, y), z) -> sum2(y, +(x, z))
   rand(x) -> rand(s(x))
   eq(x, x) -> true
   sum1(cons(x, y)) -> +(x, sum1(y))
   sum2(nil, z) -> z
   tests(s(x)) -> and(test(rands(rand(0), nil)), x)
   +(s(x), y) -> s(+(x, y))
   test(done(y)) -> eq(f(y), g(y))
   +(0, y) -> y
   rand(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(38) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   tests(0) -> true
   tests(s(x)) -> and(test(rands(rand(0), nil)), x)

Used ordering: Polynomial interpretation [POLO]:

   POL(+(x_1, x_2)) = x_1 + x_2
   POL(0) = 0
   POL(::(x_1, x_2)) = x_1 + x_2
   POL(SUM1(x_1)) = 2*x_1
   POL(and(x_1, x_2)) = x_1 + 2*x_2
   POL(cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(done(x_1)) = 2*x_1
   POL(eq(x_1, x_2)) = x_1 + x_2
   POL(f(x_1)) = 2*x_1
   POL(g(x_1)) = 2*x_1
   POL(nil) = 0
   POL(rand(x_1)) = 2*x_1
   POL(rands(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(s(x_1)) = x_1
   POL(sum1(x_1)) = x_1
   POL(sum2(x_1, x_2)) = 2*x_1 + x_2
   POL(test(x_1)) = 2*x_1
   POL(tests(x_1)) = 1 + 2*x_1
   POL(true) = 0


----------------------------------------

(39)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SUM1(cons(x, y)) -> SUM1(y)

The TRS R consists of the following rules:

   rands(0, y) -> done(y)
   rands(s(x), y) -> rands(x, ::(rand(0), y))
   sum1(nil) -> 0
   sum2(cons(x, y), z) -> sum2(y, +(x, z))
   rand(x) -> rand(s(x))
   eq(x, x) -> true
   sum1(cons(x, y)) -> +(x, sum1(y))
   sum2(nil, z) -> z
   +(s(x), y) -> s(+(x, y))
   test(done(y)) -> eq(f(y), g(y))
   +(0, y) -> y
   rand(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(40) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   sum1(nil) -> 0
   sum2(nil, z) -> z
   test(done(y)) -> eq(f(y), g(y))

Used ordering: Polynomial interpretation [POLO]:

   POL(+(x_1, x_2)) = x_1 + x_2
   POL(0) = 0
   POL(::(x_1, x_2)) = x_1 + x_2
   POL(SUM1(x_1)) = 2*x_1
   POL(cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(done(x_1)) = 1 + 2*x_1
   POL(eq(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(f(x_1)) = x_1
   POL(g(x_1)) = x_1
   POL(nil) = 2
   POL(rand(x_1)) = 2*x_1
   POL(rands(x_1, x_2)) = 1 + 2*x_1 + 2*x_2
   POL(s(x_1)) = x_1
   POL(sum1(x_1)) = x_1
   POL(sum2(x_1, x_2)) = 2*x_1 + x_2
   POL(test(x_1)) = 1 + 2*x_1
   POL(true) = 0


----------------------------------------

(41)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SUM1(cons(x, y)) -> SUM1(y)

The TRS R consists of the following rules:

   rands(0, y) -> done(y)
   rands(s(x), y) -> rands(x, ::(rand(0), y))
   sum2(cons(x, y), z) -> sum2(y, +(x, z))
   rand(x) -> rand(s(x))
   eq(x, x) -> true
   sum1(cons(x, y)) -> +(x, sum1(y))
   +(s(x), y) -> s(+(x, y))
   +(0, y) -> y
   rand(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(42) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   SUM1(cons(x, y)) -> SUM1(y)

Strictly oriented rules of the TRS R:

   sum2(cons(x, y), z) -> sum2(y, +(x, z))
   +(0, y) -> y

Used ordering: Polynomial interpretation [POLO]:

   POL(+(x_1, x_2)) = 1 + x_1 + x_2
   POL(0) = 0
   POL(::(x_1, x_2)) = x_1 + x_2
   POL(SUM1(x_1)) = 2*x_1
   POL(cons(x_1, x_2)) = 1 + 2*x_1 + x_2
   POL(done(x_1)) = 1 + 2*x_1
   POL(eq(x_1, x_2)) = 2 + x_1 + x_2
   POL(rand(x_1)) = 2*x_1
   POL(rands(x_1, x_2)) = 1 + 2*x_1 + 2*x_2
   POL(s(x_1)) = x_1
   POL(sum1(x_1)) = x_1
   POL(sum2(x_1, x_2)) = 2*x_1 + x_2
   POL(true) = 2


----------------------------------------

(43)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   rands(0, y) -> done(y)
   rands(s(x), y) -> rands(x, ::(rand(0), y))
   rand(x) -> rand(s(x))
   eq(x, x) -> true
   sum1(cons(x, y)) -> +(x, sum1(y))
   +(s(x), y) -> s(+(x, y))
   rand(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(44) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(45)
YES

----------------------------------------

(46)
Obligation:
Relative ADP Problem with
absolute ADPs:

   rands(s(x), y) -> RANDS(x, ::(rand(0), y))

and relative ADPs:

   rands(0, y) -> done(y)
   rands(s(x), y) -> rands(x, ::(rand(0), y))
   sum1(nil) -> 0
   tests(0) -> true
   sum2(cons(x, y), z) -> sum2(y, +(x, z))
   rand(x) -> rand(s(x))
   eq(x, x) -> true
   sum1(cons(x, y)) -> +(x, sum1(y))
   sum2(nil, z) -> z
   tests(s(x)) -> and(test(rands(rand(0), nil)), x)
   +(s(x), y) -> s(+(x, y))
   test(done(y)) -> eq(f(y), g(y))
   +(0, y) -> y
   rand(x) -> x


----------------------------------------

(47) RelADPDerelatifyingProof (EQUIVALENT)


We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.
----------------------------------------

(48)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   RANDS(s(x), y) -> RANDS(x, ::(rand(0), y))

The TRS R consists of the following rules:

   rands(0, y) -> done(y)
   rands(s(x), y) -> rands(x, ::(rand(0), y))
   sum1(nil) -> 0
   tests(0) -> true
   sum2(cons(x, y), z) -> sum2(y, +(x, z))
   rand(x) -> rand(s(x))
   eq(x, x) -> true
   sum1(cons(x, y)) -> +(x, sum1(y))
   sum2(nil, z) -> z
   tests(s(x)) -> and(test(rands(rand(0), nil)), x)
   +(s(x), y) -> s(+(x, y))
   test(done(y)) -> eq(f(y), g(y))
   +(0, y) -> y
   rand(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(49) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   tests(0) -> true
   tests(s(x)) -> and(test(rands(rand(0), nil)), x)

Used ordering: Polynomial interpretation [POLO]:

   POL(+(x_1, x_2)) = x_1 + x_2
   POL(0) = 0
   POL(::(x_1, x_2)) = x_1 + x_2
   POL(RANDS(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(and(x_1, x_2)) = x_1 + 2*x_2
   POL(cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(done(x_1)) = 2*x_1
   POL(eq(x_1, x_2)) = 2*x_1 + x_2
   POL(f(x_1)) = x_1
   POL(g(x_1)) = 2*x_1
   POL(nil) = 0
   POL(rand(x_1)) = 2*x_1
   POL(rands(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(s(x_1)) = x_1
   POL(sum1(x_1)) = x_1
   POL(sum2(x_1, x_2)) = 2*x_1 + x_2
   POL(test(x_1)) = 2*x_1
   POL(tests(x_1)) = 2 + 2*x_1
   POL(true) = 0


----------------------------------------

(50)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   RANDS(s(x), y) -> RANDS(x, ::(rand(0), y))

The TRS R consists of the following rules:

   rands(0, y) -> done(y)
   rands(s(x), y) -> rands(x, ::(rand(0), y))
   sum1(nil) -> 0
   sum2(cons(x, y), z) -> sum2(y, +(x, z))
   rand(x) -> rand(s(x))
   eq(x, x) -> true
   sum1(cons(x, y)) -> +(x, sum1(y))
   sum2(nil, z) -> z
   +(s(x), y) -> s(+(x, y))
   test(done(y)) -> eq(f(y), g(y))
   +(0, y) -> y
   rand(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(51) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   sum1(nil) -> 0
   sum2(nil, z) -> z
   test(done(y)) -> eq(f(y), g(y))

Used ordering: Polynomial interpretation [POLO]:

   POL(+(x_1, x_2)) = x_1 + x_2
   POL(0) = 0
   POL(::(x_1, x_2)) = x_1 + x_2
   POL(RANDS(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(done(x_1)) = 1 + 2*x_1
   POL(eq(x_1, x_2)) = 2*x_1 + x_2
   POL(f(x_1)) = x_1
   POL(g(x_1)) = 2*x_1
   POL(nil) = 2
   POL(rand(x_1)) = 2*x_1
   POL(rands(x_1, x_2)) = 1 + 2*x_1 + 2*x_2
   POL(s(x_1)) = x_1
   POL(sum1(x_1)) = x_1
   POL(sum2(x_1, x_2)) = 2*x_1 + x_2
   POL(test(x_1)) = 1 + 2*x_1
   POL(true) = 0


----------------------------------------

(52)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   RANDS(s(x), y) -> RANDS(x, ::(rand(0), y))

The TRS R consists of the following rules:

   rands(0, y) -> done(y)
   rands(s(x), y) -> rands(x, ::(rand(0), y))
   sum2(cons(x, y), z) -> sum2(y, +(x, z))
   rand(x) -> rand(s(x))
   eq(x, x) -> true
   sum1(cons(x, y)) -> +(x, sum1(y))
   +(s(x), y) -> s(+(x, y))
   +(0, y) -> y
   rand(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(53) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   eq(x, x) -> true

Used ordering: Polynomial interpretation [POLO]:

   POL(+(x_1, x_2)) = x_1 + x_2
   POL(0) = 0
   POL(::(x_1, x_2)) = x_1 + x_2
   POL(RANDS(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(done(x_1)) = 2 + 2*x_1
   POL(eq(x_1, x_2)) = 1 + x_1 + x_2
   POL(rand(x_1)) = 2*x_1
   POL(rands(x_1, x_2)) = 2 + 2*x_1 + 2*x_2
   POL(s(x_1)) = x_1
   POL(sum1(x_1)) = 2*x_1
   POL(sum2(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(true) = 0


----------------------------------------

(54)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   RANDS(s(x), y) -> RANDS(x, ::(rand(0), y))

The TRS R consists of the following rules:

   rands(0, y) -> done(y)
   rands(s(x), y) -> rands(x, ::(rand(0), y))
   sum2(cons(x, y), z) -> sum2(y, +(x, z))
   rand(x) -> rand(s(x))
   sum1(cons(x, y)) -> +(x, sum1(y))
   +(s(x), y) -> s(+(x, y))
   +(0, y) -> y
   rand(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(55) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   rands(0, y) -> done(y)

Used ordering: Polynomial interpretation [POLO]:

   POL(+(x_1, x_2)) = x_1 + x_2
   POL(0) = 0
   POL(::(x_1, x_2)) = x_1 + x_2
   POL(RANDS(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(done(x_1)) = 2*x_1
   POL(rand(x_1)) = 2*x_1
   POL(rands(x_1, x_2)) = 1 + 2*x_1 + 2*x_2
   POL(s(x_1)) = x_1
   POL(sum1(x_1)) = 2*x_1
   POL(sum2(x_1, x_2)) = 2*x_1 + x_2


----------------------------------------

(56)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   RANDS(s(x), y) -> RANDS(x, ::(rand(0), y))

The TRS R consists of the following rules:

   rands(s(x), y) -> rands(x, ::(rand(0), y))
   sum2(cons(x, y), z) -> sum2(y, +(x, z))
   rand(x) -> rand(s(x))
   sum1(cons(x, y)) -> +(x, sum1(y))
   +(s(x), y) -> s(+(x, y))
   +(0, y) -> y
   rand(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(57) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   sum2(cons(x, y), z) -> sum2(y, +(x, z))
   sum1(cons(x, y)) -> +(x, sum1(y))
   +(0, y) -> y

Used ordering: Polynomial interpretation [POLO]:

   POL(+(x_1, x_2)) = 1 + x_1 + x_2
   POL(0) = 0
   POL(::(x_1, x_2)) = x_1 + x_2
   POL(RANDS(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(cons(x_1, x_2)) = 2 + 2*x_1 + 2*x_2
   POL(rand(x_1)) = 2*x_1
   POL(rands(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(s(x_1)) = x_1
   POL(sum1(x_1)) = 1 + 2*x_1
   POL(sum2(x_1, x_2)) = 2*x_1 + 2*x_2


----------------------------------------

(58)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   RANDS(s(x), y) -> RANDS(x, ::(rand(0), y))

The TRS R consists of the following rules:

   rands(s(x), y) -> rands(x, ::(rand(0), y))
   rand(x) -> rand(s(x))
   +(s(x), y) -> s(+(x, y))
   rand(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(59) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule RANDS(s(x), y) -> RANDS(x, ::(rand(0), y)) we obtained the following new rules [LPAR04]:

   (RANDS(s(x0), ::(y_1, y_2)) -> RANDS(x0, ::(rand(0), ::(y_1, y_2))),RANDS(s(x0), ::(y_1, y_2)) -> RANDS(x0, ::(rand(0), ::(y_1, y_2))))


----------------------------------------

(60)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   RANDS(s(x0), ::(y_1, y_2)) -> RANDS(x0, ::(rand(0), ::(y_1, y_2)))

The TRS R consists of the following rules:

   rands(s(x), y) -> rands(x, ::(rand(0), y))
   rand(x) -> rand(s(x))
   +(s(x), y) -> s(+(x, y))
   rand(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(61) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule RANDS(s(x0), ::(y_1, y_2)) -> RANDS(x0, ::(rand(0), ::(y_1, y_2))) we obtained the following new rules [LPAR04]:

   (RANDS(s(x0), ::(y_1, ::(y_2, y_3))) -> RANDS(x0, ::(rand(0), ::(y_1, ::(y_2, y_3)))),RANDS(s(x0), ::(y_1, ::(y_2, y_3))) -> RANDS(x0, ::(rand(0), ::(y_1, ::(y_2, y_3)))))


----------------------------------------

(62)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   RANDS(s(x0), ::(y_1, ::(y_2, y_3))) -> RANDS(x0, ::(rand(0), ::(y_1, ::(y_2, y_3))))

The TRS R consists of the following rules:

   rands(s(x), y) -> rands(x, ::(rand(0), y))
   rand(x) -> rand(s(x))
   +(s(x), y) -> s(+(x, y))
   rand(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(63) QDPBoundsTAProof (EQUIVALENT)
The DP-Problem (P, R) could be shown to be Match-DP-Bounded [TAB_NONLEFTLINEAR] by 0 for the Rule: 
   RANDS(s(x0), ::(y_1, ::(y_2, y_3))) -> RANDS(x0, ::(rand(0), ::(y_1, ::(y_2, y_3))))
by considering the usable rules: 

   rand(x) -> rand(s(x))
   rand(x) -> x

The compatible tree automaton used to show the Match-DP-Boundedness is represented by: 
final states : [0]
transitions: 
#0() -> 1
01() -> 4
rand0(4) -> 3
#0() -> 6
#0() -> 8
::0(6, 8) -> 7
::0(6, 7) -> 5
::0(3, 5) -> 2
RANDS0(1, 2) -> 0
s0(4) -> 9
rand0(9) -> 3
::0(6, 7) -> 11
::0(3, 11) -> 10
::0(3, 10) -> 2
s0(9) -> 9
::0(3, 11) -> 11
::0(4, 11) -> 11
::0(4, 11) -> 10
4 -> 3
9 -> 3

----------------------------------------

(64)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   rands(s(x), y) -> rands(x, ::(rand(0), y))
   rand(x) -> rand(s(x))
   +(s(x), y) -> s(+(x, y))
   rand(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(65) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(66)
YES
