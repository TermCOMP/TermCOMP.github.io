YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/MWQUJ.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) RelADPP
        (6) RelADPCleverAfsProof [SOUND, 69 ms]
        (7) QDP
        (8) MRRProof [EQUIVALENT, 4 ms]
        (9) QDP
        (10) PisEmptyProof [EQUIVALENT, 0 ms]
        (11) YES
    (12) RelADPP
        (13) RelADPCleverAfsProof [SOUND, 70 ms]
        (14) QDP
        (15) MRRProof [EQUIVALENT, 5 ms]
        (16) QDP
        (17) MRRProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) MRRProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) MRRProof [EQUIVALENT, 2 ms]
        (22) QDP
        (23) DependencyGraphProof [EQUIVALENT, 0 ms]
        (24) TRUE
    (25) RelADPP
        (26) RelADPReductionPairProof [EQUIVALENT, 56 ms]
        (27) RelADPP
        (28) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (29) YES
    (30) RelADPP
        (31) RelADPReductionPairProof [EQUIVALENT, 60 ms]
        (32) RelADPP
        (33) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (34) YES
    (35) RelADPP
        (36) RelADPReductionPairProof [EQUIVALENT, 56 ms]
        (37) RelADPP
        (38) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (39) YES
    (40) RelADPP
        (41) RelADPReductionPairProof [EQUIVALENT, 63 ms]
        (42) RelADPP
        (43) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (44) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   rm(n, nil) -> nil
   rm(n, cons(m, x)) -> ifrm(eq(n, m), n, cons(m, x))
   ifrm(true, n, cons(m, x)) -> rm(n, x)
   ifrm(false, n, cons(m, x)) -> cons(m, rm(n, x))
   purge(nil) -> nil
   purge(cons(n, x)) -> cons(n, purge(rm(n, x)))

The relative TRS consists of the following S rules:

   consSwap(x, xs) -> cons(x, xs)
   purge(cons(x, xs)) -> purge(consSwap(x, xs))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> EQ(x, y)
   rm(n, nil) -> nil
   rm(n, cons(m, x)) -> IFRM(eq(n, m), n, cons(m, x))
   rm(n, cons(m, x)) -> ifrm(EQ(n, m), n, cons(m, x))
   ifrm(true, n, cons(m, x)) -> RM(n, x)
   ifrm(false, n, cons(m, x)) -> cons(m, RM(n, x))
   purge(nil) -> nil
   purge(cons(n, x)) -> cons(n, PURGE(rm(n, x)))
   purge(cons(n, x)) -> cons(n, purge(RM(n, x)))

and relative ADPs:

   consSwap(x, xs) -> cons(x, xs)
   purge(cons(x, xs)) -> PURGE(CONSSWAP(x, xs))
   consSwap(x, cons(y, xs)) -> cons(y, CONSSWAP(x, xs))


----------------------------------------

(3) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  3 SCCs with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 6 subproblems.

----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Relative ADP Problem with
absolute ADPs:

   eq(s(x), s(y)) -> EQ(x, y)

and relative ADPs:

   ifrm(true, n, cons(m, x)) -> rm(n, x)
   ifrm(false, n, cons(m, x)) -> cons(m, rm(n, x))
   consSwap(x, xs) -> cons(x, xs)
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   purge(cons(x, xs)) -> purge(consSwap(x, xs))
   eq(0, 0) -> true
   purge(cons(n, x)) -> cons(n, purge(rm(n, x)))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   rm(n, nil) -> nil
   rm(n, cons(m, x)) -> ifrm(eq(n, m), n, cons(m, x))
   purge(nil) -> nil


----------------------------------------

(6) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:true = 
ifrm_3 = 0, 1, 2
xs = 
rm_2 = 0, 1
false = 
nil = 
s_1 = 
eq_2 = 0
0 = 
purge_1 = 
cons_2 = 0
consSwap_2 = 0, 1
EQ_2 = 1

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
EQ(x1, x2)  =  x1

s(x1)  =  s(x1)

purge(x1)  =  purge(x1)

cons(x1, x2)  =  x2

rm(x1, x2)  =  rm

ifrm(x1, x2, x3)  =  ifrm

eq(x1, x2)  =  x2

true  =  true

0  =  0

false  =  false

nil  =  nil

xs  =  xs

consSwap(x1, x2)  =  consSwap


Recursive path order with status [RPO].
Quasi-Precedence: s_1 > [rm, ifrm, true, false, nil]
0 > [rm, ifrm, true, false, nil]
[xs, consSwap] > purge_1 > [rm, ifrm, true, false, nil]

Status: s_1: [1]
purge_1: [1]
rm: []
ifrm: []
true: multiset status
0: multiset status
false: multiset status
nil: multiset status
xs: multiset status
consSwap: multiset status


----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(s0(x)) -> EQ(x)

The TRS R consists of the following rules:

   ifrm -> rm
   consSwap -> cons(xs0)
   eq(s0(x)) -> false0
   eq(00) -> false0
   eq(s0(y)) -> eq(y)
   purge0(cons(xs0)) -> purge0(consSwap)
   purge0(cons(x)) -> cons(purge0(rm))
   consSwap -> cons(consSwap)
   rm -> ifrm
   purge0(nil0) -> nil0
   ifrm -> cons(rm)
   eq(00) -> true0
   rm -> nil0

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(8) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   EQ(s0(x)) -> EQ(x)

Strictly oriented rules of the TRS R:

   eq(s0(x)) -> false0
   eq(00) -> false0
   eq(s0(y)) -> eq(y)
   eq(00) -> true0

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 2
   POL(EQ(x_1)) = 2*x_1
   POL(cons(x_1)) = 2*x_1
   POL(consSwap) = 0
   POL(eq(x_1)) = 1 + 2*x_1
   POL(false0) = 2
   POL(ifrm) = 0
   POL(nil0) = 0
   POL(purge0(x_1)) = x_1
   POL(rm) = 0
   POL(s0(x_1)) = 1 + 2*x_1
   POL(true0) = 2
   POL(xs0) = 0


----------------------------------------

(9)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   ifrm -> rm
   consSwap -> cons(xs0)
   purge0(cons(xs0)) -> purge0(consSwap)
   purge0(cons(x)) -> cons(purge0(rm))
   consSwap -> cons(consSwap)
   rm -> ifrm
   purge0(nil0) -> nil0
   ifrm -> cons(rm)
   rm -> nil0

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(10) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(11)
YES

----------------------------------------

(12)
Obligation:
Relative ADP Problem with
absolute ADPs:

   ifrm(false, n, cons(m, x)) -> cons(m, RM(n, x))
   ifrm(true, n, cons(m, x)) -> RM(n, x)
   rm(n, cons(m, x)) -> IFRM(eq(n, m), n, cons(m, x))

and relative ADPs:

   consSwap(x, xs) -> cons(x, xs)
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   purge(cons(x, xs)) -> purge(consSwap(x, xs))
   eq(0, 0) -> true
   purge(cons(n, x)) -> cons(n, purge(rm(n, x)))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   rm(n, nil) -> nil
   rm(n, cons(m, x)) -> ifrm(eq(n, m), n, cons(m, x))
   purge(nil) -> nil


----------------------------------------

(13) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:true = 
ifrm_3 = 0, 1
xs = 
rm_2 = 0
IFRM_3 = 0, 1
false = 
nil = 
s_1 = 0
eq_2 = 0, 1
RM_2 = 0
0 = 
purge_1 = 
cons_2 = 0
consSwap_2 = 0

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
RM(x1, x2)  =  RM(x2)

cons(x1, x2)  =  cons(x2)

IFRM(x1, x2, x3)  =  x3

eq(x1, x2)  =  eq

false  =  false

true  =  true

0  =  0

s(x1)  =  s

purge(x1)  =  purge(x1)

rm(x1, x2)  =  x2

ifrm(x1, x2, x3)  =  x3

nil  =  nil

xs  =  xs

consSwap(x1, x2)  =  consSwap(x2)


Recursive path order with status [RPO].
Quasi-Precedence: s > false
purge_1 > [RM_1, cons_1, consSwap_1] > [eq, true] > false
purge_1 > [RM_1, cons_1, consSwap_1] > xs
purge_1 > nil

Status: RM_1: multiset status
cons_1: multiset status
eq: []
false: multiset status
true: multiset status
0: multiset status
s: []
purge_1: [1]
nil: multiset status
xs: multiset status
consSwap_1: multiset status


----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   RM(cons(x)) -> IFRM(cons(x))
   IFRM(cons(x)) -> RM(x)

The TRS R consists of the following rules:

   ifrm(cons(x)) -> rm(x)
   consSwap(xs0) -> cons(xs0)
   eq -> false0
   eq -> eq
   purge0(cons(xs0)) -> purge0(consSwap(xs0))
   purge0(cons(x)) -> cons(purge0(rm(x)))
   consSwap(cons(xs0)) -> cons(consSwap(xs0))
   rm(cons(x)) -> ifrm(cons(x))
   purge0(nil0) -> nil0
   ifrm(cons(x)) -> cons(rm(x))
   eq -> true0
   rm(nil0) -> nil0

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(15) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   eq -> false0

Used ordering: Polynomial interpretation [POLO]:

   POL(IFRM(x_1)) = x_1
   POL(RM(x_1)) = x_1
   POL(cons(x_1)) = x_1
   POL(consSwap(x_1)) = 2*x_1
   POL(eq) = 1
   POL(false0) = 0
   POL(ifrm(x_1)) = x_1
   POL(nil0) = 0
   POL(purge0(x_1)) = 2*x_1
   POL(rm(x_1)) = x_1
   POL(true0) = 1
   POL(xs0) = 0


----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   RM(cons(x)) -> IFRM(cons(x))
   IFRM(cons(x)) -> RM(x)

The TRS R consists of the following rules:

   ifrm(cons(x)) -> rm(x)
   consSwap(xs0) -> cons(xs0)
   eq -> eq
   purge0(cons(xs0)) -> purge0(consSwap(xs0))
   purge0(cons(x)) -> cons(purge0(rm(x)))
   consSwap(cons(xs0)) -> cons(consSwap(xs0))
   rm(cons(x)) -> ifrm(cons(x))
   purge0(nil0) -> nil0
   ifrm(cons(x)) -> cons(rm(x))
   eq -> true0
   rm(nil0) -> nil0

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(17) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   eq -> true0

Used ordering: Polynomial interpretation [POLO]:

   POL(IFRM(x_1)) = x_1
   POL(RM(x_1)) = x_1
   POL(cons(x_1)) = x_1
   POL(consSwap(x_1)) = x_1
   POL(eq) = 1
   POL(ifrm(x_1)) = x_1
   POL(nil0) = 0
   POL(purge0(x_1)) = 2*x_1
   POL(rm(x_1)) = x_1
   POL(true0) = 0
   POL(xs0) = 0


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   RM(cons(x)) -> IFRM(cons(x))
   IFRM(cons(x)) -> RM(x)

The TRS R consists of the following rules:

   ifrm(cons(x)) -> rm(x)
   consSwap(xs0) -> cons(xs0)
   eq -> eq
   purge0(cons(xs0)) -> purge0(consSwap(xs0))
   purge0(cons(x)) -> cons(purge0(rm(x)))
   consSwap(cons(xs0)) -> cons(consSwap(xs0))
   rm(cons(x)) -> ifrm(cons(x))
   purge0(nil0) -> nil0
   ifrm(cons(x)) -> cons(rm(x))
   rm(nil0) -> nil0

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   purge0(nil0) -> nil0

Used ordering: Polynomial interpretation [POLO]:

   POL(IFRM(x_1)) = 2*x_1
   POL(RM(x_1)) = 2*x_1
   POL(cons(x_1)) = x_1
   POL(consSwap(x_1)) = 2*x_1
   POL(eq) = 0
   POL(ifrm(x_1)) = x_1
   POL(nil0) = 2
   POL(purge0(x_1)) = 2 + x_1
   POL(rm(x_1)) = x_1
   POL(xs0) = 0


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   RM(cons(x)) -> IFRM(cons(x))
   IFRM(cons(x)) -> RM(x)

The TRS R consists of the following rules:

   ifrm(cons(x)) -> rm(x)
   consSwap(xs0) -> cons(xs0)
   eq -> eq
   purge0(cons(xs0)) -> purge0(consSwap(xs0))
   purge0(cons(x)) -> cons(purge0(rm(x)))
   consSwap(cons(xs0)) -> cons(consSwap(xs0))
   rm(cons(x)) -> ifrm(cons(x))
   ifrm(cons(x)) -> cons(rm(x))
   rm(nil0) -> nil0

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   IFRM(cons(x)) -> RM(x)

Strictly oriented rules of the TRS R:

   ifrm(cons(x)) -> rm(x)
   purge0(cons(x)) -> cons(purge0(rm(x)))
   consSwap(cons(xs0)) -> cons(consSwap(xs0))

Used ordering: Polynomial interpretation [POLO]:

   POL(IFRM(x_1)) = 2 + 2*x_1
   POL(RM(x_1)) = 2 + 2*x_1
   POL(cons(x_1)) = 1 + x_1
   POL(consSwap(x_1)) = 1 + 2*x_1
   POL(eq) = 0
   POL(ifrm(x_1)) = x_1
   POL(nil0) = 0
   POL(purge0(x_1)) = 2*x_1
   POL(rm(x_1)) = x_1
   POL(xs0) = 0


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   RM(cons(x)) -> IFRM(cons(x))

The TRS R consists of the following rules:

   consSwap(xs0) -> cons(xs0)
   eq -> eq
   purge0(cons(xs0)) -> purge0(consSwap(xs0))
   rm(cons(x)) -> ifrm(cons(x))
   ifrm(cons(x)) -> cons(rm(x))
   rm(nil0) -> nil0

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(23) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(24)
TRUE

----------------------------------------

(25)
Obligation:
Relative ADP Problem with
absolute ADPs:

   purge(cons(n, x)) -> cons(n, PURGE(rm(n, x)))

and relative ADPs:

   ifrm(true, n, cons(m, x)) -> rm(n, x)
   consSwap(x, xs) -> cons(x, xs)
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   purge(cons(n, x)) -> cons(n, purge(rm(n, x)))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   rm(n, cons(m, x)) -> ifrm(eq(n, m), n, cons(m, x))
   purge(nil) -> nil
   purge(cons(x, xs)) -> PURGE(CONSSWAP(x, xs))
   ifrm(false, n, cons(m, x)) -> cons(m, rm(n, x))
   eq(0, 0) -> true
   rm(n, nil) -> nil


----------------------------------------

(26) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   purge(cons(n, x)) -> cons(n, PURGE(rm(n, x)))

Relative ADPs:

   ifrm(true, n, cons(m, x)) -> rm(n, x)
   ifrm(false, n, cons(m, x)) -> cons(m, rm(n, x))
   consSwap(x, xs) -> cons(x, xs)
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   purge(cons(n, x)) -> cons(n, purge(rm(n, x)))
   eq(0, 0) -> true
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   rm(n, nil) -> nil
   rm(n, cons(m, x)) -> ifrm(eq(n, m), n, cons(m, x))
   purge(nil) -> nil


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(CONSSWAP(x_1, x_2)) = 2*x_2
   POL(EQ(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(IFRM(x_1, x_2, x_3)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_1*x_2*x_3 + 3*x_1*x_3 + 3*x_2 + 3*x_2*x_3 + 3*x_3
   POL(PURGE(x_1)) = 3 + 2*x_1
   POL(RM(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(cons(x_1, x_2)) = 1 + 2*x_2
   POL(consSwap(x_1, x_2)) = 1 + 2*x_2
   POL(eq(x_1, x_2)) = 0
   POL(false) = 0
   POL(ifrm(x_1, x_2, x_3)) = x_3
   POL(nil) = 0
   POL(purge(x_1)) = 2*x_1
   POL(rm(x_1, x_2)) = x_2
   POL(s(x_1)) = 3*x_1
   POL(true) = 0
   POL(xs) = 0

----------------------------------------

(27)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   ifrm(true, n, cons(m, x)) -> rm(n, x)
   consSwap(x, xs) -> cons(x, xs)
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   purge(cons(n, x)) -> cons(n, purge(rm(n, x)))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   rm(n, cons(m, x)) -> ifrm(eq(n, m), n, cons(m, x))
   purge(nil) -> nil
   purge(cons(x, xs)) -> PURGE(CONSSWAP(x, xs))
   ifrm(false, n, cons(m, x)) -> cons(m, rm(n, x))
   eq(0, 0) -> true
   rm(n, nil) -> nil


----------------------------------------

(28) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(29)
YES

----------------------------------------

(30)
Obligation:
Relative ADP Problem with
absolute ADPs:

   purge(cons(n, x)) -> cons(n, purge(RM(n, x)))

and relative ADPs:

   ifrm(true, n, cons(m, x)) -> rm(n, x)
   consSwap(x, xs) -> cons(x, xs)
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   purge(cons(n, x)) -> cons(n, purge(rm(n, x)))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   rm(n, cons(m, x)) -> ifrm(eq(n, m), n, cons(m, x))
   purge(nil) -> nil
   purge(cons(x, xs)) -> PURGE(CONSSWAP(x, xs))
   ifrm(false, n, cons(m, x)) -> cons(m, rm(n, x))
   eq(0, 0) -> true
   rm(n, nil) -> nil


----------------------------------------

(31) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   purge(cons(n, x)) -> cons(n, purge(RM(n, x)))

Relative ADPs:

   ifrm(true, n, cons(m, x)) -> rm(n, x)
   ifrm(false, n, cons(m, x)) -> cons(m, rm(n, x))
   consSwap(x, xs) -> cons(x, xs)
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   purge(cons(n, x)) -> cons(n, purge(rm(n, x)))
   eq(0, 0) -> true
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   rm(n, nil) -> nil
   rm(n, cons(m, x)) -> ifrm(eq(n, m), n, cons(m, x))
   purge(nil) -> nil


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(CONSSWAP(x_1, x_2)) = 2*x_2
   POL(EQ(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(IFRM(x_1, x_2, x_3)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_1*x_2*x_3 + 3*x_1*x_3 + 3*x_2 + 3*x_2*x_3 + 3*x_3
   POL(PURGE(x_1)) = 2
   POL(RM(x_1, x_2)) = 1
   POL(cons(x_1, x_2)) = 0
   POL(consSwap(x_1, x_2)) = 0
   POL(eq(x_1, x_2)) = 0
   POL(false) = 0
   POL(ifrm(x_1, x_2, x_3)) = 0
   POL(nil) = 0
   POL(purge(x_1)) = 0
   POL(rm(x_1, x_2)) = 0
   POL(s(x_1)) = 3*x_1
   POL(true) = 0
   POL(xs) = 0

----------------------------------------

(32)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   ifrm(true, n, cons(m, x)) -> rm(n, x)
   consSwap(x, xs) -> cons(x, xs)
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   purge(cons(n, x)) -> cons(n, purge(rm(n, x)))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   rm(n, cons(m, x)) -> ifrm(eq(n, m), n, cons(m, x))
   purge(nil) -> nil
   purge(cons(x, xs)) -> PURGE(CONSSWAP(x, xs))
   ifrm(false, n, cons(m, x)) -> cons(m, rm(n, x))
   eq(0, 0) -> true
   rm(n, nil) -> nil


----------------------------------------

(33) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(34)
YES

----------------------------------------

(35)
Obligation:
Relative ADP Problem with
absolute ADPs:

   purge(cons(n, x)) -> cons(n, PURGE(rm(n, x)))

and relative ADPs:

   ifrm(true, n, cons(m, x)) -> rm(n, x)
   consSwap(x, xs) -> cons(x, xs)
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   purge(cons(n, x)) -> cons(n, purge(rm(n, x)))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   rm(n, cons(m, x)) -> ifrm(eq(n, m), n, cons(m, x))
   purge(nil) -> nil
   purge(cons(x, xs)) -> PURGE(CONSSWAP(x, xs))
   ifrm(false, n, cons(m, x)) -> cons(m, rm(n, x))
   eq(0, 0) -> true
   rm(n, nil) -> nil


----------------------------------------

(36) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   purge(cons(n, x)) -> cons(n, PURGE(rm(n, x)))

Relative ADPs:

   ifrm(true, n, cons(m, x)) -> rm(n, x)
   ifrm(false, n, cons(m, x)) -> cons(m, rm(n, x))
   consSwap(x, xs) -> cons(x, xs)
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   purge(cons(n, x)) -> cons(n, purge(rm(n, x)))
   eq(0, 0) -> true
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   rm(n, nil) -> nil
   rm(n, cons(m, x)) -> ifrm(eq(n, m), n, cons(m, x))
   purge(nil) -> nil


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(CONSSWAP(x_1, x_2)) = 2*x_2
   POL(EQ(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(IFRM(x_1, x_2, x_3)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_1*x_2*x_3 + 3*x_1*x_3 + 3*x_2 + 3*x_2*x_3 + 3*x_3
   POL(PURGE(x_1)) = 3 + 2*x_1
   POL(RM(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(cons(x_1, x_2)) = 1 + 2*x_2
   POL(consSwap(x_1, x_2)) = 1 + 2*x_2
   POL(eq(x_1, x_2)) = 0
   POL(false) = 0
   POL(ifrm(x_1, x_2, x_3)) = x_3
   POL(nil) = 0
   POL(purge(x_1)) = 2*x_1
   POL(rm(x_1, x_2)) = x_2
   POL(s(x_1)) = 3*x_1
   POL(true) = 0
   POL(xs) = 0

----------------------------------------

(37)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   ifrm(true, n, cons(m, x)) -> rm(n, x)
   consSwap(x, xs) -> cons(x, xs)
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   purge(cons(n, x)) -> cons(n, purge(rm(n, x)))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   rm(n, cons(m, x)) -> ifrm(eq(n, m), n, cons(m, x))
   purge(nil) -> nil
   purge(cons(x, xs)) -> PURGE(CONSSWAP(x, xs))
   ifrm(false, n, cons(m, x)) -> cons(m, rm(n, x))
   eq(0, 0) -> true
   rm(n, nil) -> nil


----------------------------------------

(38) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(39)
YES

----------------------------------------

(40)
Obligation:
Relative ADP Problem with
absolute ADPs:

   purge(nil) -> nil

and relative ADPs:

   ifrm(true, n, cons(m, x)) -> rm(n, x)
   ifrm(false, n, cons(m, x)) -> cons(m, rm(n, x))
   consSwap(x, xs) -> cons(x, xs)
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   eq(0, 0) -> true
   purge(cons(n, x)) -> cons(n, purge(rm(n, x)))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   rm(n, nil) -> nil
   rm(n, cons(m, x)) -> ifrm(eq(n, m), n, cons(m, x))
   purge(cons(x, xs)) -> PURGE(CONSSWAP(x, xs))


----------------------------------------

(41) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   purge(nil) -> nil

Relative ADPs:

   ifrm(true, n, cons(m, x)) -> rm(n, x)
   ifrm(false, n, cons(m, x)) -> cons(m, rm(n, x))
   consSwap(x, xs) -> cons(x, xs)
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   eq(0, 0) -> true
   purge(cons(n, x)) -> cons(n, purge(rm(n, x)))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   rm(n, nil) -> nil
   rm(n, cons(m, x)) -> ifrm(eq(n, m), n, cons(m, x))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(CONSSWAP(x_1, x_2)) = 2*x_2
   POL(EQ(x_1, x_2)) = 3 + x_1 + 3*x_1*x_2 + 3*x_2
   POL(IFRM(x_1, x_2, x_3)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_1*x_2*x_3 + 3*x_1*x_3 + 3*x_2 + 3*x_2*x_3 + 3*x_3
   POL(PURGE(x_1)) = 1
   POL(RM(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(cons(x_1, x_2)) = 0
   POL(consSwap(x_1, x_2)) = 0
   POL(eq(x_1, x_2)) = 0
   POL(false) = 0
   POL(ifrm(x_1, x_2, x_3)) = 0
   POL(nil) = 0
   POL(purge(x_1)) = 0
   POL(rm(x_1, x_2)) = 0
   POL(s(x_1)) = 3*x_1
   POL(true) = 0
   POL(xs) = 0

----------------------------------------

(42)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   ifrm(true, n, cons(m, x)) -> rm(n, x)
   consSwap(x, xs) -> cons(x, xs)
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   purge(cons(n, x)) -> cons(n, purge(rm(n, x)))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   rm(n, cons(m, x)) -> ifrm(eq(n, m), n, cons(m, x))
   purge(nil) -> nil
   purge(cons(x, xs)) -> PURGE(CONSSWAP(x, xs))
   ifrm(false, n, cons(m, x)) -> cons(m, rm(n, x))
   eq(0, 0) -> true
   rm(n, nil) -> nil


----------------------------------------

(43) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(44)
YES
