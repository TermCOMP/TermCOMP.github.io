YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/11zWg.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) RelADPP
        (6) RelADPDerelatifyingProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) MRRProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) MRRProof [EQUIVALENT, 3 ms]
        (11) QDP
        (12) PisEmptyProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) RelADPP
        (15) RelADPCleverAfsProof [SOUND, 32 ms]
        (16) QDP
        (17) MRRProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) MRRProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) PisEmptyProof [EQUIVALENT, 0 ms]
        (22) YES
    (23) RelADPP
        (24) RelADPReductionPairProof [EQUIVALENT, 14 ms]
        (25) RelADPP
        (26) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (27) YES
    (28) RelADPP
        (29) RelADPReductionPairProof [EQUIVALENT, 14 ms]
        (30) RelADPP
        (31) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (32) YES
    (33) RelADPP
        (34) RelADPReductionPairProof [EQUIVALENT, 14 ms]
        (35) RelADPP
        (36) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (37) YES
    (38) RelADPP
        (39) RelADPReductionPairProof [EQUIVALENT, 27 ms]
        (40) RelADPP
        (41) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (42) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   app(nil, y) -> y
   app(cons(n, x), y) -> cons(n, app(x, y))
   reverse(nil) -> nil
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   shuffle(nil) -> nil
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))

The relative TRS consists of the following S rules:

   shuffle(cons(x, xs)) -> shuffle(consSwap(x, xs))
   consSwap(x, xs) -> cons(x, xs)
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   app(nil, y) -> y
   app(cons(n, x), y) -> cons(n, APP(x, y))
   reverse(nil) -> nil
   reverse(cons(n, x)) -> APP(reverse(x), cons(n, nil))
   reverse(cons(n, x)) -> app(REVERSE(x), cons(n, nil))
   shuffle(nil) -> nil
   shuffle(cons(n, x)) -> cons(n, SHUFFLE(reverse(x)))
   shuffle(cons(n, x)) -> cons(n, shuffle(REVERSE(x)))

and relative ADPs:

   shuffle(cons(x, xs)) -> SHUFFLE(CONSSWAP(x, xs))
   consSwap(x, xs) -> cons(x, xs)
   consSwap(x, cons(y, xs)) -> cons(y, CONSSWAP(x, xs))


----------------------------------------

(3) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  3 SCCs with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 6 subproblems.

----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Relative ADP Problem with
absolute ADPs:

   app(cons(n, x), y) -> cons(n, APP(x, y))

and relative ADPs:

   shuffle(cons(x, xs)) -> shuffle(consSwap(x, xs))
   reverse(nil) -> nil
   consSwap(x, xs) -> cons(x, xs)
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   shuffle(nil) -> nil


----------------------------------------

(6) RelADPDerelatifyingProof (EQUIVALENT)


We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(cons(n, x), y) -> APP(x, y)

The TRS R consists of the following rules:

   shuffle(cons(x, xs)) -> shuffle(consSwap(x, xs))
   reverse(nil) -> nil
   consSwap(x, xs) -> cons(x, xs)
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   shuffle(nil) -> nil

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(8) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   shuffle(nil) -> nil

Used ordering: Polynomial interpretation [POLO]:

   POL(APP(x_1, x_2)) = x_1 + x_2
   POL(app(x_1, x_2)) = x_1 + x_2
   POL(cons(x_1, x_2)) = x_1 + x_2
   POL(consSwap(x_1, x_2)) = x_1 + x_2
   POL(nil) = 0
   POL(reverse(x_1)) = x_1
   POL(shuffle(x_1)) = 2 + 2*x_1
   POL(xs) = 0


----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(cons(n, x), y) -> APP(x, y)

The TRS R consists of the following rules:

   shuffle(cons(x, xs)) -> shuffle(consSwap(x, xs))
   reverse(nil) -> nil
   consSwap(x, xs) -> cons(x, xs)
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(10) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   APP(cons(n, x), y) -> APP(x, y)

Strictly oriented rules of the TRS R:

   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))

Used ordering: Polynomial interpretation [POLO]:

   POL(APP(x_1, x_2)) = 2*x_1 + x_2
   POL(app(x_1, x_2)) = x_1 + x_2
   POL(cons(x_1, x_2)) = 1 + x_1 + x_2
   POL(consSwap(x_1, x_2)) = 1 + x_1 + 2*x_2
   POL(nil) = 0
   POL(reverse(x_1)) = x_1
   POL(shuffle(x_1)) = 2*x_1
   POL(xs) = 0


----------------------------------------

(11)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   shuffle(cons(x, xs)) -> shuffle(consSwap(x, xs))
   reverse(nil) -> nil
   consSwap(x, xs) -> cons(x, xs)
   app(cons(n, x), y) -> cons(n, app(x, y))
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Relative ADP Problem with
absolute ADPs:

   reverse(cons(n, x)) -> app(REVERSE(x), cons(n, nil))

and relative ADPs:

   shuffle(cons(x, xs)) -> shuffle(consSwap(x, xs))
   reverse(nil) -> nil
   consSwap(x, xs) -> cons(x, xs)
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   shuffle(nil) -> nil


----------------------------------------

(15) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:REVERSE_1 = 
reverse_1 = 
app_2 = 
xs = 
cons_2 = 
shuffle_1 = 
consSwap_2 = 
nil = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
REVERSE(x1)  =  x1

cons(x1, x2)  =  cons(x1, x2)


Recursive path order with status [RPO].
Quasi-Precedence: trivial

Status: cons_2: [2,1]


----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REVERSE0(cons0(n, x)) -> REVERSE0(x)

The TRS R consists of the following rules:

   shuffle0(cons0(x, xs0)) -> shuffle0(consSwap0(x, xs0))
   reverse0(nil0) -> nil0
   consSwap0(x, xs0) -> cons0(x, xs0)
   app0(cons0(n, x), y) -> cons0(n, app0(x, y))
   shuffle0(cons0(n, x)) -> cons0(n, shuffle0(reverse0(x)))
   reverse0(cons0(n, x)) -> app0(reverse0(x), cons0(n, nil0))
   app0(nil0, y) -> y
   consSwap0(x, cons0(y, xs0)) -> cons0(y, consSwap0(x, xs0))
   shuffle0(nil0) -> nil0

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(17) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   shuffle0(nil0) -> nil0

Used ordering: Polynomial interpretation [POLO]:

   POL(REVERSE0(x_1)) = x_1
   POL(app0(x_1, x_2)) = x_1 + x_2
   POL(cons0(x_1, x_2)) = x_1 + x_2
   POL(consSwap0(x_1, x_2)) = x_1 + x_2
   POL(nil0) = 0
   POL(reverse0(x_1)) = x_1
   POL(shuffle0(x_1)) = 2 + 2*x_1
   POL(xs0) = 0


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REVERSE0(cons0(n, x)) -> REVERSE0(x)

The TRS R consists of the following rules:

   shuffle0(cons0(x, xs0)) -> shuffle0(consSwap0(x, xs0))
   reverse0(nil0) -> nil0
   consSwap0(x, xs0) -> cons0(x, xs0)
   app0(cons0(n, x), y) -> cons0(n, app0(x, y))
   shuffle0(cons0(n, x)) -> cons0(n, shuffle0(reverse0(x)))
   reverse0(cons0(n, x)) -> app0(reverse0(x), cons0(n, nil0))
   app0(nil0, y) -> y
   consSwap0(x, cons0(y, xs0)) -> cons0(y, consSwap0(x, xs0))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   REVERSE0(cons0(n, x)) -> REVERSE0(x)

Strictly oriented rules of the TRS R:

   shuffle0(cons0(n, x)) -> cons0(n, shuffle0(reverse0(x)))
   consSwap0(x, cons0(y, xs0)) -> cons0(y, consSwap0(x, xs0))

Used ordering: Polynomial interpretation [POLO]:

   POL(REVERSE0(x_1)) = 2*x_1
   POL(app0(x_1, x_2)) = x_1 + x_2
   POL(cons0(x_1, x_2)) = 1 + x_1 + x_2
   POL(consSwap0(x_1, x_2)) = 1 + x_1 + 2*x_2
   POL(nil0) = 0
   POL(reverse0(x_1)) = x_1
   POL(shuffle0(x_1)) = 2*x_1
   POL(xs0) = 0


----------------------------------------

(20)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   shuffle0(cons0(x, xs0)) -> shuffle0(consSwap0(x, xs0))
   reverse0(nil0) -> nil0
   consSwap0(x, xs0) -> cons0(x, xs0)
   app0(cons0(n, x), y) -> cons0(n, app0(x, y))
   reverse0(cons0(n, x)) -> app0(reverse0(x), cons0(n, nil0))
   app0(nil0, y) -> y

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(22)
YES

----------------------------------------

(23)
Obligation:
Relative ADP Problem with
absolute ADPs:

   shuffle(cons(n, x)) -> cons(n, SHUFFLE(reverse(x)))

and relative ADPs:

   reverse(nil) -> nil
   consSwap(x, xs) -> cons(x, xs)
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   shuffle(cons(x, xs)) -> SHUFFLE(CONSSWAP(x, xs))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   shuffle(nil) -> nil


----------------------------------------

(24) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   shuffle(cons(n, x)) -> cons(n, SHUFFLE(reverse(x)))

Relative ADPs:

   reverse(nil) -> nil
   consSwap(x, xs) -> cons(x, xs)
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   shuffle(nil) -> nil


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(APP(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(CONSSWAP(x_1, x_2)) = 0
   POL(REVERSE(x_1)) = 1 + 3*x_1 + 3*x_1^2
   POL(SHUFFLE(x_1)) = 3 + 2*x_1
   POL(app(x_1, x_2)) = x_1 + x_2
   POL(cons(x_1, x_2)) = 2 + x_2
   POL(consSwap(x_1, x_2)) = 2*x_2
   POL(nil) = 0
   POL(reverse(x_1)) = x_1
   POL(shuffle(x_1)) = x_1
   POL(xs) = 2

----------------------------------------

(25)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   reverse(nil) -> nil
   consSwap(x, xs) -> cons(x, xs)
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   shuffle(cons(x, xs)) -> SHUFFLE(CONSSWAP(x, xs))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   shuffle(nil) -> nil


----------------------------------------

(26) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(27)
YES

----------------------------------------

(28)
Obligation:
Relative ADP Problem with
absolute ADPs:

   shuffle(cons(n, x)) -> cons(n, SHUFFLE(reverse(x)))

and relative ADPs:

   reverse(nil) -> nil
   consSwap(x, xs) -> cons(x, xs)
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   shuffle(cons(x, xs)) -> SHUFFLE(CONSSWAP(x, xs))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   shuffle(nil) -> nil


----------------------------------------

(29) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   shuffle(cons(n, x)) -> cons(n, SHUFFLE(reverse(x)))

Relative ADPs:

   reverse(nil) -> nil
   consSwap(x, xs) -> cons(x, xs)
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   shuffle(nil) -> nil


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(APP(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(CONSSWAP(x_1, x_2)) = 0
   POL(REVERSE(x_1)) = 1 + 3*x_1 + 3*x_1^2
   POL(SHUFFLE(x_1)) = 3 + 2*x_1
   POL(app(x_1, x_2)) = x_1 + x_2
   POL(cons(x_1, x_2)) = 2 + x_2
   POL(consSwap(x_1, x_2)) = 2*x_2
   POL(nil) = 0
   POL(reverse(x_1)) = x_1
   POL(shuffle(x_1)) = x_1
   POL(xs) = 2

----------------------------------------

(30)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   reverse(nil) -> nil
   consSwap(x, xs) -> cons(x, xs)
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   shuffle(cons(x, xs)) -> SHUFFLE(CONSSWAP(x, xs))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   shuffle(nil) -> nil


----------------------------------------

(31) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(32)
YES

----------------------------------------

(33)
Obligation:
Relative ADP Problem with
absolute ADPs:

   shuffle(cons(n, x)) -> cons(n, shuffle(REVERSE(x)))

and relative ADPs:

   reverse(nil) -> nil
   consSwap(x, xs) -> cons(x, xs)
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   shuffle(cons(x, xs)) -> SHUFFLE(CONSSWAP(x, xs))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   shuffle(nil) -> nil


----------------------------------------

(34) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   shuffle(cons(n, x)) -> cons(n, shuffle(REVERSE(x)))

Relative ADPs:

   reverse(nil) -> nil
   consSwap(x, xs) -> cons(x, xs)
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   shuffle(nil) -> nil


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(APP(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(CONSSWAP(x_1, x_2)) = 2*x_2
   POL(REVERSE(x_1)) = 1
   POL(SHUFFLE(x_1)) = 3
   POL(app(x_1, x_2)) = 2*x_2
   POL(cons(x_1, x_2)) = 0
   POL(consSwap(x_1, x_2)) = 0
   POL(nil) = 0
   POL(reverse(x_1)) = 0
   POL(shuffle(x_1)) = 0
   POL(xs) = 0

----------------------------------------

(35)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   reverse(nil) -> nil
   consSwap(x, xs) -> cons(x, xs)
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   shuffle(cons(x, xs)) -> SHUFFLE(CONSSWAP(x, xs))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   shuffle(nil) -> nil


----------------------------------------

(36) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(37)
YES

----------------------------------------

(38)
Obligation:
Relative ADP Problem with
absolute ADPs:

   shuffle(nil) -> nil

and relative ADPs:

   reverse(nil) -> nil
   consSwap(x, xs) -> cons(x, xs)
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   shuffle(cons(x, xs)) -> SHUFFLE(CONSSWAP(x, xs))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))


----------------------------------------

(39) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   shuffle(nil) -> nil

Relative ADPs:

   reverse(nil) -> nil
   consSwap(x, xs) -> cons(x, xs)
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(APP(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(CONSSWAP(x_1, x_2)) = 0
   POL(REVERSE(x_1)) = 3 + 3*x_1 + 3*x_1^2
   POL(SHUFFLE(x_1)) = 1
   POL(app(x_1, x_2)) = 2*x_2
   POL(cons(x_1, x_2)) = 0
   POL(consSwap(x_1, x_2)) = 3*x_2
   POL(nil) = 0
   POL(reverse(x_1)) = 0
   POL(shuffle(x_1)) = 0
   POL(xs) = 2

----------------------------------------

(40)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   reverse(nil) -> nil
   consSwap(x, xs) -> cons(x, xs)
   app(cons(n, x), y) -> cons(n, app(x, y))
   shuffle(cons(n, x)) -> cons(n, shuffle(reverse(x)))
   reverse(cons(n, x)) -> app(reverse(x), cons(n, nil))
   app(nil, y) -> y
   shuffle(cons(x, xs)) -> SHUFFLE(CONSSWAP(x, xs))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   shuffle(nil) -> nil


----------------------------------------

(41) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(42)
YES
