YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/LXNqb.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(4) RelADPP
(5) RelADPDerelatifyingProof [EQUIVALENT, 1 ms]
(6) QDP
(7) MRRProof [EQUIVALENT, 0 ms]
(8) QDP
(9) QDPOrderProof [EQUIVALENT, 2 ms]
(10) QDP
(11) DependencyGraphProof [EQUIVALENT, 0 ms]
(12) AND
    (13) QDP
        (14) QDPOrderProof [EQUIVALENT, 10 ms]
        (15) QDP
        (16) PisEmptyProof [EQUIVALENT, 0 ms]
        (17) YES
    (18) QDP
        (19) QDPOrderProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) PisEmptyProof [EQUIVALENT, 0 ms]
        (22) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   f(c(s(x), y)) -> f(c(x, s(y)))
   f(c(s(x), s(y))) -> g(c(x, y))
   g(c(x, s(y))) -> g(c(s(x), y))
   g(c(s(x), s(y))) -> f(c(x, y))

The relative TRS consists of the following S rules:

   rand(x) -> rand(s(x))
   rand(x) -> x


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   f(c(s(x), y)) -> F(c(x, s(y)))
   f(c(s(x), s(y))) -> G(c(x, y))
   g(c(x, s(y))) -> G(c(s(x), y))
   g(c(s(x), s(y))) -> F(c(x, y))

and relative ADPs:

   rand(x) -> RAND(s(x))
   rand(x) -> x


----------------------------------------

(3) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 1 subproblem.

----------------------------------------

(4)
Obligation:
Relative ADP Problem with
absolute ADPs:

   f(c(s(x), y)) -> F(c(x, s(y)))
   f(c(s(x), s(y))) -> G(c(x, y))
   g(c(x, s(y))) -> G(c(s(x), y))
   g(c(s(x), s(y))) -> F(c(x, y))

and relative ADPs:

   rand(x) -> rand(s(x))
   rand(x) -> x


----------------------------------------

(5) RelADPDerelatifyingProof (EQUIVALENT)


We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.
----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G(c(x, s(y))) -> G(c(s(x), y))
   F(c(s(x), s(y))) -> G(c(x, y))
   F(c(s(x), y)) -> F(c(x, s(y)))
   G(c(s(x), s(y))) -> F(c(x, y))

The TRS R consists of the following rules:

   g(c(x, s(y))) -> g(c(s(x), y))
   g(c(s(x), s(y))) -> f(c(x, y))
   rand(x) -> rand(s(x))
   f(c(s(x), y)) -> f(c(x, s(y)))
   f(c(s(x), s(y))) -> g(c(x, y))
   rand(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(7) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   rand(x) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(F(x_1)) = x_1
   POL(G(x_1)) = x_1
   POL(c(x_1, x_2)) = 2*x_1 + x_2
   POL(f(x_1)) = 2*x_1
   POL(g(x_1)) = 2*x_1
   POL(rand(x_1)) = 1 + 2*x_1
   POL(s(x_1)) = x_1


----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G(c(x, s(y))) -> G(c(s(x), y))
   F(c(s(x), s(y))) -> G(c(x, y))
   F(c(s(x), y)) -> F(c(x, s(y)))
   G(c(s(x), s(y))) -> F(c(x, y))

The TRS R consists of the following rules:

   g(c(x, s(y))) -> g(c(s(x), y))
   g(c(s(x), s(y))) -> f(c(x, y))
   rand(x) -> rand(s(x))
   f(c(s(x), y)) -> f(c(x, s(y)))
   f(c(s(x), s(y))) -> g(c(x, y))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(9) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   F(c(s(x), s(y))) -> G(c(x, y))
   G(c(s(x), s(y))) -> F(c(x, y))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( g_1(x_1) ) = max{0, -2}
POL( c_2(x_1, x_2) ) = 2x_1 + 2x_2 + 2
POL( s_1(x_1) ) = x_1 + 2
POL( f_1(x_1) ) = max{0, -2}
POL( rand_1(x_1) ) = 2
POL( G_1(x_1) ) = x_1
POL( F_1(x_1) ) = x_1 + 1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   g(c(x, s(y))) -> g(c(s(x), y))
   g(c(s(x), s(y))) -> f(c(x, y))
   rand(x) -> rand(s(x))
   f(c(s(x), y)) -> f(c(x, s(y)))
   f(c(s(x), s(y))) -> g(c(x, y))


----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G(c(x, s(y))) -> G(c(s(x), y))
   F(c(s(x), y)) -> F(c(x, s(y)))

The TRS R consists of the following rules:

   g(c(x, s(y))) -> g(c(s(x), y))
   g(c(s(x), s(y))) -> f(c(x, y))
   rand(x) -> rand(s(x))
   f(c(s(x), y)) -> f(c(x, s(y)))
   f(c(s(x), s(y))) -> g(c(x, y))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(11) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs.
----------------------------------------

(12)
Complex Obligation (AND)

----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(c(s(x), y)) -> F(c(x, s(y)))

The TRS R consists of the following rules:

   g(c(x, s(y))) -> g(c(s(x), y))
   g(c(s(x), s(y))) -> f(c(x, y))
   rand(x) -> rand(s(x))
   f(c(s(x), y)) -> f(c(x, s(y)))
   f(c(s(x), s(y))) -> g(c(x, y))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(14) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   F(c(s(x), y)) -> F(c(x, s(y)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( g_1(x_1) ) = max{0, -2}
POL( c_2(x_1, x_2) ) = x_1
POL( s_1(x_1) ) = x_1 + 1
POL( f_1(x_1) ) = max{0, -2}
POL( rand_1(x_1) ) = max{0, -2}
POL( F_1(x_1) ) = max{0, 2x_1 - 1}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   g(c(x, s(y))) -> g(c(s(x), y))
   g(c(s(x), s(y))) -> f(c(x, y))
   rand(x) -> rand(s(x))
   f(c(s(x), y)) -> f(c(x, s(y)))
   f(c(s(x), s(y))) -> g(c(x, y))


----------------------------------------

(15)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   g(c(x, s(y))) -> g(c(s(x), y))
   g(c(s(x), s(y))) -> f(c(x, y))
   rand(x) -> rand(s(x))
   f(c(s(x), y)) -> f(c(x, s(y)))
   f(c(s(x), s(y))) -> g(c(x, y))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(16) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(17)
YES

----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G(c(x, s(y))) -> G(c(s(x), y))

The TRS R consists of the following rules:

   g(c(x, s(y))) -> g(c(s(x), y))
   g(c(s(x), s(y))) -> f(c(x, y))
   rand(x) -> rand(s(x))
   f(c(s(x), y)) -> f(c(x, s(y)))
   f(c(s(x), s(y))) -> g(c(x, y))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   G(c(x, s(y))) -> G(c(s(x), y))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( g_1(x_1) ) = max{0, -2}
POL( c_2(x_1, x_2) ) = max{0, x_2 - 1}
POL( s_1(x_1) ) = x_1 + 2
POL( f_1(x_1) ) = max{0, -2}
POL( rand_1(x_1) ) = max{0, -2}
POL( G_1(x_1) ) = x_1 + 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   g(c(x, s(y))) -> g(c(s(x), y))
   g(c(s(x), s(y))) -> f(c(x, y))
   rand(x) -> rand(s(x))
   f(c(s(x), y)) -> f(c(x, s(y)))
   f(c(s(x), s(y))) -> g(c(x, y))


----------------------------------------

(20)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   g(c(x, s(y))) -> g(c(s(x), y))
   g(c(s(x), s(y))) -> f(c(x, y))
   rand(x) -> rand(s(x))
   f(c(s(x), y)) -> f(c(x, s(y)))
   f(c(s(x), s(y))) -> g(c(x, y))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(22)
YES
