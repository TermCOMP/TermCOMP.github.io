YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/6tTv7.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(4) RelADPP
(5) RelADPCleverAfsProof [SOUND, 40 ms]
(6) QDP
(7) MRRProof [EQUIVALENT, 0 ms]
(8) QDP
(9) DependencyGraphProof [EQUIVALENT, 0 ms]
(10) QDP
(11) QDPOrderProof [EQUIVALENT, 1 ms]
(12) QDP
(13) PisEmptyProof [EQUIVALENT, 0 ms]
(14) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   f(0, y) -> 0
   f(s(x), y) -> f(f(x, y), y)

The relative TRS consists of the following S rules:

   rand(x) -> rand(s(x))
   rand(x) -> x


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   f(0, y) -> 0
   f(s(x), y) -> F(f(x, y), y)
   f(s(x), y) -> f(F(x, y), y)

and relative ADPs:

   rand(x) -> RAND(s(x))
   rand(x) -> x


----------------------------------------

(3) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 1 subproblem.

----------------------------------------

(4)
Obligation:
Relative ADP Problem with
absolute ADPs:

   f(s(x), y) -> F(f(x, y), y)
   f(s(x), y) -> f(F(x, y), y)

and relative ADPs:

   f(0, y) -> 0
   rand(x) -> rand(s(x))
   rand(x) -> x


----------------------------------------

(5) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:s_1 = 
f_2 = 1
0 = 
F_2 = 
rand_1 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
F(x1, x2)  =  F(x1, x2)

s(x1)  =  s(x1)

f(x1, x2)  =  f(x1)

0  =  0


Recursive path order with status [RPO].
Quasi-Precedence: [s_1, f_1] > F_2
[s_1, f_1] > 0

Status: F_2: [2,1]
s_1: multiset status
f_1: multiset status
0: multiset status


----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F0(s0(x), y) -> F0(f(x), y)
   F0(s0(x), y) -> F0(x, y)

The TRS R consists of the following rules:

   f(00) -> 00
   rand0(x) -> rand0(s0(x))
   f(s0(x)) -> f(f(x))
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(7) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   rand0(x) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 2
   POL(F0(x_1, x_2)) = x_1 + x_2
   POL(f(x_1)) = x_1
   POL(rand0(x_1)) = 1 + 2*x_1
   POL(s0(x_1)) = x_1


----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F0(s0(x), y) -> F0(f(x), y)
   F0(s0(x), y) -> F0(x, y)

The TRS R consists of the following rules:

   f(00) -> 00
   rand0(x) -> rand0(s0(x))
   f(s0(x)) -> f(f(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(9) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F0(s0(x), y) -> F0(x, y)

The TRS R consists of the following rules:

   f(00) -> 00
   rand0(x) -> rand0(s0(x))
   f(s0(x)) -> f(f(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(11) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   F0(s0(x), y) -> F0(x, y)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
F0(x1, x2)  =  x1

s0(x1)  =  s0(x1)

f(x1)  =  f

00  =  00

rand0(x1)  =  rand0


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   s0_1=1
   00=1
   rand0=2
   f=2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   f(00) -> 00
   rand0(x) -> rand0(s0(x))
   f(s0(x)) -> f(f(x))


----------------------------------------

(12)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   f(00) -> 00
   rand0(x) -> rand0(s0(x))
   f(s0(x)) -> f(f(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(13) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(14)
YES
