YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/zN0hA.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) RelADPP
        (6) RelADPCleverAfsProof [SOUND, 46 ms]
        (7) QDP
        (8) MRRProof [EQUIVALENT, 4 ms]
        (9) QDP
        (10) MRRProof [EQUIVALENT, 4 ms]
        (11) QDP
        (12) QDPOrderProof [EQUIVALENT, 6 ms]
        (13) QDP
        (14) PisEmptyProof [EQUIVALENT, 0 ms]
        (15) YES
    (16) RelADPP
        (17) RelADPCleverAfsProof [SOUND, 110 ms]
        (18) QDP
        (19) MRRProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) MRRProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) MRRProof [EQUIVALENT, 2 ms]
        (24) QDP
        (25) QDPOrderProof [EQUIVALENT, 16 ms]
        (26) QDP
        (27) DependencyGraphProof [EQUIVALENT, 0 ms]
        (28) TRUE
    (29) RelADPP
        (30) RelADPCleverAfsProof [SOUND, 54 ms]
        (31) QDP
        (32) MRRProof [EQUIVALENT, 12 ms]
        (33) QDP
        (34) MRRProof [EQUIVALENT, 4 ms]
        (35) QDP
        (36) MRRProof [EQUIVALENT, 0 ms]
        (37) QDP
        (38) QDPOrderProof [EQUIVALENT, 3 ms]
        (39) QDP
        (40) PisEmptyProof [EQUIVALENT, 0 ms]
        (41) YES
    (42) RelADPP
        (43) RelADPCleverAfsProof [SOUND, 61 ms]
        (44) QDP
        (45) MRRProof [EQUIVALENT, 5 ms]
        (46) QDP
        (47) MRRProof [EQUIVALENT, 3 ms]
        (48) QDP
        (49) MRRProof [EQUIVALENT, 4 ms]
        (50) QDP
        (51) QDPOrderProof [EQUIVALENT, 6 ms]
        (52) QDP
        (53) PisEmptyProof [EQUIVALENT, 0 ms]
        (54) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   minus(0, y) -> 0
   minus(s(x), y) -> if_minus(le(s(x), y), s(x), y)
   if_minus(true, s(x), y) -> 0
   if_minus(false, s(x), y) -> s(minus(x, y))
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   log(s(0)) -> 0
   log(s(s(x))) -> s(log(s(quot(x, s(s(0))))))

The relative TRS consists of the following S rules:

   rand(x) -> rand(s(x))
   rand(x) -> x


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> LE(x, y)
   minus(0, y) -> 0
   minus(s(x), y) -> IF_MINUS(le(s(x), y), s(x), y)
   minus(s(x), y) -> if_minus(LE(s(x), y), s(x), y)
   if_minus(true, s(x), y) -> 0
   if_minus(false, s(x), y) -> s(MINUS(x, y))
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(QUOT(minus(x, y), s(y)))
   quot(s(x), s(y)) -> s(quot(MINUS(x, y), s(y)))
   log(s(0)) -> 0
   log(s(s(x))) -> s(LOG(s(quot(x, s(s(0))))))
   log(s(s(x))) -> s(log(s(QUOT(x, s(s(0))))))

and relative ADPs:

   rand(x) -> RAND(s(x))
   rand(x) -> x


----------------------------------------

(3) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  4 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Relative ADP Problem with
absolute ADPs:

   le(s(x), s(y)) -> LE(x, y)

and relative ADPs:

   minus(s(x), y) -> if_minus(le(s(x), y), s(x), y)
   log(s(0)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   if_minus(false, s(x), y) -> s(minus(x, y))
   le(s(x), 0) -> false
   log(s(s(x))) -> s(log(s(quot(x, s(s(0))))))
   le(0, y) -> true
   rand(x) -> rand(s(x))
   if_minus(true, s(x), y) -> 0
   rand(x) -> x
   minus(0, y) -> 0
   quot(0, s(y)) -> 0


----------------------------------------

(6) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:s_1 = 
true = 
LE_2 = 0
log_1 = 
le_2 = 
0 = 
minus_2 = 1
if_minus_3 = 0, 2
rand_1 = 
quot_2 = 1
false = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
LE(x1, x2)  =  x2

s(x1)  =  s(x1)

quot(x1, x2)  =  x1

minus(x1, x2)  =  x1

if_minus(x1, x2, x3)  =  x2

le(x1, x2)  =  le(x1, x2)

0  =  0

false  =  false

true  =  true


Recursive path order with status [RPO].
Quasi-Precedence: [s_1, le_2, false] > 0 > true

Status: s_1: multiset status
le_2: [1,2]
0: multiset status
false: multiset status
true: multiset status


----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s0(y)) -> LE(y)

The TRS R consists of the following rules:

   minus(s0(x)) -> if_minus(s0(x))
   log0(s0(00)) -> 00
   quot(s0(x)) -> s0(quot(minus(x)))
   le0(s0(x), s0(y)) -> le0(x, y)
   le0(s0(x), 00) -> false0
   rand0(x) -> rand0(s0(x))
   if_minus(s0(x)) -> 00
   minus(00) -> 00
   quot(00) -> 00
   if_minus(s0(x)) -> s0(minus(x))
   log0(s0(s0(x))) -> s0(log0(s0(quot(x))))
   le0(00, y) -> true0
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(8) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   log0(s0(00)) -> 00
   le0(s0(x), 00) -> false0
   le0(00, y) -> true0

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(LE(x_1)) = 2*x_1
   POL(false0) = 0
   POL(if_minus(x_1)) = x_1
   POL(le0(x_1, x_2)) = 1 + 2*x_1 + 2*x_2
   POL(log0(x_1)) = 1 + 2*x_1
   POL(minus(x_1)) = x_1
   POL(quot(x_1)) = x_1
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 0


----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s0(y)) -> LE(y)

The TRS R consists of the following rules:

   minus(s0(x)) -> if_minus(s0(x))
   quot(s0(x)) -> s0(quot(minus(x)))
   le0(s0(x), s0(y)) -> le0(x, y)
   rand0(x) -> rand0(s0(x))
   if_minus(s0(x)) -> 00
   minus(00) -> 00
   quot(00) -> 00
   if_minus(s0(x)) -> s0(minus(x))
   log0(s0(s0(x))) -> s0(log0(s0(quot(x))))
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(10) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   rand0(x) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(LE(x_1)) = 2*x_1
   POL(if_minus(x_1)) = x_1
   POL(le0(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(log0(x_1)) = 1 + 2*x_1
   POL(minus(x_1)) = x_1
   POL(quot(x_1)) = x_1
   POL(rand0(x_1)) = 1 + 2*x_1
   POL(s0(x_1)) = x_1


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s0(y)) -> LE(y)

The TRS R consists of the following rules:

   minus(s0(x)) -> if_minus(s0(x))
   quot(s0(x)) -> s0(quot(minus(x)))
   le0(s0(x), s0(y)) -> le0(x, y)
   rand0(x) -> rand0(s0(x))
   if_minus(s0(x)) -> 00
   minus(00) -> 00
   quot(00) -> 00
   if_minus(s0(x)) -> s0(minus(x))
   log0(s0(s0(x))) -> s0(log0(s0(quot(x))))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   LE(s0(y)) -> LE(y)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
LE(x1)  =  LE(x1)

s0(x1)  =  s0(x1)

minus(x1)  =  x1

if_minus(x1)  =  x1

quot(x1)  =  x1

le0(x1, x2)  =  le0

rand0(x1)  =  rand0

00  =  00

log0(x1)  =  x1


Recursive path order with status [RPO].
Quasi-Precedence: [LE_1, s0_1] > 00

Status: LE_1: multiset status
s0_1: multiset status
le0: []
rand0: multiset status
00: multiset status


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   minus(s0(x)) -> if_minus(s0(x))
   quot(s0(x)) -> s0(quot(minus(x)))
   le0(s0(x), s0(y)) -> le0(x, y)
   rand0(x) -> rand0(s0(x))
   if_minus(s0(x)) -> 00
   minus(00) -> 00
   quot(00) -> 00
   if_minus(s0(x)) -> s0(minus(x))
   log0(s0(s0(x))) -> s0(log0(s0(quot(x))))


----------------------------------------

(13)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   minus(s0(x)) -> if_minus(s0(x))
   quot(s0(x)) -> s0(quot(minus(x)))
   le0(s0(x), s0(y)) -> le0(x, y)
   rand0(x) -> rand0(s0(x))
   if_minus(s0(x)) -> 00
   minus(00) -> 00
   quot(00) -> 00
   if_minus(s0(x)) -> s0(minus(x))
   log0(s0(s0(x))) -> s0(log0(s0(quot(x))))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(14) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
Relative ADP Problem with
absolute ADPs:

   if_minus(false, s(x), y) -> s(MINUS(x, y))
   minus(s(x), y) -> IF_MINUS(le(s(x), y), s(x), y)

and relative ADPs:

   minus(s(x), y) -> if_minus(le(s(x), y), s(x), y)
   log(s(0)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false
   log(s(s(x))) -> s(log(s(quot(x, s(s(0))))))
   le(0, y) -> true
   rand(x) -> rand(s(x))
   if_minus(true, s(x), y) -> 0
   rand(x) -> x
   minus(0, y) -> 0
   quot(0, s(y)) -> 0


----------------------------------------

(17) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:MINUS_2 = 1
true = 
IF_MINUS_3 = 2
if_minus_3 = 0, 2
rand_1 = 
false = 
quot_2 = 1
s_1 = 
log_1 = 
le_2 = 0, 1
0 = 
minus_2 = 1

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
IF_MINUS(x1, x2, x3)  =  IF_MINUS(x1, x2)

false  =  false

s(x1)  =  s(x1)

MINUS(x1, x2)  =  MINUS(x1)

le(x1, x2)  =  le

0  =  0

true  =  true

quot(x1, x2)  =  quot(x1)

minus(x1, x2)  =  x1

if_minus(x1, x2, x3)  =  x2


Recursive path order with status [RPO].
Quasi-Precedence: [s_1, MINUS_1, le, true, quot_1] > IF_MINUS_2
[s_1, MINUS_1, le, true, quot_1] > [false, 0]

Status: IF_MINUS_2: [1,2]
false: multiset status
s_1: multiset status
MINUS_1: multiset status
le: multiset status
0: multiset status
true: multiset status
quot_1: multiset status


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF_MINUS(false0, s0(x)) -> MINUS(x)
   MINUS(s0(x)) -> IF_MINUS(le, s0(x))

The TRS R consists of the following rules:

   minus(s0(x)) -> if_minus(s0(x))
   log0(s0(00)) -> 00
   quot(s0(x)) -> s0(quot(minus(x)))
   le -> le
   le -> false0
   rand0(x) -> rand0(s0(x))
   if_minus(s0(x)) -> 00
   minus(00) -> 00
   quot(00) -> 00
   if_minus(s0(x)) -> s0(minus(x))
   log0(s0(s0(x))) -> s0(log0(s0(quot(x))))
   le -> true0
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   log0(s0(00)) -> 00

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(IF_MINUS(x_1, x_2)) = x_1 + 2*x_2
   POL(MINUS(x_1)) = 2*x_1
   POL(false0) = 0
   POL(if_minus(x_1)) = x_1
   POL(le) = 0
   POL(log0(x_1)) = 1 + 2*x_1
   POL(minus(x_1)) = x_1
   POL(quot(x_1)) = x_1
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 0


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF_MINUS(false0, s0(x)) -> MINUS(x)
   MINUS(s0(x)) -> IF_MINUS(le, s0(x))

The TRS R consists of the following rules:

   minus(s0(x)) -> if_minus(s0(x))
   quot(s0(x)) -> s0(quot(minus(x)))
   le -> le
   le -> false0
   rand0(x) -> rand0(s0(x))
   if_minus(s0(x)) -> 00
   minus(00) -> 00
   quot(00) -> 00
   if_minus(s0(x)) -> s0(minus(x))
   log0(s0(s0(x))) -> s0(log0(s0(quot(x))))
   le -> true0
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   rand0(x) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(IF_MINUS(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(MINUS(x_1)) = 2*x_1
   POL(false0) = 0
   POL(if_minus(x_1)) = x_1
   POL(le) = 0
   POL(log0(x_1)) = 1 + 2*x_1
   POL(minus(x_1)) = x_1
   POL(quot(x_1)) = x_1
   POL(rand0(x_1)) = 1 + 2*x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 0


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF_MINUS(false0, s0(x)) -> MINUS(x)
   MINUS(s0(x)) -> IF_MINUS(le, s0(x))

The TRS R consists of the following rules:

   minus(s0(x)) -> if_minus(s0(x))
   quot(s0(x)) -> s0(quot(minus(x)))
   le -> le
   le -> false0
   rand0(x) -> rand0(s0(x))
   if_minus(s0(x)) -> 00
   minus(00) -> 00
   quot(00) -> 00
   if_minus(s0(x)) -> s0(minus(x))
   log0(s0(s0(x))) -> s0(log0(s0(quot(x))))
   le -> true0

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(23) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   le -> true0

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(IF_MINUS(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(MINUS(x_1)) = 2 + 2*x_1
   POL(false0) = 1
   POL(if_minus(x_1)) = x_1
   POL(le) = 1
   POL(log0(x_1)) = 1 + x_1
   POL(minus(x_1)) = x_1
   POL(quot(x_1)) = x_1
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 0


----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF_MINUS(false0, s0(x)) -> MINUS(x)
   MINUS(s0(x)) -> IF_MINUS(le, s0(x))

The TRS R consists of the following rules:

   minus(s0(x)) -> if_minus(s0(x))
   quot(s0(x)) -> s0(quot(minus(x)))
   le -> le
   le -> false0
   rand0(x) -> rand0(s0(x))
   if_minus(s0(x)) -> 00
   minus(00) -> 00
   quot(00) -> 00
   if_minus(s0(x)) -> s0(minus(x))
   log0(s0(s0(x))) -> s0(log0(s0(quot(x))))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(25) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MINUS(s0(x)) -> IF_MINUS(le, s0(x))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
IF_MINUS(x1, x2)  =  x2

false0  =  false0

s0(x1)  =  s0(x1)

MINUS(x1)  =  MINUS(x1)

le  =  le

minus(x1)  =  x1

if_minus(x1)  =  x1

quot(x1)  =  x1

rand0(x1)  =  rand0

00  =  00

log0(x1)  =  x1


Recursive path order with status [RPO].
Quasi-Precedence: [s0_1, MINUS_1] > [false0, le]
[s0_1, MINUS_1] > 00

Status: false0: multiset status
s0_1: multiset status
MINUS_1: multiset status
le: multiset status
rand0: multiset status
00: multiset status


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   minus(s0(x)) -> if_minus(s0(x))
   quot(s0(x)) -> s0(quot(minus(x)))
   le -> le
   le -> false0
   rand0(x) -> rand0(s0(x))
   if_minus(s0(x)) -> 00
   minus(00) -> 00
   quot(00) -> 00
   if_minus(s0(x)) -> s0(minus(x))
   log0(s0(s0(x))) -> s0(log0(s0(quot(x))))


----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF_MINUS(false0, s0(x)) -> MINUS(x)

The TRS R consists of the following rules:

   minus(s0(x)) -> if_minus(s0(x))
   quot(s0(x)) -> s0(quot(minus(x)))
   le -> le
   le -> false0
   rand0(x) -> rand0(s0(x))
   if_minus(s0(x)) -> 00
   minus(00) -> 00
   quot(00) -> 00
   if_minus(s0(x)) -> s0(minus(x))
   log0(s0(s0(x))) -> s0(log0(s0(quot(x))))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(27) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(28)
TRUE

----------------------------------------

(29)
Obligation:
Relative ADP Problem with
absolute ADPs:

   quot(s(x), s(y)) -> s(QUOT(minus(x, y), s(y)))

and relative ADPs:

   minus(s(x), y) -> if_minus(le(s(x), y), s(x), y)
   log(s(0)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false
   rand(x) -> rand(s(x))
   if_minus(true, s(x), y) -> 0
   minus(0, y) -> 0
   quot(0, s(y)) -> 0
   if_minus(false, s(x), y) -> s(minus(x, y))
   log(s(s(x))) -> s(log(s(quot(x, s(s(0))))))
   le(0, y) -> true
   rand(x) -> x


----------------------------------------

(30) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:s_1 = 
true = 
QUOT_2 = 1
log_1 = 
le_2 = 0, 1
0 = 
minus_2 = 1
if_minus_3 = 0, 2
rand_1 = 
quot_2 = 1
false = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
QUOT(x1, x2)  =  x1

s(x1)  =  s(x1)

minus(x1, x2)  =  x1

if_minus(x1, x2, x3)  =  x2

le(x1, x2)  =  le

0  =  0

false  =  false

true  =  true

quot(x1, x2)  =  quot(x1)


Recursive path order with status [RPO].
Quasi-Precedence: [s_1, le, false, quot_1] > [0, true]

Status: s_1: [1]
le: multiset status
0: multiset status
false: multiset status
true: multiset status
quot_1: [1]


----------------------------------------

(31)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(s0(x)) -> QUOT(minus(x))

The TRS R consists of the following rules:

   minus(s0(x)) -> if_minus(s0(x))
   log0(s0(00)) -> 00
   quot(s0(x)) -> s0(quot(minus(x)))
   le -> le
   le -> false0
   rand0(x) -> rand0(s0(x))
   if_minus(s0(x)) -> 00
   minus(00) -> 00
   quot(00) -> 00
   if_minus(s0(x)) -> s0(minus(x))
   log0(s0(s0(x))) -> s0(log0(s0(quot(x))))
   le -> true0
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(32) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   log0(s0(00)) -> 00

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(QUOT(x_1)) = 2*x_1
   POL(false0) = 2
   POL(if_minus(x_1)) = x_1
   POL(le) = 2
   POL(log0(x_1)) = 2 + x_1
   POL(minus(x_1)) = x_1
   POL(quot(x_1)) = x_1
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 2


----------------------------------------

(33)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(s0(x)) -> QUOT(minus(x))

The TRS R consists of the following rules:

   minus(s0(x)) -> if_minus(s0(x))
   quot(s0(x)) -> s0(quot(minus(x)))
   le -> le
   le -> false0
   rand0(x) -> rand0(s0(x))
   if_minus(s0(x)) -> 00
   minus(00) -> 00
   quot(00) -> 00
   if_minus(s0(x)) -> s0(minus(x))
   log0(s0(s0(x))) -> s0(log0(s0(quot(x))))
   le -> true0
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(34) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   rand0(x) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(QUOT(x_1)) = 2*x_1
   POL(false0) = 2
   POL(if_minus(x_1)) = x_1
   POL(le) = 2
   POL(log0(x_1)) = 1 + x_1
   POL(minus(x_1)) = x_1
   POL(quot(x_1)) = x_1
   POL(rand0(x_1)) = 1 + 2*x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 2


----------------------------------------

(35)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(s0(x)) -> QUOT(minus(x))

The TRS R consists of the following rules:

   minus(s0(x)) -> if_minus(s0(x))
   quot(s0(x)) -> s0(quot(minus(x)))
   le -> le
   le -> false0
   rand0(x) -> rand0(s0(x))
   if_minus(s0(x)) -> 00
   minus(00) -> 00
   quot(00) -> 00
   if_minus(s0(x)) -> s0(minus(x))
   log0(s0(s0(x))) -> s0(log0(s0(quot(x))))
   le -> true0

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(36) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   le -> false0
   le -> true0

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(QUOT(x_1)) = 2*x_1
   POL(false0) = 0
   POL(if_minus(x_1)) = x_1
   POL(le) = 1
   POL(log0(x_1)) = 1 + x_1
   POL(minus(x_1)) = x_1
   POL(quot(x_1)) = x_1
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 0


----------------------------------------

(37)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(s0(x)) -> QUOT(minus(x))

The TRS R consists of the following rules:

   minus(s0(x)) -> if_minus(s0(x))
   quot(s0(x)) -> s0(quot(minus(x)))
   le -> le
   rand0(x) -> rand0(s0(x))
   if_minus(s0(x)) -> 00
   minus(00) -> 00
   quot(00) -> 00
   if_minus(s0(x)) -> s0(minus(x))
   log0(s0(s0(x))) -> s0(log0(s0(quot(x))))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(38) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   QUOT(s0(x)) -> QUOT(minus(x))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
QUOT(x1)  =  QUOT(x1)

s0(x1)  =  s0(x1)

minus(x1)  =  x1

if_minus(x1)  =  x1

quot(x1)  =  x1

le  =  le

rand0(x1)  =  rand0

00  =  00

log0(x1)  =  log0(x1)


Recursive path order with status [RPO].
Quasi-Precedence: QUOT_1 > [s0_1, rand0, 00, log0_1]
le > [s0_1, rand0, 00, log0_1]

Status: QUOT_1: [1]
s0_1: multiset status
le: multiset status
rand0: multiset status
00: multiset status
log0_1: multiset status


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   minus(s0(x)) -> if_minus(s0(x))
   quot(s0(x)) -> s0(quot(minus(x)))
   le -> le
   rand0(x) -> rand0(s0(x))
   if_minus(s0(x)) -> 00
   minus(00) -> 00
   quot(00) -> 00
   if_minus(s0(x)) -> s0(minus(x))
   log0(s0(s0(x))) -> s0(log0(s0(quot(x))))


----------------------------------------

(39)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   minus(s0(x)) -> if_minus(s0(x))
   quot(s0(x)) -> s0(quot(minus(x)))
   le -> le
   rand0(x) -> rand0(s0(x))
   if_minus(s0(x)) -> 00
   minus(00) -> 00
   quot(00) -> 00
   if_minus(s0(x)) -> s0(minus(x))
   log0(s0(s0(x))) -> s0(log0(s0(quot(x))))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(40) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(41)
YES

----------------------------------------

(42)
Obligation:
Relative ADP Problem with
absolute ADPs:

   log(s(s(x))) -> s(LOG(s(quot(x, s(s(0))))))

and relative ADPs:

   minus(s(x), y) -> if_minus(le(s(x), y), s(x), y)
   log(s(0)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false
   rand(x) -> rand(s(x))
   if_minus(true, s(x), y) -> 0
   minus(0, y) -> 0
   quot(0, s(y)) -> 0
   if_minus(false, s(x), y) -> s(minus(x, y))
   log(s(s(x))) -> s(log(s(quot(x, s(s(0))))))
   le(0, y) -> true
   rand(x) -> x


----------------------------------------

(43) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:s_1 = 
true = 
log_1 = 
0 = 
le_2 = 0, 1
minus_2 = 1
if_minus_3 = 0, 2
rand_1 = 
LOG_1 = 
quot_2 = 1
false = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
LOG(x1)  =  LOG(x1)

s(x1)  =  s(x1)

quot(x1, x2)  =  x1

0  =  0

minus(x1, x2)  =  x1

if_minus(x1, x2, x3)  =  x2

le(x1, x2)  =  le

false  =  false

true  =  true


Recursive path order with status [RPO].
Quasi-Precedence: [le, false, true] > [LOG_1, s_1] > 0

Status: LOG_1: multiset status
s_1: multiset status
0: multiset status
le: multiset status
false: multiset status
true: multiset status


----------------------------------------

(44)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOG0(s0(s0(x))) -> LOG0(s0(quot(x)))

The TRS R consists of the following rules:

   minus(s0(x)) -> if_minus(s0(x))
   log0(s0(00)) -> 00
   quot(s0(x)) -> s0(quot(minus(x)))
   le -> le
   le -> false0
   rand0(x) -> rand0(s0(x))
   if_minus(s0(x)) -> 00
   minus(00) -> 00
   quot(00) -> 00
   if_minus(s0(x)) -> s0(minus(x))
   log0(s0(s0(x))) -> s0(log0(s0(quot(x))))
   le -> true0
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(45) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   log0(s0(00)) -> 00

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(LOG0(x_1)) = 2*x_1
   POL(false0) = 2
   POL(if_minus(x_1)) = x_1
   POL(le) = 2
   POL(log0(x_1)) = 2 + 2*x_1
   POL(minus(x_1)) = x_1
   POL(quot(x_1)) = x_1
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 2


----------------------------------------

(46)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOG0(s0(s0(x))) -> LOG0(s0(quot(x)))

The TRS R consists of the following rules:

   minus(s0(x)) -> if_minus(s0(x))
   quot(s0(x)) -> s0(quot(minus(x)))
   le -> le
   le -> false0
   rand0(x) -> rand0(s0(x))
   if_minus(s0(x)) -> 00
   minus(00) -> 00
   quot(00) -> 00
   if_minus(s0(x)) -> s0(minus(x))
   log0(s0(s0(x))) -> s0(log0(s0(quot(x))))
   le -> true0
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(47) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   rand0(x) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(LOG0(x_1)) = 2*x_1
   POL(false0) = 2
   POL(if_minus(x_1)) = x_1
   POL(le) = 2
   POL(log0(x_1)) = 2 + x_1
   POL(minus(x_1)) = x_1
   POL(quot(x_1)) = x_1
   POL(rand0(x_1)) = 1 + 2*x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 2


----------------------------------------

(48)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOG0(s0(s0(x))) -> LOG0(s0(quot(x)))

The TRS R consists of the following rules:

   minus(s0(x)) -> if_minus(s0(x))
   quot(s0(x)) -> s0(quot(minus(x)))
   le -> le
   le -> false0
   rand0(x) -> rand0(s0(x))
   if_minus(s0(x)) -> 00
   minus(00) -> 00
   quot(00) -> 00
   if_minus(s0(x)) -> s0(minus(x))
   log0(s0(s0(x))) -> s0(log0(s0(quot(x))))
   le -> true0

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(49) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   le -> false0
   le -> true0

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(LOG0(x_1)) = 2*x_1
   POL(false0) = 0
   POL(if_minus(x_1)) = x_1
   POL(le) = 1
   POL(log0(x_1)) = 1 + x_1
   POL(minus(x_1)) = x_1
   POL(quot(x_1)) = x_1
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 0


----------------------------------------

(50)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOG0(s0(s0(x))) -> LOG0(s0(quot(x)))

The TRS R consists of the following rules:

   minus(s0(x)) -> if_minus(s0(x))
   quot(s0(x)) -> s0(quot(minus(x)))
   le -> le
   rand0(x) -> rand0(s0(x))
   if_minus(s0(x)) -> 00
   minus(00) -> 00
   quot(00) -> 00
   if_minus(s0(x)) -> s0(minus(x))
   log0(s0(s0(x))) -> s0(log0(s0(quot(x))))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(51) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   LOG0(s0(s0(x))) -> LOG0(s0(quot(x)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( minus_1(x_1) ) = x_1
POL( s0_1(x_1) ) = 2x_1 + 2
POL( if_minus_1(x_1) ) = x_1
POL( quot_1(x_1) ) = x_1
POL( le ) = 0
POL( rand0_1(x_1) ) = 2
POL( 00 ) = 2
POL( log0_1(x_1) ) = max{0, x_1 - 2}
POL( LOG0_1(x_1) ) = 2x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   minus(s0(x)) -> if_minus(s0(x))
   quot(s0(x)) -> s0(quot(minus(x)))
   le -> le
   rand0(x) -> rand0(s0(x))
   if_minus(s0(x)) -> 00
   minus(00) -> 00
   quot(00) -> 00
   if_minus(s0(x)) -> s0(minus(x))
   log0(s0(s0(x))) -> s0(log0(s0(quot(x))))


----------------------------------------

(52)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   minus(s0(x)) -> if_minus(s0(x))
   quot(s0(x)) -> s0(quot(minus(x)))
   le -> le
   rand0(x) -> rand0(s0(x))
   if_minus(s0(x)) -> 00
   minus(00) -> 00
   quot(00) -> 00
   if_minus(s0(x)) -> s0(minus(x))
   log0(s0(s0(x))) -> s0(log0(s0(quot(x))))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(53) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(54)
YES
