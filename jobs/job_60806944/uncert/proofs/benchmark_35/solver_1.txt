YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/o0R9T.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) RelADPP
        (6) RelADPCleverAfsProof [SOUND, 55 ms]
        (7) QDP
        (8) MRRProof [EQUIVALENT, 19 ms]
        (9) QDP
        (10) MRRProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPOrderProof [EQUIVALENT, 6 ms]
        (13) QDP
        (14) PisEmptyProof [EQUIVALENT, 0 ms]
        (15) YES
    (16) RelADPP
        (17) RelADPCleverAfsProof [SOUND, 65 ms]
        (18) QDP
        (19) MRRProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) MRRProof [EQUIVALENT, 1 ms]
        (22) QDP
        (23) QDPOrderProof [EQUIVALENT, 6 ms]
        (24) QDP
        (25) PisEmptyProof [EQUIVALENT, 0 ms]
        (26) YES
    (27) RelADPP
        (28) RelADPCleverAfsProof [SOUND, 69 ms]
        (29) QDP
        (30) MRRProof [EQUIVALENT, 17 ms]
        (31) QDP
        (32) MRRProof [EQUIVALENT, 0 ms]
        (33) QDP
        (34) MRRProof [EQUIVALENT, 0 ms]
        (35) QDP
        (36) QDPOrderProof [EQUIVALENT, 4 ms]
        (37) QDP
        (38) PisEmptyProof [EQUIVALENT, 0 ms]
        (39) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   double(0) -> 0
   double(s(x)) -> s(s(double(x)))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   plus(s(x), y) -> plus(x, s(y))
   plus(s(x), y) -> s(plus(minus(x, y), double(y)))
   plus(s(plus(x, y)), z) -> s(plus(plus(x, y), z))

The relative TRS consists of the following S rules:

   rand(x) -> rand(s(x))
   rand(x) -> x


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> MINUS(x, y)
   double(0) -> 0
   double(s(x)) -> s(s(DOUBLE(x)))
   plus(0, y) -> y
   plus(s(x), y) -> s(PLUS(x, y))
   plus(s(x), y) -> PLUS(x, s(y))
   plus(s(x), y) -> s(PLUS(minus(x, y), double(y)))
   plus(s(x), y) -> s(plus(MINUS(x, y), double(y)))
   plus(s(x), y) -> s(plus(minus(x, y), DOUBLE(y)))
   plus(s(plus(x, y)), z) -> s(PLUS(plus(x, y), z))
   plus(s(plus(x, y)), z) -> s(plus(PLUS(x, y), z))

and relative ADPs:

   rand(x) -> RAND(s(x))
   rand(x) -> x


----------------------------------------

(3) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  3 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Relative ADP Problem with
absolute ADPs:

   minus(s(x), s(y)) -> MINUS(x, y)

and relative ADPs:

   double(0) -> 0
   double(s(x)) -> s(s(double(x)))
   plus(s(plus(x, y)), z) -> s(plus(plus(x, y), z))
   plus(s(x), y) -> s(plus(x, y))
   plus(0, y) -> y
   minus(x, 0) -> x
   rand(x) -> rand(s(x))
   rand(x) -> x
   plus(s(x), y) -> plus(x, s(y))
   plus(s(x), y) -> s(plus(minus(x, y), double(y)))


----------------------------------------

(6) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:s_1 = 
MINUS_2 = 0
plus_2 = 
0 = 
minus_2 = 1
rand_1 = 
double_1 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
MINUS(x1, x2)  =  x2

s(x1)  =  s(x1)

plus(x1, x2)  =  plus(x1, x2)

minus(x1, x2)  =  x1

double(x1)  =  double(x1)

0  =  0


Recursive path order with status [RPO].
Quasi-Precedence: plus_2 > [double_1, 0] > s_1

Status: s_1: [1]
plus_2: [1,2]
double_1: multiset status
0: multiset status


----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s0(y)) -> MINUS(y)

The TRS R consists of the following rules:

   double0(00) -> 00
   double0(s0(x)) -> s0(s0(double0(x)))
   plus0(s0(plus0(x, y)), z) -> s0(plus0(plus0(x, y), z))
   plus0(s0(x), y) -> s0(plus0(x, y))
   plus0(00, y) -> y
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   rand0(x) -> rand0(s0(x))
   rand0(x) -> x
   plus0(s0(x), y) -> plus0(x, s0(y))
   plus0(s0(x), y) -> s0(plus0(minus(x), double0(y)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(8) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   plus0(00, y) -> y

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 2
   POL(MINUS(x_1)) = 2*x_1
   POL(double0(x_1)) = x_1
   POL(minus(x_1)) = x_1
   POL(plus0(x_1, x_2)) = 1 + x_1 + x_2
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1


----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s0(y)) -> MINUS(y)

The TRS R consists of the following rules:

   double0(00) -> 00
   double0(s0(x)) -> s0(s0(double0(x)))
   plus0(s0(plus0(x, y)), z) -> s0(plus0(plus0(x, y), z))
   plus0(s0(x), y) -> s0(plus0(x, y))
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   rand0(x) -> rand0(s0(x))
   rand0(x) -> x
   plus0(s0(x), y) -> plus0(x, s0(y))
   plus0(s0(x), y) -> s0(plus0(minus(x), double0(y)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(10) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   rand0(x) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 2
   POL(MINUS(x_1)) = 2*x_1
   POL(double0(x_1)) = x_1
   POL(minus(x_1)) = x_1
   POL(plus0(x_1, x_2)) = 1 + x_1 + 2*x_2
   POL(rand0(x_1)) = 1 + 2*x_1
   POL(s0(x_1)) = x_1


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s0(y)) -> MINUS(y)

The TRS R consists of the following rules:

   double0(00) -> 00
   double0(s0(x)) -> s0(s0(double0(x)))
   plus0(s0(plus0(x, y)), z) -> s0(plus0(plus0(x, y), z))
   plus0(s0(x), y) -> s0(plus0(x, y))
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   rand0(x) -> rand0(s0(x))
   plus0(s0(x), y) -> plus0(x, s0(y))
   plus0(s0(x), y) -> s0(plus0(minus(x), double0(y)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MINUS(s0(y)) -> MINUS(y)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( double0_1(x_1) ) = 2x_1
POL( 00 ) = 1
POL( s0_1(x_1) ) = x_1 + 1
POL( plus0_2(x_1, x_2) ) = 2x_1
POL( minus_1(x_1) ) = x_1
POL( rand0_1(x_1) ) = max{0, -2}
POL( MINUS_1(x_1) ) = x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   double0(00) -> 00
   double0(s0(x)) -> s0(s0(double0(x)))
   plus0(s0(plus0(x, y)), z) -> s0(plus0(plus0(x, y), z))
   plus0(s0(x), y) -> s0(plus0(x, y))
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   rand0(x) -> rand0(s0(x))
   plus0(s0(x), y) -> plus0(x, s0(y))
   plus0(s0(x), y) -> s0(plus0(minus(x), double0(y)))


----------------------------------------

(13)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   double0(00) -> 00
   double0(s0(x)) -> s0(s0(double0(x)))
   plus0(s0(plus0(x, y)), z) -> s0(plus0(plus0(x, y), z))
   plus0(s0(x), y) -> s0(plus0(x, y))
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   rand0(x) -> rand0(s0(x))
   plus0(s0(x), y) -> plus0(x, s0(y))
   plus0(s0(x), y) -> s0(plus0(minus(x), double0(y)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(14) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
Relative ADP Problem with
absolute ADPs:

   double(s(x)) -> s(s(DOUBLE(x)))

and relative ADPs:

   double(0) -> 0
   plus(s(plus(x, y)), z) -> s(plus(plus(x, y), z))
   plus(s(x), y) -> s(plus(x, y))
   plus(0, y) -> y
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   rand(x) -> rand(s(x))
   rand(x) -> x
   plus(s(x), y) -> plus(x, s(y))
   plus(s(x), y) -> s(plus(minus(x, y), double(y)))


----------------------------------------

(17) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:s_1 = 
plus_2 = 
0 = 
minus_2 = 1
DOUBLE_1 = 
rand_1 = 
double_1 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
DOUBLE(x1)  =  x1

s(x1)  =  s(x1)

plus(x1, x2)  =  plus(x1, x2)

minus(x1, x2)  =  x1

double(x1)  =  double(x1)

0  =  0


Recursive path order with status [RPO].
Quasi-Precedence: plus_2 > [double_1, 0] > s_1

Status: s_1: multiset status
plus_2: [1,2]
double_1: multiset status
0: multiset status


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DOUBLE0(s0(x)) -> DOUBLE0(x)

The TRS R consists of the following rules:

   double0(00) -> 00
   double0(s0(x)) -> s0(s0(double0(x)))
   plus0(s0(plus0(x, y)), z) -> s0(plus0(plus0(x, y), z))
   plus0(s0(x), y) -> s0(plus0(x, y))
   plus0(00, y) -> y
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   rand0(x) -> rand0(s0(x))
   rand0(x) -> x
   plus0(s0(x), y) -> plus0(x, s0(y))
   plus0(s0(x), y) -> s0(plus0(minus(x), double0(y)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   plus0(00, y) -> y

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 2
   POL(DOUBLE0(x_1)) = 2*x_1
   POL(double0(x_1)) = x_1
   POL(minus(x_1)) = x_1
   POL(plus0(x_1, x_2)) = 1 + x_1 + x_2
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DOUBLE0(s0(x)) -> DOUBLE0(x)

The TRS R consists of the following rules:

   double0(00) -> 00
   double0(s0(x)) -> s0(s0(double0(x)))
   plus0(s0(plus0(x, y)), z) -> s0(plus0(plus0(x, y), z))
   plus0(s0(x), y) -> s0(plus0(x, y))
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   rand0(x) -> rand0(s0(x))
   rand0(x) -> x
   plus0(s0(x), y) -> plus0(x, s0(y))
   plus0(s0(x), y) -> s0(plus0(minus(x), double0(y)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   rand0(x) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 2
   POL(DOUBLE0(x_1)) = 2*x_1
   POL(double0(x_1)) = x_1
   POL(minus(x_1)) = x_1
   POL(plus0(x_1, x_2)) = 1 + x_1 + 2*x_2
   POL(rand0(x_1)) = 1 + 2*x_1
   POL(s0(x_1)) = x_1


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DOUBLE0(s0(x)) -> DOUBLE0(x)

The TRS R consists of the following rules:

   double0(00) -> 00
   double0(s0(x)) -> s0(s0(double0(x)))
   plus0(s0(plus0(x, y)), z) -> s0(plus0(plus0(x, y), z))
   plus0(s0(x), y) -> s0(plus0(x, y))
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   rand0(x) -> rand0(s0(x))
   plus0(s0(x), y) -> plus0(x, s0(y))
   plus0(s0(x), y) -> s0(plus0(minus(x), double0(y)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(23) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   DOUBLE0(s0(x)) -> DOUBLE0(x)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
DOUBLE0(x1)  =  DOUBLE0(x1)

s0(x1)  =  s0(x1)

double0(x1)  =  double0(x1)

00  =  00

plus0(x1, x2)  =  x1

minus(x1)  =  x1

rand0(x1)  =  rand0


Recursive path order with status [RPO].
Quasi-Precedence: [double0_1, 00] > [DOUBLE0_1, s0_1]
rand0 > [DOUBLE0_1, s0_1]

Status: DOUBLE0_1: multiset status
s0_1: multiset status
double0_1: multiset status
00: multiset status
rand0: multiset status


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   double0(00) -> 00
   double0(s0(x)) -> s0(s0(double0(x)))
   plus0(s0(plus0(x, y)), z) -> s0(plus0(plus0(x, y), z))
   plus0(s0(x), y) -> s0(plus0(x, y))
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   rand0(x) -> rand0(s0(x))
   plus0(s0(x), y) -> plus0(x, s0(y))
   plus0(s0(x), y) -> s0(plus0(minus(x), double0(y)))


----------------------------------------

(24)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   double0(00) -> 00
   double0(s0(x)) -> s0(s0(double0(x)))
   plus0(s0(plus0(x, y)), z) -> s0(plus0(plus0(x, y), z))
   plus0(s0(x), y) -> s0(plus0(x, y))
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   rand0(x) -> rand0(s0(x))
   plus0(s0(x), y) -> plus0(x, s0(y))
   plus0(s0(x), y) -> s0(plus0(minus(x), double0(y)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(25) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(26)
YES

----------------------------------------

(27)
Obligation:
Relative ADP Problem with
absolute ADPs:

   plus(s(x), y) -> s(PLUS(minus(x, y), double(y)))
   plus(s(x), y) -> PLUS(x, s(y))
   plus(s(x), y) -> s(PLUS(x, y))
   plus(s(plus(x, y)), z) -> s(plus(PLUS(x, y), z))
   plus(s(plus(x, y)), z) -> s(PLUS(plus(x, y), z))

and relative ADPs:

   double(0) -> 0
   double(s(x)) -> s(s(double(x)))
   plus(0, y) -> y
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   rand(x) -> rand(s(x))
   rand(x) -> x
   plus(s(x), y) -> s(plus(minus(x, y), double(y)))


----------------------------------------

(28) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:s_1 = 
plus_2 = 
PLUS_2 = 1
0 = 
minus_2 = 1
rand_1 = 
double_1 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
PLUS(x1, x2)  =  PLUS(x1)

s(x1)  =  x1

plus(x1, x2)  =  plus(x1, x2)

minus(x1, x2)  =  x1

double(x1)  =  x1

0  =  0


Recursive path order with status [RPO].
Quasi-Precedence: PLUS_1 > plus_2

Status: PLUS_1: [1]
plus_2: [2,1]
0: multiset status


----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s0(plus0(x, y))) -> PLUS(plus0(x, y))
   PLUS(s0(x)) -> PLUS(x)
   PLUS(s0(plus0(x, y))) -> PLUS(x)
   PLUS(s0(x)) -> PLUS(minus(x))

The TRS R consists of the following rules:

   double0(00) -> 00
   double0(s0(x)) -> s0(s0(double0(x)))
   plus0(s0(plus0(x, y)), z) -> s0(plus0(plus0(x, y), z))
   plus0(s0(x), y) -> s0(plus0(x, y))
   plus0(00, y) -> y
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   rand0(x) -> rand0(s0(x))
   rand0(x) -> x
   plus0(s0(x), y) -> plus0(x, s0(y))
   plus0(s0(x), y) -> s0(plus0(minus(x), double0(y)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(30) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   plus0(00, y) -> y

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 2
   POL(PLUS(x_1)) = 2*x_1
   POL(double0(x_1)) = x_1
   POL(minus(x_1)) = x_1
   POL(plus0(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1


----------------------------------------

(31)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s0(plus0(x, y))) -> PLUS(plus0(x, y))
   PLUS(s0(x)) -> PLUS(x)
   PLUS(s0(plus0(x, y))) -> PLUS(x)
   PLUS(s0(x)) -> PLUS(minus(x))

The TRS R consists of the following rules:

   double0(00) -> 00
   double0(s0(x)) -> s0(s0(double0(x)))
   plus0(s0(plus0(x, y)), z) -> s0(plus0(plus0(x, y), z))
   plus0(s0(x), y) -> s0(plus0(x, y))
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   rand0(x) -> rand0(s0(x))
   rand0(x) -> x
   plus0(s0(x), y) -> plus0(x, s0(y))
   plus0(s0(x), y) -> s0(plus0(minus(x), double0(y)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(32) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   PLUS(s0(plus0(x, y))) -> PLUS(x)


Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 2
   POL(PLUS(x_1)) = 2*x_1
   POL(double0(x_1)) = x_1
   POL(minus(x_1)) = x_1
   POL(plus0(x_1, x_2)) = 1 + 2*x_1 + x_2
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1


----------------------------------------

(33)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s0(plus0(x, y))) -> PLUS(plus0(x, y))
   PLUS(s0(x)) -> PLUS(x)
   PLUS(s0(x)) -> PLUS(minus(x))

The TRS R consists of the following rules:

   double0(00) -> 00
   double0(s0(x)) -> s0(s0(double0(x)))
   plus0(s0(plus0(x, y)), z) -> s0(plus0(plus0(x, y), z))
   plus0(s0(x), y) -> s0(plus0(x, y))
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   rand0(x) -> rand0(s0(x))
   rand0(x) -> x
   plus0(s0(x), y) -> plus0(x, s0(y))
   plus0(s0(x), y) -> s0(plus0(minus(x), double0(y)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(34) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   rand0(x) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 2
   POL(PLUS(x_1)) = x_1
   POL(double0(x_1)) = x_1
   POL(minus(x_1)) = x_1
   POL(plus0(x_1, x_2)) = 2 + 2*x_1 + 2*x_2
   POL(rand0(x_1)) = 1 + 2*x_1
   POL(s0(x_1)) = x_1


----------------------------------------

(35)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s0(plus0(x, y))) -> PLUS(plus0(x, y))
   PLUS(s0(x)) -> PLUS(x)
   PLUS(s0(x)) -> PLUS(minus(x))

The TRS R consists of the following rules:

   double0(00) -> 00
   double0(s0(x)) -> s0(s0(double0(x)))
   plus0(s0(plus0(x, y)), z) -> s0(plus0(plus0(x, y), z))
   plus0(s0(x), y) -> s0(plus0(x, y))
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   rand0(x) -> rand0(s0(x))
   plus0(s0(x), y) -> plus0(x, s0(y))
   plus0(s0(x), y) -> s0(plus0(minus(x), double0(y)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(36) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   PLUS(s0(plus0(x, y))) -> PLUS(plus0(x, y))
   PLUS(s0(x)) -> PLUS(x)
   PLUS(s0(x)) -> PLUS(minus(x))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( double0_1(x_1) ) = 2x_1
POL( 00 ) = 1
POL( s0_1(x_1) ) = x_1 + 2
POL( plus0_2(x_1, x_2) ) = 2x_1
POL( minus_1(x_1) ) = x_1 + 1
POL( rand0_1(x_1) ) = 0
POL( PLUS_1(x_1) ) = x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   double0(00) -> 00
   double0(s0(x)) -> s0(s0(double0(x)))
   plus0(s0(plus0(x, y)), z) -> s0(plus0(plus0(x, y), z))
   plus0(s0(x), y) -> s0(plus0(x, y))
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   rand0(x) -> rand0(s0(x))
   plus0(s0(x), y) -> plus0(x, s0(y))
   plus0(s0(x), y) -> s0(plus0(minus(x), double0(y)))


----------------------------------------

(37)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   double0(00) -> 00
   double0(s0(x)) -> s0(s0(double0(x)))
   plus0(s0(plus0(x, y)), z) -> s0(plus0(plus0(x, y), z))
   plus0(s0(x), y) -> s0(plus0(x, y))
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   rand0(x) -> rand0(s0(x))
   plus0(s0(x), y) -> plus0(x, s0(y))
   plus0(s0(x), y) -> s0(plus0(minus(x), double0(y)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(38) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(39)
YES
