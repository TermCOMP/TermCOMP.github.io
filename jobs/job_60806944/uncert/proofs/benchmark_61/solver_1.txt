YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/gOQpy.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) RelADPP
        (6) RelADPCleverAfsProof [SOUND, 100 ms]
        (7) QDP
        (8) QDPOrderProof [EQUIVALENT, 11 ms]
        (9) QDP
        (10) PisEmptyProof [EQUIVALENT, 0 ms]
        (11) YES
    (12) RelADPP
        (13) RelADPCleverAfsProof [SOUND, 127 ms]
        (14) QDP
        (15) MRRProof [EQUIVALENT, 10 ms]
        (16) QDP
        (17) MRRProof [EQUIVALENT, 4 ms]
        (18) QDP
        (19) MRRProof [EQUIVALENT, 7 ms]
        (20) QDP
        (21) MRRProof [EQUIVALENT, 4 ms]
        (22) QDP
        (23) MRRProof [EQUIVALENT, 2 ms]
        (24) QDP
        (25) QDPOrderProof [EQUIVALENT, 5 ms]
        (26) QDP
        (27) PisEmptyProof [EQUIVALENT, 0 ms]
        (28) YES
    (29) RelADPP
        (30) RelADPCleverAfsProof [SOUND, 165 ms]
        (31) QDP
        (32) MRRProof [EQUIVALENT, 11 ms]
        (33) QDP
        (34) MRRProof [EQUIVALENT, 5 ms]
        (35) QDP
        (36) MRRProof [EQUIVALENT, 4 ms]
        (37) QDP
        (38) MRRProof [EQUIVALENT, 3 ms]
        (39) QDP
        (40) MRRProof [EQUIVALENT, 1 ms]
        (41) QDP
        (42) MRRProof [EQUIVALENT, 0 ms]
        (43) QDP
        (44) QDPOrderProof [EQUIVALENT, 5 ms]
        (45) QDP
        (46) PisEmptyProof [EQUIVALENT, 0 ms]
        (47) YES
    (48) RelADPP
        (49) RelADPCleverAfsProof [SOUND, 120 ms]
        (50) QDP
        (51) QDPOrderProof [EQUIVALENT, 15 ms]
        (52) QDP
        (53) PisEmptyProof [EQUIVALENT, 0 ms]
        (54) YES
    (55) RelADPP
        (56) RelADPCleverAfsProof [SOUND, 83 ms]
        (57) QDP
        (58) QDPOrderProof [EQUIVALENT, 11 ms]
        (59) QDP
        (60) DependencyGraphProof [EQUIVALENT, 0 ms]
        (61) TRUE
    (62) RelADPP
        (63) RelADPCleverAfsProof [SOUND, 141 ms]
        (64) QDP
        (65) QDPOrderProof [EQUIVALENT, 9 ms]
        (66) QDP
        (67) PisEmptyProof [EQUIVALENT, 0 ms]
        (68) YES
    (69) RelADPP
        (70) RelADPCleverAfsProof [SOUND, 120 ms]
        (71) QDP
        (72) MRRProof [EQUIVALENT, 15 ms]
        (73) QDP
        (74) MRRProof [EQUIVALENT, 0 ms]
        (75) QDP
        (76) MRRProof [EQUIVALENT, 4 ms]
        (77) QDP
        (78) QDPOrderProof [EQUIVALENT, 6 ms]
        (79) QDP
        (80) PisEmptyProof [EQUIVALENT, 0 ms]
        (81) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   low(n, nil) -> nil
   low(n, add(m, x)) -> if_low(le(m, n), n, add(m, x))
   if_low(true, n, add(m, x)) -> add(m, low(n, x))
   if_low(false, n, add(m, x)) -> low(n, x)
   high(n, nil) -> nil
   high(n, add(m, x)) -> if_high(le(m, n), n, add(m, x))
   if_high(true, n, add(m, x)) -> high(n, x)
   if_high(false, n, add(m, x)) -> add(m, high(n, x))
   quicksort(nil) -> nil
   quicksort(add(n, x)) -> app(quicksort(low(n, x)), add(n, quicksort(high(n, x))))

The relative TRS consists of the following S rules:

   rand(x) -> rand(s(x))
   rand(x) -> x


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> MINUS(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(QUOT(minus(x, y), s(y)))
   quot(s(x), s(y)) -> s(quot(MINUS(x, y), s(y)))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> LE(x, y)
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, APP(x, y))
   low(n, nil) -> nil
   low(n, add(m, x)) -> IF_LOW(le(m, n), n, add(m, x))
   low(n, add(m, x)) -> if_low(LE(m, n), n, add(m, x))
   if_low(true, n, add(m, x)) -> add(m, LOW(n, x))
   if_low(false, n, add(m, x)) -> LOW(n, x)
   high(n, nil) -> nil
   high(n, add(m, x)) -> IF_HIGH(le(m, n), n, add(m, x))
   high(n, add(m, x)) -> if_high(LE(m, n), n, add(m, x))
   if_high(true, n, add(m, x)) -> HIGH(n, x)
   if_high(false, n, add(m, x)) -> add(m, HIGH(n, x))
   quicksort(nil) -> nil
   quicksort(add(n, x)) -> APP(quicksort(low(n, x)), add(n, quicksort(high(n, x))))
   quicksort(add(n, x)) -> app(QUICKSORT(low(n, x)), add(n, quicksort(high(n, x))))
   quicksort(add(n, x)) -> app(quicksort(LOW(n, x)), add(n, quicksort(high(n, x))))
   quicksort(add(n, x)) -> app(quicksort(low(n, x)), add(n, QUICKSORT(high(n, x))))
   quicksort(add(n, x)) -> app(quicksort(low(n, x)), add(n, quicksort(HIGH(n, x))))

and relative ADPs:

   rand(x) -> RAND(s(x))
   rand(x) -> x


----------------------------------------

(3) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  7 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 7 subproblems.

----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Relative ADP Problem with
absolute ADPs:

   app(add(n, x), y) -> add(n, APP(x, y))

and relative ADPs:

   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   le(s(x), s(y)) -> le(x, y)
   if_low(true, n, add(m, x)) -> add(m, low(n, x))
   le(s(x), 0) -> false
   high(n, nil) -> nil
   high(n, add(m, x)) -> if_high(le(m, n), n, add(m, x))
   rand(x) -> rand(s(x))
   if_low(false, n, add(m, x)) -> low(n, x)
   if_high(true, n, add(m, x)) -> high(n, x)
   quot(0, s(y)) -> 0
   low(n, add(m, x)) -> if_low(le(m, n), n, add(m, x))
   low(n, nil) -> nil
   if_high(false, n, add(m, x)) -> add(m, high(n, x))
   app(nil, y) -> y
   minus(s(x), s(y)) -> minus(x, y)
   le(0, y) -> true
   quicksort(add(n, x)) -> app(quicksort(low(n, x)), add(n, quicksort(high(n, x))))
   minus(x, 0) -> x
   quicksort(nil) -> nil
   rand(x) -> x


----------------------------------------

(6) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:low_2 = 0
true = 
app_2 = 
add_2 = 
quicksort_1 = 
if_high_3 = 0, 1
rand_1 = 
APP_2 = 
quot_2 = 0, 1
false = 
nil = 
s_1 = 
if_low_3 = 0, 1
le_2 = 0, 1
0 = 
minus_2 = 
high_2 = 0

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
APP(x1, x2)  =  APP(x1, x2)

add(x1, x2)  =  add(x1, x2)

low(x1, x2)  =  x2

if_low(x1, x2, x3)  =  x3

le(x1, x2)  =  le

quot(x1, x2)  =  quot

s(x1)  =  x1

minus(x1, x2)  =  minus(x1, x2)

quicksort(x1)  =  quicksort(x1)

app(x1, x2)  =  app(x1, x2)

high(x1, x2)  =  x2

if_high(x1, x2, x3)  =  x3

0  =  0

false  =  false

true  =  true

nil  =  nil


Recursive path order with status [RPO].
Quasi-Precedence: le > false > true
[quot, 0] > minus_2 > true
[quot, 0] > false > true
quicksort_1 > app_2 > add_2 > APP_2 > true
quicksort_1 > nil > true

Status: APP_2: [1,2]
add_2: [1,2]
le: multiset status
quot: []
minus_2: multiset status
quicksort_1: multiset status
app_2: [2,1]
0: multiset status
false: multiset status
true: multiset status
nil: multiset status


----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP0(add0(n, x), y) -> APP0(x, y)

The TRS R consists of the following rules:

   quot -> s0(quot)
   le -> le
   if_low(add0(m, x)) -> add0(m, low(x))
   le -> false0
   high(nil0) -> nil0
   high(add0(m, x)) -> if_high(add0(m, x))
   rand0(x) -> rand0(s0(x))
   if_low(add0(m, x)) -> low(x)
   if_high(add0(m, x)) -> high(x)
   quot -> 00
   low(add0(m, x)) -> if_low(add0(m, x))
   low(nil0) -> nil0
   if_high(add0(m, x)) -> add0(m, high(x))
   app0(add0(n, x), y) -> add0(n, app0(x, y))
   app0(nil0, y) -> y
   minus0(s0(x), s0(y)) -> minus0(x, y)
   le -> true0
   quicksort0(add0(n, x)) -> app0(quicksort0(low(x)), add0(n, quicksort0(high(x))))
   minus0(x, 00) -> x
   quicksort0(nil0) -> nil0
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(8) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   APP0(add0(n, x), y) -> APP0(x, y)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
APP0(x1, x2)  =  APP0(x1)

add0(x1, x2)  =  add0(x1, x2)

quot  =  quot

s0(x1)  =  x1

le  =  le

if_low(x1)  =  x1

low(x1)  =  x1

false0  =  false0

high(x1)  =  x1

nil0  =  nil0

if_high(x1)  =  x1

rand0(x1)  =  rand0(x1)

00  =  00

app0(x1, x2)  =  app0(x1, x2)

minus0(x1, x2)  =  x1

true0  =  true0

quicksort0(x1)  =  quicksort0(x1)


Recursive path order with status [RPO].
Quasi-Precedence: quot > 00
[le, true0] > false0
[nil0, quicksort0_1] > app0_2 > add0_2 > APP0_1

Status: APP0_1: multiset status
add0_2: multiset status
quot: multiset status
le: multiset status
false0: multiset status
nil0: multiset status
rand0_1: multiset status
00: multiset status
app0_2: multiset status
true0: multiset status
quicksort0_1: [1]


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   quot -> s0(quot)
   le -> le
   if_low(add0(m, x)) -> add0(m, low(x))
   le -> false0
   high(nil0) -> nil0
   high(add0(m, x)) -> if_high(add0(m, x))
   rand0(x) -> rand0(s0(x))
   if_low(add0(m, x)) -> low(x)
   if_high(add0(m, x)) -> high(x)
   quot -> 00
   low(add0(m, x)) -> if_low(add0(m, x))
   low(nil0) -> nil0
   if_high(add0(m, x)) -> add0(m, high(x))
   app0(add0(n, x), y) -> add0(n, app0(x, y))
   app0(nil0, y) -> y
   minus0(s0(x), s0(y)) -> minus0(x, y)
   le -> true0
   quicksort0(add0(n, x)) -> app0(quicksort0(low(x)), add0(n, quicksort0(high(x))))
   minus0(x, 00) -> x
   quicksort0(nil0) -> nil0
   rand0(x) -> x


----------------------------------------

(9)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   quot -> s0(quot)
   le -> le
   if_low(add0(m, x)) -> add0(m, low(x))
   le -> false0
   high(nil0) -> nil0
   high(add0(m, x)) -> if_high(add0(m, x))
   rand0(x) -> rand0(s0(x))
   if_low(add0(m, x)) -> low(x)
   if_high(add0(m, x)) -> high(x)
   quot -> 00
   low(add0(m, x)) -> if_low(add0(m, x))
   low(nil0) -> nil0
   if_high(add0(m, x)) -> add0(m, high(x))
   app0(add0(n, x), y) -> add0(n, app0(x, y))
   app0(nil0, y) -> y
   minus0(s0(x), s0(y)) -> minus0(x, y)
   le -> true0
   quicksort0(add0(n, x)) -> app0(quicksort0(low(x)), add0(n, quicksort0(high(x))))
   minus0(x, 00) -> x
   quicksort0(nil0) -> nil0
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(10) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(11)
YES

----------------------------------------

(12)
Obligation:
Relative ADP Problem with
absolute ADPs:

   minus(s(x), s(y)) -> MINUS(x, y)

and relative ADPs:

   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   le(s(x), s(y)) -> le(x, y)
   if_low(true, n, add(m, x)) -> add(m, low(n, x))
   le(s(x), 0) -> false
   high(n, nil) -> nil
   high(n, add(m, x)) -> if_high(le(m, n), n, add(m, x))
   rand(x) -> rand(s(x))
   if_low(false, n, add(m, x)) -> low(n, x)
   if_high(true, n, add(m, x)) -> high(n, x)
   quot(0, s(y)) -> 0
   low(n, add(m, x)) -> if_low(le(m, n), n, add(m, x))
   low(n, nil) -> nil
   if_high(false, n, add(m, x)) -> add(m, high(n, x))
   app(add(n, x), y) -> add(n, app(x, y))
   app(nil, y) -> y
   le(0, y) -> true
   quicksort(add(n, x)) -> app(quicksort(low(n, x)), add(n, quicksort(high(n, x))))
   minus(x, 0) -> x
   quicksort(nil) -> nil
   rand(x) -> x


----------------------------------------

(13) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:MINUS_2 = 1
low_2 = 1
true = 
add_2 = 0
app_2 = 0
quicksort_1 = 
if_high_3 = 0, 1
rand_1 = 
quot_2 = 1
false = 
nil = 
s_1 = 
if_low_3 = 0, 2
le_2 = 0, 1
0 = 
minus_2 = 1
high_2 = 0

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
MINUS(x1, x2)  =  MINUS(x1)

s(x1)  =  s(x1)

quot(x1, x2)  =  quot(x1)

minus(x1, x2)  =  minus(x1)

high(x1, x2)  =  x2

add(x1, x2)  =  x2

if_high(x1, x2, x3)  =  x3

le(x1, x2)  =  le

low(x1, x2)  =  low(x1)

if_low(x1, x2, x3)  =  if_low(x2)

quicksort(x1)  =  quicksort(x1)

app(x1, x2)  =  x2

nil  =  nil

true  =  true

0  =  0

false  =  false


Recursive path order with status [RPO].
Quasi-Precedence: quot_1 > s_1 > minus_1
quot_1 > 0 > true
[le, low_1, if_low_1] > nil
[le, low_1, if_low_1] > true
[le, low_1, if_low_1] > false
quicksort_1 > nil

Status: MINUS_1: [1]
s_1: multiset status
quot_1: [1]
minus_1: multiset status
le: []
low_1: [1]
if_low_1: [1]
quicksort_1: multiset status
nil: multiset status
true: multiset status
0: multiset status
false: multiset status


----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s0(x)) -> MINUS(x)

The TRS R consists of the following rules:

   quot(s0(x)) -> s0(quot(minus(x)))
   le -> le
   if_low(n) -> add(low(n))
   le -> false0
   high(nil0) -> nil0
   high(add(x)) -> if_high(add(x))
   rand0(x) -> rand0(s0(x))
   if_low(n) -> low(n)
   if_high(add(x)) -> high(x)
   quot(00) -> 00
   low(n) -> if_low(n)
   low(n) -> nil0
   if_high(add(x)) -> add(high(x))
   app(y) -> add(app(y))
   app(y) -> y
   minus(s0(x)) -> minus(x)
   le -> true0
   quicksort0(add(x)) -> app(add(quicksort0(high(x))))
   minus(x) -> x
   quicksort0(nil0) -> nil0
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(15) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   quot(00) -> 00
   low(n) -> nil0

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 2
   POL(MINUS(x_1)) = 2*x_1
   POL(add(x_1)) = x_1
   POL(app(x_1)) = x_1
   POL(false0) = 2
   POL(high(x_1)) = x_1
   POL(if_high(x_1)) = x_1
   POL(if_low(x_1)) = 1 + 2*x_1
   POL(le) = 2
   POL(low(x_1)) = 1 + 2*x_1
   POL(minus(x_1)) = x_1
   POL(nil0) = 0
   POL(quicksort0(x_1)) = 2*x_1
   POL(quot(x_1)) = 2 + x_1
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 2


----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s0(x)) -> MINUS(x)

The TRS R consists of the following rules:

   quot(s0(x)) -> s0(quot(minus(x)))
   le -> le
   if_low(n) -> add(low(n))
   le -> false0
   high(nil0) -> nil0
   high(add(x)) -> if_high(add(x))
   rand0(x) -> rand0(s0(x))
   if_low(n) -> low(n)
   if_high(add(x)) -> high(x)
   low(n) -> if_low(n)
   if_high(add(x)) -> add(high(x))
   app(y) -> add(app(y))
   app(y) -> y
   minus(s0(x)) -> minus(x)
   le -> true0
   quicksort0(add(x)) -> app(add(quicksort0(high(x))))
   minus(x) -> x
   quicksort0(nil0) -> nil0
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(17) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   rand0(x) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(MINUS(x_1)) = 2*x_1
   POL(add(x_1)) = x_1
   POL(app(x_1)) = x_1
   POL(false0) = 2
   POL(high(x_1)) = x_1
   POL(if_high(x_1)) = x_1
   POL(if_low(x_1)) = 1 + 2*x_1
   POL(le) = 2
   POL(low(x_1)) = 1 + 2*x_1
   POL(minus(x_1)) = x_1
   POL(nil0) = 0
   POL(quicksort0(x_1)) = 2*x_1
   POL(quot(x_1)) = 1 + x_1
   POL(rand0(x_1)) = 1 + 2*x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 2


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s0(x)) -> MINUS(x)

The TRS R consists of the following rules:

   quot(s0(x)) -> s0(quot(minus(x)))
   le -> le
   if_low(n) -> add(low(n))
   le -> false0
   high(nil0) -> nil0
   high(add(x)) -> if_high(add(x))
   rand0(x) -> rand0(s0(x))
   if_low(n) -> low(n)
   if_high(add(x)) -> high(x)
   low(n) -> if_low(n)
   if_high(add(x)) -> add(high(x))
   app(y) -> add(app(y))
   app(y) -> y
   minus(s0(x)) -> minus(x)
   le -> true0
   quicksort0(add(x)) -> app(add(quicksort0(high(x))))
   minus(x) -> x
   quicksort0(nil0) -> nil0

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   le -> true0

Used ordering: Polynomial interpretation [POLO]:

   POL(MINUS(x_1)) = 2*x_1
   POL(add(x_1)) = x_1
   POL(app(x_1)) = x_1
   POL(false0) = 1
   POL(high(x_1)) = x_1
   POL(if_high(x_1)) = x_1
   POL(if_low(x_1)) = 1 + 2*x_1
   POL(le) = 1
   POL(low(x_1)) = 1 + 2*x_1
   POL(minus(x_1)) = x_1
   POL(nil0) = 0
   POL(quicksort0(x_1)) = 2*x_1
   POL(quot(x_1)) = 1 + x_1
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 0


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s0(x)) -> MINUS(x)

The TRS R consists of the following rules:

   quot(s0(x)) -> s0(quot(minus(x)))
   le -> le
   if_low(n) -> add(low(n))
   le -> false0
   high(nil0) -> nil0
   high(add(x)) -> if_high(add(x))
   rand0(x) -> rand0(s0(x))
   if_low(n) -> low(n)
   if_high(add(x)) -> high(x)
   low(n) -> if_low(n)
   if_high(add(x)) -> add(high(x))
   app(y) -> add(app(y))
   app(y) -> y
   minus(s0(x)) -> minus(x)
   quicksort0(add(x)) -> app(add(quicksort0(high(x))))
   minus(x) -> x
   quicksort0(nil0) -> nil0

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   le -> false0

Used ordering: Polynomial interpretation [POLO]:

   POL(MINUS(x_1)) = 2*x_1
   POL(add(x_1)) = x_1
   POL(app(x_1)) = x_1
   POL(false0) = 0
   POL(high(x_1)) = x_1
   POL(if_high(x_1)) = x_1
   POL(if_low(x_1)) = 1 + 2*x_1
   POL(le) = 1
   POL(low(x_1)) = 1 + 2*x_1
   POL(minus(x_1)) = x_1
   POL(nil0) = 0
   POL(quicksort0(x_1)) = 2*x_1
   POL(quot(x_1)) = 2 + x_1
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s0(x)) -> MINUS(x)

The TRS R consists of the following rules:

   quot(s0(x)) -> s0(quot(minus(x)))
   le -> le
   if_low(n) -> add(low(n))
   high(nil0) -> nil0
   high(add(x)) -> if_high(add(x))
   rand0(x) -> rand0(s0(x))
   if_low(n) -> low(n)
   if_high(add(x)) -> high(x)
   low(n) -> if_low(n)
   if_high(add(x)) -> add(high(x))
   app(y) -> add(app(y))
   app(y) -> y
   minus(s0(x)) -> minus(x)
   quicksort0(add(x)) -> app(add(quicksort0(high(x))))
   minus(x) -> x
   quicksort0(nil0) -> nil0

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(23) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   quicksort0(nil0) -> nil0

Used ordering: Polynomial interpretation [POLO]:

   POL(MINUS(x_1)) = 2*x_1
   POL(add(x_1)) = x_1
   POL(app(x_1)) = x_1
   POL(high(x_1)) = x_1
   POL(if_high(x_1)) = x_1
   POL(if_low(x_1)) = 1 + 2*x_1
   POL(le) = 0
   POL(low(x_1)) = 1 + 2*x_1
   POL(minus(x_1)) = x_1
   POL(nil0) = 2
   POL(quicksort0(x_1)) = 2*x_1
   POL(quot(x_1)) = 1 + x_1
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1


----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s0(x)) -> MINUS(x)

The TRS R consists of the following rules:

   quot(s0(x)) -> s0(quot(minus(x)))
   le -> le
   if_low(n) -> add(low(n))
   high(nil0) -> nil0
   high(add(x)) -> if_high(add(x))
   rand0(x) -> rand0(s0(x))
   if_low(n) -> low(n)
   if_high(add(x)) -> high(x)
   low(n) -> if_low(n)
   if_high(add(x)) -> add(high(x))
   app(y) -> add(app(y))
   app(y) -> y
   minus(s0(x)) -> minus(x)
   quicksort0(add(x)) -> app(add(quicksort0(high(x))))
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(25) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MINUS(s0(x)) -> MINUS(x)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
MINUS(x1)  =  x1

s0(x1)  =  s0(x1)

quot(x1)  =  x1

minus(x1)  =  x1

le  =  le

if_low(x1)  =  if_low

add(x1)  =  add

low(x1)  =  low

high(x1)  =  high

nil0  =  nil0

if_high(x1)  =  if_high

rand0(x1)  =  rand0

app(x1)  =  app(x1)

quicksort0(x1)  =  quicksort0(x1)


Recursive path order with status [RPO].
Quasi-Precedence: s0_1 > rand0
le > rand0
[high, nil0, if_high] > [if_low, add, low] > rand0
[app_1, quicksort0_1] > [if_low, add, low] > rand0

Status: s0_1: multiset status
le: multiset status
if_low: multiset status
add: multiset status
low: multiset status
high: multiset status
nil0: multiset status
if_high: multiset status
rand0: multiset status
app_1: multiset status
quicksort0_1: multiset status


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   quot(s0(x)) -> s0(quot(minus(x)))
   le -> le
   if_low(n) -> add(low(n))
   high(nil0) -> nil0
   high(add(x)) -> if_high(add(x))
   rand0(x) -> rand0(s0(x))
   if_low(n) -> low(n)
   if_high(add(x)) -> high(x)
   low(n) -> if_low(n)
   if_high(add(x)) -> add(high(x))
   app(y) -> add(app(y))
   app(y) -> y
   minus(s0(x)) -> minus(x)
   quicksort0(add(x)) -> app(add(quicksort0(high(x))))
   minus(x) -> x


----------------------------------------

(26)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   quot(s0(x)) -> s0(quot(minus(x)))
   le -> le
   if_low(n) -> add(low(n))
   high(nil0) -> nil0
   high(add(x)) -> if_high(add(x))
   rand0(x) -> rand0(s0(x))
   if_low(n) -> low(n)
   if_high(add(x)) -> high(x)
   low(n) -> if_low(n)
   if_high(add(x)) -> add(high(x))
   app(y) -> add(app(y))
   app(y) -> y
   minus(s0(x)) -> minus(x)
   quicksort0(add(x)) -> app(add(quicksort0(high(x))))
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(27) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(28)
YES

----------------------------------------

(29)
Obligation:
Relative ADP Problem with
absolute ADPs:

   le(s(x), s(y)) -> LE(x, y)

and relative ADPs:

   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   if_low(true, n, add(m, x)) -> add(m, low(n, x))
   le(s(x), 0) -> false
   high(n, nil) -> nil
   high(n, add(m, x)) -> if_high(le(m, n), n, add(m, x))
   rand(x) -> rand(s(x))
   if_low(false, n, add(m, x)) -> low(n, x)
   if_high(true, n, add(m, x)) -> high(n, x)
   quot(0, s(y)) -> 0
   low(n, add(m, x)) -> if_low(le(m, n), n, add(m, x))
   low(n, nil) -> nil
   if_high(false, n, add(m, x)) -> add(m, high(n, x))
   app(add(n, x), y) -> add(n, app(x, y))
   app(nil, y) -> y
   minus(s(x), s(y)) -> minus(x, y)
   le(0, y) -> true
   quicksort(add(n, x)) -> app(quicksort(low(n, x)), add(n, quicksort(high(n, x))))
   minus(x, 0) -> x
   quicksort(nil) -> nil
   rand(x) -> x


----------------------------------------

(30) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:low_2 = 0, 1
true = 
add_2 = 0, 1
app_2 = 0
quicksort_1 = 0
if_high_3 = 0, 2
rand_1 = 
quot_2 = 
false = 
nil = 
s_1 = 
LE_2 = 1
if_low_3 = 1, 2
le_2 = 0, 1
0 = 
minus_2 = 1
high_2 = 1

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
LE(x1, x2)  =  LE(x1)

s(x1)  =  s(x1)

quot(x1, x2)  =  quot(x1, x2)

minus(x1, x2)  =  x1

low(x1, x2)  =  low

add(x1, x2)  =  add

if_low(x1, x2, x3)  =  x1

le(x1, x2)  =  le

high(x1, x2)  =  high(x1)

if_high(x1, x2, x3)  =  if_high(x2)

quicksort(x1)  =  quicksort

app(x1, x2)  =  x2

nil  =  nil

0  =  0

false  =  false

true  =  true


Recursive path order with status [RPO].
Quasi-Precedence: quot_2 > [LE_1, s_1] > [add, 0, true]
quicksort > [low, le, high_1, if_high_1, false] > nil > [add, 0, true]

Status: LE_1: multiset status
s_1: multiset status
quot_2: [1,2]
low: multiset status
add: multiset status
le: multiset status
high_1: multiset status
if_high_1: multiset status
quicksort: multiset status
nil: multiset status
0: multiset status
false: multiset status
true: multiset status


----------------------------------------

(31)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s0(x)) -> LE(x)

The TRS R consists of the following rules:

   quot0(s0(x), s0(y)) -> s0(quot0(minus(x), s0(y)))
   le -> le
   if_low(true0) -> add
   le -> false0
   high(n) -> nil0
   high(n) -> if_high(n)
   rand0(x) -> rand0(s0(x))
   if_low(false0) -> low
   if_high(n) -> high(n)
   quot0(00, s0(y)) -> 00
   low -> if_low(le)
   low -> nil0
   if_high(n) -> add
   app(y) -> add
   app(y) -> y
   minus(s0(x)) -> minus(x)
   le -> true0
   quicksort -> app(add)
   minus(x) -> x
   quicksort -> nil0
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(32) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   high(n) -> nil0
   quot0(00, s0(y)) -> 00
   if_high(n) -> add
   quicksort -> app(add)
   quicksort -> nil0

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 2
   POL(LE(x_1)) = 2*x_1
   POL(add) = 0
   POL(app(x_1)) = 2*x_1
   POL(false0) = 0
   POL(high(x_1)) = 1 + x_1
   POL(if_high(x_1)) = 1 + x_1
   POL(if_low(x_1)) = x_1
   POL(le) = 0
   POL(low) = 0
   POL(minus(x_1)) = x_1
   POL(nil0) = 0
   POL(quicksort) = 1
   POL(quot0(x_1, x_2)) = 2 + x_1 + 2*x_2
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 0


----------------------------------------

(33)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s0(x)) -> LE(x)

The TRS R consists of the following rules:

   quot0(s0(x), s0(y)) -> s0(quot0(minus(x), s0(y)))
   le -> le
   if_low(true0) -> add
   le -> false0
   high(n) -> if_high(n)
   rand0(x) -> rand0(s0(x))
   if_low(false0) -> low
   if_high(n) -> high(n)
   low -> if_low(le)
   low -> nil0
   app(y) -> add
   app(y) -> y
   minus(s0(x)) -> minus(x)
   le -> true0
   minus(x) -> x
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(34) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   app(y) -> add
   app(y) -> y

Used ordering: Polynomial interpretation [POLO]:

   POL(LE(x_1)) = 2*x_1
   POL(add) = 0
   POL(app(x_1)) = 2 + x_1
   POL(false0) = 0
   POL(high(x_1)) = x_1
   POL(if_high(x_1)) = x_1
   POL(if_low(x_1)) = 2*x_1
   POL(le) = 0
   POL(low) = 0
   POL(minus(x_1)) = x_1
   POL(nil0) = 0
   POL(quot0(x_1, x_2)) = 1 + x_1 + 2*x_2
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 0


----------------------------------------

(35)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s0(x)) -> LE(x)

The TRS R consists of the following rules:

   quot0(s0(x), s0(y)) -> s0(quot0(minus(x), s0(y)))
   le -> le
   if_low(true0) -> add
   le -> false0
   high(n) -> if_high(n)
   rand0(x) -> rand0(s0(x))
   if_low(false0) -> low
   if_high(n) -> high(n)
   low -> if_low(le)
   low -> nil0
   minus(s0(x)) -> minus(x)
   le -> true0
   minus(x) -> x
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(36) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   rand0(x) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(LE(x_1)) = 2*x_1
   POL(add) = 0
   POL(false0) = 0
   POL(high(x_1)) = x_1
   POL(if_high(x_1)) = x_1
   POL(if_low(x_1)) = 2*x_1
   POL(le) = 0
   POL(low) = 0
   POL(minus(x_1)) = x_1
   POL(nil0) = 0
   POL(quot0(x_1, x_2)) = 1 + x_1 + 2*x_2
   POL(rand0(x_1)) = 1 + 2*x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 0


----------------------------------------

(37)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s0(x)) -> LE(x)

The TRS R consists of the following rules:

   quot0(s0(x), s0(y)) -> s0(quot0(minus(x), s0(y)))
   le -> le
   if_low(true0) -> add
   le -> false0
   high(n) -> if_high(n)
   rand0(x) -> rand0(s0(x))
   if_low(false0) -> low
   if_high(n) -> high(n)
   low -> if_low(le)
   low -> nil0
   minus(s0(x)) -> minus(x)
   le -> true0
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(38) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   low -> nil0

Used ordering: Polynomial interpretation [POLO]:

   POL(LE(x_1)) = 2*x_1
   POL(add) = 1
   POL(false0) = 0
   POL(high(x_1)) = x_1
   POL(if_high(x_1)) = x_1
   POL(if_low(x_1)) = 1 + 2*x_1
   POL(le) = 0
   POL(low) = 1
   POL(minus(x_1)) = x_1
   POL(nil0) = 0
   POL(quot0(x_1, x_2)) = 1 + x_1 + 2*x_2
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 0


----------------------------------------

(39)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s0(x)) -> LE(x)

The TRS R consists of the following rules:

   quot0(s0(x), s0(y)) -> s0(quot0(minus(x), s0(y)))
   le -> le
   if_low(true0) -> add
   le -> false0
   high(n) -> if_high(n)
   rand0(x) -> rand0(s0(x))
   if_low(false0) -> low
   if_high(n) -> high(n)
   low -> if_low(le)
   minus(s0(x)) -> minus(x)
   le -> true0
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(40) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   if_low(true0) -> add

Used ordering: Polynomial interpretation [POLO]:

   POL(LE(x_1)) = 2*x_1
   POL(add) = 0
   POL(false0) = 0
   POL(high(x_1)) = x_1
   POL(if_high(x_1)) = x_1
   POL(if_low(x_1)) = 1 + 2*x_1
   POL(le) = 0
   POL(low) = 1
   POL(minus(x_1)) = x_1
   POL(quot0(x_1, x_2)) = 1 + x_1 + 2*x_2
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 0


----------------------------------------

(41)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s0(x)) -> LE(x)

The TRS R consists of the following rules:

   quot0(s0(x), s0(y)) -> s0(quot0(minus(x), s0(y)))
   le -> le
   le -> false0
   high(n) -> if_high(n)
   rand0(x) -> rand0(s0(x))
   if_low(false0) -> low
   if_high(n) -> high(n)
   low -> if_low(le)
   minus(s0(x)) -> minus(x)
   le -> true0
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(42) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   le -> true0

Used ordering: Polynomial interpretation [POLO]:

   POL(LE(x_1)) = 2*x_1
   POL(false0) = 1
   POL(high(x_1)) = x_1
   POL(if_high(x_1)) = x_1
   POL(if_low(x_1)) = 2*x_1
   POL(le) = 1
   POL(low) = 2
   POL(minus(x_1)) = x_1
   POL(quot0(x_1, x_2)) = 1 + x_1 + 2*x_2
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 0


----------------------------------------

(43)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s0(x)) -> LE(x)

The TRS R consists of the following rules:

   quot0(s0(x), s0(y)) -> s0(quot0(minus(x), s0(y)))
   le -> le
   le -> false0
   high(n) -> if_high(n)
   rand0(x) -> rand0(s0(x))
   if_low(false0) -> low
   if_high(n) -> high(n)
   low -> if_low(le)
   minus(s0(x)) -> minus(x)
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(44) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   LE(s0(x)) -> LE(x)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( quot0_2(x_1, x_2) ) = x_1
POL( s0_1(x_1) ) = 2x_1 + 1
POL( minus_1(x_1) ) = x_1
POL( le ) = 0
POL( false0 ) = 0
POL( high_1(x_1) ) = 2x_1 + 2
POL( if_high_1(x_1) ) = 2x_1 + 2
POL( rand0_1(x_1) ) = max{0, -2}
POL( if_low_1(x_1) ) = 2
POL( low ) = 2
POL( LE_1(x_1) ) = x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   quot0(s0(x), s0(y)) -> s0(quot0(minus(x), s0(y)))
   le -> le
   le -> false0
   high(n) -> if_high(n)
   rand0(x) -> rand0(s0(x))
   if_low(false0) -> low
   if_high(n) -> high(n)
   low -> if_low(le)
   minus(s0(x)) -> minus(x)
   minus(x) -> x


----------------------------------------

(45)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   quot0(s0(x), s0(y)) -> s0(quot0(minus(x), s0(y)))
   le -> le
   le -> false0
   high(n) -> if_high(n)
   rand0(x) -> rand0(s0(x))
   if_low(false0) -> low
   if_high(n) -> high(n)
   low -> if_low(le)
   minus(s0(x)) -> minus(x)
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(46) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(47)
YES

----------------------------------------

(48)
Obligation:
Relative ADP Problem with
absolute ADPs:

   if_low(true, n, add(m, x)) -> add(m, LOW(n, x))
   low(n, add(m, x)) -> IF_LOW(le(m, n), n, add(m, x))
   if_low(false, n, add(m, x)) -> LOW(n, x)

and relative ADPs:

   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false
   high(n, nil) -> nil
   high(n, add(m, x)) -> if_high(le(m, n), n, add(m, x))
   rand(x) -> rand(s(x))
   if_high(true, n, add(m, x)) -> high(n, x)
   quot(0, s(y)) -> 0
   low(n, add(m, x)) -> if_low(le(m, n), n, add(m, x))
   low(n, nil) -> nil
   if_high(false, n, add(m, x)) -> add(m, high(n, x))
   app(add(n, x), y) -> add(n, app(x, y))
   app(nil, y) -> y
   minus(s(x), s(y)) -> minus(x, y)
   le(0, y) -> true
   quicksort(add(n, x)) -> app(quicksort(low(n, x)), add(n, quicksort(high(n, x))))
   minus(x, 0) -> x
   quicksort(nil) -> nil
   rand(x) -> x


----------------------------------------

(49) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:low_2 = 0
true = 
add_2 = 
app_2 = 
IF_LOW_3 = 0, 1
quicksort_1 = 
if_high_3 = 0, 1
rand_1 = 
false = 
quot_2 = 
nil = 
s_1 = 
if_low_3 = 0, 1
le_2 = 0, 1
0 = 
LOW_2 = 0
minus_2 = 1
high_2 = 0

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
IF_LOW(x1, x2, x3)  =  IF_LOW(x3)

false  =  false

add(x1, x2)  =  add(x1, x2)

LOW(x1, x2)  =  LOW(x2)

true  =  true

le(x1, x2)  =  le

s(x1)  =  x1

0  =  0

high(x1, x2)  =  x2

if_high(x1, x2, x3)  =  x3

quot(x1, x2)  =  quot(x1, x2)

minus(x1, x2)  =  x1

low(x1, x2)  =  low(x2)

if_low(x1, x2, x3)  =  if_low(x3)

quicksort(x1)  =  quicksort(x1)

app(x1, x2)  =  app(x1, x2)

nil  =  nil


Recursive path order with status [RPO].
Quasi-Precedence: [IF_LOW_1, LOW_1, true, le, 0] > [false, add_2, low_1, if_low_1] > quot_2
[quicksort_1, nil] > app_2 > [false, add_2, low_1, if_low_1] > quot_2

Status: IF_LOW_1: multiset status
false: multiset status
add_2: multiset status
LOW_1: multiset status
true: multiset status
le: multiset status
0: multiset status
quot_2: [1,2]
low_1: multiset status
if_low_1: multiset status
quicksort_1: [1]
app_2: [1,2]
nil: multiset status


----------------------------------------

(50)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF_LOW(add0(m, x)) -> LOW(x)
   LOW(add0(m, x)) -> IF_LOW(add0(m, x))

The TRS R consists of the following rules:

   quot0(s0(x), s0(y)) -> s0(quot0(minus(x), s0(y)))
   le -> le
   if_low(add0(m, x)) -> add0(m, low(x))
   le -> false0
   high(nil0) -> nil0
   high(add0(m, x)) -> if_high(add0(m, x))
   rand0(x) -> rand0(s0(x))
   if_low(add0(m, x)) -> low(x)
   if_high(add0(m, x)) -> high(x)
   quot0(00, s0(y)) -> 00
   low(add0(m, x)) -> if_low(add0(m, x))
   low(nil0) -> nil0
   if_high(add0(m, x)) -> add0(m, high(x))
   app0(add0(n, x), y) -> add0(n, app0(x, y))
   app0(nil0, y) -> y
   minus(s0(x)) -> minus(x)
   le -> true0
   quicksort0(add0(n, x)) -> app0(quicksort0(low(x)), add0(n, quicksort0(high(x))))
   minus(x) -> x
   quicksort0(nil0) -> nil0
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(51) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   IF_LOW(add0(m, x)) -> LOW(x)
   LOW(add0(m, x)) -> IF_LOW(add0(m, x))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
IF_LOW(x1)  =  x1

add0(x1, x2)  =  add0(x1, x2)

LOW(x1)  =  LOW(x1)

quot0(x1, x2)  =  x1

s0(x1)  =  x1

minus(x1)  =  x1

le  =  le

if_low(x1)  =  x1

low(x1)  =  x1

false0  =  false0

high(x1)  =  x1

nil0  =  nil0

if_high(x1)  =  x1

rand0(x1)  =  rand0(x1)

00  =  00

app0(x1, x2)  =  app0(x1, x2)

true0  =  true0

quicksort0(x1)  =  quicksort0(x1)


Recursive path order with status [RPO].
Quasi-Precedence: le > false0
le > true0
[nil0, quicksort0_1] > [add0_2, app0_2] > LOW_1

Status: add0_2: [1,2]
LOW_1: multiset status
le: multiset status
false0: multiset status
nil0: multiset status
rand0_1: multiset status
00: multiset status
app0_2: [1,2]
true0: multiset status
quicksort0_1: multiset status


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   quot0(s0(x), s0(y)) -> s0(quot0(minus(x), s0(y)))
   le -> le
   if_low(add0(m, x)) -> add0(m, low(x))
   le -> false0
   high(nil0) -> nil0
   high(add0(m, x)) -> if_high(add0(m, x))
   rand0(x) -> rand0(s0(x))
   if_low(add0(m, x)) -> low(x)
   if_high(add0(m, x)) -> high(x)
   quot0(00, s0(y)) -> 00
   low(add0(m, x)) -> if_low(add0(m, x))
   low(nil0) -> nil0
   if_high(add0(m, x)) -> add0(m, high(x))
   app0(add0(n, x), y) -> add0(n, app0(x, y))
   app0(nil0, y) -> y
   minus(s0(x)) -> minus(x)
   le -> true0
   quicksort0(add0(n, x)) -> app0(quicksort0(low(x)), add0(n, quicksort0(high(x))))
   minus(x) -> x
   quicksort0(nil0) -> nil0
   rand0(x) -> x


----------------------------------------

(52)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   quot0(s0(x), s0(y)) -> s0(quot0(minus(x), s0(y)))
   le -> le
   if_low(add0(m, x)) -> add0(m, low(x))
   le -> false0
   high(nil0) -> nil0
   high(add0(m, x)) -> if_high(add0(m, x))
   rand0(x) -> rand0(s0(x))
   if_low(add0(m, x)) -> low(x)
   if_high(add0(m, x)) -> high(x)
   quot0(00, s0(y)) -> 00
   low(add0(m, x)) -> if_low(add0(m, x))
   low(nil0) -> nil0
   if_high(add0(m, x)) -> add0(m, high(x))
   app0(add0(n, x), y) -> add0(n, app0(x, y))
   app0(nil0, y) -> y
   minus(s0(x)) -> minus(x)
   le -> true0
   quicksort0(add0(n, x)) -> app0(quicksort0(low(x)), add0(n, quicksort0(high(x))))
   minus(x) -> x
   quicksort0(nil0) -> nil0
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(53) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(54)
YES

----------------------------------------

(55)
Obligation:
Relative ADP Problem with
absolute ADPs:

   if_high(false, n, add(m, x)) -> add(m, HIGH(n, x))
   if_high(true, n, add(m, x)) -> HIGH(n, x)
   high(n, add(m, x)) -> IF_HIGH(le(m, n), n, add(m, x))

and relative ADPs:

   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   le(s(x), s(y)) -> le(x, y)
   if_low(true, n, add(m, x)) -> add(m, low(n, x))
   le(s(x), 0) -> false
   high(n, nil) -> nil
   high(n, add(m, x)) -> if_high(le(m, n), n, add(m, x))
   rand(x) -> rand(s(x))
   if_low(false, n, add(m, x)) -> low(n, x)
   quot(0, s(y)) -> 0
   low(n, add(m, x)) -> if_low(le(m, n), n, add(m, x))
   low(n, nil) -> nil
   app(add(n, x), y) -> add(n, app(x, y))
   app(nil, y) -> y
   minus(s(x), s(y)) -> minus(x, y)
   le(0, y) -> true
   quicksort(add(n, x)) -> app(quicksort(low(n, x)), add(n, quicksort(high(n, x))))
   minus(x, 0) -> x
   quicksort(nil) -> nil
   rand(x) -> x


----------------------------------------

(56) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:HIGH_2 = 
low_2 = 0
true = 
IF_HIGH_3 = 0
add_2 = 
app_2 = 
quicksort_1 = 
if_high_3 = 0, 1
rand_1 = 
false = 
quot_2 = 1
nil = 
s_1 = 
if_low_3 = 0, 1
le_2 = 0, 1
0 = 
high_2 = 0
minus_2 = 1

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
IF_HIGH(x1, x2, x3)  =  IF_HIGH(x2, x3)

true  =  true

add(x1, x2)  =  add(x1, x2)

HIGH(x1, x2)  =  HIGH(x1, x2)

le(x1, x2)  =  le

false  =  false

s(x1)  =  x1

0  =  0

low(x1, x2)  =  x2

if_low(x1, x2, x3)  =  x3

high(x1, x2)  =  high(x2)

if_high(x1, x2, x3)  =  if_high(x3)

quicksort(x1)  =  quicksort(x1)

app(x1, x2)  =  app(x1, x2)

quot(x1, x2)  =  x1

minus(x1, x2)  =  x1

nil  =  nil


Recursive path order with status [RPO].
Quasi-Precedence: [IF_HIGH_2, true, HIGH_2, le] > [add_2, false, high_1, if_high_1]
0 > [add_2, false, high_1, if_high_1]
[quicksort_1, nil] > app_2 > [add_2, false, high_1, if_high_1]

Status: IF_HIGH_2: [1,2]
true: multiset status
add_2: multiset status
HIGH_2: [1,2]
le: multiset status
false: multiset status
0: multiset status
high_1: multiset status
if_high_1: multiset status
quicksort_1: [1]
app_2: [2,1]
nil: multiset status


----------------------------------------

(57)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF_HIGH(n, add0(m, x)) -> HIGH0(n, x)
   HIGH0(n, add0(m, x)) -> IF_HIGH(n, add0(m, x))

The TRS R consists of the following rules:

   quot(s0(x)) -> s0(quot(minus(x)))
   le -> le
   if_low(add0(m, x)) -> add0(m, low(x))
   le -> false0
   high(nil0) -> nil0
   high(add0(m, x)) -> if_high(add0(m, x))
   rand0(x) -> rand0(s0(x))
   if_low(add0(m, x)) -> low(x)
   if_high(add0(m, x)) -> high(x)
   quot(00) -> 00
   low(add0(m, x)) -> if_low(add0(m, x))
   low(nil0) -> nil0
   if_high(add0(m, x)) -> add0(m, high(x))
   app0(add0(n, x), y) -> add0(n, app0(x, y))
   app0(nil0, y) -> y
   minus(s0(x)) -> minus(x)
   le -> true0
   quicksort0(add0(n, x)) -> app0(quicksort0(low(x)), add0(n, quicksort0(high(x))))
   minus(x) -> x
   quicksort0(nil0) -> nil0
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(58) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   IF_HIGH(n, add0(m, x)) -> HIGH0(n, x)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
IF_HIGH(x1, x2)  =  x2

add0(x1, x2)  =  add0(x1, x2)

HIGH0(x1, x2)  =  x2

quot(x1)  =  quot(x1)

s0(x1)  =  x1

minus(x1)  =  x1

le  =  le

if_low(x1)  =  x1

low(x1)  =  x1

false0  =  false0

high(x1)  =  x1

nil0  =  nil0

if_high(x1)  =  x1

rand0(x1)  =  rand0(x1)

00  =  00

app0(x1, x2)  =  app0(x1, x2)

true0  =  true0

quicksort0(x1)  =  quicksort0(x1)


Recursive path order with status [RPO].
Quasi-Precedence: [quot_1, 00]
le > false0
le > true0
[nil0, quicksort0_1] > app0_2 > add0_2

Status: add0_2: multiset status
quot_1: [1]
le: multiset status
false0: multiset status
nil0: multiset status
rand0_1: multiset status
00: multiset status
app0_2: [2,1]
true0: multiset status
quicksort0_1: [1]


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   quot(s0(x)) -> s0(quot(minus(x)))
   le -> le
   if_low(add0(m, x)) -> add0(m, low(x))
   le -> false0
   high(nil0) -> nil0
   high(add0(m, x)) -> if_high(add0(m, x))
   rand0(x) -> rand0(s0(x))
   if_low(add0(m, x)) -> low(x)
   if_high(add0(m, x)) -> high(x)
   quot(00) -> 00
   low(add0(m, x)) -> if_low(add0(m, x))
   low(nil0) -> nil0
   if_high(add0(m, x)) -> add0(m, high(x))
   app0(add0(n, x), y) -> add0(n, app0(x, y))
   app0(nil0, y) -> y
   minus(s0(x)) -> minus(x)
   le -> true0
   quicksort0(add0(n, x)) -> app0(quicksort0(low(x)), add0(n, quicksort0(high(x))))
   minus(x) -> x
   quicksort0(nil0) -> nil0
   rand0(x) -> x


----------------------------------------

(59)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   HIGH0(n, add0(m, x)) -> IF_HIGH(n, add0(m, x))

The TRS R consists of the following rules:

   quot(s0(x)) -> s0(quot(minus(x)))
   le -> le
   if_low(add0(m, x)) -> add0(m, low(x))
   le -> false0
   high(nil0) -> nil0
   high(add0(m, x)) -> if_high(add0(m, x))
   rand0(x) -> rand0(s0(x))
   if_low(add0(m, x)) -> low(x)
   if_high(add0(m, x)) -> high(x)
   quot(00) -> 00
   low(add0(m, x)) -> if_low(add0(m, x))
   low(nil0) -> nil0
   if_high(add0(m, x)) -> add0(m, high(x))
   app0(add0(n, x), y) -> add0(n, app0(x, y))
   app0(nil0, y) -> y
   minus(s0(x)) -> minus(x)
   le -> true0
   quicksort0(add0(n, x)) -> app0(quicksort0(low(x)), add0(n, quicksort0(high(x))))
   minus(x) -> x
   quicksort0(nil0) -> nil0
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(60) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(61)
TRUE

----------------------------------------

(62)
Obligation:
Relative ADP Problem with
absolute ADPs:

   quicksort(add(n, x)) -> app(QUICKSORT(low(n, x)), add(n, quicksort(high(n, x))))
   quicksort(add(n, x)) -> app(quicksort(low(n, x)), add(n, QUICKSORT(high(n, x))))

and relative ADPs:

   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   le(s(x), s(y)) -> le(x, y)
   if_low(true, n, add(m, x)) -> add(m, low(n, x))
   le(s(x), 0) -> false
   high(n, nil) -> nil
   high(n, add(m, x)) -> if_high(le(m, n), n, add(m, x))
   rand(x) -> rand(s(x))
   if_low(false, n, add(m, x)) -> low(n, x)
   if_high(true, n, add(m, x)) -> high(n, x)
   quot(0, s(y)) -> 0
   low(n, add(m, x)) -> if_low(le(m, n), n, add(m, x))
   low(n, nil) -> nil
   if_high(false, n, add(m, x)) -> add(m, high(n, x))
   app(add(n, x), y) -> add(n, app(x, y))
   app(nil, y) -> y
   minus(s(x), s(y)) -> minus(x, y)
   le(0, y) -> true
   quicksort(add(n, x)) -> app(quicksort(low(n, x)), add(n, quicksort(high(n, x))))
   minus(x, 0) -> x
   quicksort(nil) -> nil
   rand(x) -> x


----------------------------------------

(63) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:low_2 = 0
true = 
add_2 = 
app_2 = 
quicksort_1 = 
QUICKSORT_1 = 
if_high_3 = 0, 1
rand_1 = 
quot_2 = 0
false = 
nil = 
s_1 = 
if_low_3 = 0, 1
le_2 = 0, 1
0 = 
high_2 = 0
minus_2 = 1

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
QUICKSORT(x1)  =  QUICKSORT(x1)

add(x1, x2)  =  add(x1, x2)

high(x1, x2)  =  x2

low(x1, x2)  =  x2

if_low(x1, x2, x3)  =  x3

false  =  false

le(x1, x2)  =  le

nil  =  nil

s(x1)  =  x1

0  =  0

true  =  true

if_high(x1, x2, x3)  =  x3

quicksort(x1)  =  quicksort(x1)

app(x1, x2)  =  app(x1, x2)

quot(x1, x2)  =  quot(x2)

minus(x1, x2)  =  x1


Recursive path order with status [RPO].
Quasi-Precedence: quicksort_1 > [QUICKSORT_1, add_2, app_2] > le > true > false
quicksort_1 > nil > false
quot_1 > 0 > true > false

Status: QUICKSORT_1: [1]
add_2: [1,2]
false: multiset status
le: []
nil: multiset status
0: multiset status
true: multiset status
quicksort_1: [1]
app_2: [1,2]
quot_1: multiset status


----------------------------------------

(64)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUICKSORT0(add0(n, x)) -> QUICKSORT0(high(x))
   QUICKSORT0(add0(n, x)) -> QUICKSORT0(low(x))

The TRS R consists of the following rules:

   quot(s0(y)) -> s0(quot(s0(y)))
   le -> le
   if_low(add0(m, x)) -> add0(m, low(x))
   le -> false0
   high(nil0) -> nil0
   high(add0(m, x)) -> if_high(add0(m, x))
   rand0(x) -> rand0(s0(x))
   if_low(add0(m, x)) -> low(x)
   if_high(add0(m, x)) -> high(x)
   quot(s0(y)) -> 00
   low(add0(m, x)) -> if_low(add0(m, x))
   low(nil0) -> nil0
   if_high(add0(m, x)) -> add0(m, high(x))
   app0(add0(n, x), y) -> add0(n, app0(x, y))
   app0(nil0, y) -> y
   minus(s0(x)) -> minus(x)
   le -> true0
   quicksort0(add0(n, x)) -> app0(quicksort0(low(x)), add0(n, quicksort0(high(x))))
   minus(x) -> x
   quicksort0(nil0) -> nil0
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(65) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   QUICKSORT0(add0(n, x)) -> QUICKSORT0(high(x))
   QUICKSORT0(add0(n, x)) -> QUICKSORT0(low(x))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
QUICKSORT0(x1)  =  QUICKSORT0(x1)

add0(x1, x2)  =  add0(x1, x2)

high(x1)  =  x1

low(x1)  =  x1

quot(x1)  =  quot(x1)

s0(x1)  =  x1

le  =  le

if_low(x1)  =  x1

false0  =  false0

nil0  =  nil0

if_high(x1)  =  x1

rand0(x1)  =  x1

00  =  00

app0(x1, x2)  =  app0(x1, x2)

minus(x1)  =  x1

true0  =  true0

quicksort0(x1)  =  quicksort0(x1)


Recursive path order with status [RPO].
Quasi-Precedence: quot_1 > 00
le > false0
le > true0
quicksort0_1 > [add0_2, app0_2]

Status: QUICKSORT0_1: [1]
add0_2: [1,2]
quot_1: multiset status
le: multiset status
false0: multiset status
nil0: multiset status
00: multiset status
app0_2: [1,2]
true0: multiset status
quicksort0_1: [1]


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   quot(s0(y)) -> s0(quot(s0(y)))
   le -> le
   if_low(add0(m, x)) -> add0(m, low(x))
   le -> false0
   high(nil0) -> nil0
   high(add0(m, x)) -> if_high(add0(m, x))
   rand0(x) -> rand0(s0(x))
   if_low(add0(m, x)) -> low(x)
   if_high(add0(m, x)) -> high(x)
   quot(s0(y)) -> 00
   low(add0(m, x)) -> if_low(add0(m, x))
   low(nil0) -> nil0
   if_high(add0(m, x)) -> add0(m, high(x))
   app0(add0(n, x), y) -> add0(n, app0(x, y))
   app0(nil0, y) -> y
   minus(s0(x)) -> minus(x)
   le -> true0
   quicksort0(add0(n, x)) -> app0(quicksort0(low(x)), add0(n, quicksort0(high(x))))
   minus(x) -> x
   quicksort0(nil0) -> nil0
   rand0(x) -> x


----------------------------------------

(66)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   quot(s0(y)) -> s0(quot(s0(y)))
   le -> le
   if_low(add0(m, x)) -> add0(m, low(x))
   le -> false0
   high(nil0) -> nil0
   high(add0(m, x)) -> if_high(add0(m, x))
   rand0(x) -> rand0(s0(x))
   if_low(add0(m, x)) -> low(x)
   if_high(add0(m, x)) -> high(x)
   quot(s0(y)) -> 00
   low(add0(m, x)) -> if_low(add0(m, x))
   low(nil0) -> nil0
   if_high(add0(m, x)) -> add0(m, high(x))
   app0(add0(n, x), y) -> add0(n, app0(x, y))
   app0(nil0, y) -> y
   minus(s0(x)) -> minus(x)
   le -> true0
   quicksort0(add0(n, x)) -> app0(quicksort0(low(x)), add0(n, quicksort0(high(x))))
   minus(x) -> x
   quicksort0(nil0) -> nil0
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(67) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(68)
YES

----------------------------------------

(69)
Obligation:
Relative ADP Problem with
absolute ADPs:

   quot(s(x), s(y)) -> s(QUOT(minus(x, y), s(y)))

and relative ADPs:

   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   le(s(x), s(y)) -> le(x, y)
   if_low(true, n, add(m, x)) -> add(m, low(n, x))
   le(s(x), 0) -> false
   high(n, nil) -> nil
   high(n, add(m, x)) -> if_high(le(m, n), n, add(m, x))
   rand(x) -> rand(s(x))
   if_low(false, n, add(m, x)) -> low(n, x)
   if_high(true, n, add(m, x)) -> high(n, x)
   quot(0, s(y)) -> 0
   low(n, add(m, x)) -> if_low(le(m, n), n, add(m, x))
   low(n, nil) -> nil
   if_high(false, n, add(m, x)) -> add(m, high(n, x))
   app(add(n, x), y) -> add(n, app(x, y))
   app(nil, y) -> y
   minus(s(x), s(y)) -> minus(x, y)
   le(0, y) -> true
   quicksort(add(n, x)) -> app(quicksort(low(n, x)), add(n, quicksort(high(n, x))))
   minus(x, 0) -> x
   quicksort(nil) -> nil
   rand(x) -> x


----------------------------------------

(70) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:low_2 = 0, 1
true = 
QUOT_2 = 1
add_2 = 0
app_2 = 0
quicksort_1 = 0
if_high_3 = 0
rand_1 = 
quot_2 = 
false = 
nil = 
s_1 = 
if_low_3 = 1, 2
le_2 = 0, 1
0 = 
minus_2 = 1
high_2 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
QUOT(x1, x2)  =  x1

s(x1)  =  s(x1)

minus(x1, x2)  =  minus(x1)

0  =  0

high(x1, x2)  =  high(x1, x2)

add(x1, x2)  =  x2

if_high(x1, x2, x3)  =  if_high(x2, x3)

le(x1, x2)  =  le

low(x1, x2)  =  low

if_low(x1, x2, x3)  =  x1

quicksort(x1)  =  quicksort

app(x1, x2)  =  x2

quot(x1, x2)  =  quot(x1, x2)

nil  =  nil

true  =  true

false  =  false


Recursive path order with status [RPO].
Quasi-Precedence: 0 > minus_1
[le, low, true, false] > [high_2, if_high_2, quicksort] > nil > minus_1
quot_2 > s_1 > minus_1

Status: s_1: multiset status
minus_1: multiset status
0: multiset status
high_2: multiset status
if_high_2: multiset status
le: []
low: []
quicksort: []
quot_2: [1,2]
nil: multiset status
true: multiset status
false: multiset status


----------------------------------------

(71)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(s0(x)) -> QUOT(minus(x))

The TRS R consists of the following rules:

   quot0(s0(x), s0(y)) -> s0(quot0(minus(x), s0(y)))
   le -> le
   if_low(true0) -> add(low)
   le -> false0
   high0(n, nil0) -> nil0
   high0(n, add(x)) -> if_high(n, add(x))
   rand0(x) -> rand0(s0(x))
   if_low(false0) -> low
   if_high(n, add(x)) -> high0(n, x)
   quot0(00, s0(y)) -> 00
   low -> if_low(le)
   low -> nil0
   if_high(n, add(x)) -> add(high0(n, x))
   app(y) -> add(app(y))
   app(y) -> y
   minus(s0(x)) -> minus(x)
   le -> true0
   quicksort -> app(add(quicksort))
   minus(x) -> x
   quicksort -> nil0
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(72) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   high0(n, nil0) -> nil0
   quot0(00, s0(y)) -> 00
   quicksort -> nil0

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 2
   POL(QUOT(x_1)) = x_1
   POL(add(x_1)) = x_1
   POL(app(x_1)) = x_1
   POL(false0) = 0
   POL(high0(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(if_high(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(if_low(x_1)) = 2*x_1
   POL(le) = 0
   POL(low) = 0
   POL(minus(x_1)) = x_1
   POL(nil0) = 0
   POL(quicksort) = 1
   POL(quot0(x_1, x_2)) = 2 + x_1 + 2*x_2
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 0


----------------------------------------

(73)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(s0(x)) -> QUOT(minus(x))

The TRS R consists of the following rules:

   quot0(s0(x), s0(y)) -> s0(quot0(minus(x), s0(y)))
   le -> le
   if_low(true0) -> add(low)
   le -> false0
   high0(n, add(x)) -> if_high(n, add(x))
   rand0(x) -> rand0(s0(x))
   if_low(false0) -> low
   if_high(n, add(x)) -> high0(n, x)
   low -> if_low(le)
   low -> nil0
   if_high(n, add(x)) -> add(high0(n, x))
   app(y) -> add(app(y))
   app(y) -> y
   minus(s0(x)) -> minus(x)
   le -> true0
   quicksort -> app(add(quicksort))
   minus(x) -> x
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(74) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   rand0(x) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(QUOT(x_1)) = 2*x_1
   POL(add(x_1)) = x_1
   POL(app(x_1)) = x_1
   POL(false0) = 0
   POL(high0(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(if_high(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(if_low(x_1)) = 2*x_1
   POL(le) = 0
   POL(low) = 0
   POL(minus(x_1)) = x_1
   POL(nil0) = 0
   POL(quicksort) = 2
   POL(quot0(x_1, x_2)) = 2 + 2*x_1 + 2*x_2
   POL(rand0(x_1)) = 1 + 2*x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 0


----------------------------------------

(75)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(s0(x)) -> QUOT(minus(x))

The TRS R consists of the following rules:

   quot0(s0(x), s0(y)) -> s0(quot0(minus(x), s0(y)))
   le -> le
   if_low(true0) -> add(low)
   le -> false0
   high0(n, add(x)) -> if_high(n, add(x))
   rand0(x) -> rand0(s0(x))
   if_low(false0) -> low
   if_high(n, add(x)) -> high0(n, x)
   low -> if_low(le)
   low -> nil0
   if_high(n, add(x)) -> add(high0(n, x))
   app(y) -> add(app(y))
   app(y) -> y
   minus(s0(x)) -> minus(x)
   le -> true0
   quicksort -> app(add(quicksort))
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(76) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   low -> nil0

Used ordering: Polynomial interpretation [POLO]:

   POL(QUOT(x_1)) = 2*x_1
   POL(add(x_1)) = x_1
   POL(app(x_1)) = x_1
   POL(false0) = 0
   POL(high0(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(if_high(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(if_low(x_1)) = 1 + 2*x_1
   POL(le) = 0
   POL(low) = 1
   POL(minus(x_1)) = x_1
   POL(nil0) = 0
   POL(quicksort) = 1
   POL(quot0(x_1, x_2)) = 1 + 2*x_1 + 2*x_2
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 0


----------------------------------------

(77)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(s0(x)) -> QUOT(minus(x))

The TRS R consists of the following rules:

   quot0(s0(x), s0(y)) -> s0(quot0(minus(x), s0(y)))
   le -> le
   if_low(true0) -> add(low)
   le -> false0
   high0(n, add(x)) -> if_high(n, add(x))
   rand0(x) -> rand0(s0(x))
   if_low(false0) -> low
   if_high(n, add(x)) -> high0(n, x)
   low -> if_low(le)
   if_high(n, add(x)) -> add(high0(n, x))
   app(y) -> add(app(y))
   app(y) -> y
   minus(s0(x)) -> minus(x)
   le -> true0
   quicksort -> app(add(quicksort))
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(78) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   QUOT(s0(x)) -> QUOT(minus(x))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
QUOT(x1)  =  QUOT(x1)

s0(x1)  =  s0(x1)

minus(x1)  =  minus(x1)

quot0(x1, x2)  =  quot0(x1, x2)

le  =  le

if_low(x1)  =  if_low

true0  =  true0

add(x1)  =  x1

low  =  low

false0  =  false0

high0(x1, x2)  =  x2

if_high(x1, x2)  =  x2

rand0(x1)  =  rand0

app(x1)  =  x1

quicksort  =  quicksort


Recursive path order with status [RPO].
Quasi-Precedence: quot0_2 > [QUOT_1, s0_1] > minus_1 > rand0
[if_low, low] > le > true0 > rand0
[if_low, low] > le > false0 > rand0
quicksort > rand0

Status: QUOT_1: multiset status
s0_1: multiset status
minus_1: multiset status
quot0_2: [2,1]
le: multiset status
if_low: multiset status
true0: multiset status
low: multiset status
false0: multiset status
rand0: multiset status
quicksort: multiset status


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   quot0(s0(x), s0(y)) -> s0(quot0(minus(x), s0(y)))
   le -> le
   if_low(true0) -> add(low)
   le -> false0
   high0(n, add(x)) -> if_high(n, add(x))
   rand0(x) -> rand0(s0(x))
   if_low(false0) -> low
   if_high(n, add(x)) -> high0(n, x)
   low -> if_low(le)
   if_high(n, add(x)) -> add(high0(n, x))
   app(y) -> add(app(y))
   app(y) -> y
   minus(s0(x)) -> minus(x)
   le -> true0
   quicksort -> app(add(quicksort))
   minus(x) -> x


----------------------------------------

(79)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   quot0(s0(x), s0(y)) -> s0(quot0(minus(x), s0(y)))
   le -> le
   if_low(true0) -> add(low)
   le -> false0
   high0(n, add(x)) -> if_high(n, add(x))
   rand0(x) -> rand0(s0(x))
   if_low(false0) -> low
   if_high(n, add(x)) -> high0(n, x)
   low -> if_low(le)
   if_high(n, add(x)) -> add(high0(n, x))
   app(y) -> add(app(y))
   app(y) -> y
   minus(s0(x)) -> minus(x)
   le -> true0
   quicksort -> app(add(quicksort))
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(80) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(81)
YES
