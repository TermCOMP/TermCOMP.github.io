YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/qXnyi.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRS S Cleaner [EQUIVALENT, 0 ms]
(2) RelTRS
(3) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(4) RelADPP
(5) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) RelADPP
        (8) RelADPCleverAfsProof [SOUND, 17 ms]
        (9) QDP
        (10) MRRProof [EQUIVALENT, 7 ms]
        (11) QDP
        (12) PisEmptyProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) RelADPP
        (15) RelADPCleverAfsProof [SOUND, 16 ms]
        (16) QDP
        (17) MRRProof [EQUIVALENT, 10 ms]
        (18) QDP
        (19) PisEmptyProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) RelADPP
        (22) RelADPReductionPairProof [EQUIVALENT, 32 ms]
        (23) RelADPP
        (24) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (25) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   div(0, s(y)) -> 0
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   half(s(s(x))) -> div(x, s(s(0)))

The relative TRS consists of the following S rules:

   gen(s(x), b) -> gen(s(x), b)
   gen(s(x), b) -> gen(x, a)
   gen(0, a) -> gen(0, a)
   gen(s(x), a) -> c(s(s(0)), gen(s(x), b))
   gen(s(x), a) -> c(half(s(s(0))), gen(x, a))


----------------------------------------

(1) RelTRS S Cleaner (EQUIVALENT)
We have deleted all rules from S that have the shape t -> t:

   gen(s(x), b) -> gen(s(x), b)
   gen(0, a) -> gen(0, a)


----------------------------------------

(2)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   div(0, s(y)) -> 0
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   half(s(s(x))) -> div(x, s(s(0)))

The relative TRS consists of the following S rules:

   gen(s(x), b) -> gen(x, a)
   gen(s(x), a) -> c(s(s(0)), gen(s(x), b))
   gen(s(x), a) -> c(half(s(s(0))), gen(x, a))


----------------------------------------

(3) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(4)
Obligation:
Relative ADP Problem with
absolute ADPs:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> MINUS(x, y)
   div(0, s(y)) -> 0
   div(s(x), s(y)) -> s(DIV(minus(x, y), s(y)))
   div(s(x), s(y)) -> s(div(MINUS(x, y), s(y)))
   half(s(s(x))) -> DIV(x, s(s(0)))

and relative ADPs:

   gen(s(x), b) -> GEN(x, a)
   gen(s(x), a) -> c(s(s(0)), GEN(s(x), b))
   gen(s(x), a) -> c(HALF(s(s(0))), GEN(x, a))


----------------------------------------

(5) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  2 SCCs with nodes from P_abs,
  1 Lasso,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Relative ADP Problem with
absolute ADPs:

   minus(s(x), s(y)) -> MINUS(x, y)

and relative ADPs:

   div(0, s(y)) -> 0
   gen(s(x), b) -> gen(x, a)
   half(s(s(x))) -> div(x, s(s(0)))
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   gen(s(x), a) -> c(s(s(0)), gen(s(x), b))
   minus(x, 0) -> x
   gen(s(x), a) -> c(half(s(s(0))), gen(x, a))


----------------------------------------

(8) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:s_1 = 
MINUS_2 = 1
a = 
b = 
c_2 = 
half_1 = 
div_2 = 1
0 = 
minus_2 = 1
gen_2 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
MINUS(x1, x2)  =  MINUS(x1)

s(x1)  =  s(x1)

div(x1, x2)  =  x1

minus(x1, x2)  =  x1

0  =  0


Recursive path order with status [RPO].
Quasi-Precedence: trivial

Status: MINUS_1: [1]
s_1: multiset status
0: multiset status


----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s0(x)) -> MINUS(x)

The TRS R consists of the following rules:

   div(00) -> 00
   gen0(s0(x), b0) -> gen0(x, a0)
   half0(s0(s0(x))) -> div(x)
   div(s0(x)) -> s0(div(minus(x)))
   gen0(s0(x), a0) -> c0(s0(s0(00)), gen0(s0(x), b0))
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   gen0(s0(x), a0) -> c0(half0(s0(s0(00))), gen0(x, a0))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(10) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   MINUS(s0(x)) -> MINUS(x)

Strictly oriented rules of the TRS R:

   half0(s0(s0(x))) -> div(x)
   minus(s0(x)) -> minus(x)

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(MINUS(x_1)) = x_1
   POL(a0) = 1
   POL(b0) = 0
   POL(c0(x_1, x_2)) = x_1 + x_2
   POL(div(x_1)) = x_1
   POL(gen0(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(half0(x_1)) = x_1
   POL(minus(x_1)) = x_1
   POL(s0(x_1)) = 1 + x_1


----------------------------------------

(11)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   div(00) -> 00
   gen0(s0(x), b0) -> gen0(x, a0)
   div(s0(x)) -> s0(div(minus(x)))
   gen0(s0(x), a0) -> c0(s0(s0(00)), gen0(s0(x), b0))
   minus(x) -> x
   gen0(s0(x), a0) -> c0(half0(s0(s0(00))), gen0(x, a0))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Relative ADP Problem with
absolute ADPs:

   div(s(x), s(y)) -> s(DIV(minus(x, y), s(y)))

and relative ADPs:

   div(0, s(y)) -> 0
   gen(s(x), b) -> gen(x, a)
   half(s(s(x))) -> div(x, s(s(0)))
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   gen(s(x), a) -> c(s(s(0)), gen(s(x), b))
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   gen(s(x), a) -> c(half(s(s(0))), gen(x, a))


----------------------------------------

(15) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:s_1 = 
a = 
b = 
c_2 = 
half_1 = 
div_2 = 
0 = 
minus_2 = 1
gen_2 = 
DIV_2 = 1

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
DIV(x1, x2)  =  DIV(x1)

s(x1)  =  s(x1)

minus(x1, x2)  =  x1

0  =  0

div(x1, x2)  =  div(x1, x2)


Recursive path order with status [RPO].
Quasi-Precedence: DIV_1 > s_1
div_2 > 0 > s_1

Status: DIV_1: [1]
s_1: multiset status
0: multiset status
div_2: [2,1]


----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(s0(x)) -> DIV(minus(x))

The TRS R consists of the following rules:

   div0(00, s0(y)) -> 00
   gen0(s0(x), b0) -> gen0(x, a0)
   half0(s0(s0(x))) -> div0(x, s0(s0(00)))
   div0(s0(x), s0(y)) -> s0(div0(minus(x), s0(y)))
   gen0(s0(x), a0) -> c0(s0(s0(00)), gen0(s0(x), b0))
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   gen0(s0(x), a0) -> c0(half0(s0(s0(00))), gen0(x, a0))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(17) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   DIV(s0(x)) -> DIV(minus(x))

Strictly oriented rules of the TRS R:

   div0(00, s0(y)) -> 00
   minus(s0(x)) -> minus(x)

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(DIV(x_1)) = x_1
   POL(a0) = 1
   POL(b0) = 0
   POL(c0(x_1, x_2)) = x_1 + x_2
   POL(div0(x_1, x_2)) = x_1 + x_2
   POL(gen0(x_1, x_2)) = 2 + 2*x_1 + 2*x_2
   POL(half0(x_1)) = x_1
   POL(minus(x_1)) = x_1
   POL(s0(x_1)) = 1 + x_1


----------------------------------------

(18)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   gen0(s0(x), b0) -> gen0(x, a0)
   half0(s0(s0(x))) -> div0(x, s0(s0(00)))
   div0(s0(x), s0(y)) -> s0(div0(minus(x), s0(y)))
   gen0(s0(x), a0) -> c0(s0(s0(00)), gen0(s0(x), b0))
   minus(x) -> x
   gen0(s0(x), a0) -> c0(half0(s0(s0(00))), gen0(x, a0))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Relative ADP Problem with
absolute ADPs:

   half(s(s(x))) -> DIV(x, s(s(0)))

and relative ADPs:

   div(0, s(y)) -> 0
   gen(s(x), a) -> c(s(s(0)), GEN(s(x), b))
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   gen(s(x), b) -> GEN(x, a)
   gen(s(x), a) -> c(HALF(s(s(0))), GEN(x, a))
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x


----------------------------------------

(22) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   half(s(s(x))) -> DIV(x, s(s(0)))

Relative ADPs:

   div(0, s(y)) -> 0
   gen(s(x), b) -> GEN(x, a)
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(DIV(x_1, x_2)) = 3 + x_1
   POL(GEN(x_1, x_2)) = 2*x_1
   POL(HALF(x_1)) = x_1
   POL(MINUS(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(a) = 0
   POL(b) = 0
   POL(c(x_1, x_2)) = 0
   POL(div(x_1, x_2)) = x_1
   POL(gen(x_1, x_2)) = 2*x_1
   POL(half(x_1)) = x_1
   POL(minus(x_1, x_2)) = x_1
   POL(s(x_1)) = 2 + x_1

----------------------------------------

(23)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   div(0, s(y)) -> 0
   gen(s(x), a) -> c(s(s(0)), GEN(s(x), b))
   gen(s(x), b) -> gen(x, a)
   half(s(s(x))) -> div(x, s(s(0)))
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   gen(s(x), a) -> c(HALF(s(s(0))), GEN(x, a))
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x


----------------------------------------

(24) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(25)
YES
