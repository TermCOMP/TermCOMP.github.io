YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/TwDJN.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRS S Cleaner [EQUIVALENT, 0 ms]
(2) RelTRS
(3) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(4) RelADPP
(5) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(6) RelADPP
(7) RelADPReductionPairProof [EQUIVALENT, 40 ms]
(8) RelADPP
(9) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(10) RelADPP
(11) RelADPReductionPairProof [EQUIVALENT, 8 ms]
(12) RelADPP
(13) RelADPReductionPairProof [EQUIVALENT, 0 ms]
(14) RelADPP
(15) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(16) TRUE


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   topB(i, N1(x), y) -> topA(1, T1(x), y)
   topA(i, x, N2(y)) -> topB(0, x, T2(y))
   topB(i, S1(x), y) -> topA(i, N1(x), y)
   topA(i, x, S2(y)) -> topB(i, x, N2(y))
   topA(i, N1(x), T2(y)) -> topB(i, N1(x), S2(y))
   topA(1, T1(x), T2(y)) -> topB(1, T1(x), S2(y))

The relative TRS consists of the following S rules:

   topB(i, x, N2(y)) -> topB(i, x, N2(C(y)))
   topA(i, S1(x), y) -> topA(i, N1(x), y)
   topB(i, x, S2(y)) -> topB(i, x, N2(y))
   topB(i, x, N2(y)) -> topB(0, x, T2(y))
   topA(i, T1(x), y) -> topA(i, T1(x), y)
   topB(1, T1(x), T2(y)) -> topB(1, T1(x), S2(y))
   topB(i, N1(x), T2(y)) -> topB(i, N1(x), S2(y))
   topA(i, N1(x), y) -> topA(i, N1(C(x)), y)
   topB(i, x, T2(y)) -> topB(i, x, T2(y))
   topB(i, x, S2(y)) -> topB(i, x, S2(D(y)))
   topA(i, N1(x), y) -> topA(1, T1(x), y)


----------------------------------------

(1) RelTRS S Cleaner (EQUIVALENT)
We have deleted all rules from S that have the shape t -> t:

   topA(i, T1(x), y) -> topA(i, T1(x), y)
   topB(i, x, T2(y)) -> topB(i, x, T2(y))


----------------------------------------

(2)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   topB(i, N1(x), y) -> topA(1, T1(x), y)
   topA(i, x, N2(y)) -> topB(0, x, T2(y))
   topB(i, S1(x), y) -> topA(i, N1(x), y)
   topA(i, x, S2(y)) -> topB(i, x, N2(y))
   topA(i, N1(x), T2(y)) -> topB(i, N1(x), S2(y))
   topA(1, T1(x), T2(y)) -> topB(1, T1(x), S2(y))

The relative TRS consists of the following S rules:

   topB(i, x, N2(y)) -> topB(i, x, N2(C(y)))
   topA(i, S1(x), y) -> topA(i, N1(x), y)
   topB(i, x, S2(y)) -> topB(i, x, N2(y))
   topB(i, x, N2(y)) -> topB(0, x, T2(y))
   topB(1, T1(x), T2(y)) -> topB(1, T1(x), S2(y))
   topB(i, N1(x), T2(y)) -> topB(i, N1(x), S2(y))
   topA(i, N1(x), y) -> topA(i, N1(C(x)), y)
   topB(i, x, S2(y)) -> topB(i, x, S2(D(y)))
   topA(i, N1(x), y) -> topA(1, T1(x), y)


----------------------------------------

(3) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(4)
Obligation:
Relative ADP Problem with
absolute ADPs:

   topB(i, N1(x), y) -> TOPA(1, T1(x), y)
   topA(i, x, N2(y)) -> TOPB(0, x, T2(y))
   topB(i, S1(x), y) -> TOPA(i, N1(x), y)
   topA(i, x, S2(y)) -> TOPB(i, x, N2(y))
   topA(i, N1(x), T2(y)) -> TOPB(i, N1(x), S2(y))
   topA(1, T1(x), T2(y)) -> TOPB(1, T1(x), S2(y))

and relative ADPs:

   topB(i, x, N2(y)) -> TOPB(i, x, N2(C(y)))
   topA(i, S1(x), y) -> TOPA(i, N1(x), y)
   topB(i, x, S2(y)) -> TOPB(i, x, N2(y))
   topB(i, x, N2(y)) -> TOPB(0, x, T2(y))
   topB(1, T1(x), T2(y)) -> TOPB(1, T1(x), S2(y))
   topB(i, N1(x), T2(y)) -> TOPB(i, N1(x), S2(y))
   topA(i, N1(x), y) -> TOPA(i, N1(C(x)), y)
   topB(i, x, S2(y)) -> TOPB(i, x, S2(D(y)))
   topA(i, N1(x), y) -> TOPA(1, T1(x), y)


----------------------------------------

(5) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 1 subproblem.

----------------------------------------

(6)
Obligation:
Relative ADP Problem with
absolute ADPs:

   topA(i, N1(x), T2(y)) -> TOPB(i, N1(x), S2(y))
   topB(i, S1(x), y) -> TOPA(i, N1(x), y)
   topA(1, T1(x), T2(y)) -> TOPB(1, T1(x), S2(y))
   topB(i, N1(x), y) -> TOPA(1, T1(x), y)
   topA(i, x, S2(y)) -> TOPB(i, x, N2(y))
   topA(i, x, N2(y)) -> TOPB(0, x, T2(y))

and relative ADPs:

   topA(i, S1(x), y) -> topA(i, N1(x), y)
   topB(i, N1(x), T2(y)) -> TOPB(i, N1(x), S2(y))
   topB(i, x, S2(y)) -> TOPB(i, x, N2(y))
   topB(1, T1(x), T2(y)) -> topB(1, T1(x), S2(y))
   topA(i, N1(x), y) -> TOPA(1, T1(x), y)
   topA(i, N1(x), y) -> TOPA(i, N1(C(x)), y)
   topB(i, x, N2(y)) -> TOPB(0, x, T2(y))
   topB(i, x, S2(y)) -> TOPB(i, x, S2(D(y)))
   topB(i, x, N2(y)) -> TOPB(i, x, N2(C(y)))


----------------------------------------

(7) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   topB(i, S1(x), y) -> TOPA(i, N1(x), y)

Relative ADPs:

   topA(i, S1(x), y) -> topA(i, N1(x), y)
   topB(1, T1(x), T2(y)) -> topB(1, T1(x), S2(y))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   topA(i, N1(x), T2(y)) -> TOPB(i, N1(x), S2(y))
   topA(1, T1(x), T2(y)) -> TOPB(1, T1(x), S2(y))
   topB(i, N1(x), y) -> TOPA(1, T1(x), y)
   topA(i, x, S2(y)) -> TOPB(i, x, N2(y))
   topA(i, x, N2(y)) -> TOPB(0, x, T2(y))

Relative ADPs:

   topB(i, N1(x), T2(y)) -> TOPB(i, N1(x), S2(y))
   topB(i, x, S2(y)) -> TOPB(i, x, N2(y))
   topA(i, N1(x), y) -> TOPA(1, T1(x), y)
   topA(i, N1(x), y) -> TOPA(i, N1(C(x)), y)
   topB(i, x, N2(y)) -> TOPB(0, x, T2(y))
   topB(i, x, S2(y)) -> TOPB(i, x, S2(D(y)))
   topB(i, x, N2(y)) -> TOPB(i, x, N2(C(y)))


Ordered with Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(1) = 0
   POL(C(x_1)) = 0
   POL(D(x_1)) = 0
   POL(N1(x_1)) = 2*x_1
   POL(N2(x_1)) = 0
   POL(S1(x_1)) = 1 + 2*x_1
   POL(S2(x_1)) = 0
   POL(T1(x_1)) = 0
   POL(T2(x_1)) = 0
   POL(TOPA(x_1, x_2, x_3)) = 1 + 2*x_2
   POL(TOPB(x_1, x_2, x_3)) = 1 + 2*x_2
   POL(topA(x_1, x_2, x_3)) = x_2
   POL(topB(x_1, x_2, x_3)) = x_2

----------------------------------------

(8)
Obligation:
Relative ADP Problem with
absolute ADPs:

   topA(i, N1(x), T2(y)) -> TOPB(i, N1(x), S2(y))
   topA(1, T1(x), T2(y)) -> TOPB(1, T1(x), S2(y))
   topB(i, N1(x), y) -> TOPA(1, T1(x), y)
   topA(i, x, S2(y)) -> TOPB(i, x, N2(y))
   topA(i, x, N2(y)) -> TOPB(0, x, T2(y))

and relative ADPs:

   topA(i, S1(x), y) -> topA(i, N1(x), y)
   topB(i, N1(x), T2(y)) -> TOPB(i, N1(x), S2(y))
   topB(i, x, S2(y)) -> TOPB(i, x, N2(y))
   topB(1, T1(x), T2(y)) -> topB(1, T1(x), S2(y))
   topA(i, N1(x), y) -> TOPA(1, T1(x), y)
   topA(i, N1(x), y) -> TOPA(i, N1(C(x)), y)
   topB(i, x, N2(y)) -> TOPB(0, x, T2(y))
   topB(i, x, S2(y)) -> TOPB(i, x, S2(D(y)))
   topB(i, x, N2(y)) -> TOPB(i, x, N2(C(y)))
   topB(i, S1(x), y) -> topA(i, N1(x), y)


----------------------------------------

(9) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 1 subproblem.

----------------------------------------

(10)
Obligation:
Relative ADP Problem with
absolute ADPs:

   topA(1, T1(x), T2(y)) -> TOPB(1, T1(x), S2(y))
   topB(i, N1(x), y) -> TOPA(1, T1(x), y)
   topA(i, x, S2(y)) -> TOPB(i, x, N2(y))
   topA(i, x, N2(y)) -> TOPB(0, x, T2(y))

and relative ADPs:

   topA(i, S1(x), y) -> topA(i, N1(x), y)
   topB(i, N1(x), T2(y)) -> TOPB(i, N1(x), S2(y))
   topB(i, x, S2(y)) -> TOPB(i, x, N2(y))
   topB(1, T1(x), T2(y)) -> topB(1, T1(x), S2(y))
   topA(i, N1(x), T2(y)) -> topB(i, N1(x), S2(y))
   topB(i, x, N2(y)) -> TOPB(0, x, T2(y))
   topB(i, x, S2(y)) -> TOPB(i, x, S2(D(y)))
   topA(i, N1(x), y) -> topA(i, N1(C(x)), y)
   topB(i, x, N2(y)) -> TOPB(i, x, N2(C(y)))
   topB(i, S1(x), y) -> topA(i, N1(x), y)
   topA(i, N1(x), y) -> topA(1, T1(x), y)


----------------------------------------

(11) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   topA(1, T1(x), T2(y)) -> TOPB(1, T1(x), S2(y))

Relative ADPs:

   topA(i, S1(x), y) -> topA(i, N1(x), y)
   topB(1, T1(x), T2(y)) -> topB(1, T1(x), S2(y))
   topA(i, N1(x), T2(y)) -> topB(i, N1(x), S2(y))
   topA(i, N1(x), y) -> topA(i, N1(C(x)), y)
   topB(i, S1(x), y) -> topA(i, N1(x), y)
   topA(i, N1(x), y) -> topA(1, T1(x), y)


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   topB(i, N1(x), y) -> TOPA(1, T1(x), y)
   topA(i, x, S2(y)) -> TOPB(i, x, N2(y))
   topA(i, x, N2(y)) -> TOPB(0, x, T2(y))

Relative ADPs:

   topB(i, N1(x), T2(y)) -> TOPB(i, N1(x), S2(y))
   topB(i, x, S2(y)) -> TOPB(i, x, N2(y))
   topB(i, x, N2(y)) -> TOPB(0, x, T2(y))
   topB(i, x, S2(y)) -> TOPB(i, x, S2(D(y)))
   topB(i, x, N2(y)) -> TOPB(i, x, N2(C(y)))


Ordered with Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(1) = 2
   POL(C(x_1)) = 0
   POL(D(x_1)) = 0
   POL(N1(x_1)) = 2 + 3*x_1
   POL(N2(x_1)) = 0
   POL(S1(x_1)) = 3 + 3*x_1
   POL(S2(x_1)) = 0
   POL(T1(x_1)) = 0
   POL(T2(x_1)) = 0
   POL(TOPA(x_1, x_2, x_3)) = 2*x_1 + 2*x_2
   POL(TOPB(x_1, x_2, x_3)) = 2*x_2
   POL(topA(x_1, x_2, x_3)) = 3 + 3*x_2
   POL(topB(x_1, x_2, x_3)) = 3 + 3*x_2

----------------------------------------

(12)
Obligation:
Relative ADP Problem with
absolute ADPs:

   topB(i, N1(x), y) -> TOPA(1, T1(x), y)
   topA(i, x, S2(y)) -> TOPB(i, x, N2(y))
   topA(i, x, N2(y)) -> TOPB(0, x, T2(y))

and relative ADPs:

   topA(i, S1(x), y) -> topA(i, N1(x), y)
   topA(1, T1(x), T2(y)) -> topB(1, T1(x), S2(y))
   topB(i, N1(x), T2(y)) -> TOPB(i, N1(x), S2(y))
   topB(i, x, S2(y)) -> TOPB(i, x, N2(y))
   topB(1, T1(x), T2(y)) -> topB(1, T1(x), S2(y))
   topA(i, N1(x), T2(y)) -> topB(i, N1(x), S2(y))
   topB(i, x, N2(y)) -> TOPB(0, x, T2(y))
   topB(i, x, S2(y)) -> TOPB(i, x, S2(D(y)))
   topA(i, N1(x), y) -> topA(i, N1(C(x)), y)
   topB(i, x, N2(y)) -> TOPB(i, x, N2(C(y)))
   topB(i, S1(x), y) -> topA(i, N1(x), y)
   topA(i, N1(x), y) -> topA(1, T1(x), y)


----------------------------------------

(13) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   topB(i, N1(x), y) -> TOPA(1, T1(x), y)

Relative ADPs:

   topA(i, S1(x), y) -> topA(i, N1(x), y)
   topA(1, T1(x), T2(y)) -> topB(1, T1(x), S2(y))
   topB(1, T1(x), T2(y)) -> topB(1, T1(x), S2(y))
   topA(i, N1(x), T2(y)) -> topB(i, N1(x), S2(y))
   topA(i, N1(x), y) -> topA(i, N1(C(x)), y)
   topB(i, S1(x), y) -> topA(i, N1(x), y)
   topA(i, N1(x), y) -> topA(1, T1(x), y)


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   topA(i, x, S2(y)) -> TOPB(i, x, N2(y))
   topA(i, x, N2(y)) -> TOPB(0, x, T2(y))

Relative ADPs:

   topB(i, N1(x), T2(y)) -> TOPB(i, N1(x), S2(y))
   topB(i, x, S2(y)) -> TOPB(i, x, N2(y))
   topB(i, x, N2(y)) -> TOPB(0, x, T2(y))
   topB(i, x, S2(y)) -> TOPB(i, x, S2(D(y)))
   topB(i, x, N2(y)) -> TOPB(i, x, N2(C(y)))


Ordered with Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(1) = 0
   POL(C(x_1)) = 0
   POL(D(x_1)) = 0
   POL(N1(x_1)) = 1 + 2*x_1
   POL(N2(x_1)) = 0
   POL(S1(x_1)) = 0
   POL(S2(x_1)) = 0
   POL(T1(x_1)) = 0
   POL(T2(x_1)) = 0
   POL(TOPA(x_1, x_2, x_3)) = 2*x_2
   POL(TOPB(x_1, x_2, x_3)) = x_2
   POL(topA(x_1, x_2, x_3)) = 0
   POL(topB(x_1, x_2, x_3)) = 0

----------------------------------------

(14)
Obligation:
Relative ADP Problem with
absolute ADPs:

   topA(i, x, S2(y)) -> TOPB(i, x, N2(y))
   topA(i, x, N2(y)) -> TOPB(0, x, T2(y))

and relative ADPs:

   topB(i, N1(x), T2(y)) -> TOPB(i, N1(x), S2(y))
   topB(i, N1(x), y) -> topA(1, T1(x), y)
   topB(i, x, N2(y)) -> TOPB(i, x, N2(C(y)))
   topA(i, N1(x), y) -> topA(1, T1(x), y)
   topA(i, S1(x), y) -> topA(i, N1(x), y)
   topA(1, T1(x), T2(y)) -> topB(1, T1(x), S2(y))
   topB(i, x, S2(y)) -> TOPB(i, x, N2(y))
   topB(1, T1(x), T2(y)) -> topB(1, T1(x), S2(y))
   topA(i, N1(x), T2(y)) -> topB(i, N1(x), S2(y))
   topB(i, x, N2(y)) -> TOPB(0, x, T2(y))
   topB(i, x, S2(y)) -> TOPB(i, x, S2(D(y)))
   topA(i, N1(x), y) -> topA(i, N1(C(x)), y)
   topB(i, S1(x), y) -> topA(i, N1(x), y)


----------------------------------------

(15) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 0 subproblems.

----------------------------------------

(16)
TRUE
