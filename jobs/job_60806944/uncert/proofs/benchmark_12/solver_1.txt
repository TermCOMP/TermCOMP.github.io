YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Bft00.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) RelADPP
        (6) RelADPCleverAfsProof [SOUND, 104 ms]
        (7) QDP
        (8) MRRProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) MRRProof [EQUIVALENT, 5 ms]
        (11) QDP
        (12) MRRProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) PisEmptyProof [EQUIVALENT, 0 ms]
        (15) YES
    (16) RelADPP
        (17) RelADPCleverAfsProof [SOUND, 89 ms]
        (18) QDP
        (19) MRRProof [EQUIVALENT, 12 ms]
        (20) QDP
        (21) MRRProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) DependencyGraphProof [EQUIVALENT, 0 ms]
        (24) TRUE
    (25) RelADPP
        (26) RelADPCleverAfsProof [SOUND, 117 ms]
        (27) QDP
        (28) MRRProof [EQUIVALENT, 0 ms]
        (29) QDP
        (30) DependencyGraphProof [EQUIVALENT, 0 ms]
        (31) TRUE
    (32) RelADPP
        (33) RelADPReductionPairProof [EQUIVALENT, 77 ms]
        (34) RelADPP
        (35) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (36) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   minus(0, y) -> 0
   minus(s(x), y) -> if_minus(le(s(x), y), s(x), y)
   if_minus(true, s(x), y) -> 0
   if_minus(false, s(x), y) -> s(minus(x, y))
   gcd(0, y) -> y
   gcd(s(x), 0) -> s(x)
   gcd(s(x), s(y)) -> if_gcd(le(y, x), s(x), s(y))
   if_gcd(true, s(x), s(y)) -> gcd(minus(x, y), s(y))
   if_gcd(false, s(x), s(y)) -> gcd(minus(y, x), s(x))
   gcdL(nil) -> 0
   gcdL(cons(x, nil)) -> x
   gcdL(cons(x, cons(y, xs))) -> gcdL(cons(gcd(x, y), xs))

The relative TRS consists of the following S rules:

   gcdL(cons(x, cons(y, xs))) -> gcdL(cons(y, cons(x, xs)))


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> LE(x, y)
   minus(0, y) -> 0
   minus(s(x), y) -> IF_MINUS(le(s(x), y), s(x), y)
   minus(s(x), y) -> if_minus(LE(s(x), y), s(x), y)
   if_minus(true, s(x), y) -> 0
   if_minus(false, s(x), y) -> s(MINUS(x, y))
   gcd(0, y) -> y
   gcd(s(x), 0) -> s(x)
   gcd(s(x), s(y)) -> IF_GCD(le(y, x), s(x), s(y))
   gcd(s(x), s(y)) -> if_gcd(LE(y, x), s(x), s(y))
   if_gcd(true, s(x), s(y)) -> GCD(minus(x, y), s(y))
   if_gcd(true, s(x), s(y)) -> gcd(MINUS(x, y), s(y))
   if_gcd(false, s(x), s(y)) -> GCD(minus(y, x), s(x))
   if_gcd(false, s(x), s(y)) -> gcd(MINUS(y, x), s(x))
   gcdL(nil) -> 0
   gcdL(cons(x, nil)) -> x
   gcdL(cons(x, cons(y, xs))) -> GCDL(cons(gcd(x, y), xs))
   gcdL(cons(x, cons(y, xs))) -> gcdL(cons(GCD(x, y), xs))

and relative ADPs:

   gcdL(cons(x, cons(y, xs))) -> GCDL(cons(y, cons(x, xs)))


----------------------------------------

(3) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  4 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Relative ADP Problem with
absolute ADPs:

   le(s(x), s(y)) -> LE(x, y)

and relative ADPs:

   minus(s(x), y) -> if_minus(le(s(x), y), s(x), y)
   gcdL(cons(x, nil)) -> x
   gcdL(nil) -> 0
   le(s(x), 0) -> false
   gcd(s(x), 0) -> s(x)
   if_gcd(true, s(x), s(y)) -> gcd(minus(x, y), s(y))
   if_gcd(false, s(x), s(y)) -> gcd(minus(y, x), s(x))
   if_minus(true, s(x), y) -> 0
   minus(0, y) -> 0
   gcd(0, y) -> y
   gcd(s(x), s(y)) -> if_gcd(le(y, x), s(x), s(y))
   if_minus(false, s(x), y) -> s(minus(x, y))
   gcdL(cons(x, cons(y, xs))) -> gcdL(cons(gcd(x, y), xs))
   gcdL(cons(x, cons(y, xs))) -> gcdL(cons(y, cons(x, xs)))
   le(0, y) -> true


----------------------------------------

(6) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:true = 
gcd_2 = 
if_gcd_3 = 0
if_minus_3 = 0, 2
nil = 
false = 
s_1 = 
gcdL_1 = 
LE_2 = 0
le_2 = 0, 1
0 = 
minus_2 = 1
cons_2 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
LE(x1, x2)  =  x2

s(x1)  =  s(x1)

minus(x1, x2)  =  minus(x1)

if_minus(x1, x2, x3)  =  if_minus(x2)

le(x1, x2)  =  le

gcd(x1, x2)  =  gcd(x1, x2)

if_gcd(x1, x2, x3)  =  if_gcd(x2, x3)

true  =  true

false  =  false

0  =  0


Recursive path order with status [RPO].
Quasi-Precedence: [gcd_2, if_gcd_2] > le > true > [s_1, minus_1, if_minus_1, 0]
[gcd_2, if_gcd_2] > le > false > [s_1, minus_1, if_minus_1, 0]

Status: s_1: [1]
minus_1: [1]
if_minus_1: [1]
le: []
gcd_2: multiset status
if_gcd_2: multiset status
true: multiset status
false: multiset status
0: multiset status


----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s0(y)) -> LE(y)

The TRS R consists of the following rules:

   minus(s0(x)) -> if_minus(s0(x))
   gcdL0(cons0(x, nil0)) -> x
   gcdL0(nil0) -> 00
   le -> le
   le -> false0
   gcd0(s0(x), 00) -> s0(x)
   if_gcd(s0(x), s0(y)) -> gcd0(minus(x), s0(y))
   if_gcd(s0(x), s0(y)) -> gcd0(minus(y), s0(x))
   if_minus(s0(x)) -> 00
   minus(00) -> 00
   gcd0(00, y) -> y
   gcd0(s0(x), s0(y)) -> if_gcd(s0(x), s0(y))
   if_minus(s0(x)) -> s0(minus(x))
   gcdL0(cons0(x, cons0(y, xs))) -> gcdL0(cons0(gcd0(x, y), xs))
   gcdL0(cons0(x, cons0(y, xs))) -> gcdL0(cons0(y, cons0(x, xs)))
   le -> true0

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(8) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   gcdL0(cons0(x, nil0)) -> x
   gcdL0(nil0) -> 00

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(LE(x_1)) = x_1
   POL(cons0(x_1, x_2)) = x_1 + x_2
   POL(false0) = 2
   POL(gcd0(x_1, x_2)) = x_1 + x_2
   POL(gcdL0(x_1)) = 2 + 2*x_1
   POL(if_gcd(x_1, x_2)) = x_1 + x_2
   POL(if_minus(x_1)) = x_1
   POL(le) = 2
   POL(minus(x_1)) = x_1
   POL(nil0) = 1
   POL(s0(x_1)) = 2*x_1
   POL(true0) = 2


----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s0(y)) -> LE(y)

The TRS R consists of the following rules:

   minus(s0(x)) -> if_minus(s0(x))
   le -> le
   le -> false0
   gcd0(s0(x), 00) -> s0(x)
   if_gcd(s0(x), s0(y)) -> gcd0(minus(x), s0(y))
   if_gcd(s0(x), s0(y)) -> gcd0(minus(y), s0(x))
   if_minus(s0(x)) -> 00
   minus(00) -> 00
   gcd0(00, y) -> y
   gcd0(s0(x), s0(y)) -> if_gcd(s0(x), s0(y))
   if_minus(s0(x)) -> s0(minus(x))
   gcdL0(cons0(x, cons0(y, xs))) -> gcdL0(cons0(gcd0(x, y), xs))
   gcdL0(cons0(x, cons0(y, xs))) -> gcdL0(cons0(y, cons0(x, xs)))
   le -> true0

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(10) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   gcd0(s0(x), 00) -> s0(x)
   gcd0(00, y) -> y
   gcdL0(cons0(x, cons0(y, xs))) -> gcdL0(cons0(gcd0(x, y), xs))

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(LE(x_1)) = x_1
   POL(cons0(x_1, x_2)) = 2 + x_1 + x_2
   POL(false0) = 2
   POL(gcd0(x_1, x_2)) = 1 + x_1 + x_2
   POL(gcdL0(x_1)) = x_1
   POL(if_gcd(x_1, x_2)) = 1 + x_1 + x_2
   POL(if_minus(x_1)) = 2*x_1
   POL(le) = 2
   POL(minus(x_1)) = 2*x_1
   POL(s0(x_1)) = 2*x_1
   POL(true0) = 2


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s0(y)) -> LE(y)

The TRS R consists of the following rules:

   minus(s0(x)) -> if_minus(s0(x))
   le -> le
   le -> false0
   if_gcd(s0(x), s0(y)) -> gcd0(minus(x), s0(y))
   if_gcd(s0(x), s0(y)) -> gcd0(minus(y), s0(x))
   if_minus(s0(x)) -> 00
   minus(00) -> 00
   gcd0(s0(x), s0(y)) -> if_gcd(s0(x), s0(y))
   if_minus(s0(x)) -> s0(minus(x))
   gcdL0(cons0(x, cons0(y, xs))) -> gcdL0(cons0(y, cons0(x, xs)))
   le -> true0

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   LE(s0(y)) -> LE(y)

Strictly oriented rules of the TRS R:

   if_minus(s0(x)) -> 00
   gcd0(s0(x), s0(y)) -> if_gcd(s0(x), s0(y))

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(LE(x_1)) = x_1
   POL(cons0(x_1, x_2)) = x_1 + x_2
   POL(false0) = 2
   POL(gcd0(x_1, x_2)) = 2 + x_1 + x_2
   POL(gcdL0(x_1)) = x_1
   POL(if_gcd(x_1, x_2)) = x_1 + x_2
   POL(if_minus(x_1)) = x_1
   POL(le) = 2
   POL(minus(x_1)) = x_1
   POL(s0(x_1)) = 2 + 2*x_1
   POL(true0) = 2


----------------------------------------

(13)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   minus(s0(x)) -> if_minus(s0(x))
   le -> le
   le -> false0
   if_gcd(s0(x), s0(y)) -> gcd0(minus(x), s0(y))
   if_gcd(s0(x), s0(y)) -> gcd0(minus(y), s0(x))
   minus(00) -> 00
   if_minus(s0(x)) -> s0(minus(x))
   gcdL0(cons0(x, cons0(y, xs))) -> gcdL0(cons0(y, cons0(x, xs)))
   le -> true0

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(14) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
Relative ADP Problem with
absolute ADPs:

   if_minus(false, s(x), y) -> s(MINUS(x, y))
   minus(s(x), y) -> IF_MINUS(le(s(x), y), s(x), y)

and relative ADPs:

   minus(s(x), y) -> if_minus(le(s(x), y), s(x), y)
   gcdL(cons(x, nil)) -> x
   gcdL(nil) -> 0
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false
   gcd(s(x), 0) -> s(x)
   if_gcd(true, s(x), s(y)) -> gcd(minus(x, y), s(y))
   if_gcd(false, s(x), s(y)) -> gcd(minus(y, x), s(x))
   if_minus(true, s(x), y) -> 0
   minus(0, y) -> 0
   gcd(0, y) -> y
   gcd(s(x), s(y)) -> if_gcd(le(y, x), s(x), s(y))
   gcdL(cons(x, cons(y, xs))) -> gcdL(cons(gcd(x, y), xs))
   gcdL(cons(x, cons(y, xs))) -> gcdL(cons(y, cons(x, xs)))
   le(0, y) -> true


----------------------------------------

(17) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:MINUS_2 = 
true = 
gcd_2 = 
IF_MINUS_3 = 0
if_gcd_3 = 0
if_minus_3 = 0, 2
false = 
nil = 
s_1 = 
gcdL_1 = 
le_2 = 0, 1
0 = 
minus_2 = 1
cons_2 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
IF_MINUS(x1, x2, x3)  =  IF_MINUS(x2, x3)

false  =  false

s(x1)  =  s(x1)

MINUS(x1, x2)  =  MINUS(x1, x2)

le(x1, x2)  =  le

0  =  0

true  =  true

if_gcd(x1, x2, x3)  =  if_gcd(x2, x3)

gcd(x1, x2)  =  gcd(x1, x2)

minus(x1, x2)  =  minus(x1)

if_minus(x1, x2, x3)  =  if_minus(x2)


Recursive path order with status [RPO].
Quasi-Precedence: [IF_MINUS_2, MINUS_2] > [s_1, 0, minus_1, if_minus_1] > false
le > [true, if_gcd_2, gcd_2] > [s_1, 0, minus_1, if_minus_1] > false

Status: IF_MINUS_2: [1,2]
false: multiset status
s_1: multiset status
MINUS_2: [1,2]
le: multiset status
0: multiset status
true: multiset status
if_gcd_2: multiset status
gcd_2: multiset status
minus_1: multiset status
if_minus_1: multiset status


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF_MINUS(s0(x), y) -> MINUS0(x, y)
   MINUS0(s0(x), y) -> IF_MINUS(s0(x), y)

The TRS R consists of the following rules:

   minus(s0(x)) -> if_minus(s0(x))
   gcdL0(cons0(x, nil0)) -> x
   gcdL0(nil0) -> 00
   le -> le
   le -> false0
   gcd0(s0(x), 00) -> s0(x)
   if_gcd(s0(x), s0(y)) -> gcd0(minus(x), s0(y))
   if_gcd(s0(x), s0(y)) -> gcd0(minus(y), s0(x))
   if_minus(s0(x)) -> 00
   minus(00) -> 00
   gcd0(00, y) -> y
   gcd0(s0(x), s0(y)) -> if_gcd(s0(x), s0(y))
   if_minus(s0(x)) -> s0(minus(x))
   gcdL0(cons0(x, cons0(y, xs))) -> gcdL0(cons0(gcd0(x, y), xs))
   gcdL0(cons0(x, cons0(y, xs))) -> gcdL0(cons0(y, cons0(x, xs)))
   le -> true0

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   gcdL0(cons0(x, nil0)) -> x
   gcdL0(nil0) -> 00
   gcdL0(cons0(x, cons0(y, xs))) -> gcdL0(cons0(gcd0(x, y), xs))

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(IF_MINUS(x_1, x_2)) = x_1 + x_2
   POL(MINUS0(x_1, x_2)) = x_1 + x_2
   POL(cons0(x_1, x_2)) = 1 + 2*x_1 + x_2
   POL(false0) = 2
   POL(gcd0(x_1, x_2)) = x_1 + x_2
   POL(gcdL0(x_1)) = 2 + 2*x_1
   POL(if_gcd(x_1, x_2)) = x_1 + x_2
   POL(if_minus(x_1)) = 2*x_1
   POL(le) = 2
   POL(minus(x_1)) = 2*x_1
   POL(nil0) = 1
   POL(s0(x_1)) = 2*x_1
   POL(true0) = 2


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF_MINUS(s0(x), y) -> MINUS0(x, y)
   MINUS0(s0(x), y) -> IF_MINUS(s0(x), y)

The TRS R consists of the following rules:

   minus(s0(x)) -> if_minus(s0(x))
   le -> le
   le -> false0
   gcd0(s0(x), 00) -> s0(x)
   if_gcd(s0(x), s0(y)) -> gcd0(minus(x), s0(y))
   if_gcd(s0(x), s0(y)) -> gcd0(minus(y), s0(x))
   if_minus(s0(x)) -> 00
   minus(00) -> 00
   gcd0(00, y) -> y
   gcd0(s0(x), s0(y)) -> if_gcd(s0(x), s0(y))
   if_minus(s0(x)) -> s0(minus(x))
   gcdL0(cons0(x, cons0(y, xs))) -> gcdL0(cons0(y, cons0(x, xs)))
   le -> true0

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   IF_MINUS(s0(x), y) -> MINUS0(x, y)

Strictly oriented rules of the TRS R:

   gcd0(s0(x), 00) -> s0(x)
   if_gcd(s0(x), s0(y)) -> gcd0(minus(x), s0(y))
   if_gcd(s0(x), s0(y)) -> gcd0(minus(y), s0(x))
   if_minus(s0(x)) -> 00
   minus(00) -> 00
   gcd0(00, y) -> y
   gcd0(s0(x), s0(y)) -> if_gcd(s0(x), s0(y))
   if_minus(s0(x)) -> s0(minus(x))

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 1
   POL(IF_MINUS(x_1, x_2)) = 2*x_1 + x_2
   POL(MINUS0(x_1, x_2)) = 2*x_1 + x_2
   POL(cons0(x_1, x_2)) = x_1 + x_2
   POL(false0) = 2
   POL(gcd0(x_1, x_2)) = 1 + 2*x_1 + 2*x_2
   POL(gcdL0(x_1)) = x_1
   POL(if_gcd(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(if_minus(x_1)) = 2*x_1
   POL(le) = 2
   POL(minus(x_1)) = 2*x_1
   POL(s0(x_1)) = 1 + 2*x_1
   POL(true0) = 2


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS0(s0(x), y) -> IF_MINUS(s0(x), y)

The TRS R consists of the following rules:

   minus(s0(x)) -> if_minus(s0(x))
   le -> le
   le -> false0
   gcdL0(cons0(x, cons0(y, xs))) -> gcdL0(cons0(y, cons0(x, xs)))
   le -> true0

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(23) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(24)
TRUE

----------------------------------------

(25)
Obligation:
Relative ADP Problem with
absolute ADPs:

   if_gcd(true, s(x), s(y)) -> GCD(minus(x, y), s(y))
   gcd(s(x), s(y)) -> IF_GCD(le(y, x), s(x), s(y))
   if_gcd(false, s(x), s(y)) -> GCD(minus(y, x), s(x))

and relative ADPs:

   minus(s(x), y) -> if_minus(le(s(x), y), s(x), y)
   gcdL(cons(x, nil)) -> x
   gcdL(nil) -> 0
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false
   gcd(s(x), 0) -> s(x)
   if_gcd(true, s(x), s(y)) -> gcd(minus(x, y), s(y))
   if_gcd(false, s(x), s(y)) -> gcd(minus(y, x), s(x))
   if_minus(true, s(x), y) -> 0
   minus(0, y) -> 0
   gcd(0, y) -> y
   gcd(s(x), s(y)) -> if_gcd(le(y, x), s(x), s(y))
   if_minus(false, s(x), y) -> s(minus(x, y))
   gcdL(cons(x, cons(y, xs))) -> gcdL(cons(gcd(x, y), xs))
   gcdL(cons(x, cons(y, xs))) -> gcdL(cons(y, cons(x, xs)))
   le(0, y) -> true


----------------------------------------

(26) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:true = 
IF_GCD_3 = 0
gcd_2 = 
if_gcd_3 = 0
if_minus_3 = 0, 2
GCD_2 = 
false = 
nil = 
s_1 = 
gcdL_1 = 
le_2 = 0, 1
0 = 
minus_2 = 1
cons_2 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
IF_GCD(x1, x2, x3)  =  IF_GCD(x2, x3)

false  =  false

s(x1)  =  s(x1)

GCD(x1, x2)  =  GCD(x1, x2)

minus(x1, x2)  =  x1

le(x1, x2)  =  le

true  =  true

if_minus(x1, x2, x3)  =  x2

0  =  0

if_gcd(x1, x2, x3)  =  if_gcd(x2, x3)

gcd(x1, x2)  =  gcd(x1, x2)


Recursive path order with status [RPO].
Quasi-Precedence: [IF_GCD_2, s_1, GCD_2, le, 0, if_gcd_2, gcd_2] > false
[IF_GCD_2, s_1, GCD_2, le, 0, if_gcd_2, gcd_2] > true

Status: IF_GCD_2: multiset status
false: multiset status
s_1: multiset status
GCD_2: multiset status
le: []
true: multiset status
0: multiset status
if_gcd_2: multiset status
gcd_2: multiset status


----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF_GCD(s0(x), s0(y)) -> GCD0(minus(y), s0(x))
   GCD0(s0(x), s0(y)) -> IF_GCD(s0(x), s0(y))
   IF_GCD(s0(x), s0(y)) -> GCD0(minus(x), s0(y))

The TRS R consists of the following rules:

   minus(s0(x)) -> if_minus(s0(x))
   gcdL0(cons0(x, nil0)) -> x
   gcdL0(nil0) -> 00
   le -> le
   le -> false0
   gcd0(s0(x), 00) -> s0(x)
   if_gcd(s0(x), s0(y)) -> gcd0(minus(x), s0(y))
   if_gcd(s0(x), s0(y)) -> gcd0(minus(y), s0(x))
   if_minus(s0(x)) -> 00
   minus(00) -> 00
   gcd0(00, y) -> y
   gcd0(s0(x), s0(y)) -> if_gcd(s0(x), s0(y))
   if_minus(s0(x)) -> s0(minus(x))
   gcdL0(cons0(x, cons0(y, xs))) -> gcdL0(cons0(gcd0(x, y), xs))
   gcdL0(cons0(x, cons0(y, xs))) -> gcdL0(cons0(y, cons0(x, xs)))
   le -> true0

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(28) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   GCD0(s0(x), s0(y)) -> IF_GCD(s0(x), s0(y))

Strictly oriented rules of the TRS R:

   gcdL0(cons0(x, nil0)) -> x
   gcdL0(nil0) -> 00
   gcd0(s0(x), 00) -> s0(x)
   minus(00) -> 00
   gcd0(00, y) -> y
   gcd0(s0(x), s0(y)) -> if_gcd(s0(x), s0(y))
   if_minus(s0(x)) -> s0(minus(x))
   gcdL0(cons0(x, cons0(y, xs))) -> gcdL0(cons0(gcd0(x, y), xs))

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 2
   POL(GCD0(x_1, x_2)) = 2 + x_1 + x_2
   POL(IF_GCD(x_1, x_2)) = 1 + x_1 + x_2
   POL(cons0(x_1, x_2)) = 2 + x_1 + x_2
   POL(false0) = 2
   POL(gcd0(x_1, x_2)) = 1 + x_1 + x_2
   POL(gcdL0(x_1)) = 2 + 2*x_1
   POL(if_gcd(x_1, x_2)) = x_1 + x_2
   POL(if_minus(x_1)) = 2*x_1
   POL(le) = 2
   POL(minus(x_1)) = 2*x_1
   POL(nil0) = 1
   POL(s0(x_1)) = 1 + 2*x_1
   POL(true0) = 2


----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF_GCD(s0(x), s0(y)) -> GCD0(minus(y), s0(x))
   IF_GCD(s0(x), s0(y)) -> GCD0(minus(x), s0(y))

The TRS R consists of the following rules:

   minus(s0(x)) -> if_minus(s0(x))
   le -> le
   le -> false0
   if_gcd(s0(x), s0(y)) -> gcd0(minus(x), s0(y))
   if_gcd(s0(x), s0(y)) -> gcd0(minus(y), s0(x))
   if_minus(s0(x)) -> 00
   gcdL0(cons0(x, cons0(y, xs))) -> gcdL0(cons0(y, cons0(x, xs)))
   le -> true0

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(30) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 2 less nodes.
----------------------------------------

(31)
TRUE

----------------------------------------

(32)
Obligation:
Relative ADP Problem with
absolute ADPs:

   gcdL(cons(x, cons(y, xs))) -> GCDL(cons(gcd(x, y), xs))

and relative ADPs:

   minus(s(x), y) -> if_minus(le(s(x), y), s(x), y)
   gcdL(cons(x, nil)) -> x
   gcdL(nil) -> 0
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false
   gcd(s(x), 0) -> s(x)
   if_gcd(true, s(x), s(y)) -> gcd(minus(x, y), s(y))
   if_gcd(false, s(x), s(y)) -> gcd(minus(y, x), s(x))
   if_minus(true, s(x), y) -> 0
   minus(0, y) -> 0
   gcd(0, y) -> y
   gcd(s(x), s(y)) -> if_gcd(le(y, x), s(x), s(y))
   if_minus(false, s(x), y) -> s(minus(x, y))
   gcdL(cons(x, cons(y, xs))) -> gcdL(cons(gcd(x, y), xs))
   le(0, y) -> true
   gcdL(cons(x, cons(y, xs))) -> GCDL(cons(y, cons(x, xs)))


----------------------------------------

(33) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   gcdL(cons(x, cons(y, xs))) -> GCDL(cons(gcd(x, y), xs))

Relative ADPs:

   minus(s(x), y) -> if_minus(le(s(x), y), s(x), y)
   gcdL(cons(x, nil)) -> x
   gcdL(nil) -> 0
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false
   gcd(s(x), 0) -> s(x)
   if_gcd(true, s(x), s(y)) -> gcd(minus(x, y), s(y))
   if_gcd(false, s(x), s(y)) -> gcd(minus(y, x), s(x))
   if_minus(true, s(x), y) -> 0
   minus(0, y) -> 0
   gcd(0, y) -> y
   gcd(s(x), s(y)) -> if_gcd(le(y, x), s(x), s(y))
   if_minus(false, s(x), y) -> s(minus(x, y))
   gcdL(cons(x, cons(y, xs))) -> gcdL(cons(gcd(x, y), xs))
   le(0, y) -> true


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(0) = 2
   POL(GCD(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(GCDL(x_1)) = 3 + 2*x_1
   POL(IF_GCD(x_1, x_2, x_3)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_1*x_2*x_3 + 3*x_1*x_3 + 3*x_2 + 3*x_2*x_3 + 3*x_3
   POL(IF_MINUS(x_1, x_2, x_3)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_1*x_2*x_3 + 3*x_1*x_3 + 3*x_2 + 3*x_2*x_3 + 3*x_3
   POL(LE(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(MINUS(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(cons(x_1, x_2)) = 1 + x_1 + x_2
   POL(false) = 0
   POL(gcd(x_1, x_2)) = x_2
   POL(gcdL(x_1)) = 2 + x_1
   POL(if_gcd(x_1, x_2, x_3)) = 0
   POL(if_minus(x_1, x_2, x_3)) = 2
   POL(le(x_1, x_2)) = 0
   POL(minus(x_1, x_2)) = 2 + x_1
   POL(nil) = 0
   POL(s(x_1)) = 0
   POL(true) = 0

----------------------------------------

(34)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   minus(s(x), y) -> if_minus(le(s(x), y), s(x), y)
   gcdL(cons(x, nil)) -> x
   gcdL(nil) -> 0
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false
   gcd(s(x), 0) -> s(x)
   if_gcd(true, s(x), s(y)) -> gcd(minus(x, y), s(y))
   if_gcd(false, s(x), s(y)) -> gcd(minus(y, x), s(x))
   if_minus(true, s(x), y) -> 0
   minus(0, y) -> 0
   gcd(0, y) -> y
   gcd(s(x), s(y)) -> if_gcd(le(y, x), s(x), s(y))
   if_minus(false, s(x), y) -> s(minus(x, y))
   gcdL(cons(x, cons(y, xs))) -> gcdL(cons(gcd(x, y), xs))
   le(0, y) -> true
   gcdL(cons(x, cons(y, xs))) -> GCDL(cons(y, cons(x, xs)))


----------------------------------------

(35) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(36)
YES
