YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Taerg.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) RelADPP
        (6) RelADPCleverAfsProof [SOUND, 56 ms]
        (7) QDP
        (8) MRRProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) MRRProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) PisEmptyProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) RelADPP
        (15) RelADPCleverAfsProof [SOUND, 73 ms]
        (16) QDP
        (17) MRRProof [EQUIVALENT, 9 ms]
        (18) QDP
        (19) MRRProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) MRRProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) PisEmptyProof [EQUIVALENT, 0 ms]
        (24) YES
    (25) RelADPP
        (26) RelADPCleverAfsProof [SOUND, 89 ms]
        (27) QDP
        (28) MRRProof [EQUIVALENT, 5 ms]
        (29) QDP
        (30) MRRProof [EQUIVALENT, 0 ms]
        (31) QDP
        (32) PisEmptyProof [EQUIVALENT, 0 ms]
        (33) YES
    (34) RelADPP
        (35) RelADPReductionPairProof [EQUIVALENT, 68 ms]
        (36) RelADPP
        (37) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (38) YES
    (39) RelADPP
        (40) RelADPReductionPairProof [EQUIVALENT, 78 ms]
        (41) RelADPP
        (42) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (43) YES
    (44) RelADPP
        (45) RelADPReductionPairProof [EQUIVALENT, 77 ms]
        (46) RelADPP
        (47) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (48) YES
    (49) RelADPP
        (50) RelADPReductionPairProof [EQUIVALENT, 58 ms]
        (51) RelADPP
        (52) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (53) YES
    (54) RelADPP
        (55) RelADPReductionPairProof [EQUIVALENT, 70 ms]
        (56) RelADPP
        (57) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (58) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   gcd(0, y) -> y
   gcd(s(x), 0) -> s(x)
   gcd(s(x), s(y)) -> if_gcd(le(y, x), s(x), s(y))
   if_gcd(true, s(x), s(y)) -> gcd(minus(x, y), s(y))
   if_gcd(false, s(x), s(y)) -> gcd(minus(y, x), s(x))
   gcdL(nil) -> 0
   gcdL(cons(x, nil)) -> x
   gcdL(cons(x, cons(y, xs))) -> gcdL(cons(gcd(x, y), xs))

The relative TRS consists of the following S rules:

   consSwap(x, xs) -> cons(x, xs)
   gcdL(cons(x, xs)) -> gcdL(consSwap(x, xs))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> LE(x, y)
   minus(x, 0) -> x
   minus(s(x), s(y)) -> MINUS(x, y)
   gcd(0, y) -> y
   gcd(s(x), 0) -> s(x)
   gcd(s(x), s(y)) -> IF_GCD(le(y, x), s(x), s(y))
   gcd(s(x), s(y)) -> if_gcd(LE(y, x), s(x), s(y))
   if_gcd(true, s(x), s(y)) -> GCD(minus(x, y), s(y))
   if_gcd(true, s(x), s(y)) -> gcd(MINUS(x, y), s(y))
   if_gcd(false, s(x), s(y)) -> GCD(minus(y, x), s(x))
   if_gcd(false, s(x), s(y)) -> gcd(MINUS(y, x), s(x))
   gcdL(nil) -> 0
   gcdL(cons(x, nil)) -> x
   gcdL(cons(x, cons(y, xs))) -> GCDL(cons(gcd(x, y), xs))
   gcdL(cons(x, cons(y, xs))) -> gcdL(cons(GCD(x, y), xs))

and relative ADPs:

   consSwap(x, xs) -> cons(x, xs)
   gcdL(cons(x, xs)) -> GCDL(CONSSWAP(x, xs))
   consSwap(x, cons(y, xs)) -> cons(y, CONSSWAP(x, xs))


----------------------------------------

(3) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  4 SCCs with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 8 subproblems.

----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Relative ADP Problem with
absolute ADPs:

   minus(s(x), s(y)) -> MINUS(x, y)

and relative ADPs:

   consSwap(x, xs) -> cons(x, xs)
   gcdL(cons(x, nil)) -> x
   gcdL(nil) -> 0
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false
   gcd(s(x), 0) -> s(x)
   if_gcd(true, s(x), s(y)) -> gcd(minus(x, y), s(y))
   if_gcd(false, s(x), s(y)) -> gcd(minus(y, x), s(x))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   gcdL(cons(x, xs)) -> gcdL(consSwap(x, xs))
   gcd(0, y) -> y
   gcd(s(x), s(y)) -> if_gcd(le(y, x), s(x), s(y))
   gcdL(cons(x, cons(y, xs))) -> gcdL(cons(gcd(x, y), xs))
   le(0, y) -> true
   minus(x, 0) -> x


----------------------------------------

(6) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:MINUS_2 = 0
true = 
gcd_2 = 
if_gcd_3 = 0
nil = 
false = 
s_1 = 
gcdL_1 = 
0 = 
le_2 = 0, 1
minus_2 = 1
cons_2 = 
consSwap_2 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
MINUS(x1, x2)  =  x2

s(x1)  =  s(x1)

if_gcd(x1, x2, x3)  =  if_gcd(x2, x3)

true  =  true

gcd(x1, x2)  =  gcd(x1, x2)

minus(x1, x2)  =  x1

le(x1, x2)  =  le

false  =  false

0  =  0


Recursive path order with status [RPO].
Quasi-Precedence: [true, le] > [s_1, if_gcd_2, gcd_2] > [false, 0]

Status: s_1: multiset status
if_gcd_2: multiset status
true: multiset status
gcd_2: multiset status
le: multiset status
false: multiset status
0: multiset status


----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s0(y)) -> MINUS(y)

The TRS R consists of the following rules:

   consSwap0(x, xs) -> cons0(x, xs)
   gcdL0(cons0(x, nil0)) -> x
   gcdL0(nil0) -> 00
   le -> le
   le -> false0
   gcd0(s0(x), 00) -> s0(x)
   if_gcd(s0(x), s0(y)) -> gcd0(minus(x), s0(y))
   if_gcd(s0(x), s0(y)) -> gcd0(minus(y), s0(x))
   consSwap0(x, cons0(y, xs)) -> cons0(y, consSwap0(x, xs))
   gcdL0(cons0(x, xs)) -> gcdL0(consSwap0(x, xs))
   gcd0(00, y) -> y
   gcd0(s0(x), s0(y)) -> if_gcd(s0(x), s0(y))
   gcdL0(cons0(x, cons0(y, xs))) -> gcdL0(cons0(gcd0(x, y), xs))
   le -> true0
   minus(s0(x)) -> minus(x)
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(8) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   gcdL0(cons0(x, nil0)) -> x
   gcdL0(nil0) -> 00
   gcdL0(cons0(x, cons0(y, xs))) -> gcdL0(cons0(gcd0(x, y), xs))

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(MINUS(x_1)) = 2*x_1
   POL(cons0(x_1, x_2)) = 1 + 2*x_1 + x_2
   POL(consSwap0(x_1, x_2)) = 1 + 2*x_1 + x_2
   POL(false0) = 2
   POL(gcd0(x_1, x_2)) = x_1 + x_2
   POL(gcdL0(x_1)) = 2 + x_1
   POL(if_gcd(x_1, x_2)) = x_1 + x_2
   POL(le) = 2
   POL(minus(x_1)) = x_1
   POL(nil0) = 2
   POL(s0(x_1)) = 2*x_1
   POL(true0) = 2


----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s0(y)) -> MINUS(y)

The TRS R consists of the following rules:

   consSwap0(x, xs) -> cons0(x, xs)
   le -> le
   le -> false0
   gcd0(s0(x), 00) -> s0(x)
   if_gcd(s0(x), s0(y)) -> gcd0(minus(x), s0(y))
   if_gcd(s0(x), s0(y)) -> gcd0(minus(y), s0(x))
   consSwap0(x, cons0(y, xs)) -> cons0(y, consSwap0(x, xs))
   gcdL0(cons0(x, xs)) -> gcdL0(consSwap0(x, xs))
   gcd0(00, y) -> y
   gcd0(s0(x), s0(y)) -> if_gcd(s0(x), s0(y))
   le -> true0
   minus(s0(x)) -> minus(x)
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(10) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   MINUS(s0(y)) -> MINUS(y)

Strictly oriented rules of the TRS R:

   gcd0(s0(x), 00) -> s0(x)
   if_gcd(s0(x), s0(y)) -> gcd0(minus(x), s0(y))
   if_gcd(s0(x), s0(y)) -> gcd0(minus(y), s0(x))
   gcd0(00, y) -> y
   gcd0(s0(x), s0(y)) -> if_gcd(s0(x), s0(y))
   minus(s0(x)) -> minus(x)

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 2
   POL(MINUS(x_1)) = x_1
   POL(cons0(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(consSwap0(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(false0) = 2
   POL(gcd0(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(gcdL0(x_1)) = x_1
   POL(if_gcd(x_1, x_2)) = 2 + x_1 + x_2
   POL(le) = 2
   POL(minus(x_1)) = x_1
   POL(s0(x_1)) = 2 + 2*x_1
   POL(true0) = 2


----------------------------------------

(11)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   consSwap0(x, xs) -> cons0(x, xs)
   le -> le
   le -> false0
   consSwap0(x, cons0(y, xs)) -> cons0(y, consSwap0(x, xs))
   gcdL0(cons0(x, xs)) -> gcdL0(consSwap0(x, xs))
   le -> true0
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Relative ADP Problem with
absolute ADPs:

   le(s(x), s(y)) -> LE(x, y)

and relative ADPs:

   consSwap(x, xs) -> cons(x, xs)
   gcdL(cons(x, nil)) -> x
   gcdL(nil) -> 0
   le(s(x), 0) -> false
   gcd(s(x), 0) -> s(x)
   if_gcd(true, s(x), s(y)) -> gcd(minus(x, y), s(y))
   if_gcd(false, s(x), s(y)) -> gcd(minus(y, x), s(x))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   gcdL(cons(x, xs)) -> gcdL(consSwap(x, xs))
   gcd(0, y) -> y
   gcd(s(x), s(y)) -> if_gcd(le(y, x), s(x), s(y))
   gcdL(cons(x, cons(y, xs))) -> gcdL(cons(gcd(x, y), xs))
   le(0, y) -> true
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x


----------------------------------------

(15) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:true = 
gcd_2 = 
if_gcd_3 = 0
nil = 
false = 
s_1 = 
gcdL_1 = 
LE_2 = 1
le_2 = 
0 = 
minus_2 = 1
cons_2 = 
consSwap_2 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
LE(x1, x2)  =  x1

s(x1)  =  s(x1)

if_gcd(x1, x2, x3)  =  if_gcd(x2, x3)

true  =  true

gcd(x1, x2)  =  gcd(x1, x2)

minus(x1, x2)  =  x1

false  =  false

le(x1, x2)  =  le(x1, x2)

0  =  0


Recursive path order with status [RPO].
Quasi-Precedence: [true, false, 0] > s_1 > [if_gcd_2, gcd_2]

Status: s_1: multiset status
if_gcd_2: multiset status
true: multiset status
gcd_2: multiset status
false: multiset status
le_2: [2,1]
0: multiset status


----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s0(x)) -> LE(x)

The TRS R consists of the following rules:

   consSwap0(x, xs) -> cons0(x, xs)
   gcdL0(cons0(x, nil0)) -> x
   gcdL0(nil0) -> 00
   le0(s0(x), s0(y)) -> le0(x, y)
   le0(s0(x), 00) -> false0
   gcd0(s0(x), 00) -> s0(x)
   if_gcd(s0(x), s0(y)) -> gcd0(minus(x), s0(y))
   if_gcd(s0(x), s0(y)) -> gcd0(minus(y), s0(x))
   consSwap0(x, cons0(y, xs)) -> cons0(y, consSwap0(x, xs))
   gcdL0(cons0(x, xs)) -> gcdL0(consSwap0(x, xs))
   gcd0(00, y) -> y
   gcd0(s0(x), s0(y)) -> if_gcd(s0(x), s0(y))
   gcdL0(cons0(x, cons0(y, xs))) -> gcdL0(cons0(gcd0(x, y), xs))
   le0(00, y) -> true0
   minus(s0(x)) -> minus(x)
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(17) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   le0(s0(x), 00) -> false0
   le0(00, y) -> true0

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(LE(x_1)) = 2*x_1
   POL(cons0(x_1, x_2)) = 2*x_1 + x_2
   POL(consSwap0(x_1, x_2)) = 2*x_1 + x_2
   POL(false0) = 1
   POL(gcd0(x_1, x_2)) = x_1 + x_2
   POL(gcdL0(x_1)) = x_1
   POL(if_gcd(x_1, x_2)) = x_1 + x_2
   POL(le0(x_1, x_2)) = 2 + x_1 + x_2
   POL(minus(x_1)) = 2*x_1
   POL(nil0) = 0
   POL(s0(x_1)) = 2*x_1
   POL(true0) = 1


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s0(x)) -> LE(x)

The TRS R consists of the following rules:

   consSwap0(x, xs) -> cons0(x, xs)
   gcdL0(cons0(x, nil0)) -> x
   gcdL0(nil0) -> 00
   le0(s0(x), s0(y)) -> le0(x, y)
   gcd0(s0(x), 00) -> s0(x)
   if_gcd(s0(x), s0(y)) -> gcd0(minus(x), s0(y))
   if_gcd(s0(x), s0(y)) -> gcd0(minus(y), s0(x))
   consSwap0(x, cons0(y, xs)) -> cons0(y, consSwap0(x, xs))
   gcdL0(cons0(x, xs)) -> gcdL0(consSwap0(x, xs))
   gcd0(00, y) -> y
   gcd0(s0(x), s0(y)) -> if_gcd(s0(x), s0(y))
   gcdL0(cons0(x, cons0(y, xs))) -> gcdL0(cons0(gcd0(x, y), xs))
   minus(s0(x)) -> minus(x)
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   gcdL0(cons0(x, nil0)) -> x
   gcdL0(nil0) -> 00
   gcd0(s0(x), 00) -> s0(x)
   gcd0(00, y) -> y
   gcdL0(cons0(x, cons0(y, xs))) -> gcdL0(cons0(gcd0(x, y), xs))

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 1
   POL(LE(x_1)) = 2*x_1
   POL(cons0(x_1, x_2)) = 1 + 2*x_1 + x_2
   POL(consSwap0(x_1, x_2)) = 1 + 2*x_1 + x_2
   POL(gcd0(x_1, x_2)) = x_1 + x_2
   POL(gcdL0(x_1)) = 2 + x_1
   POL(if_gcd(x_1, x_2)) = x_1 + x_2
   POL(le0(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(minus(x_1)) = x_1
   POL(nil0) = 0
   POL(s0(x_1)) = 2*x_1


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s0(x)) -> LE(x)

The TRS R consists of the following rules:

   consSwap0(x, xs) -> cons0(x, xs)
   le0(s0(x), s0(y)) -> le0(x, y)
   if_gcd(s0(x), s0(y)) -> gcd0(minus(x), s0(y))
   if_gcd(s0(x), s0(y)) -> gcd0(minus(y), s0(x))
   consSwap0(x, cons0(y, xs)) -> cons0(y, consSwap0(x, xs))
   gcdL0(cons0(x, xs)) -> gcdL0(consSwap0(x, xs))
   gcd0(s0(x), s0(y)) -> if_gcd(s0(x), s0(y))
   minus(s0(x)) -> minus(x)
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   LE(s0(x)) -> LE(x)

Strictly oriented rules of the TRS R:

   le0(s0(x), s0(y)) -> le0(x, y)
   if_gcd(s0(x), s0(y)) -> gcd0(minus(x), s0(y))
   if_gcd(s0(x), s0(y)) -> gcd0(minus(y), s0(x))
   gcd0(s0(x), s0(y)) -> if_gcd(s0(x), s0(y))
   minus(s0(x)) -> minus(x)

Used ordering: Polynomial interpretation [POLO]:

   POL(LE(x_1)) = 2*x_1
   POL(cons0(x_1, x_2)) = 2*x_1 + x_2
   POL(consSwap0(x_1, x_2)) = 2*x_1 + x_2
   POL(gcd0(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(gcdL0(x_1)) = 2*x_1
   POL(if_gcd(x_1, x_2)) = 1 + 2*x_1 + x_2
   POL(le0(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(minus(x_1)) = x_1
   POL(s0(x_1)) = 2 + 2*x_1


----------------------------------------

(22)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   consSwap0(x, xs) -> cons0(x, xs)
   consSwap0(x, cons0(y, xs)) -> cons0(y, consSwap0(x, xs))
   gcdL0(cons0(x, xs)) -> gcdL0(consSwap0(x, xs))
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(23) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(24)
YES

----------------------------------------

(25)
Obligation:
Relative ADP Problem with
absolute ADPs:

   if_gcd(true, s(x), s(y)) -> GCD(minus(x, y), s(y))
   gcd(s(x), s(y)) -> IF_GCD(le(y, x), s(x), s(y))
   if_gcd(false, s(x), s(y)) -> GCD(minus(y, x), s(x))

and relative ADPs:

   consSwap(x, xs) -> cons(x, xs)
   gcdL(cons(x, nil)) -> x
   gcdL(nil) -> 0
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false
   gcd(s(x), 0) -> s(x)
   if_gcd(true, s(x), s(y)) -> gcd(minus(x, y), s(y))
   if_gcd(false, s(x), s(y)) -> gcd(minus(y, x), s(x))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   gcdL(cons(x, xs)) -> gcdL(consSwap(x, xs))
   gcd(0, y) -> y
   gcd(s(x), s(y)) -> if_gcd(le(y, x), s(x), s(y))
   gcdL(cons(x, cons(y, xs))) -> gcdL(cons(gcd(x, y), xs))
   le(0, y) -> true
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x


----------------------------------------

(26) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:true = 
IF_GCD_3 = 0
gcd_2 = 
if_gcd_3 = 0
GCD_2 = 
false = 
nil = 
s_1 = 
gcdL_1 = 
le_2 = 0, 1
0 = 
minus_2 = 1
cons_2 = 
consSwap_2 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
IF_GCD(x1, x2, x3)  =  IF_GCD(x2, x3)

false  =  false

s(x1)  =  s(x1)

GCD(x1, x2)  =  GCD(x1, x2)

minus(x1, x2)  =  x1

le(x1, x2)  =  le

true  =  true

0  =  0

if_gcd(x1, x2, x3)  =  if_gcd(x2, x3)

gcd(x1, x2)  =  gcd(x1, x2)


Recursive path order with status [RPO].
Quasi-Precedence: 0 > [false, le, true] > s_1 > [IF_GCD_2, GCD_2]
0 > [false, le, true] > s_1 > [if_gcd_2, gcd_2]

Status: IF_GCD_2: multiset status
false: multiset status
s_1: multiset status
GCD_2: multiset status
le: []
true: multiset status
0: multiset status
if_gcd_2: multiset status
gcd_2: multiset status


----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF_GCD(s0(x), s0(y)) -> GCD0(minus(y), s0(x))
   GCD0(s0(x), s0(y)) -> IF_GCD(s0(x), s0(y))
   IF_GCD(s0(x), s0(y)) -> GCD0(minus(x), s0(y))

The TRS R consists of the following rules:

   consSwap0(x, xs) -> cons0(x, xs)
   gcdL0(cons0(x, nil0)) -> x
   gcdL0(nil0) -> 00
   le -> le
   le -> false0
   gcd0(s0(x), 00) -> s0(x)
   if_gcd(s0(x), s0(y)) -> gcd0(minus(x), s0(y))
   if_gcd(s0(x), s0(y)) -> gcd0(minus(y), s0(x))
   consSwap0(x, cons0(y, xs)) -> cons0(y, consSwap0(x, xs))
   gcdL0(cons0(x, xs)) -> gcdL0(consSwap0(x, xs))
   gcd0(00, y) -> y
   gcd0(s0(x), s0(y)) -> if_gcd(s0(x), s0(y))
   gcdL0(cons0(x, cons0(y, xs))) -> gcdL0(cons0(gcd0(x, y), xs))
   le -> true0
   minus(s0(x)) -> minus(x)
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(28) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   gcdL0(cons0(x, nil0)) -> x
   gcdL0(nil0) -> 00

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(GCD0(x_1, x_2)) = x_1 + x_2
   POL(IF_GCD(x_1, x_2)) = x_1 + x_2
   POL(cons0(x_1, x_2)) = 2*x_1 + x_2
   POL(consSwap0(x_1, x_2)) = 2*x_1 + x_2
   POL(false0) = 2
   POL(gcd0(x_1, x_2)) = x_1 + x_2
   POL(gcdL0(x_1)) = 2 + 2*x_1
   POL(if_gcd(x_1, x_2)) = x_1 + x_2
   POL(le) = 2
   POL(minus(x_1)) = x_1
   POL(nil0) = 1
   POL(s0(x_1)) = x_1
   POL(true0) = 2


----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF_GCD(s0(x), s0(y)) -> GCD0(minus(y), s0(x))
   GCD0(s0(x), s0(y)) -> IF_GCD(s0(x), s0(y))
   IF_GCD(s0(x), s0(y)) -> GCD0(minus(x), s0(y))

The TRS R consists of the following rules:

   consSwap0(x, xs) -> cons0(x, xs)
   le -> le
   le -> false0
   gcd0(s0(x), 00) -> s0(x)
   if_gcd(s0(x), s0(y)) -> gcd0(minus(x), s0(y))
   if_gcd(s0(x), s0(y)) -> gcd0(minus(y), s0(x))
   consSwap0(x, cons0(y, xs)) -> cons0(y, consSwap0(x, xs))
   gcdL0(cons0(x, xs)) -> gcdL0(consSwap0(x, xs))
   gcd0(00, y) -> y
   gcd0(s0(x), s0(y)) -> if_gcd(s0(x), s0(y))
   gcdL0(cons0(x, cons0(y, xs))) -> gcdL0(cons0(gcd0(x, y), xs))
   le -> true0
   minus(s0(x)) -> minus(x)
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(30) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   IF_GCD(s0(x), s0(y)) -> GCD0(minus(y), s0(x))
   GCD0(s0(x), s0(y)) -> IF_GCD(s0(x), s0(y))
   IF_GCD(s0(x), s0(y)) -> GCD0(minus(x), s0(y))

Strictly oriented rules of the TRS R:

   gcd0(s0(x), 00) -> s0(x)
   if_gcd(s0(x), s0(y)) -> gcd0(minus(x), s0(y))
   if_gcd(s0(x), s0(y)) -> gcd0(minus(y), s0(x))
   gcd0(00, y) -> y
   gcdL0(cons0(x, cons0(y, xs))) -> gcdL0(cons0(gcd0(x, y), xs))
   minus(s0(x)) -> minus(x)

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 2
   POL(GCD0(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(IF_GCD(x_1, x_2)) = 2*x_1 + x_2
   POL(cons0(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(consSwap0(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(false0) = 2
   POL(gcd0(x_1, x_2)) = x_1 + x_2
   POL(gcdL0(x_1)) = 2*x_1
   POL(if_gcd(x_1, x_2)) = x_1 + x_2
   POL(le) = 2
   POL(minus(x_1)) = x_1
   POL(s0(x_1)) = 2 + 2*x_1
   POL(true0) = 2


----------------------------------------

(31)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   consSwap0(x, xs) -> cons0(x, xs)
   le -> le
   le -> false0
   consSwap0(x, cons0(y, xs)) -> cons0(y, consSwap0(x, xs))
   gcdL0(cons0(x, xs)) -> gcdL0(consSwap0(x, xs))
   gcd0(s0(x), s0(y)) -> if_gcd(s0(x), s0(y))
   le -> true0
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(32) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(33)
YES

----------------------------------------

(34)
Obligation:
Relative ADP Problem with
absolute ADPs:

   gcdL(cons(x, cons(y, xs))) -> GCDL(cons(gcd(x, y), xs))

and relative ADPs:

   consSwap(x, xs) -> cons(x, xs)
   gcdL(cons(x, nil)) -> x
   gcdL(nil) -> 0
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false
   gcd(s(x), 0) -> s(x)
   gcdL(cons(x, xs)) -> GCDL(CONSSWAP(x, xs))
   if_gcd(true, s(x), s(y)) -> gcd(minus(x, y), s(y))
   if_gcd(false, s(x), s(y)) -> gcd(minus(y, x), s(x))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   gcd(0, y) -> y
   gcd(s(x), s(y)) -> if_gcd(le(y, x), s(x), s(y))
   gcdL(cons(x, cons(y, xs))) -> gcdL(cons(gcd(x, y), xs))
   le(0, y) -> true
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x


----------------------------------------

(35) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   gcdL(cons(x, cons(y, xs))) -> GCDL(cons(gcd(x, y), xs))

Relative ADPs:

   consSwap(x, xs) -> cons(x, xs)
   gcdL(cons(x, nil)) -> x
   gcdL(nil) -> 0
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false
   gcd(s(x), 0) -> s(x)
   if_gcd(true, s(x), s(y)) -> gcd(minus(x, y), s(y))
   if_gcd(false, s(x), s(y)) -> gcd(minus(y, x), s(x))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   gcd(0, y) -> y
   gcd(s(x), s(y)) -> if_gcd(le(y, x), s(x), s(y))
   gcdL(cons(x, cons(y, xs))) -> gcdL(cons(gcd(x, y), xs))
   le(0, y) -> true
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(CONSSWAP(x_1, x_2)) = 0
   POL(GCD(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(GCDL(x_1)) = 3 + 2*x_1
   POL(IF_GCD(x_1, x_2, x_3)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_1*x_2*x_3 + 3*x_1*x_3 + 3*x_2 + 3*x_2*x_3 + 3*x_3
   POL(LE(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(MINUS(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(cons(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(consSwap(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(false) = 0
   POL(gcd(x_1, x_2)) = x_1 + x_2
   POL(gcdL(x_1)) = x_1
   POL(if_gcd(x_1, x_2, x_3)) = x_2 + x_3
   POL(le(x_1, x_2)) = 0
   POL(minus(x_1, x_2)) = x_1
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(true) = 0

----------------------------------------

(36)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   consSwap(x, xs) -> cons(x, xs)
   gcdL(cons(x, nil)) -> x
   gcdL(nil) -> 0
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false
   gcd(s(x), 0) -> s(x)
   gcdL(cons(x, xs)) -> GCDL(CONSSWAP(x, xs))
   if_gcd(true, s(x), s(y)) -> gcd(minus(x, y), s(y))
   if_gcd(false, s(x), s(y)) -> gcd(minus(y, x), s(x))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   gcd(0, y) -> y
   gcd(s(x), s(y)) -> if_gcd(le(y, x), s(x), s(y))
   gcdL(cons(x, cons(y, xs))) -> gcdL(cons(gcd(x, y), xs))
   le(0, y) -> true
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x


----------------------------------------

(37) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(38)
YES

----------------------------------------

(39)
Obligation:
Relative ADP Problem with
absolute ADPs:

   gcdL(cons(x, nil)) -> x

and relative ADPs:

   consSwap(x, xs) -> cons(x, xs)
   gcdL(nil) -> 0
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false
   gcd(s(x), 0) -> s(x)
   gcdL(cons(x, xs)) -> GCDL(CONSSWAP(x, xs))
   if_gcd(true, s(x), s(y)) -> gcd(minus(x, y), s(y))
   if_gcd(false, s(x), s(y)) -> gcd(minus(y, x), s(x))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   gcd(0, y) -> y
   gcd(s(x), s(y)) -> if_gcd(le(y, x), s(x), s(y))
   gcdL(cons(x, cons(y, xs))) -> gcdL(cons(gcd(x, y), xs))
   le(0, y) -> true
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x


----------------------------------------

(40) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   gcdL(cons(x, nil)) -> x

Relative ADPs:

   consSwap(x, xs) -> cons(x, xs)
   gcdL(nil) -> 0
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false
   gcd(s(x), 0) -> s(x)
   if_gcd(true, s(x), s(y)) -> gcd(minus(x, y), s(y))
   if_gcd(false, s(x), s(y)) -> gcd(minus(y, x), s(x))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   gcd(0, y) -> y
   gcd(s(x), s(y)) -> if_gcd(le(y, x), s(x), s(y))
   gcdL(cons(x, cons(y, xs))) -> gcdL(cons(gcd(x, y), xs))
   le(0, y) -> true
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(CONSSWAP(x_1, x_2)) = 0
   POL(GCD(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(GCDL(x_1)) = 1
   POL(IF_GCD(x_1, x_2, x_3)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_1*x_2*x_3 + 3*x_1*x_3 + 3*x_2 + 3*x_2*x_3 + 3*x_3
   POL(LE(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(MINUS(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(cons(x_1, x_2)) = 2*x_1 + x_2
   POL(consSwap(x_1, x_2)) = 2*x_1 + x_2
   POL(false) = 0
   POL(gcd(x_1, x_2)) = x_1 + x_2
   POL(gcdL(x_1)) = 2*x_1
   POL(if_gcd(x_1, x_2, x_3)) = x_2 + x_3
   POL(le(x_1, x_2)) = 0
   POL(minus(x_1, x_2)) = x_1
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(true) = 0

----------------------------------------

(41)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   consSwap(x, xs) -> cons(x, xs)
   gcdL(cons(x, nil)) -> x
   gcdL(nil) -> 0
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false
   gcd(s(x), 0) -> s(x)
   gcdL(cons(x, xs)) -> GCDL(CONSSWAP(x, xs))
   if_gcd(true, s(x), s(y)) -> gcd(minus(x, y), s(y))
   if_gcd(false, s(x), s(y)) -> gcd(minus(y, x), s(x))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   gcd(0, y) -> y
   gcd(s(x), s(y)) -> if_gcd(le(y, x), s(x), s(y))
   gcdL(cons(x, cons(y, xs))) -> gcdL(cons(gcd(x, y), xs))
   le(0, y) -> true
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x


----------------------------------------

(42) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(43)
YES

----------------------------------------

(44)
Obligation:
Relative ADP Problem with
absolute ADPs:

   gcdL(cons(x, cons(y, xs))) -> GCDL(cons(gcd(x, y), xs))

and relative ADPs:

   consSwap(x, xs) -> cons(x, xs)
   gcdL(cons(x, nil)) -> x
   gcdL(nil) -> 0
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false
   gcd(s(x), 0) -> s(x)
   gcdL(cons(x, xs)) -> GCDL(CONSSWAP(x, xs))
   if_gcd(true, s(x), s(y)) -> gcd(minus(x, y), s(y))
   if_gcd(false, s(x), s(y)) -> gcd(minus(y, x), s(x))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   gcd(0, y) -> y
   gcd(s(x), s(y)) -> if_gcd(le(y, x), s(x), s(y))
   gcdL(cons(x, cons(y, xs))) -> gcdL(cons(gcd(x, y), xs))
   le(0, y) -> true
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x


----------------------------------------

(45) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   gcdL(cons(x, cons(y, xs))) -> GCDL(cons(gcd(x, y), xs))

Relative ADPs:

   consSwap(x, xs) -> cons(x, xs)
   gcdL(cons(x, nil)) -> x
   gcdL(nil) -> 0
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false
   gcd(s(x), 0) -> s(x)
   if_gcd(true, s(x), s(y)) -> gcd(minus(x, y), s(y))
   if_gcd(false, s(x), s(y)) -> gcd(minus(y, x), s(x))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   gcd(0, y) -> y
   gcd(s(x), s(y)) -> if_gcd(le(y, x), s(x), s(y))
   gcdL(cons(x, cons(y, xs))) -> gcdL(cons(gcd(x, y), xs))
   le(0, y) -> true
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(CONSSWAP(x_1, x_2)) = 0
   POL(GCD(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(GCDL(x_1)) = 3 + 2*x_1
   POL(IF_GCD(x_1, x_2, x_3)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_1*x_2*x_3 + 3*x_1*x_3 + 3*x_2 + 3*x_2*x_3 + 3*x_3
   POL(LE(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(MINUS(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(cons(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(consSwap(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(false) = 0
   POL(gcd(x_1, x_2)) = x_1 + x_2
   POL(gcdL(x_1)) = x_1
   POL(if_gcd(x_1, x_2, x_3)) = x_2 + x_3
   POL(le(x_1, x_2)) = 0
   POL(minus(x_1, x_2)) = x_1
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(true) = 0

----------------------------------------

(46)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   consSwap(x, xs) -> cons(x, xs)
   gcdL(cons(x, nil)) -> x
   gcdL(nil) -> 0
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false
   gcd(s(x), 0) -> s(x)
   gcdL(cons(x, xs)) -> GCDL(CONSSWAP(x, xs))
   if_gcd(true, s(x), s(y)) -> gcd(minus(x, y), s(y))
   if_gcd(false, s(x), s(y)) -> gcd(minus(y, x), s(x))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   gcd(0, y) -> y
   gcd(s(x), s(y)) -> if_gcd(le(y, x), s(x), s(y))
   gcdL(cons(x, cons(y, xs))) -> gcdL(cons(gcd(x, y), xs))
   le(0, y) -> true
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x


----------------------------------------

(47) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(48)
YES

----------------------------------------

(49)
Obligation:
Relative ADP Problem with
absolute ADPs:

   gcdL(cons(x, cons(y, xs))) -> gcdL(cons(GCD(x, y), xs))

and relative ADPs:

   consSwap(x, xs) -> cons(x, xs)
   gcdL(cons(x, nil)) -> x
   gcdL(nil) -> 0
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false
   gcd(s(x), 0) -> s(x)
   gcdL(cons(x, xs)) -> GCDL(CONSSWAP(x, xs))
   if_gcd(true, s(x), s(y)) -> gcd(minus(x, y), s(y))
   if_gcd(false, s(x), s(y)) -> gcd(minus(y, x), s(x))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   gcd(0, y) -> y
   gcd(s(x), s(y)) -> if_gcd(le(y, x), s(x), s(y))
   gcdL(cons(x, cons(y, xs))) -> gcdL(cons(gcd(x, y), xs))
   le(0, y) -> true
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x


----------------------------------------

(50) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   gcdL(cons(x, cons(y, xs))) -> gcdL(cons(GCD(x, y), xs))

Relative ADPs:

   consSwap(x, xs) -> cons(x, xs)
   gcdL(cons(x, nil)) -> x
   gcdL(nil) -> 0
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false
   gcd(s(x), 0) -> s(x)
   if_gcd(true, s(x), s(y)) -> gcd(minus(x, y), s(y))
   if_gcd(false, s(x), s(y)) -> gcd(minus(y, x), s(x))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   gcd(0, y) -> y
   gcd(s(x), s(y)) -> if_gcd(le(y, x), s(x), s(y))
   gcdL(cons(x, cons(y, xs))) -> gcdL(cons(gcd(x, y), xs))
   le(0, y) -> true
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(CONSSWAP(x_1, x_2)) = 0
   POL(GCD(x_1, x_2)) = 0
   POL(GCDL(x_1)) = 1
   POL(IF_GCD(x_1, x_2, x_3)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_1*x_2*x_3 + 3*x_1*x_3 + 3*x_2 + 3*x_2*x_3 + 3*x_3
   POL(LE(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(MINUS(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(cons(x_1, x_2)) = 2*x_1 + x_2
   POL(consSwap(x_1, x_2)) = 2*x_1 + x_2
   POL(false) = 0
   POL(gcd(x_1, x_2)) = x_1 + x_2
   POL(gcdL(x_1)) = 2*x_1
   POL(if_gcd(x_1, x_2, x_3)) = x_2 + x_3
   POL(le(x_1, x_2)) = 0
   POL(minus(x_1, x_2)) = x_1
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(true) = 0

----------------------------------------

(51)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   consSwap(x, xs) -> cons(x, xs)
   gcdL(cons(x, nil)) -> x
   gcdL(nil) -> 0
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false
   gcd(s(x), 0) -> s(x)
   gcdL(cons(x, xs)) -> GCDL(CONSSWAP(x, xs))
   if_gcd(true, s(x), s(y)) -> gcd(minus(x, y), s(y))
   if_gcd(false, s(x), s(y)) -> gcd(minus(y, x), s(x))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   gcd(0, y) -> y
   gcd(s(x), s(y)) -> if_gcd(le(y, x), s(x), s(y))
   gcdL(cons(x, cons(y, xs))) -> gcdL(cons(gcd(x, y), xs))
   le(0, y) -> true
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x


----------------------------------------

(52) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(53)
YES

----------------------------------------

(54)
Obligation:
Relative ADP Problem with
absolute ADPs:

   gcdL(nil) -> 0

and relative ADPs:

   consSwap(x, xs) -> cons(x, xs)
   gcdL(cons(x, nil)) -> x
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false
   gcd(s(x), 0) -> s(x)
   gcdL(cons(x, xs)) -> GCDL(CONSSWAP(x, xs))
   if_gcd(true, s(x), s(y)) -> gcd(minus(x, y), s(y))
   if_gcd(false, s(x), s(y)) -> gcd(minus(y, x), s(x))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   gcd(0, y) -> y
   gcd(s(x), s(y)) -> if_gcd(le(y, x), s(x), s(y))
   gcdL(cons(x, cons(y, xs))) -> gcdL(cons(gcd(x, y), xs))
   le(0, y) -> true
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x


----------------------------------------

(55) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   gcdL(nil) -> 0

Relative ADPs:

   consSwap(x, xs) -> cons(x, xs)
   gcdL(cons(x, nil)) -> x
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false
   gcd(s(x), 0) -> s(x)
   if_gcd(true, s(x), s(y)) -> gcd(minus(x, y), s(y))
   if_gcd(false, s(x), s(y)) -> gcd(minus(y, x), s(x))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   gcd(0, y) -> y
   gcd(s(x), s(y)) -> if_gcd(le(y, x), s(x), s(y))
   gcdL(cons(x, cons(y, xs))) -> gcdL(cons(gcd(x, y), xs))
   le(0, y) -> true
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(CONSSWAP(x_1, x_2)) = 0
   POL(GCD(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(GCDL(x_1)) = 1
   POL(IF_GCD(x_1, x_2, x_3)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_1*x_2*x_3 + 3*x_1*x_3 + 3*x_2 + 3*x_2*x_3 + 3*x_3
   POL(LE(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(MINUS(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(cons(x_1, x_2)) = 2*x_1 + x_2
   POL(consSwap(x_1, x_2)) = 2*x_1 + x_2
   POL(false) = 0
   POL(gcd(x_1, x_2)) = x_1 + x_2
   POL(gcdL(x_1)) = 2*x_1
   POL(if_gcd(x_1, x_2, x_3)) = x_2 + x_3
   POL(le(x_1, x_2)) = 0
   POL(minus(x_1, x_2)) = 2*x_1
   POL(nil) = 0
   POL(s(x_1)) = 2*x_1
   POL(true) = 0

----------------------------------------

(56)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   consSwap(x, xs) -> cons(x, xs)
   gcdL(cons(x, nil)) -> x
   gcdL(nil) -> 0
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false
   gcd(s(x), 0) -> s(x)
   gcdL(cons(x, xs)) -> GCDL(CONSSWAP(x, xs))
   if_gcd(true, s(x), s(y)) -> gcd(minus(x, y), s(y))
   if_gcd(false, s(x), s(y)) -> gcd(minus(y, x), s(x))
   consSwap(x, cons(y, xs)) -> cons(y, consSwap(x, xs))
   gcd(0, y) -> y
   gcd(s(x), s(y)) -> if_gcd(le(y, x), s(x), s(y))
   gcdL(cons(x, cons(y, xs))) -> gcdL(cons(gcd(x, y), xs))
   le(0, y) -> true
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x


----------------------------------------

(57) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(58)
YES
