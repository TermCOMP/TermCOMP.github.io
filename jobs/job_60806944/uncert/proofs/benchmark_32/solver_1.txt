YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/g8Uei.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) RelADPP
        (6) RelADPCleverAfsProof [SOUND, 16 ms]
        (7) QDP
        (8) MRRProof [EQUIVALENT, 13 ms]
        (9) QDP
        (10) MRRProof [EQUIVALENT, 7 ms]
        (11) QDP
        (12) MRRProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) PisEmptyProof [EQUIVALENT, 0 ms]
        (15) YES
    (16) RelADPP
        (17) RelADPCleverAfsProof [SOUND, 7 ms]
        (18) QDP
        (19) MRRProof [EQUIVALENT, 10 ms]
        (20) QDP
        (21) MRRProof [EQUIVALENT, 5 ms]
        (22) QDP
        (23) MRRProof [EQUIVALENT, 0 ms]
        (24) QDP
        (25) PisEmptyProof [EQUIVALENT, 0 ms]
        (26) YES
    (27) RelADPP
        (28) RelADPCleverAfsProof [SOUND, 81 ms]
        (29) QDP
        (30) MRRProof [EQUIVALENT, 0 ms]
        (31) QDP
        (32) PisEmptyProof [EQUIVALENT, 0 ms]
        (33) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   app(nil, k) -> k
   app(l, nil) -> l
   app(cons(x, l), k) -> cons(x, app(l, k))
   sum(cons(x, nil)) -> cons(x, nil)
   sum(cons(x, cons(y, l))) -> sum(cons(plus(x, y), l))
   sum(app(l, cons(x, cons(y, k)))) -> sum(app(l, sum(cons(x, cons(y, k)))))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   sum(plus(cons(0, x), cons(y, l))) -> pred(sum(cons(s(x), cons(y, l))))
   pred(cons(s(x), nil)) -> cons(x, nil)

The relative TRS consists of the following S rules:

   cons(x, cons(y, l)) -> cons(y, cons(x, l))


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   app(nil, k) -> k
   app(l, nil) -> l
   app(cons(x, l), k) -> CONS(x, app(l, k))
   app(cons(x, l), k) -> cons(x, APP(l, k))
   sum(cons(x, nil)) -> CONS(x, nil)
   sum(cons(x, cons(y, l))) -> SUM(cons(plus(x, y), l))
   sum(cons(x, cons(y, l))) -> sum(CONS(plus(x, y), l))
   sum(cons(x, cons(y, l))) -> sum(cons(PLUS(x, y), l))
   sum(app(l, cons(x, cons(y, k)))) -> SUM(app(l, sum(cons(x, cons(y, k)))))
   sum(app(l, cons(x, cons(y, k)))) -> sum(APP(l, sum(cons(x, cons(y, k)))))
   sum(app(l, cons(x, cons(y, k)))) -> sum(app(l, SUM(cons(x, cons(y, k)))))
   sum(app(l, cons(x, cons(y, k)))) -> sum(app(l, sum(CONS(x, cons(y, k)))))
   sum(app(l, cons(x, cons(y, k)))) -> sum(app(l, sum(cons(x, CONS(y, k)))))
   plus(0, y) -> y
   plus(s(x), y) -> s(PLUS(x, y))
   sum(plus(cons(0, x), cons(y, l))) -> PRED(sum(cons(s(x), cons(y, l))))
   sum(plus(cons(0, x), cons(y, l))) -> pred(SUM(cons(s(x), cons(y, l))))
   sum(plus(cons(0, x), cons(y, l))) -> pred(sum(CONS(s(x), cons(y, l))))
   sum(plus(cons(0, x), cons(y, l))) -> pred(sum(cons(s(x), CONS(y, l))))
   pred(cons(s(x), nil)) -> CONS(x, nil)

and relative ADPs:

   cons(x, cons(y, l)) -> CONS(y, CONS(x, l))


----------------------------------------

(3) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  3 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Relative ADP Problem with
absolute ADPs:

   plus(s(x), y) -> s(PLUS(x, y))

and relative ADPs:

   app(cons(x, l), k) -> cons(x, app(l, k))
   sum(cons(x, nil)) -> cons(x, nil)
   cons(x, cons(y, l)) -> cons(y, cons(x, l))
   pred(cons(s(x), nil)) -> cons(x, nil)
   app(nil, k) -> k
   app(l, nil) -> l
   sum(app(l, cons(x, cons(y, k)))) -> sum(app(l, sum(cons(x, cons(y, k)))))
   plus(0, y) -> y
   sum(plus(cons(0, x), cons(y, l))) -> pred(sum(cons(s(x), cons(y, l))))
   sum(cons(x, cons(y, l))) -> sum(cons(plus(x, y), l))


----------------------------------------

(6) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:s_1 = 
sum_1 = 
plus_2 = 
PLUS_2 = 
app_2 = 
pred_1 = 
0 = 
cons_2 = 
nil = 

Found this filtering by looking at the following order that orders at least one DP strictly:Recursive path order with status [RPO].
Quasi-Precedence: trivial

Status: PLUS_2: [2,1]
s_1: [1]


----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS0(s0(x), y) -> PLUS0(x, y)

The TRS R consists of the following rules:

   app0(cons0(x, l), k) -> cons0(x, app0(l, k))
   plus0(s0(x), y) -> s0(plus0(x, y))
   sum0(cons0(x, nil0)) -> cons0(x, nil0)
   cons0(x, cons0(y, l)) -> cons0(y, cons0(x, l))
   pred0(cons0(s0(x), nil0)) -> cons0(x, nil0)
   app0(nil0, k) -> k
   app0(l, nil0) -> l
   sum0(app0(l, cons0(x, cons0(y, k)))) -> sum0(app0(l, sum0(cons0(x, cons0(y, k)))))
   plus0(00, y) -> y
   sum0(plus0(cons0(00, x), cons0(y, l))) -> pred0(sum0(cons0(s0(x), cons0(y, l))))
   sum0(cons0(x, cons0(y, l))) -> sum0(cons0(plus0(x, y), l))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(8) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   app0(nil0, k) -> k
   app0(l, nil0) -> l

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(PLUS0(x_1, x_2)) = 2*x_1 + x_2
   POL(app0(x_1, x_2)) = 2 + x_1 + x_2
   POL(cons0(x_1, x_2)) = x_1 + x_2
   POL(nil0) = 0
   POL(plus0(x_1, x_2)) = x_1 + x_2
   POL(pred0(x_1)) = x_1
   POL(s0(x_1)) = x_1
   POL(sum0(x_1)) = x_1


----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS0(s0(x), y) -> PLUS0(x, y)

The TRS R consists of the following rules:

   app0(cons0(x, l), k) -> cons0(x, app0(l, k))
   plus0(s0(x), y) -> s0(plus0(x, y))
   sum0(cons0(x, nil0)) -> cons0(x, nil0)
   cons0(x, cons0(y, l)) -> cons0(y, cons0(x, l))
   pred0(cons0(s0(x), nil0)) -> cons0(x, nil0)
   sum0(app0(l, cons0(x, cons0(y, k)))) -> sum0(app0(l, sum0(cons0(x, cons0(y, k)))))
   plus0(00, y) -> y
   sum0(plus0(cons0(00, x), cons0(y, l))) -> pred0(sum0(cons0(s0(x), cons0(y, l))))
   sum0(cons0(x, cons0(y, l))) -> sum0(cons0(plus0(x, y), l))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(10) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   app0(cons0(x, l), k) -> cons0(x, app0(l, k))
   plus0(00, y) -> y
   sum0(plus0(cons0(00, x), cons0(y, l))) -> pred0(sum0(cons0(s0(x), cons0(y, l))))
   sum0(cons0(x, cons0(y, l))) -> sum0(cons0(plus0(x, y), l))

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 2
   POL(PLUS0(x_1, x_2)) = 2*x_1 + x_2
   POL(app0(x_1, x_2)) = 2*x_1 + x_2
   POL(cons0(x_1, x_2)) = 1 + x_1 + x_2
   POL(nil0) = 0
   POL(plus0(x_1, x_2)) = x_1 + x_2
   POL(pred0(x_1)) = x_1
   POL(s0(x_1)) = x_1
   POL(sum0(x_1)) = x_1


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS0(s0(x), y) -> PLUS0(x, y)

The TRS R consists of the following rules:

   plus0(s0(x), y) -> s0(plus0(x, y))
   sum0(cons0(x, nil0)) -> cons0(x, nil0)
   cons0(x, cons0(y, l)) -> cons0(y, cons0(x, l))
   pred0(cons0(s0(x), nil0)) -> cons0(x, nil0)
   sum0(app0(l, cons0(x, cons0(y, k)))) -> sum0(app0(l, sum0(cons0(x, cons0(y, k)))))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   PLUS0(s0(x), y) -> PLUS0(x, y)

Strictly oriented rules of the TRS R:

   plus0(s0(x), y) -> s0(plus0(x, y))
   pred0(cons0(s0(x), nil0)) -> cons0(x, nil0)

Used ordering: Polynomial interpretation [POLO]:

   POL(PLUS0(x_1, x_2)) = x_1 + x_2
   POL(app0(x_1, x_2)) = x_1 + x_2
   POL(cons0(x_1, x_2)) = x_1 + x_2
   POL(nil0) = 0
   POL(plus0(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(pred0(x_1)) = x_1
   POL(s0(x_1)) = 2 + x_1
   POL(sum0(x_1)) = x_1


----------------------------------------

(13)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   sum0(cons0(x, nil0)) -> cons0(x, nil0)
   cons0(x, cons0(y, l)) -> cons0(y, cons0(x, l))
   sum0(app0(l, cons0(x, cons0(y, k)))) -> sum0(app0(l, sum0(cons0(x, cons0(y, k)))))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(14) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
Relative ADP Problem with
absolute ADPs:

   app(cons(x, l), k) -> cons(x, APP(l, k))

and relative ADPs:

   app(cons(x, l), k) -> cons(x, app(l, k))
   plus(s(x), y) -> s(plus(x, y))
   sum(cons(x, nil)) -> cons(x, nil)
   cons(x, cons(y, l)) -> cons(y, cons(x, l))
   pred(cons(s(x), nil)) -> cons(x, nil)
   app(nil, k) -> k
   app(l, nil) -> l
   sum(app(l, cons(x, cons(y, k)))) -> sum(app(l, sum(cons(x, cons(y, k)))))
   plus(0, y) -> y
   sum(plus(cons(0, x), cons(y, l))) -> pred(sum(cons(s(x), cons(y, l))))
   sum(cons(x, cons(y, l))) -> sum(cons(plus(x, y), l))


----------------------------------------

(17) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:s_1 = 
sum_1 = 
plus_2 = 
app_2 = 
pred_1 = 
0 = 
cons_2 = 0
APP_2 = 1
nil = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
APP(x1, x2)  =  x1

cons(x1, x2)  =  cons(x2)


Recursive path order with status [RPO].
Quasi-Precedence: trivial

Status: cons_1: [1]


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(cons(l)) -> APP(l)

The TRS R consists of the following rules:

   app0(cons(l), k) -> cons(app0(l, k))
   plus0(s0(x), y) -> s0(plus0(x, y))
   sum0(cons(nil0)) -> cons(nil0)
   cons(cons(l)) -> cons(cons(l))
   pred0(cons(nil0)) -> cons(nil0)
   app0(nil0, k) -> k
   app0(l, nil0) -> l
   sum0(app0(l, cons(cons(k)))) -> sum0(app0(l, sum0(cons(cons(k)))))
   plus0(00, y) -> y
   sum0(plus0(cons(x), cons(l))) -> pred0(sum0(cons(cons(l))))
   sum0(cons(cons(l))) -> sum0(cons(l))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   pred0(cons(nil0)) -> cons(nil0)
   app0(nil0, k) -> k
   app0(l, nil0) -> l
   plus0(00, y) -> y
   sum0(plus0(cons(x), cons(l))) -> pred0(sum0(cons(cons(l))))

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 2
   POL(APP(x_1)) = 2*x_1
   POL(app0(x_1, x_2)) = x_1 + 2*x_2
   POL(cons(x_1)) = x_1
   POL(nil0) = 2
   POL(plus0(x_1, x_2)) = 2 + x_1 + 2*x_2
   POL(pred0(x_1)) = 2*x_1
   POL(s0(x_1)) = 2 + x_1
   POL(sum0(x_1)) = x_1


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(cons(l)) -> APP(l)

The TRS R consists of the following rules:

   app0(cons(l), k) -> cons(app0(l, k))
   plus0(s0(x), y) -> s0(plus0(x, y))
   sum0(cons(nil0)) -> cons(nil0)
   cons(cons(l)) -> cons(cons(l))
   sum0(app0(l, cons(cons(k)))) -> sum0(app0(l, sum0(cons(cons(k)))))
   sum0(cons(cons(l))) -> sum0(cons(l))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   plus0(s0(x), y) -> s0(plus0(x, y))

Used ordering: Polynomial interpretation [POLO]:

   POL(APP(x_1)) = x_1
   POL(app0(x_1, x_2)) = x_1 + 2*x_2
   POL(cons(x_1)) = x_1
   POL(nil0) = 0
   POL(plus0(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(s0(x_1)) = 2 + x_1
   POL(sum0(x_1)) = x_1


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(cons(l)) -> APP(l)

The TRS R consists of the following rules:

   app0(cons(l), k) -> cons(app0(l, k))
   sum0(cons(nil0)) -> cons(nil0)
   cons(cons(l)) -> cons(cons(l))
   sum0(app0(l, cons(cons(k)))) -> sum0(app0(l, sum0(cons(cons(k)))))
   sum0(cons(cons(l))) -> sum0(cons(l))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(23) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   APP(cons(l)) -> APP(l)

Strictly oriented rules of the TRS R:

   app0(cons(l), k) -> cons(app0(l, k))
   sum0(cons(cons(l))) -> sum0(cons(l))

Used ordering: Polynomial interpretation [POLO]:

   POL(APP(x_1)) = 2*x_1
   POL(app0(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(cons(x_1)) = 2 + x_1
   POL(nil0) = 0
   POL(sum0(x_1)) = x_1


----------------------------------------

(24)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   sum0(cons(nil0)) -> cons(nil0)
   cons(cons(l)) -> cons(cons(l))
   sum0(app0(l, cons(cons(k)))) -> sum0(app0(l, sum0(cons(cons(k)))))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(25) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(26)
YES

----------------------------------------

(27)
Obligation:
Relative ADP Problem with
absolute ADPs:

   sum(cons(x, cons(y, l))) -> SUM(cons(plus(x, y), l))
   sum(app(l, cons(x, cons(y, k)))) -> sum(app(l, SUM(cons(x, cons(y, k)))))
   sum(plus(cons(0, x), cons(y, l))) -> pred(SUM(cons(s(x), cons(y, l))))
   sum(app(l, cons(x, cons(y, k)))) -> SUM(app(l, sum(cons(x, cons(y, k)))))

and relative ADPs:

   app(cons(x, l), k) -> cons(x, app(l, k))
   plus(s(x), y) -> s(plus(x, y))
   sum(cons(x, nil)) -> cons(x, nil)
   cons(x, cons(y, l)) -> cons(y, cons(x, l))
   pred(cons(s(x), nil)) -> cons(x, nil)
   app(nil, k) -> k
   app(l, nil) -> l
   sum(app(l, cons(x, cons(y, k)))) -> sum(app(l, sum(cons(x, cons(y, k)))))
   plus(0, y) -> y
   sum(plus(cons(0, x), cons(y, l))) -> pred(sum(cons(s(x), cons(y, l))))
   sum(cons(x, cons(y, l))) -> sum(cons(plus(x, y), l))


----------------------------------------

(28) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:s_1 = 0
sum_1 = 0
plus_2 = 0
app_2 = 
0 = 
pred_1 = 0
cons_2 = 0
SUM_1 = 
nil = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
SUM(x1)  =  x1

cons(x1, x2)  =  x2

plus(x1, x2)  =  plus(x2)

0  =  0

s(x1)  =  s

app(x1, x2)  =  app(x1, x2)

sum(x1)  =  sum

nil  =  nil

pred(x1)  =  pred


Recursive path order with status [RPO].
Quasi-Precedence: [plus_1, s] > [0, sum, nil, pred]
app_2 > [0, sum, nil, pred]

Status: plus_1: multiset status
0: multiset status
s: multiset status
app_2: [2,1]
sum: multiset status
nil: multiset status
pred: multiset status


----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SUM0(cons(cons(l))) -> SUM0(cons(l))
   SUM0(plus(cons(l))) -> SUM0(cons(cons(l)))
   SUM0(app0(l, cons(cons(k)))) -> SUM0(cons(cons(k)))
   SUM0(app0(l, cons(cons(k)))) -> SUM0(app0(l, sum))

The TRS R consists of the following rules:

   app0(cons(l), k) -> cons(app0(l, k))
   plus(y) -> s
   sum -> cons(nil0)
   cons(cons(l)) -> cons(cons(l))
   pred -> cons(nil0)
   app0(nil0, k) -> k
   app0(l, nil0) -> l
   sum -> sum
   plus(y) -> y
   sum -> pred

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(30) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   SUM0(cons(cons(l))) -> SUM0(cons(l))
   SUM0(plus(cons(l))) -> SUM0(cons(cons(l)))
   SUM0(app0(l, cons(cons(k)))) -> SUM0(cons(cons(k)))
   SUM0(app0(l, cons(cons(k)))) -> SUM0(app0(l, sum))

Strictly oriented rules of the TRS R:

   app0(cons(l), k) -> cons(app0(l, k))
   plus(y) -> s
   sum -> cons(nil0)
   pred -> cons(nil0)
   app0(nil0, k) -> k
   app0(l, nil0) -> l
   plus(y) -> y
   sum -> pred

Used ordering: Knuth-Bendix order [KBO] with precedence:SUM0_1 > app0_2 > nil0 > plus_1 > cons_1 > sum > pred > s

and weight map:

   s=2
   sum=3
   nil0=1
   pred=3
   cons_1=1
   plus_1=1
   SUM0_1=1
   app0_2=0

The variable weight is 1

----------------------------------------

(31)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   cons(cons(l)) -> cons(cons(l))
   sum -> sum

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(32) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(33)
YES
