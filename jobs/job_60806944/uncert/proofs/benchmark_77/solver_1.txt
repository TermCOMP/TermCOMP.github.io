YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/FzML5.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRSSCleanerProof [SOUND, 0 ms]
(2) RelTRS
(3) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(4) RelADPP
(5) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(6) RelADPP
(7) RelADPCleverAfsProof [SOUND, 39 ms]
(8) QDP
(9) MRRProof [EQUIVALENT, 0 ms]
(10) QDP
(11) PisEmptyProof [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   a -> b

The relative TRS consists of the following S rules:

   c(x, c(y, z)) -> c(y, c(x, z))
   f(s(x)) -> c(x, f(x))


----------------------------------------

(1) RelTRSSCleanerProof (SOUND)
We have moved all duplicating rules from S to R -> Duplicating rules:

   f(s(x)) -> c(x, f(x))


----------------------------------------

(2)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   a -> b
   f(s(x)) -> c(x, f(x))

The relative TRS consists of the following S rules:

   c(x, c(y, z)) -> c(y, c(x, z))


----------------------------------------

(3) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(4)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a -> b
   f(s(x)) -> C(x, f(x))
   f(s(x)) -> c(x, F(x))

and relative ADPs:

   c(x, c(y, z)) -> C(y, C(x, z))


----------------------------------------

(5) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 1 subproblem.

----------------------------------------

(6)
Obligation:
Relative ADP Problem with
absolute ADPs:

   f(s(x)) -> c(x, F(x))

and relative ADPs:

   a -> b
   c(x, c(y, z)) -> c(y, c(x, z))
   f(s(x)) -> c(x, f(x))


----------------------------------------

(7) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:s_1 = 
a = 
b = 
c_2 = 1
y = 
f_1 = 
F_1 = 
z = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
F(x1)  =  F(x1)

s(x1)  =  s(x1)

f(x1)  =  f(x1)

c(x1, x2)  =  x1

y  =  y

z  =  z


Recursive path order with status [RPO].
Quasi-Precedence: s_1 > F_1 > y
s_1 > f_1 > y
z > y

Status: F_1: multiset status
s_1: multiset status
f_1: [1]
y: multiset status
z: multiset status


----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F0(s0(x)) -> F0(x)

The TRS R consists of the following rules:

   a0 -> b0
   c(x) -> c(y0)
   f0(s0(x)) -> c(x)

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(9) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   F0(s0(x)) -> F0(x)

Strictly oriented rules of the TRS R:

   a0 -> b0
   f0(s0(x)) -> c(x)

Used ordering: Knuth-Bendix order [KBO] with precedence:s0_1 > F0_1 > f0_1 > a0 > b0 > y0 > c_1

and weight map:

   a0=2
   b0=1
   y0=1
   c_1=1
   f0_1=2
   s0_1=0
   F0_1=1

The variable weight is 1

----------------------------------------

(10)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   c(x) -> c(y0)

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(11) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(12)
YES
