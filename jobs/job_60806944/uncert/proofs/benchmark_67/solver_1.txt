YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/wUXaV.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) RelADPP
        (6) RelADPCleverAfsProof [SOUND, 65 ms]
        (7) QDP
        (8) MRRProof [EQUIVALENT, 15 ms]
        (9) QDP
        (10) MRRProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) MRRProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) QDPOrderProof [EQUIVALENT, 0 ms]
        (15) QDP
        (16) PisEmptyProof [EQUIVALENT, 0 ms]
        (17) YES
    (18) RelADPP
        (19) RelADPCleverAfsProof [SOUND, 92 ms]
        (20) QDP
        (21) MRRProof [EQUIVALENT, 13 ms]
        (22) QDP
        (23) MRRProof [EQUIVALENT, 0 ms]
        (24) QDP
        (25) MRRProof [EQUIVALENT, 0 ms]
        (26) QDP
        (27) QDPOrderProof [EQUIVALENT, 0 ms]
        (28) QDP
        (29) PisEmptyProof [EQUIVALENT, 0 ms]
        (30) YES
    (31) RelADPP
        (32) RelADPCleverAfsProof [SOUND, 79 ms]
        (33) QDP
        (34) MRRProof [EQUIVALENT, 16 ms]
        (35) QDP
        (36) MRRProof [EQUIVALENT, 0 ms]
        (37) QDP
        (38) MRRProof [EQUIVALENT, 4 ms]
        (39) QDP
        (40) MRRProof [EQUIVALENT, 0 ms]
        (41) QDP
        (42) QDPOrderProof [EQUIVALENT, 0 ms]
        (43) QDP
        (44) DependencyGraphProof [EQUIVALENT, 0 ms]
        (45) TRUE


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   gcd(0, y) -> y
   gcd(s(x), 0) -> s(x)
   gcd(s(x), s(y)) -> if_gcd(le(y, x), s(x), s(y))
   if_gcd(true, s(x), s(y)) -> gcd(minus(x, y), s(y))
   if_gcd(false, s(x), s(y)) -> gcd(minus(y, x), s(x))

The relative TRS consists of the following S rules:

   rand(x) -> rand(s(x))
   rand(x) -> x


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> LE(x, y)
   minus(x, 0) -> x
   minus(s(x), s(y)) -> MINUS(x, y)
   gcd(0, y) -> y
   gcd(s(x), 0) -> s(x)
   gcd(s(x), s(y)) -> IF_GCD(le(y, x), s(x), s(y))
   gcd(s(x), s(y)) -> if_gcd(LE(y, x), s(x), s(y))
   if_gcd(true, s(x), s(y)) -> GCD(minus(x, y), s(y))
   if_gcd(true, s(x), s(y)) -> gcd(MINUS(x, y), s(y))
   if_gcd(false, s(x), s(y)) -> GCD(minus(y, x), s(x))
   if_gcd(false, s(x), s(y)) -> gcd(MINUS(y, x), s(x))

and relative ADPs:

   rand(x) -> RAND(s(x))
   rand(x) -> x


----------------------------------------

(3) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  3 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Relative ADP Problem with
absolute ADPs:

   minus(s(x), s(y)) -> MINUS(x, y)

and relative ADPs:

   gcd(0, y) -> y
   gcd(s(x), s(y)) -> if_gcd(le(y, x), s(x), s(y))
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false
   gcd(s(x), 0) -> s(x)
   le(0, y) -> true
   minus(x, 0) -> x
   if_gcd(true, s(x), s(y)) -> gcd(minus(x, y), s(y))
   rand(x) -> rand(s(x))
   if_gcd(false, s(x), s(y)) -> gcd(minus(y, x), s(x))
   rand(x) -> x


----------------------------------------

(6) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:s_1 = 
MINUS_2 = 
true = 
gcd_2 = 
0 = 
le_2 = 0
minus_2 = 1
if_gcd_3 = 0
rand_1 = 
false = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
MINUS(x1, x2)  =  MINUS(x1, x2)

s(x1)  =  s(x1)

if_gcd(x1, x2, x3)  =  if_gcd(x2, x3)

false  =  false

gcd(x1, x2)  =  gcd(x1, x2)

minus(x1, x2)  =  minus(x1)

true  =  true

le(x1, x2)  =  le(x2)

0  =  0


Recursive path order with status [RPO].
Quasi-Precedence: MINUS_2 > [s_1, false, minus_1]
le_1 > [if_gcd_2, gcd_2, true, 0] > [s_1, false, minus_1]

Status: MINUS_2: [2,1]
s_1: multiset status
if_gcd_2: multiset status
false: multiset status
gcd_2: multiset status
minus_1: multiset status
true: multiset status
le_1: [1]
0: multiset status


----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS0(s0(x), s0(y)) -> MINUS0(x, y)

The TRS R consists of the following rules:

   gcd0(00, y) -> y
   gcd0(s0(x), s0(y)) -> if_gcd(s0(x), s0(y))
   le(s0(y)) -> le(y)
   le(00) -> false0
   gcd0(s0(x), 00) -> s0(x)
   le(y) -> true0
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   if_gcd(s0(x), s0(y)) -> gcd0(minus(x), s0(y))
   rand0(x) -> rand0(s0(x))
   if_gcd(s0(x), s0(y)) -> gcd0(minus(y), s0(x))
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(8) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   gcd0(00, y) -> y
   le(00) -> false0
   gcd0(s0(x), 00) -> s0(x)

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 2
   POL(MINUS0(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(false0) = 2
   POL(gcd0(x_1, x_2)) = 2 + x_1 + x_2
   POL(if_gcd(x_1, x_2)) = 2 + x_1 + x_2
   POL(le(x_1)) = 2 + 2*x_1
   POL(minus(x_1)) = x_1
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 2


----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS0(s0(x), s0(y)) -> MINUS0(x, y)

The TRS R consists of the following rules:

   gcd0(s0(x), s0(y)) -> if_gcd(s0(x), s0(y))
   le(s0(y)) -> le(y)
   le(y) -> true0
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   if_gcd(s0(x), s0(y)) -> gcd0(minus(x), s0(y))
   rand0(x) -> rand0(s0(x))
   if_gcd(s0(x), s0(y)) -> gcd0(minus(y), s0(x))
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(10) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   rand0(x) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(MINUS0(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(gcd0(x_1, x_2)) = 1 + x_1 + x_2
   POL(if_gcd(x_1, x_2)) = 1 + x_1 + x_2
   POL(le(x_1)) = 2 + 2*x_1
   POL(minus(x_1)) = x_1
   POL(rand0(x_1)) = 1 + x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 2


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS0(s0(x), s0(y)) -> MINUS0(x, y)

The TRS R consists of the following rules:

   gcd0(s0(x), s0(y)) -> if_gcd(s0(x), s0(y))
   le(s0(y)) -> le(y)
   le(y) -> true0
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   if_gcd(s0(x), s0(y)) -> gcd0(minus(x), s0(y))
   rand0(x) -> rand0(s0(x))
   if_gcd(s0(x), s0(y)) -> gcd0(minus(y), s0(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   le(y) -> true0

Used ordering: Polynomial interpretation [POLO]:

   POL(MINUS0(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(gcd0(x_1, x_2)) = 2 + x_1 + x_2
   POL(if_gcd(x_1, x_2)) = 2 + x_1 + x_2
   POL(le(x_1)) = 2 + 2*x_1
   POL(minus(x_1)) = x_1
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 0


----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS0(s0(x), s0(y)) -> MINUS0(x, y)

The TRS R consists of the following rules:

   gcd0(s0(x), s0(y)) -> if_gcd(s0(x), s0(y))
   le(s0(y)) -> le(y)
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   if_gcd(s0(x), s0(y)) -> gcd0(minus(x), s0(y))
   rand0(x) -> rand0(s0(x))
   if_gcd(s0(x), s0(y)) -> gcd0(minus(y), s0(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(14) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MINUS0(s0(x), s0(y)) -> MINUS0(x, y)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( gcd0_2(x_1, x_2) ) = max{0, x_1 + x_2 - 1}
POL( s0_1(x_1) ) = 2x_1 + 1
POL( if_gcd_2(x_1, x_2) ) = max{0, x_1 + x_2 - 2}
POL( le_1(x_1) ) = 2x_1
POL( minus_1(x_1) ) = x_1
POL( rand0_1(x_1) ) = max{0, -2}
POL( MINUS0_2(x_1, x_2) ) = 2x_1 + 2x_2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   gcd0(s0(x), s0(y)) -> if_gcd(s0(x), s0(y))
   le(s0(y)) -> le(y)
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   if_gcd(s0(x), s0(y)) -> gcd0(minus(x), s0(y))
   rand0(x) -> rand0(s0(x))
   if_gcd(s0(x), s0(y)) -> gcd0(minus(y), s0(x))


----------------------------------------

(15)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   gcd0(s0(x), s0(y)) -> if_gcd(s0(x), s0(y))
   le(s0(y)) -> le(y)
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   if_gcd(s0(x), s0(y)) -> gcd0(minus(x), s0(y))
   rand0(x) -> rand0(s0(x))
   if_gcd(s0(x), s0(y)) -> gcd0(minus(y), s0(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(16) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(17)
YES

----------------------------------------

(18)
Obligation:
Relative ADP Problem with
absolute ADPs:

   le(s(x), s(y)) -> LE(x, y)

and relative ADPs:

   gcd(0, y) -> y
   gcd(s(x), s(y)) -> if_gcd(le(y, x), s(x), s(y))
   le(s(x), 0) -> false
   gcd(s(x), 0) -> s(x)
   le(0, y) -> true
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   if_gcd(true, s(x), s(y)) -> gcd(minus(x, y), s(y))
   rand(x) -> rand(s(x))
   if_gcd(false, s(x), s(y)) -> gcd(minus(y, x), s(x))
   rand(x) -> x


----------------------------------------

(19) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:s_1 = 
true = 
LE_2 = 
gcd_2 = 
le_2 = 0
0 = 
if_gcd_3 = 0
minus_2 = 1
rand_1 = 
false = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
LE(x1, x2)  =  LE(x1, x2)

s(x1)  =  s(x1)

gcd(x1, x2)  =  gcd(x1, x2)

if_gcd(x1, x2, x3)  =  if_gcd(x2, x3)

le(x1, x2)  =  x2

false  =  false

minus(x1, x2)  =  x1

true  =  true

0  =  0


Recursive path order with status [RPO].
Quasi-Precedence: LE_2 > [s_1, false, true]
[gcd_2, if_gcd_2] > [s_1, false, true]
0 > [s_1, false, true]

Status: LE_2: [1,2]
s_1: multiset status
gcd_2: multiset status
if_gcd_2: multiset status
false: multiset status
true: multiset status
0: multiset status


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE0(s0(x), s0(y)) -> LE0(x, y)

The TRS R consists of the following rules:

   gcd0(00, y) -> y
   gcd0(s0(x), s0(y)) -> if_gcd(s0(x), s0(y))
   le(s0(y)) -> le(y)
   le(00) -> false0
   gcd0(s0(x), 00) -> s0(x)
   le(y) -> true0
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   if_gcd(s0(x), s0(y)) -> gcd0(minus(x), s0(y))
   rand0(x) -> rand0(s0(x))
   if_gcd(s0(x), s0(y)) -> gcd0(minus(y), s0(x))
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   gcd0(00, y) -> y
   le(00) -> false0
   gcd0(s0(x), 00) -> s0(x)

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 2
   POL(LE0(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(false0) = 2
   POL(gcd0(x_1, x_2)) = 2 + x_1 + x_2
   POL(if_gcd(x_1, x_2)) = 2 + x_1 + x_2
   POL(le(x_1)) = 2 + 2*x_1
   POL(minus(x_1)) = x_1
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 2


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE0(s0(x), s0(y)) -> LE0(x, y)

The TRS R consists of the following rules:

   gcd0(s0(x), s0(y)) -> if_gcd(s0(x), s0(y))
   le(s0(y)) -> le(y)
   le(y) -> true0
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   if_gcd(s0(x), s0(y)) -> gcd0(minus(x), s0(y))
   rand0(x) -> rand0(s0(x))
   if_gcd(s0(x), s0(y)) -> gcd0(minus(y), s0(x))
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(23) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   rand0(x) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(LE0(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(gcd0(x_1, x_2)) = 1 + x_1 + x_2
   POL(if_gcd(x_1, x_2)) = 1 + x_1 + x_2
   POL(le(x_1)) = 2 + 2*x_1
   POL(minus(x_1)) = x_1
   POL(rand0(x_1)) = 1 + x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 2


----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE0(s0(x), s0(y)) -> LE0(x, y)

The TRS R consists of the following rules:

   gcd0(s0(x), s0(y)) -> if_gcd(s0(x), s0(y))
   le(s0(y)) -> le(y)
   le(y) -> true0
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   if_gcd(s0(x), s0(y)) -> gcd0(minus(x), s0(y))
   rand0(x) -> rand0(s0(x))
   if_gcd(s0(x), s0(y)) -> gcd0(minus(y), s0(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(25) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   le(y) -> true0

Used ordering: Polynomial interpretation [POLO]:

   POL(LE0(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(gcd0(x_1, x_2)) = 2 + x_1 + x_2
   POL(if_gcd(x_1, x_2)) = 2 + x_1 + x_2
   POL(le(x_1)) = 2 + 2*x_1
   POL(minus(x_1)) = x_1
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 0


----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE0(s0(x), s0(y)) -> LE0(x, y)

The TRS R consists of the following rules:

   gcd0(s0(x), s0(y)) -> if_gcd(s0(x), s0(y))
   le(s0(y)) -> le(y)
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   if_gcd(s0(x), s0(y)) -> gcd0(minus(x), s0(y))
   rand0(x) -> rand0(s0(x))
   if_gcd(s0(x), s0(y)) -> gcd0(minus(y), s0(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(27) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   LE0(s0(x), s0(y)) -> LE0(x, y)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
LE0(x1, x2)  =  x1

s0(x1)  =  s0(x1)

gcd0(x1, x2)  =  gcd0(x1, x2)

if_gcd(x1, x2)  =  if_gcd(x1, x2)

le(x1)  =  le(x1)

minus(x1)  =  x1

rand0(x1)  =  rand0


Recursive path order with status [RPO].
Quasi-Precedence: [s0_1, le_1] > [gcd0_2, if_gcd_2] > rand0

Status: s0_1: multiset status
gcd0_2: multiset status
if_gcd_2: multiset status
le_1: multiset status
rand0: multiset status


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   gcd0(s0(x), s0(y)) -> if_gcd(s0(x), s0(y))
   le(s0(y)) -> le(y)
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   if_gcd(s0(x), s0(y)) -> gcd0(minus(x), s0(y))
   rand0(x) -> rand0(s0(x))
   if_gcd(s0(x), s0(y)) -> gcd0(minus(y), s0(x))


----------------------------------------

(28)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   gcd0(s0(x), s0(y)) -> if_gcd(s0(x), s0(y))
   le(s0(y)) -> le(y)
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   if_gcd(s0(x), s0(y)) -> gcd0(minus(x), s0(y))
   rand0(x) -> rand0(s0(x))
   if_gcd(s0(x), s0(y)) -> gcd0(minus(y), s0(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(29) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(30)
YES

----------------------------------------

(31)
Obligation:
Relative ADP Problem with
absolute ADPs:

   if_gcd(true, s(x), s(y)) -> GCD(minus(x, y), s(y))
   gcd(s(x), s(y)) -> IF_GCD(le(y, x), s(x), s(y))
   if_gcd(false, s(x), s(y)) -> GCD(minus(y, x), s(x))

and relative ADPs:

   gcd(0, y) -> y
   gcd(s(x), s(y)) -> if_gcd(le(y, x), s(x), s(y))
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false
   gcd(s(x), 0) -> s(x)
   le(0, y) -> true
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   if_gcd(true, s(x), s(y)) -> gcd(minus(x, y), s(y))
   rand(x) -> rand(s(x))
   if_gcd(false, s(x), s(y)) -> gcd(minus(y, x), s(x))
   rand(x) -> x


----------------------------------------

(32) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:s_1 = 
true = 
IF_GCD_3 = 0
gcd_2 = 
le_2 = 0, 1
0 = 
if_gcd_3 = 0
minus_2 = 1
rand_1 = 
GCD_2 = 
false = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
IF_GCD(x1, x2, x3)  =  IF_GCD(x2, x3)

false  =  false

s(x1)  =  s(x1)

GCD(x1, x2)  =  GCD(x1, x2)

minus(x1, x2)  =  x1

le(x1, x2)  =  le

true  =  true

0  =  0

if_gcd(x1, x2, x3)  =  if_gcd(x2, x3)

gcd(x1, x2)  =  gcd(x1, x2)


Recursive path order with status [RPO].
Quasi-Precedence: le > false > [IF_GCD_2, GCD_2] > [s_1, 0]
le > true > [IF_GCD_2, GCD_2] > [s_1, 0]
[if_gcd_2, gcd_2] > [s_1, 0]

Status: IF_GCD_2: multiset status
false: multiset status
s_1: multiset status
GCD_2: multiset status
le: multiset status
true: multiset status
0: multiset status
if_gcd_2: multiset status
gcd_2: multiset status


----------------------------------------

(33)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF_GCD(s0(x), s0(y)) -> GCD0(minus(y), s0(x))
   GCD0(s0(x), s0(y)) -> IF_GCD(s0(x), s0(y))
   IF_GCD(s0(x), s0(y)) -> GCD0(minus(x), s0(y))

The TRS R consists of the following rules:

   gcd0(00, y) -> y
   gcd0(s0(x), s0(y)) -> if_gcd(s0(x), s0(y))
   le -> le
   le -> false0
   gcd0(s0(x), 00) -> s0(x)
   le -> true0
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   if_gcd(s0(x), s0(y)) -> gcd0(minus(x), s0(y))
   rand0(x) -> rand0(s0(x))
   if_gcd(s0(x), s0(y)) -> gcd0(minus(y), s0(x))
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(34) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   gcd0(00, y) -> y
   gcd0(s0(x), 00) -> s0(x)

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 2
   POL(GCD0(x_1, x_2)) = 2 + x_1 + x_2
   POL(IF_GCD(x_1, x_2)) = 2 + x_1 + x_2
   POL(false0) = 2
   POL(gcd0(x_1, x_2)) = 2 + x_1 + x_2
   POL(if_gcd(x_1, x_2)) = 2 + x_1 + x_2
   POL(le) = 2
   POL(minus(x_1)) = x_1
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 2


----------------------------------------

(35)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF_GCD(s0(x), s0(y)) -> GCD0(minus(y), s0(x))
   GCD0(s0(x), s0(y)) -> IF_GCD(s0(x), s0(y))
   IF_GCD(s0(x), s0(y)) -> GCD0(minus(x), s0(y))

The TRS R consists of the following rules:

   gcd0(s0(x), s0(y)) -> if_gcd(s0(x), s0(y))
   le -> le
   le -> false0
   le -> true0
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   if_gcd(s0(x), s0(y)) -> gcd0(minus(x), s0(y))
   rand0(x) -> rand0(s0(x))
   if_gcd(s0(x), s0(y)) -> gcd0(minus(y), s0(x))
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(36) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   rand0(x) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(GCD0(x_1, x_2)) = 2 + x_1 + x_2
   POL(IF_GCD(x_1, x_2)) = 2 + x_1 + x_2
   POL(false0) = 2
   POL(gcd0(x_1, x_2)) = 2 + x_1 + x_2
   POL(if_gcd(x_1, x_2)) = 2 + x_1 + x_2
   POL(le) = 2
   POL(minus(x_1)) = x_1
   POL(rand0(x_1)) = 1 + 2*x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 2


----------------------------------------

(37)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF_GCD(s0(x), s0(y)) -> GCD0(minus(y), s0(x))
   GCD0(s0(x), s0(y)) -> IF_GCD(s0(x), s0(y))
   IF_GCD(s0(x), s0(y)) -> GCD0(minus(x), s0(y))

The TRS R consists of the following rules:

   gcd0(s0(x), s0(y)) -> if_gcd(s0(x), s0(y))
   le -> le
   le -> false0
   le -> true0
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   if_gcd(s0(x), s0(y)) -> gcd0(minus(x), s0(y))
   rand0(x) -> rand0(s0(x))
   if_gcd(s0(x), s0(y)) -> gcd0(minus(y), s0(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(38) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   le -> true0

Used ordering: Polynomial interpretation [POLO]:

   POL(GCD0(x_1, x_2)) = 2 + x_1 + x_2
   POL(IF_GCD(x_1, x_2)) = 2 + x_1 + x_2
   POL(false0) = 2
   POL(gcd0(x_1, x_2)) = 2 + x_1 + x_2
   POL(if_gcd(x_1, x_2)) = 2 + x_1 + x_2
   POL(le) = 2
   POL(minus(x_1)) = x_1
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 0


----------------------------------------

(39)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF_GCD(s0(x), s0(y)) -> GCD0(minus(y), s0(x))
   GCD0(s0(x), s0(y)) -> IF_GCD(s0(x), s0(y))
   IF_GCD(s0(x), s0(y)) -> GCD0(minus(x), s0(y))

The TRS R consists of the following rules:

   gcd0(s0(x), s0(y)) -> if_gcd(s0(x), s0(y))
   le -> le
   le -> false0
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   if_gcd(s0(x), s0(y)) -> gcd0(minus(x), s0(y))
   rand0(x) -> rand0(s0(x))
   if_gcd(s0(x), s0(y)) -> gcd0(minus(y), s0(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(40) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   le -> false0

Used ordering: Polynomial interpretation [POLO]:

   POL(GCD0(x_1, x_2)) = 2 + x_1 + x_2
   POL(IF_GCD(x_1, x_2)) = 2 + x_1 + x_2
   POL(false0) = 0
   POL(gcd0(x_1, x_2)) = 2 + x_1 + x_2
   POL(if_gcd(x_1, x_2)) = 2 + x_1 + x_2
   POL(le) = 1
   POL(minus(x_1)) = x_1
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1


----------------------------------------

(41)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF_GCD(s0(x), s0(y)) -> GCD0(minus(y), s0(x))
   GCD0(s0(x), s0(y)) -> IF_GCD(s0(x), s0(y))
   IF_GCD(s0(x), s0(y)) -> GCD0(minus(x), s0(y))

The TRS R consists of the following rules:

   gcd0(s0(x), s0(y)) -> if_gcd(s0(x), s0(y))
   le -> le
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   if_gcd(s0(x), s0(y)) -> gcd0(minus(x), s0(y))
   rand0(x) -> rand0(s0(x))
   if_gcd(s0(x), s0(y)) -> gcd0(minus(y), s0(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(42) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   IF_GCD(s0(x), s0(y)) -> GCD0(minus(y), s0(x))
   IF_GCD(s0(x), s0(y)) -> GCD0(minus(x), s0(y))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( gcd0_2(x_1, x_2) ) = 2
POL( s0_1(x_1) ) = 2x_1 + 1
POL( if_gcd_2(x_1, x_2) ) = 2
POL( le ) = 0
POL( minus_1(x_1) ) = x_1
POL( rand0_1(x_1) ) = max{0, -2}
POL( IF_GCD_2(x_1, x_2) ) = max{0, x_1 + x_2 - 1}
POL( GCD0_2(x_1, x_2) ) = max{0, 2x_1 + x_2 - 2}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   gcd0(s0(x), s0(y)) -> if_gcd(s0(x), s0(y))
   le -> le
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   if_gcd(s0(x), s0(y)) -> gcd0(minus(x), s0(y))
   rand0(x) -> rand0(s0(x))
   if_gcd(s0(x), s0(y)) -> gcd0(minus(y), s0(x))


----------------------------------------

(43)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GCD0(s0(x), s0(y)) -> IF_GCD(s0(x), s0(y))

The TRS R consists of the following rules:

   gcd0(s0(x), s0(y)) -> if_gcd(s0(x), s0(y))
   le -> le
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   if_gcd(s0(x), s0(y)) -> gcd0(minus(x), s0(y))
   rand0(x) -> rand0(s0(x))
   if_gcd(s0(x), s0(y)) -> gcd0(minus(y), s0(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(44) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(45)
TRUE
