YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/V3Mmo.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) RelADPP
        (6) RelADPCleverAfsProof [SOUND, 42 ms]
        (7) QDP
        (8) MRRProof [EQUIVALENT, 23 ms]
        (9) QDP
        (10) MRRProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) MRRProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) MRRProof [EQUIVALENT, 4 ms]
        (15) QDP
        (16) MRRProof [EQUIVALENT, 2 ms]
        (17) QDP
        (18) MRRProof [EQUIVALENT, 0 ms]
        (19) QDP
        (20) MRRProof [EQUIVALENT, 3 ms]
        (21) QDP
        (22) MRRProof [EQUIVALENT, 3 ms]
        (23) QDP
        (24) QDPOrderProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) PisEmptyProof [EQUIVALENT, 0 ms]
        (27) YES
    (28) RelADPP
        (29) RelADPCleverAfsProof [SOUND, 27 ms]
        (30) QDP
        (31) MRRProof [EQUIVALENT, 20 ms]
        (32) QDP
        (33) PisEmptyProof [EQUIVALENT, 0 ms]
        (34) YES
    (35) RelADPP
        (36) RelADPDerelatifyingProof [EQUIVALENT, 0 ms]
        (37) QDP
        (38) QDPOrderProof [EQUIVALENT, 16 ms]
        (39) QDP
        (40) PisEmptyProof [EQUIVALENT, 0 ms]
        (41) YES
    (42) RelADPP
        (43) RelADPCleverAfsProof [SOUND, 27 ms]
        (44) QDP
        (45) MRRProof [EQUIVALENT, 16 ms]
        (46) QDP
        (47) MRRProof [EQUIVALENT, 6 ms]
        (48) QDP
        (49) MRRProof [EQUIVALENT, 5 ms]
        (50) QDP
        (51) MRRProof [EQUIVALENT, 2 ms]
        (52) QDP
        (53) MRRProof [EQUIVALENT, 5 ms]
        (54) QDP
        (55) PisEmptyProof [EQUIVALENT, 0 ms]
        (56) YES
    (57) RelADPP
        (58) RelADPCleverAfsProof [SOUND, 22 ms]
        (59) QDP
        (60) MRRProof [EQUIVALENT, 21 ms]
        (61) QDP
        (62) MRRProof [EQUIVALENT, 5 ms]
        (63) QDP
        (64) MRRProof [EQUIVALENT, 0 ms]
        (65) QDP
        (66) MRRProof [EQUIVALENT, 4 ms]
        (67) QDP
        (68) MRRProof [EQUIVALENT, 2 ms]
        (69) QDP
        (70) MRRProof [EQUIVALENT, 0 ms]
        (71) QDP
        (72) PisEmptyProof [EQUIVALENT, 0 ms]
        (73) YES
    (74) RelADPP
        (75) RelADPDerelatifyingProof [EQUIVALENT, 0 ms]
        (76) QDP
        (77) QDPOrderProof [EQUIVALENT, 16 ms]
        (78) QDP
        (79) PisEmptyProof [EQUIVALENT, 0 ms]
        (80) YES
    (81) RelADPP
        (82) RelADPCleverAfsProof [SOUND, 41 ms]
        (83) QDP
        (84) MRRProof [EQUIVALENT, 13 ms]
        (85) QDP
        (86) MRRProof [EQUIVALENT, 5 ms]
        (87) QDP
        (88) MRRProof [EQUIVALENT, 4 ms]
        (89) QDP
        (90) MRRProof [EQUIVALENT, 4 ms]
        (91) QDP
        (92) MRRProof [EQUIVALENT, 6 ms]
        (93) QDP
        (94) MRRProof [EQUIVALENT, 4 ms]
        (95) QDP
        (96) MRRProof [EQUIVALENT, 0 ms]
        (97) QDP
        (98) MRRProof [EQUIVALENT, 3 ms]
        (99) QDP
        (100) MRRProof [EQUIVALENT, 1 ms]
        (101) QDP
        (102) QDPOrderProof [EQUIVALENT, 6 ms]
        (103) QDP
        (104) PisEmptyProof [EQUIVALENT, 0 ms]
        (105) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   reverse(nil) -> nil
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))
   shuffle(nil) -> nil
   shuffle(add(n, x)) -> add(n, shuffle(reverse(x)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   less_leaves(x, leaf) -> false
   less_leaves(leaf, cons(w, z)) -> true
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))

The relative TRS consists of the following S rules:

   rand(x) -> rand(s(x))
   rand(x) -> x


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> MINUS(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(QUOT(minus(x, y), s(y)))
   quot(s(x), s(y)) -> s(quot(MINUS(x, y), s(y)))
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, APP(x, y))
   reverse(nil) -> nil
   reverse(add(n, x)) -> APP(reverse(x), add(n, nil))
   reverse(add(n, x)) -> app(REVERSE(x), add(n, nil))
   shuffle(nil) -> nil
   shuffle(add(n, x)) -> add(n, SHUFFLE(reverse(x)))
   shuffle(add(n, x)) -> add(n, shuffle(REVERSE(x)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, CONCAT(v, y))
   less_leaves(x, leaf) -> false
   less_leaves(leaf, cons(w, z)) -> true
   less_leaves(cons(u, v), cons(w, z)) -> LESS_LEAVES(concat(u, v), concat(w, z))
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(CONCAT(u, v), concat(w, z))
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), CONCAT(w, z))

and relative ADPs:

   rand(x) -> RAND(s(x))
   rand(x) -> x


----------------------------------------

(3) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  7 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 7 subproblems.

----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Relative ADP Problem with
absolute ADPs:

   minus(s(x), s(y)) -> MINUS(x, y)

and relative ADPs:

   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   rand(x) -> rand(s(x))
   shuffle(nil) -> nil
   shuffle(add(n, x)) -> add(n, shuffle(reverse(x)))
   quot(0, s(y)) -> 0
   reverse(nil) -> nil
   less_leaves(x, leaf) -> false
   app(add(n, x), y) -> add(n, app(x, y))
   less_leaves(leaf, cons(w, z)) -> true
   app(nil, y) -> y
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))
   minus(x, 0) -> x
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))
   rand(x) -> x


----------------------------------------

(6) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:MINUS_2 = 0
true = 
less_leaves_2 = 
add_2 = 
app_2 = 
concat_2 = 
leaf = 
shuffle_1 = 
rand_1 = 
quot_2 = 1
nil = 
false = 
s_1 = 
reverse_1 = 
0 = 
minus_2 = 1
cons_2 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
MINUS(x1, x2)  =  MINUS(x2)

s(x1)  =  s(x1)

quot(x1, x2)  =  quot(x1)

minus(x1, x2)  =  x1

0  =  0


Recursive path order with status [RPO].
Quasi-Precedence: [MINUS_1, s_1, quot_1] > 0

Status: MINUS_1: [1]
s_1: multiset status
quot_1: multiset status
0: multiset status


----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s0(y)) -> MINUS(y)

The TRS R consists of the following rules:

   quot(s0(x)) -> s0(quot(minus(x)))
   concat0(leaf0, y) -> y
   concat0(cons0(u, v), y) -> cons0(u, concat0(v, y))
   rand0(x) -> rand0(s0(x))
   shuffle0(nil0) -> nil0
   shuffle0(add0(n, x)) -> add0(n, shuffle0(reverse0(x)))
   quot(00) -> 00
   reverse0(nil0) -> nil0
   less_leaves0(x, leaf0) -> false0
   app0(add0(n, x), y) -> add0(n, app0(x, y))
   less_leaves0(leaf0, cons0(w, z)) -> true0
   app0(nil0, y) -> y
   reverse0(add0(n, x)) -> app0(reverse0(x), add0(n, nil0))
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   less_leaves0(cons0(u, v), cons0(w, z)) -> less_leaves0(concat0(u, v), concat0(w, z))
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(8) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   concat0(leaf0, y) -> y
   concat0(cons0(u, v), y) -> cons0(u, concat0(v, y))
   quot(00) -> 00
   less_leaves0(x, leaf0) -> false0
   less_leaves0(leaf0, cons0(w, z)) -> true0
   less_leaves0(cons0(u, v), cons0(w, z)) -> less_leaves0(concat0(u, v), concat0(w, z))

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 2
   POL(MINUS(x_1)) = 2*x_1
   POL(add0(x_1, x_2)) = 2*x_1 + x_2
   POL(app0(x_1, x_2)) = x_1 + x_2
   POL(concat0(x_1, x_2)) = 2*x_1 + x_2
   POL(cons0(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(false0) = 0
   POL(leaf0) = 2
   POL(less_leaves0(x_1, x_2)) = 1 + x_1 + 2*x_2
   POL(minus(x_1)) = x_1
   POL(nil0) = 0
   POL(quot(x_1)) = 2 + x_1
   POL(rand0(x_1)) = 2*x_1
   POL(reverse0(x_1)) = x_1
   POL(s0(x_1)) = x_1
   POL(shuffle0(x_1)) = x_1
   POL(true0) = 2


----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s0(y)) -> MINUS(y)

The TRS R consists of the following rules:

   quot(s0(x)) -> s0(quot(minus(x)))
   rand0(x) -> rand0(s0(x))
   shuffle0(nil0) -> nil0
   shuffle0(add0(n, x)) -> add0(n, shuffle0(reverse0(x)))
   reverse0(nil0) -> nil0
   app0(add0(n, x), y) -> add0(n, app0(x, y))
   app0(nil0, y) -> y
   reverse0(add0(n, x)) -> app0(reverse0(x), add0(n, nil0))
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(10) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   rand0(x) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(MINUS(x_1)) = 2*x_1
   POL(add0(x_1, x_2)) = 2*x_1 + x_2
   POL(app0(x_1, x_2)) = x_1 + x_2
   POL(minus(x_1)) = x_1
   POL(nil0) = 0
   POL(quot(x_1)) = 2 + x_1
   POL(rand0(x_1)) = 1 + 2*x_1
   POL(reverse0(x_1)) = x_1
   POL(s0(x_1)) = x_1
   POL(shuffle0(x_1)) = 2*x_1


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s0(y)) -> MINUS(y)

The TRS R consists of the following rules:

   quot(s0(x)) -> s0(quot(minus(x)))
   rand0(x) -> rand0(s0(x))
   shuffle0(nil0) -> nil0
   shuffle0(add0(n, x)) -> add0(n, shuffle0(reverse0(x)))
   reverse0(nil0) -> nil0
   app0(add0(n, x), y) -> add0(n, app0(x, y))
   app0(nil0, y) -> y
   reverse0(add0(n, x)) -> app0(reverse0(x), add0(n, nil0))
   minus(s0(x)) -> minus(x)
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   shuffle0(nil0) -> nil0

Used ordering: Polynomial interpretation [POLO]:

   POL(MINUS(x_1)) = 2*x_1
   POL(add0(x_1, x_2)) = 2*x_1 + x_2
   POL(app0(x_1, x_2)) = x_1 + x_2
   POL(minus(x_1)) = x_1
   POL(nil0) = 0
   POL(quot(x_1)) = 1 + x_1
   POL(rand0(x_1)) = 2*x_1
   POL(reverse0(x_1)) = x_1
   POL(s0(x_1)) = x_1
   POL(shuffle0(x_1)) = 2 + 2*x_1


----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s0(y)) -> MINUS(y)

The TRS R consists of the following rules:

   quot(s0(x)) -> s0(quot(minus(x)))
   rand0(x) -> rand0(s0(x))
   shuffle0(add0(n, x)) -> add0(n, shuffle0(reverse0(x)))
   reverse0(nil0) -> nil0
   app0(add0(n, x), y) -> add0(n, app0(x, y))
   app0(nil0, y) -> y
   reverse0(add0(n, x)) -> app0(reverse0(x), add0(n, nil0))
   minus(s0(x)) -> minus(x)
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(14) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   shuffle0(add0(n, x)) -> add0(n, shuffle0(reverse0(x)))

Used ordering: Polynomial interpretation [POLO]:

   POL(MINUS(x_1)) = 2*x_1
   POL(add0(x_1, x_2)) = 1 + 2*x_1 + x_2
   POL(app0(x_1, x_2)) = x_1 + x_2
   POL(minus(x_1)) = x_1
   POL(nil0) = 0
   POL(quot(x_1)) = 1 + x_1
   POL(rand0(x_1)) = 2*x_1
   POL(reverse0(x_1)) = x_1
   POL(s0(x_1)) = x_1
   POL(shuffle0(x_1)) = 2 + 2*x_1


----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s0(y)) -> MINUS(y)

The TRS R consists of the following rules:

   quot(s0(x)) -> s0(quot(minus(x)))
   rand0(x) -> rand0(s0(x))
   reverse0(nil0) -> nil0
   app0(add0(n, x), y) -> add0(n, app0(x, y))
   app0(nil0, y) -> y
   reverse0(add0(n, x)) -> app0(reverse0(x), add0(n, nil0))
   minus(s0(x)) -> minus(x)
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(16) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   reverse0(nil0) -> nil0

Used ordering: Polynomial interpretation [POLO]:

   POL(MINUS(x_1)) = 2*x_1
   POL(add0(x_1, x_2)) = 1 + 2*x_1 + x_2
   POL(app0(x_1, x_2)) = x_1 + x_2
   POL(minus(x_1)) = x_1
   POL(nil0) = 0
   POL(quot(x_1)) = 1 + x_1
   POL(rand0(x_1)) = 2*x_1
   POL(reverse0(x_1)) = 1 + x_1
   POL(s0(x_1)) = x_1


----------------------------------------

(17)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s0(y)) -> MINUS(y)

The TRS R consists of the following rules:

   quot(s0(x)) -> s0(quot(minus(x)))
   rand0(x) -> rand0(s0(x))
   app0(add0(n, x), y) -> add0(n, app0(x, y))
   app0(nil0, y) -> y
   reverse0(add0(n, x)) -> app0(reverse0(x), add0(n, nil0))
   minus(s0(x)) -> minus(x)
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(18) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   app0(nil0, y) -> y

Used ordering: Polynomial interpretation [POLO]:

   POL(MINUS(x_1)) = 2*x_1
   POL(add0(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(app0(x_1, x_2)) = x_1 + x_2
   POL(minus(x_1)) = x_1
   POL(nil0) = 2
   POL(quot(x_1)) = 1 + x_1
   POL(rand0(x_1)) = 2*x_1
   POL(reverse0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1


----------------------------------------

(19)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s0(y)) -> MINUS(y)

The TRS R consists of the following rules:

   quot(s0(x)) -> s0(quot(minus(x)))
   rand0(x) -> rand0(s0(x))
   app0(add0(n, x), y) -> add0(n, app0(x, y))
   reverse0(add0(n, x)) -> app0(reverse0(x), add0(n, nil0))
   minus(s0(x)) -> minus(x)
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(20) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   reverse0(add0(n, x)) -> app0(reverse0(x), add0(n, nil0))

Used ordering: Polynomial interpretation [POLO]:

   POL(MINUS(x_1)) = 2*x_1
   POL(add0(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(app0(x_1, x_2)) = x_1 + x_2
   POL(minus(x_1)) = x_1
   POL(nil0) = 1
   POL(quot(x_1)) = 1 + x_1
   POL(rand0(x_1)) = 2*x_1
   POL(reverse0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1


----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s0(y)) -> MINUS(y)

The TRS R consists of the following rules:

   quot(s0(x)) -> s0(quot(minus(x)))
   rand0(x) -> rand0(s0(x))
   app0(add0(n, x), y) -> add0(n, app0(x, y))
   minus(s0(x)) -> minus(x)
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(22) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   app0(add0(n, x), y) -> add0(n, app0(x, y))

Used ordering: Polynomial interpretation [POLO]:

   POL(MINUS(x_1)) = 2*x_1
   POL(add0(x_1, x_2)) = 1 + x_1 + x_2
   POL(app0(x_1, x_2)) = 2 + 2*x_1 + 2*x_2
   POL(minus(x_1)) = x_1
   POL(quot(x_1)) = 1 + x_1
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1


----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s0(y)) -> MINUS(y)

The TRS R consists of the following rules:

   quot(s0(x)) -> s0(quot(minus(x)))
   rand0(x) -> rand0(s0(x))
   minus(s0(x)) -> minus(x)
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(24) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MINUS(s0(y)) -> MINUS(y)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
MINUS(x1)  =  x1

s0(x1)  =  s0(x1)

quot(x1)  =  x1

minus(x1)  =  x1

rand0(x1)  =  rand0


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   s0_1=1
   rand0=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   quot(s0(x)) -> s0(quot(minus(x)))
   rand0(x) -> rand0(s0(x))
   minus(s0(x)) -> minus(x)
   minus(x) -> x


----------------------------------------

(25)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   quot(s0(x)) -> s0(quot(minus(x)))
   rand0(x) -> rand0(s0(x))
   minus(s0(x)) -> minus(x)
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(26) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(27)
YES

----------------------------------------

(28)
Obligation:
Relative ADP Problem with
absolute ADPs:

   concat(cons(u, v), y) -> cons(u, CONCAT(v, y))

and relative ADPs:

   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   concat(leaf, y) -> y
   rand(x) -> rand(s(x))
   shuffle(nil) -> nil
   shuffle(add(n, x)) -> add(n, shuffle(reverse(x)))
   quot(0, s(y)) -> 0
   reverse(nil) -> nil
   less_leaves(x, leaf) -> false
   app(add(n, x), y) -> add(n, app(x, y))
   less_leaves(leaf, cons(w, z)) -> true
   app(nil, y) -> y
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))
   rand(x) -> x


----------------------------------------

(29) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:true = 
CONCAT_2 = 1
less_leaves_2 = 
add_2 = 
app_2 = 
concat_2 = 
leaf = 
shuffle_1 = 
rand_1 = 
quot_2 = 1
nil = 
false = 
s_1 = 
reverse_1 = 
0 = 
minus_2 = 1
cons_2 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
CONCAT(x1, x2)  =  x1

cons(x1, x2)  =  cons(x1, x2)

quot(x1, x2)  =  x1

s(x1)  =  s(x1)

minus(x1, x2)  =  x1

0  =  0


Recursive path order with status [RPO].
Quasi-Precedence: s_1 > 0

Status: cons_2: [2,1]
s_1: multiset status
0: multiset status


----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CONCAT(cons0(u, v)) -> CONCAT(v)

The TRS R consists of the following rules:

   quot(s0(x)) -> s0(quot(minus(x)))
   concat0(leaf0, y) -> y
   concat0(cons0(u, v), y) -> cons0(u, concat0(v, y))
   rand0(x) -> rand0(s0(x))
   shuffle0(nil0) -> nil0
   shuffle0(add0(n, x)) -> add0(n, shuffle0(reverse0(x)))
   quot(00) -> 00
   reverse0(nil0) -> nil0
   less_leaves0(x, leaf0) -> false0
   app0(add0(n, x), y) -> add0(n, app0(x, y))
   less_leaves0(leaf0, cons0(w, z)) -> true0
   app0(nil0, y) -> y
   reverse0(add0(n, x)) -> app0(reverse0(x), add0(n, nil0))
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   less_leaves0(cons0(u, v), cons0(w, z)) -> less_leaves0(concat0(u, v), concat0(w, z))
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(31) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   CONCAT(cons0(u, v)) -> CONCAT(v)

Strictly oriented rules of the TRS R:

   concat0(leaf0, y) -> y
   concat0(cons0(u, v), y) -> cons0(u, concat0(v, y))
   quot(00) -> 00
   less_leaves0(leaf0, cons0(w, z)) -> true0
   less_leaves0(cons0(u, v), cons0(w, z)) -> less_leaves0(concat0(u, v), concat0(w, z))

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 2
   POL(CONCAT(x_1)) = 2*x_1
   POL(add0(x_1, x_2)) = 2*x_1 + x_2
   POL(app0(x_1, x_2)) = x_1 + x_2
   POL(concat0(x_1, x_2)) = 2*x_1 + x_2
   POL(cons0(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(false0) = 2
   POL(leaf0) = 1
   POL(less_leaves0(x_1, x_2)) = 1 + 2*x_1 + x_2
   POL(minus(x_1)) = x_1
   POL(nil0) = 0
   POL(quot(x_1)) = 2 + x_1
   POL(rand0(x_1)) = 2*x_1
   POL(reverse0(x_1)) = x_1
   POL(s0(x_1)) = x_1
   POL(shuffle0(x_1)) = x_1
   POL(true0) = 0


----------------------------------------

(32)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   quot(s0(x)) -> s0(quot(minus(x)))
   rand0(x) -> rand0(s0(x))
   shuffle0(nil0) -> nil0
   shuffle0(add0(n, x)) -> add0(n, shuffle0(reverse0(x)))
   reverse0(nil0) -> nil0
   less_leaves0(x, leaf0) -> false0
   app0(add0(n, x), y) -> add0(n, app0(x, y))
   app0(nil0, y) -> y
   reverse0(add0(n, x)) -> app0(reverse0(x), add0(n, nil0))
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(33) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(34)
YES

----------------------------------------

(35)
Obligation:
Relative ADP Problem with
absolute ADPs:

   less_leaves(cons(u, v), cons(w, z)) -> LESS_LEAVES(concat(u, v), concat(w, z))

and relative ADPs:

   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   rand(x) -> rand(s(x))
   shuffle(nil) -> nil
   shuffle(add(n, x)) -> add(n, shuffle(reverse(x)))
   quot(0, s(y)) -> 0
   reverse(nil) -> nil
   less_leaves(x, leaf) -> false
   app(add(n, x), y) -> add(n, app(x, y))
   less_leaves(leaf, cons(w, z)) -> true
   app(nil, y) -> y
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))
   rand(x) -> x


----------------------------------------

(36) RelADPDerelatifyingProof (EQUIVALENT)


We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.
----------------------------------------

(37)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LESS_LEAVES(cons(u, v), cons(w, z)) -> LESS_LEAVES(concat(u, v), concat(w, z))

The TRS R consists of the following rules:

   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   rand(x) -> rand(s(x))
   shuffle(nil) -> nil
   shuffle(add(n, x)) -> add(n, shuffle(reverse(x)))
   quot(0, s(y)) -> 0
   reverse(nil) -> nil
   less_leaves(x, leaf) -> false
   app(add(n, x), y) -> add(n, app(x, y))
   less_leaves(leaf, cons(w, z)) -> true
   app(nil, y) -> y
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))
   rand(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(38) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   LESS_LEAVES(cons(u, v), cons(w, z)) -> LESS_LEAVES(concat(u, v), concat(w, z))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( quot_2(x_1, x_2) ) = 2
POL( s_1(x_1) ) = x_1
POL( minus_2(x_1, x_2) ) = x_1 + 2
POL( concat_2(x_1, x_2) ) = x_1 + x_2
POL( leaf ) = 0
POL( cons_2(x_1, x_2) ) = x_1 + x_2 + 2
POL( rand_1(x_1) ) = 2x_1
POL( shuffle_1(x_1) ) = 2
POL( nil ) = 0
POL( add_2(x_1, x_2) ) = max{0, x_2 - 2}
POL( reverse_1(x_1) ) = 0
POL( 0 ) = 0
POL( less_leaves_2(x_1, x_2) ) = 1
POL( false ) = 0
POL( app_2(x_1, x_2) ) = x_2
POL( true ) = 0
POL( LESS_LEAVES_2(x_1, x_2) ) = max{0, 2x_1 - 2}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   rand(x) -> rand(s(x))
   shuffle(nil) -> nil
   shuffle(add(n, x)) -> add(n, shuffle(reverse(x)))
   quot(0, s(y)) -> 0
   reverse(nil) -> nil
   less_leaves(x, leaf) -> false
   app(add(n, x), y) -> add(n, app(x, y))
   less_leaves(leaf, cons(w, z)) -> true
   app(nil, y) -> y
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))
   rand(x) -> x


----------------------------------------

(39)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   rand(x) -> rand(s(x))
   shuffle(nil) -> nil
   shuffle(add(n, x)) -> add(n, shuffle(reverse(x)))
   quot(0, s(y)) -> 0
   reverse(nil) -> nil
   less_leaves(x, leaf) -> false
   app(add(n, x), y) -> add(n, app(x, y))
   less_leaves(leaf, cons(w, z)) -> true
   app(nil, y) -> y
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))
   rand(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(40) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(41)
YES

----------------------------------------

(42)
Obligation:
Relative ADP Problem with
absolute ADPs:

   app(add(n, x), y) -> add(n, APP(x, y))

and relative ADPs:

   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   rand(x) -> rand(s(x))
   shuffle(nil) -> nil
   shuffle(add(n, x)) -> add(n, shuffle(reverse(x)))
   quot(0, s(y)) -> 0
   reverse(nil) -> nil
   less_leaves(x, leaf) -> false
   less_leaves(leaf, cons(w, z)) -> true
   app(nil, y) -> y
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))
   rand(x) -> x


----------------------------------------

(43) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:true = 
less_leaves_2 = 
app_2 = 
add_2 = 
concat_2 = 
leaf = 
shuffle_1 = 
rand_1 = 
APP_2 = 
quot_2 = 1
nil = 
false = 
s_1 = 
reverse_1 = 
0 = 
minus_2 = 1
cons_2 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
APP(x1, x2)  =  APP(x1, x2)

add(x1, x2)  =  add(x1, x2)

quot(x1, x2)  =  x1

s(x1)  =  s(x1)

minus(x1, x2)  =  x1

0  =  0


Recursive path order with status [RPO].
Quasi-Precedence: s_1 > [APP_2, add_2]
0 > [APP_2, add_2]

Status: APP_2: [1,2]
add_2: [1,2]
s_1: multiset status
0: multiset status


----------------------------------------

(44)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP0(add0(n, x), y) -> APP0(x, y)

The TRS R consists of the following rules:

   quot(s0(x)) -> s0(quot(minus(x)))
   concat0(leaf0, y) -> y
   concat0(cons0(u, v), y) -> cons0(u, concat0(v, y))
   rand0(x) -> rand0(s0(x))
   shuffle0(nil0) -> nil0
   shuffle0(add0(n, x)) -> add0(n, shuffle0(reverse0(x)))
   quot(00) -> 00
   reverse0(nil0) -> nil0
   less_leaves0(x, leaf0) -> false0
   app0(add0(n, x), y) -> add0(n, app0(x, y))
   less_leaves0(leaf0, cons0(w, z)) -> true0
   app0(nil0, y) -> y
   reverse0(add0(n, x)) -> app0(reverse0(x), add0(n, nil0))
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   less_leaves0(cons0(u, v), cons0(w, z)) -> less_leaves0(concat0(u, v), concat0(w, z))
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(45) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   concat0(leaf0, y) -> y
   concat0(cons0(u, v), y) -> cons0(u, concat0(v, y))
   quot(00) -> 00
   less_leaves0(leaf0, cons0(w, z)) -> true0
   less_leaves0(cons0(u, v), cons0(w, z)) -> less_leaves0(concat0(u, v), concat0(w, z))

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 2
   POL(APP0(x_1, x_2)) = 2*x_1 + x_2
   POL(add0(x_1, x_2)) = 2*x_1 + x_2
   POL(app0(x_1, x_2)) = x_1 + x_2
   POL(concat0(x_1, x_2)) = 2*x_1 + x_2
   POL(cons0(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(false0) = 2
   POL(leaf0) = 1
   POL(less_leaves0(x_1, x_2)) = 1 + 2*x_1 + x_2
   POL(minus(x_1)) = x_1
   POL(nil0) = 0
   POL(quot(x_1)) = 2 + x_1
   POL(rand0(x_1)) = 2*x_1
   POL(reverse0(x_1)) = x_1
   POL(s0(x_1)) = x_1
   POL(shuffle0(x_1)) = x_1
   POL(true0) = 0


----------------------------------------

(46)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP0(add0(n, x), y) -> APP0(x, y)

The TRS R consists of the following rules:

   quot(s0(x)) -> s0(quot(minus(x)))
   rand0(x) -> rand0(s0(x))
   shuffle0(nil0) -> nil0
   shuffle0(add0(n, x)) -> add0(n, shuffle0(reverse0(x)))
   reverse0(nil0) -> nil0
   less_leaves0(x, leaf0) -> false0
   app0(add0(n, x), y) -> add0(n, app0(x, y))
   app0(nil0, y) -> y
   reverse0(add0(n, x)) -> app0(reverse0(x), add0(n, nil0))
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(47) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   less_leaves0(x, leaf0) -> false0

Used ordering: Polynomial interpretation [POLO]:

   POL(APP0(x_1, x_2)) = 2*x_1 + x_2
   POL(add0(x_1, x_2)) = 2*x_1 + x_2
   POL(app0(x_1, x_2)) = x_1 + x_2
   POL(false0) = 1
   POL(leaf0) = 1
   POL(less_leaves0(x_1, x_2)) = 2 + x_1 + 2*x_2
   POL(minus(x_1)) = x_1
   POL(nil0) = 0
   POL(quot(x_1)) = 2 + x_1
   POL(rand0(x_1)) = 2*x_1
   POL(reverse0(x_1)) = x_1
   POL(s0(x_1)) = x_1
   POL(shuffle0(x_1)) = 2*x_1


----------------------------------------

(48)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP0(add0(n, x), y) -> APP0(x, y)

The TRS R consists of the following rules:

   quot(s0(x)) -> s0(quot(minus(x)))
   rand0(x) -> rand0(s0(x))
   shuffle0(nil0) -> nil0
   shuffle0(add0(n, x)) -> add0(n, shuffle0(reverse0(x)))
   reverse0(nil0) -> nil0
   app0(add0(n, x), y) -> add0(n, app0(x, y))
   app0(nil0, y) -> y
   reverse0(add0(n, x)) -> app0(reverse0(x), add0(n, nil0))
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(49) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   rand0(x) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(APP0(x_1, x_2)) = 2*x_1 + x_2
   POL(add0(x_1, x_2)) = 2*x_1 + x_2
   POL(app0(x_1, x_2)) = x_1 + x_2
   POL(minus(x_1)) = x_1
   POL(nil0) = 0
   POL(quot(x_1)) = 2 + x_1
   POL(rand0(x_1)) = 1 + 2*x_1
   POL(reverse0(x_1)) = x_1
   POL(s0(x_1)) = x_1
   POL(shuffle0(x_1)) = 2*x_1


----------------------------------------

(50)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP0(add0(n, x), y) -> APP0(x, y)

The TRS R consists of the following rules:

   quot(s0(x)) -> s0(quot(minus(x)))
   rand0(x) -> rand0(s0(x))
   shuffle0(nil0) -> nil0
   shuffle0(add0(n, x)) -> add0(n, shuffle0(reverse0(x)))
   reverse0(nil0) -> nil0
   app0(add0(n, x), y) -> add0(n, app0(x, y))
   app0(nil0, y) -> y
   reverse0(add0(n, x)) -> app0(reverse0(x), add0(n, nil0))
   minus(s0(x)) -> minus(x)
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(51) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   shuffle0(nil0) -> nil0

Used ordering: Polynomial interpretation [POLO]:

   POL(APP0(x_1, x_2)) = 2*x_1 + x_2
   POL(add0(x_1, x_2)) = 2*x_1 + x_2
   POL(app0(x_1, x_2)) = x_1 + x_2
   POL(minus(x_1)) = x_1
   POL(nil0) = 0
   POL(quot(x_1)) = 1 + x_1
   POL(rand0(x_1)) = 2*x_1
   POL(reverse0(x_1)) = x_1
   POL(s0(x_1)) = x_1
   POL(shuffle0(x_1)) = 2 + 2*x_1


----------------------------------------

(52)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP0(add0(n, x), y) -> APP0(x, y)

The TRS R consists of the following rules:

   quot(s0(x)) -> s0(quot(minus(x)))
   rand0(x) -> rand0(s0(x))
   shuffle0(add0(n, x)) -> add0(n, shuffle0(reverse0(x)))
   reverse0(nil0) -> nil0
   app0(add0(n, x), y) -> add0(n, app0(x, y))
   app0(nil0, y) -> y
   reverse0(add0(n, x)) -> app0(reverse0(x), add0(n, nil0))
   minus(s0(x)) -> minus(x)
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(53) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   APP0(add0(n, x), y) -> APP0(x, y)

Strictly oriented rules of the TRS R:

   shuffle0(add0(n, x)) -> add0(n, shuffle0(reverse0(x)))

Used ordering: Polynomial interpretation [POLO]:

   POL(APP0(x_1, x_2)) = 2*x_1 + x_2
   POL(add0(x_1, x_2)) = 1 + 2*x_1 + x_2
   POL(app0(x_1, x_2)) = x_1 + x_2
   POL(minus(x_1)) = x_1
   POL(nil0) = 0
   POL(quot(x_1)) = 1 + x_1
   POL(rand0(x_1)) = 2*x_1
   POL(reverse0(x_1)) = x_1
   POL(s0(x_1)) = x_1
   POL(shuffle0(x_1)) = 2 + 2*x_1


----------------------------------------

(54)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   quot(s0(x)) -> s0(quot(minus(x)))
   rand0(x) -> rand0(s0(x))
   reverse0(nil0) -> nil0
   app0(add0(n, x), y) -> add0(n, app0(x, y))
   app0(nil0, y) -> y
   reverse0(add0(n, x)) -> app0(reverse0(x), add0(n, nil0))
   minus(s0(x)) -> minus(x)
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(55) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(56)
YES

----------------------------------------

(57)
Obligation:
Relative ADP Problem with
absolute ADPs:

   reverse(add(n, x)) -> app(REVERSE(x), add(n, nil))

and relative ADPs:

   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   rand(x) -> rand(s(x))
   shuffle(nil) -> nil
   shuffle(add(n, x)) -> add(n, shuffle(reverse(x)))
   quot(0, s(y)) -> 0
   reverse(nil) -> nil
   less_leaves(x, leaf) -> false
   app(add(n, x), y) -> add(n, app(x, y))
   less_leaves(leaf, cons(w, z)) -> true
   app(nil, y) -> y
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))
   rand(x) -> x


----------------------------------------

(58) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:true = 
REVERSE_1 = 
less_leaves_2 = 
add_2 = 0
app_2 = 
concat_2 = 
leaf = 
shuffle_1 = 
rand_1 = 
nil = 
quot_2 = 0, 1
false = 
s_1 = 
reverse_1 = 
0 = 
minus_2 = 1
cons_2 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
REVERSE(x1)  =  REVERSE(x1)

add(x1, x2)  =  add(x2)

quot(x1, x2)  =  quot

s(x1)  =  x1

minus(x1, x2)  =  minus(x1)

0  =  0


Recursive path order with status [RPO].
Quasi-Precedence: [quot, 0]

Status: REVERSE_1: [1]
add_1: multiset status
quot: []
minus_1: multiset status
0: multiset status


----------------------------------------

(59)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REVERSE0(add(x)) -> REVERSE0(x)

The TRS R consists of the following rules:

   quot -> s0(quot)
   concat0(leaf0, y) -> y
   concat0(cons0(u, v), y) -> cons0(u, concat0(v, y))
   rand0(x) -> rand0(s0(x))
   shuffle0(nil0) -> nil0
   shuffle0(add(x)) -> add(shuffle0(reverse0(x)))
   quot -> 00
   reverse0(nil0) -> nil0
   less_leaves0(x, leaf0) -> false0
   app0(add(x), y) -> add(app0(x, y))
   less_leaves0(leaf0, cons0(w, z)) -> true0
   app0(nil0, y) -> y
   reverse0(add(x)) -> app0(reverse0(x), add(nil0))
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   less_leaves0(cons0(u, v), cons0(w, z)) -> less_leaves0(concat0(u, v), concat0(w, z))
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(60) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   concat0(leaf0, y) -> y
   concat0(cons0(u, v), y) -> cons0(u, concat0(v, y))
   less_leaves0(x, leaf0) -> false0
   less_leaves0(leaf0, cons0(w, z)) -> true0
   less_leaves0(cons0(u, v), cons0(w, z)) -> less_leaves0(concat0(u, v), concat0(w, z))

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 2
   POL(REVERSE0(x_1)) = 2*x_1
   POL(add(x_1)) = x_1
   POL(app0(x_1, x_2)) = x_1 + x_2
   POL(concat0(x_1, x_2)) = 2*x_1 + x_2
   POL(cons0(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(false0) = 2
   POL(leaf0) = 1
   POL(less_leaves0(x_1, x_2)) = 1 + x_1 + 2*x_2
   POL(minus(x_1)) = 2*x_1
   POL(nil0) = 0
   POL(quot) = 2
   POL(rand0(x_1)) = 2*x_1
   POL(reverse0(x_1)) = x_1
   POL(s0(x_1)) = x_1
   POL(shuffle0(x_1)) = x_1
   POL(true0) = 2


----------------------------------------

(61)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REVERSE0(add(x)) -> REVERSE0(x)

The TRS R consists of the following rules:

   quot -> s0(quot)
   rand0(x) -> rand0(s0(x))
   shuffle0(nil0) -> nil0
   shuffle0(add(x)) -> add(shuffle0(reverse0(x)))
   quot -> 00
   reverse0(nil0) -> nil0
   app0(add(x), y) -> add(app0(x, y))
   app0(nil0, y) -> y
   reverse0(add(x)) -> app0(reverse0(x), add(nil0))
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(62) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   minus(x) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 2
   POL(REVERSE0(x_1)) = 2*x_1
   POL(add(x_1)) = x_1
   POL(app0(x_1, x_2)) = x_1 + x_2
   POL(minus(x_1)) = 1 + 2*x_1
   POL(nil0) = 0
   POL(quot) = 2
   POL(rand0(x_1)) = 2*x_1
   POL(reverse0(x_1)) = x_1
   POL(s0(x_1)) = x_1
   POL(shuffle0(x_1)) = 2*x_1


----------------------------------------

(63)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REVERSE0(add(x)) -> REVERSE0(x)

The TRS R consists of the following rules:

   quot -> s0(quot)
   rand0(x) -> rand0(s0(x))
   shuffle0(nil0) -> nil0
   shuffle0(add(x)) -> add(shuffle0(reverse0(x)))
   quot -> 00
   reverse0(nil0) -> nil0
   app0(add(x), y) -> add(app0(x, y))
   app0(nil0, y) -> y
   reverse0(add(x)) -> app0(reverse0(x), add(nil0))
   minus(s0(x)) -> minus(x)
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(64) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   rand0(x) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 2
   POL(REVERSE0(x_1)) = 2*x_1
   POL(add(x_1)) = x_1
   POL(app0(x_1, x_2)) = x_1 + x_2
   POL(minus(x_1)) = 2*x_1
   POL(nil0) = 0
   POL(quot) = 2
   POL(rand0(x_1)) = 1 + 2*x_1
   POL(reverse0(x_1)) = x_1
   POL(s0(x_1)) = x_1
   POL(shuffle0(x_1)) = 2*x_1


----------------------------------------

(65)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REVERSE0(add(x)) -> REVERSE0(x)

The TRS R consists of the following rules:

   quot -> s0(quot)
   rand0(x) -> rand0(s0(x))
   shuffle0(nil0) -> nil0
   shuffle0(add(x)) -> add(shuffle0(reverse0(x)))
   quot -> 00
   reverse0(nil0) -> nil0
   app0(add(x), y) -> add(app0(x, y))
   app0(nil0, y) -> y
   reverse0(add(x)) -> app0(reverse0(x), add(nil0))
   minus(s0(x)) -> minus(x)

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(66) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   quot -> 00

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(REVERSE0(x_1)) = 2*x_1
   POL(add(x_1)) = x_1
   POL(app0(x_1, x_2)) = x_1 + x_2
   POL(minus(x_1)) = 2*x_1
   POL(nil0) = 0
   POL(quot) = 1
   POL(rand0(x_1)) = 2*x_1
   POL(reverse0(x_1)) = x_1
   POL(s0(x_1)) = x_1
   POL(shuffle0(x_1)) = 2*x_1


----------------------------------------

(67)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REVERSE0(add(x)) -> REVERSE0(x)

The TRS R consists of the following rules:

   quot -> s0(quot)
   rand0(x) -> rand0(s0(x))
   shuffle0(nil0) -> nil0
   shuffle0(add(x)) -> add(shuffle0(reverse0(x)))
   reverse0(nil0) -> nil0
   app0(add(x), y) -> add(app0(x, y))
   app0(nil0, y) -> y
   reverse0(add(x)) -> app0(reverse0(x), add(nil0))
   minus(s0(x)) -> minus(x)

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(68) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   shuffle0(nil0) -> nil0

Used ordering: Polynomial interpretation [POLO]:

   POL(REVERSE0(x_1)) = 2*x_1
   POL(add(x_1)) = x_1
   POL(app0(x_1, x_2)) = x_1 + 2*x_2
   POL(minus(x_1)) = 2*x_1
   POL(nil0) = 0
   POL(quot) = 2
   POL(rand0(x_1)) = 2*x_1
   POL(reverse0(x_1)) = x_1
   POL(s0(x_1)) = x_1
   POL(shuffle0(x_1)) = 2 + x_1


----------------------------------------

(69)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REVERSE0(add(x)) -> REVERSE0(x)

The TRS R consists of the following rules:

   quot -> s0(quot)
   rand0(x) -> rand0(s0(x))
   shuffle0(add(x)) -> add(shuffle0(reverse0(x)))
   reverse0(nil0) -> nil0
   app0(add(x), y) -> add(app0(x, y))
   app0(nil0, y) -> y
   reverse0(add(x)) -> app0(reverse0(x), add(nil0))
   minus(s0(x)) -> minus(x)

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(70) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   REVERSE0(add(x)) -> REVERSE0(x)

Strictly oriented rules of the TRS R:

   shuffle0(add(x)) -> add(shuffle0(reverse0(x)))

Used ordering: Polynomial interpretation [POLO]:

   POL(REVERSE0(x_1)) = x_1
   POL(add(x_1)) = 2 + x_1
   POL(app0(x_1, x_2)) = x_1 + x_2
   POL(minus(x_1)) = 2*x_1
   POL(nil0) = 0
   POL(quot) = 2
   POL(rand0(x_1)) = 2*x_1
   POL(reverse0(x_1)) = x_1
   POL(s0(x_1)) = x_1
   POL(shuffle0(x_1)) = 2 + 2*x_1


----------------------------------------

(71)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   quot -> s0(quot)
   rand0(x) -> rand0(s0(x))
   reverse0(nil0) -> nil0
   app0(add(x), y) -> add(app0(x, y))
   app0(nil0, y) -> y
   reverse0(add(x)) -> app0(reverse0(x), add(nil0))
   minus(s0(x)) -> minus(x)

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(72) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(73)
YES

----------------------------------------

(74)
Obligation:
Relative ADP Problem with
absolute ADPs:

   shuffle(add(n, x)) -> add(n, SHUFFLE(reverse(x)))

and relative ADPs:

   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   rand(x) -> rand(s(x))
   shuffle(nil) -> nil
   shuffle(add(n, x)) -> add(n, shuffle(reverse(x)))
   quot(0, s(y)) -> 0
   reverse(nil) -> nil
   less_leaves(x, leaf) -> false
   app(add(n, x), y) -> add(n, app(x, y))
   less_leaves(leaf, cons(w, z)) -> true
   app(nil, y) -> y
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))
   rand(x) -> x


----------------------------------------

(75) RelADPDerelatifyingProof (EQUIVALENT)


We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.
----------------------------------------

(76)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SHUFFLE(add(n, x)) -> SHUFFLE(reverse(x))

The TRS R consists of the following rules:

   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   rand(x) -> rand(s(x))
   shuffle(nil) -> nil
   shuffle(add(n, x)) -> add(n, shuffle(reverse(x)))
   quot(0, s(y)) -> 0
   reverse(nil) -> nil
   less_leaves(x, leaf) -> false
   app(add(n, x), y) -> add(n, app(x, y))
   less_leaves(leaf, cons(w, z)) -> true
   app(nil, y) -> y
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))
   rand(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(77) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   SHUFFLE(add(n, x)) -> SHUFFLE(reverse(x))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( quot_2(x_1, x_2) ) = 1
POL( s_1(x_1) ) = x_1
POL( minus_2(x_1, x_2) ) = x_1 + 2
POL( concat_2(x_1, x_2) ) = x_1 + x_2
POL( leaf ) = 2
POL( cons_2(x_1, x_2) ) = x_1 + x_2 + 2
POL( rand_1(x_1) ) = x_1 + 1
POL( shuffle_1(x_1) ) = x_1 + 2
POL( nil ) = 0
POL( add_2(x_1, x_2) ) = x_2 + 2
POL( reverse_1(x_1) ) = x_1
POL( 0 ) = 0
POL( less_leaves_2(x_1, x_2) ) = 2x_1
POL( false ) = 0
POL( app_2(x_1, x_2) ) = x_1 + x_2
POL( true ) = 1
POL( SHUFFLE_1(x_1) ) = 2x_1 + 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   rand(x) -> rand(s(x))
   shuffle(nil) -> nil
   shuffle(add(n, x)) -> add(n, shuffle(reverse(x)))
   quot(0, s(y)) -> 0
   reverse(nil) -> nil
   less_leaves(x, leaf) -> false
   app(add(n, x), y) -> add(n, app(x, y))
   less_leaves(leaf, cons(w, z)) -> true
   app(nil, y) -> y
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))
   rand(x) -> x


----------------------------------------

(78)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   rand(x) -> rand(s(x))
   shuffle(nil) -> nil
   shuffle(add(n, x)) -> add(n, shuffle(reverse(x)))
   quot(0, s(y)) -> 0
   reverse(nil) -> nil
   less_leaves(x, leaf) -> false
   app(add(n, x), y) -> add(n, app(x, y))
   less_leaves(leaf, cons(w, z)) -> true
   app(nil, y) -> y
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))
   rand(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(79) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(80)
YES

----------------------------------------

(81)
Obligation:
Relative ADP Problem with
absolute ADPs:

   quot(s(x), s(y)) -> s(QUOT(minus(x, y), s(y)))

and relative ADPs:

   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   rand(x) -> rand(s(x))
   shuffle(nil) -> nil
   shuffle(add(n, x)) -> add(n, shuffle(reverse(x)))
   quot(0, s(y)) -> 0
   reverse(nil) -> nil
   less_leaves(x, leaf) -> false
   app(add(n, x), y) -> add(n, app(x, y))
   less_leaves(leaf, cons(w, z)) -> true
   app(nil, y) -> y
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))
   rand(x) -> x


----------------------------------------

(82) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:true = 
QUOT_2 = 1
less_leaves_2 = 
add_2 = 
app_2 = 
concat_2 = 
leaf = 
shuffle_1 = 
rand_1 = 
quot_2 = 
nil = 
false = 
s_1 = 
reverse_1 = 
0 = 
minus_2 = 1
cons_2 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
QUOT(x1, x2)  =  QUOT(x1)

s(x1)  =  s(x1)

minus(x1, x2)  =  x1

0  =  0

quot(x1, x2)  =  quot(x1, x2)


Recursive path order with status [RPO].
Quasi-Precedence: QUOT_1 > [s_1, 0]
quot_2 > [s_1, 0]

Status: QUOT_1: [1]
s_1: [1]
0: multiset status
quot_2: [2,1]


----------------------------------------

(83)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(s0(x)) -> QUOT(minus(x))

The TRS R consists of the following rules:

   quot0(s0(x), s0(y)) -> s0(quot0(minus(x), s0(y)))
   concat0(leaf0, y) -> y
   concat0(cons0(u, v), y) -> cons0(u, concat0(v, y))
   rand0(x) -> rand0(s0(x))
   shuffle0(nil0) -> nil0
   shuffle0(add0(n, x)) -> add0(n, shuffle0(reverse0(x)))
   quot0(00, s0(y)) -> 00
   reverse0(nil0) -> nil0
   less_leaves0(x, leaf0) -> false0
   app0(add0(n, x), y) -> add0(n, app0(x, y))
   less_leaves0(leaf0, cons0(w, z)) -> true0
   app0(nil0, y) -> y
   reverse0(add0(n, x)) -> app0(reverse0(x), add0(n, nil0))
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   less_leaves0(cons0(u, v), cons0(w, z)) -> less_leaves0(concat0(u, v), concat0(w, z))
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(84) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   concat0(leaf0, y) -> y
   concat0(cons0(u, v), y) -> cons0(u, concat0(v, y))
   quot0(00, s0(y)) -> 00
   less_leaves0(leaf0, cons0(w, z)) -> true0
   less_leaves0(cons0(u, v), cons0(w, z)) -> less_leaves0(concat0(u, v), concat0(w, z))

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 2
   POL(QUOT(x_1)) = x_1
   POL(add0(x_1, x_2)) = 2*x_1 + x_2
   POL(app0(x_1, x_2)) = x_1 + x_2
   POL(concat0(x_1, x_2)) = 2*x_1 + x_2
   POL(cons0(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(false0) = 2
   POL(leaf0) = 1
   POL(less_leaves0(x_1, x_2)) = 1 + 2*x_1 + x_2
   POL(minus(x_1)) = x_1
   POL(nil0) = 0
   POL(quot0(x_1, x_2)) = 2 + x_1 + 2*x_2
   POL(rand0(x_1)) = 2*x_1
   POL(reverse0(x_1)) = x_1
   POL(s0(x_1)) = x_1
   POL(shuffle0(x_1)) = x_1
   POL(true0) = 0


----------------------------------------

(85)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(s0(x)) -> QUOT(minus(x))

The TRS R consists of the following rules:

   quot0(s0(x), s0(y)) -> s0(quot0(minus(x), s0(y)))
   rand0(x) -> rand0(s0(x))
   shuffle0(nil0) -> nil0
   shuffle0(add0(n, x)) -> add0(n, shuffle0(reverse0(x)))
   reverse0(nil0) -> nil0
   less_leaves0(x, leaf0) -> false0
   app0(add0(n, x), y) -> add0(n, app0(x, y))
   app0(nil0, y) -> y
   reverse0(add0(n, x)) -> app0(reverse0(x), add0(n, nil0))
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(86) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   less_leaves0(x, leaf0) -> false0

Used ordering: Polynomial interpretation [POLO]:

   POL(QUOT(x_1)) = 2*x_1
   POL(add0(x_1, x_2)) = 2*x_1 + x_2
   POL(app0(x_1, x_2)) = x_1 + x_2
   POL(false0) = 2
   POL(leaf0) = 2
   POL(less_leaves0(x_1, x_2)) = 1 + x_1 + x_2
   POL(minus(x_1)) = x_1
   POL(nil0) = 0
   POL(quot0(x_1, x_2)) = 2 + 2*x_1 + 2*x_2
   POL(rand0(x_1)) = 2*x_1
   POL(reverse0(x_1)) = x_1
   POL(s0(x_1)) = x_1
   POL(shuffle0(x_1)) = 2*x_1


----------------------------------------

(87)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(s0(x)) -> QUOT(minus(x))

The TRS R consists of the following rules:

   quot0(s0(x), s0(y)) -> s0(quot0(minus(x), s0(y)))
   rand0(x) -> rand0(s0(x))
   shuffle0(nil0) -> nil0
   shuffle0(add0(n, x)) -> add0(n, shuffle0(reverse0(x)))
   reverse0(nil0) -> nil0
   app0(add0(n, x), y) -> add0(n, app0(x, y))
   app0(nil0, y) -> y
   reverse0(add0(n, x)) -> app0(reverse0(x), add0(n, nil0))
   minus(s0(x)) -> minus(x)
   minus(x) -> x
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(88) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   rand0(x) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(QUOT(x_1)) = 2*x_1
   POL(add0(x_1, x_2)) = 2*x_1 + x_2
   POL(app0(x_1, x_2)) = x_1 + x_2
   POL(minus(x_1)) = x_1
   POL(nil0) = 0
   POL(quot0(x_1, x_2)) = 2 + 2*x_1 + 2*x_2
   POL(rand0(x_1)) = 1 + 2*x_1
   POL(reverse0(x_1)) = x_1
   POL(s0(x_1)) = x_1
   POL(shuffle0(x_1)) = 2*x_1


----------------------------------------

(89)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(s0(x)) -> QUOT(minus(x))

The TRS R consists of the following rules:

   quot0(s0(x), s0(y)) -> s0(quot0(minus(x), s0(y)))
   rand0(x) -> rand0(s0(x))
   shuffle0(nil0) -> nil0
   shuffle0(add0(n, x)) -> add0(n, shuffle0(reverse0(x)))
   reverse0(nil0) -> nil0
   app0(add0(n, x), y) -> add0(n, app0(x, y))
   app0(nil0, y) -> y
   reverse0(add0(n, x)) -> app0(reverse0(x), add0(n, nil0))
   minus(s0(x)) -> minus(x)
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(90) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   shuffle0(nil0) -> nil0

Used ordering: Polynomial interpretation [POLO]:

   POL(QUOT(x_1)) = 2*x_1
   POL(add0(x_1, x_2)) = 2*x_1 + x_2
   POL(app0(x_1, x_2)) = x_1 + x_2
   POL(minus(x_1)) = x_1
   POL(nil0) = 0
   POL(quot0(x_1, x_2)) = 2 + 2*x_1 + 2*x_2
   POL(rand0(x_1)) = 2*x_1
   POL(reverse0(x_1)) = x_1
   POL(s0(x_1)) = x_1
   POL(shuffle0(x_1)) = 2 + 2*x_1


----------------------------------------

(91)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(s0(x)) -> QUOT(minus(x))

The TRS R consists of the following rules:

   quot0(s0(x), s0(y)) -> s0(quot0(minus(x), s0(y)))
   rand0(x) -> rand0(s0(x))
   shuffle0(add0(n, x)) -> add0(n, shuffle0(reverse0(x)))
   reverse0(nil0) -> nil0
   app0(add0(n, x), y) -> add0(n, app0(x, y))
   app0(nil0, y) -> y
   reverse0(add0(n, x)) -> app0(reverse0(x), add0(n, nil0))
   minus(s0(x)) -> minus(x)
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(92) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   shuffle0(add0(n, x)) -> add0(n, shuffle0(reverse0(x)))

Used ordering: Polynomial interpretation [POLO]:

   POL(QUOT(x_1)) = 2*x_1
   POL(add0(x_1, x_2)) = 1 + 2*x_1 + x_2
   POL(app0(x_1, x_2)) = x_1 + x_2
   POL(minus(x_1)) = x_1
   POL(nil0) = 0
   POL(quot0(x_1, x_2)) = 2 + 2*x_1 + 2*x_2
   POL(rand0(x_1)) = 2*x_1
   POL(reverse0(x_1)) = x_1
   POL(s0(x_1)) = x_1
   POL(shuffle0(x_1)) = 2 + 2*x_1


----------------------------------------

(93)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(s0(x)) -> QUOT(minus(x))

The TRS R consists of the following rules:

   quot0(s0(x), s0(y)) -> s0(quot0(minus(x), s0(y)))
   rand0(x) -> rand0(s0(x))
   reverse0(nil0) -> nil0
   app0(add0(n, x), y) -> add0(n, app0(x, y))
   app0(nil0, y) -> y
   reverse0(add0(n, x)) -> app0(reverse0(x), add0(n, nil0))
   minus(s0(x)) -> minus(x)
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(94) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   reverse0(nil0) -> nil0

Used ordering: Polynomial interpretation [POLO]:

   POL(QUOT(x_1)) = 2*x_1
   POL(add0(x_1, x_2)) = 2*x_1 + x_2
   POL(app0(x_1, x_2)) = x_1 + x_2
   POL(minus(x_1)) = x_1
   POL(nil0) = 0
   POL(quot0(x_1, x_2)) = 2 + 2*x_1 + 2*x_2
   POL(rand0(x_1)) = 2*x_1
   POL(reverse0(x_1)) = 2 + x_1
   POL(s0(x_1)) = x_1


----------------------------------------

(95)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(s0(x)) -> QUOT(minus(x))

The TRS R consists of the following rules:

   quot0(s0(x), s0(y)) -> s0(quot0(minus(x), s0(y)))
   rand0(x) -> rand0(s0(x))
   app0(add0(n, x), y) -> add0(n, app0(x, y))
   app0(nil0, y) -> y
   reverse0(add0(n, x)) -> app0(reverse0(x), add0(n, nil0))
   minus(s0(x)) -> minus(x)
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(96) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   app0(nil0, y) -> y

Used ordering: Polynomial interpretation [POLO]:

   POL(QUOT(x_1)) = 2*x_1
   POL(add0(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(app0(x_1, x_2)) = x_1 + x_2
   POL(minus(x_1)) = x_1
   POL(nil0) = 2
   POL(quot0(x_1, x_2)) = 2 + 2*x_1 + 2*x_2
   POL(rand0(x_1)) = 2*x_1
   POL(reverse0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1


----------------------------------------

(97)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(s0(x)) -> QUOT(minus(x))

The TRS R consists of the following rules:

   quot0(s0(x), s0(y)) -> s0(quot0(minus(x), s0(y)))
   rand0(x) -> rand0(s0(x))
   app0(add0(n, x), y) -> add0(n, app0(x, y))
   reverse0(add0(n, x)) -> app0(reverse0(x), add0(n, nil0))
   minus(s0(x)) -> minus(x)
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(98) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   reverse0(add0(n, x)) -> app0(reverse0(x), add0(n, nil0))

Used ordering: Polynomial interpretation [POLO]:

   POL(QUOT(x_1)) = 2*x_1
   POL(add0(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(app0(x_1, x_2)) = 1 + x_1 + x_2
   POL(minus(x_1)) = x_1
   POL(nil0) = 0
   POL(quot0(x_1, x_2)) = 1 + 2*x_1 + 2*x_2
   POL(rand0(x_1)) = 2*x_1
   POL(reverse0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1


----------------------------------------

(99)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(s0(x)) -> QUOT(minus(x))

The TRS R consists of the following rules:

   quot0(s0(x), s0(y)) -> s0(quot0(minus(x), s0(y)))
   rand0(x) -> rand0(s0(x))
   app0(add0(n, x), y) -> add0(n, app0(x, y))
   minus(s0(x)) -> minus(x)
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(100) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   app0(add0(n, x), y) -> add0(n, app0(x, y))

Used ordering: Polynomial interpretation [POLO]:

   POL(QUOT(x_1)) = 2*x_1
   POL(add0(x_1, x_2)) = 1 + x_1 + x_2
   POL(app0(x_1, x_2)) = 2 + 2*x_1 + 2*x_2
   POL(minus(x_1)) = x_1
   POL(quot0(x_1, x_2)) = 2 + 2*x_1 + 2*x_2
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1


----------------------------------------

(101)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(s0(x)) -> QUOT(minus(x))

The TRS R consists of the following rules:

   quot0(s0(x), s0(y)) -> s0(quot0(minus(x), s0(y)))
   rand0(x) -> rand0(s0(x))
   minus(s0(x)) -> minus(x)
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(102) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   QUOT(s0(x)) -> QUOT(minus(x))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( quot0_2(x_1, x_2) ) = x_1
POL( s0_1(x_1) ) = 2x_1 + 2
POL( minus_1(x_1) ) = x_1
POL( rand0_1(x_1) ) = max{0, -2}
POL( QUOT_1(x_1) ) = max{0, 2x_1 - 2}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   quot0(s0(x), s0(y)) -> s0(quot0(minus(x), s0(y)))
   rand0(x) -> rand0(s0(x))
   minus(s0(x)) -> minus(x)
   minus(x) -> x


----------------------------------------

(103)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   quot0(s0(x), s0(y)) -> s0(quot0(minus(x), s0(y)))
   rand0(x) -> rand0(s0(x))
   minus(s0(x)) -> minus(x)
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(104) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(105)
YES
