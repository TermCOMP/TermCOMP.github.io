YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/nzKNo.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) RelADPP
        (6) RelADPCleverAfsProof [SOUND, 25 ms]
        (7) QDP
        (8) MRRProof [EQUIVALENT, 8 ms]
        (9) QDP
        (10) MRRProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) MRRProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) PisEmptyProof [EQUIVALENT, 0 ms]
        (15) YES
    (16) RelADPP
        (17) RelADPCleverAfsProof [SOUND, 17 ms]
        (18) QDP
        (19) MRRProof [EQUIVALENT, 5 ms]
        (20) QDP
        (21) MRRProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) MRRProof [EQUIVALENT, 0 ms]
        (24) QDP
        (25) PisEmptyProof [EQUIVALENT, 0 ms]
        (26) YES
    (27) RelADPP
        (28) RelADPReductionPairProof [EQUIVALENT, 27 ms]
        (29) RelADPP
        (30) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (31) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   pred(s(x)) -> x
   minus(x, 0) -> x
   minus(x, s(y)) -> pred(minus(x, y))
   div(0, s(y)) -> 0
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   divL(x, nil) -> x
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)

The relative TRS consists of the following S rules:

   divL(z, cons(x, cons(y, xs))) -> divL(z, cons(y, cons(x, xs)))


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   pred(s(x)) -> x
   minus(x, 0) -> x
   minus(x, s(y)) -> PRED(minus(x, y))
   minus(x, s(y)) -> pred(MINUS(x, y))
   div(0, s(y)) -> 0
   div(s(x), s(y)) -> s(DIV(minus(x, y), s(y)))
   div(s(x), s(y)) -> s(div(MINUS(x, y), s(y)))
   divL(x, nil) -> x
   divL(x, cons(y, xs)) -> DIVL(div(x, y), xs)
   divL(x, cons(y, xs)) -> divL(DIV(x, y), xs)

and relative ADPs:

   divL(z, cons(x, cons(y, xs))) -> DIVL(z, cons(y, cons(x, xs)))


----------------------------------------

(3) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  3 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Relative ADP Problem with
absolute ADPs:

   minus(x, s(y)) -> pred(MINUS(x, y))

and relative ADPs:

   div(0, s(y)) -> 0
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   divL(z, cons(x, cons(y, xs))) -> divL(z, cons(y, cons(x, xs)))
   minus(x, s(y)) -> pred(minus(x, y))
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   minus(x, 0) -> x
   pred(s(x)) -> x
   divL(x, nil) -> x


----------------------------------------

(6) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:s_1 = 
MINUS_2 = 0
div_2 = 1
divL_2 = 
pred_1 = 
0 = 
minus_2 = 1
cons_2 = 
nil = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
MINUS(x1, x2)  =  x2

s(x1)  =  s(x1)

div(x1, x2)  =  x1

minus(x1, x2)  =  x1

0  =  0

pred(x1)  =  x1


Recursive path order with status [RPO].
Quasi-Precedence: trivial

Status: s_1: multiset status
0: multiset status


----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s0(y)) -> MINUS(y)

The TRS R consists of the following rules:

   div(00) -> 00
   divL0(x, cons0(y, xs)) -> divL0(div(x), xs)
   divL0(z, cons0(x, cons0(y, xs))) -> divL0(z, cons0(y, cons0(x, xs)))
   minus(x) -> pred0(minus(x))
   div(s0(x)) -> s0(div(minus(x)))
   minus(x) -> x
   pred0(s0(x)) -> x
   divL0(x, nil0) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(8) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   divL0(x, cons0(y, xs)) -> divL0(div(x), xs)
   divL0(x, nil0) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(MINUS(x_1)) = 2*x_1
   POL(cons0(x_1, x_2)) = 2 + x_1 + x_2
   POL(div(x_1)) = x_1
   POL(divL0(x_1, x_2)) = 2*x_1 + x_2
   POL(minus(x_1)) = x_1
   POL(nil0) = 2
   POL(pred0(x_1)) = x_1
   POL(s0(x_1)) = x_1


----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s0(y)) -> MINUS(y)

The TRS R consists of the following rules:

   div(00) -> 00
   divL0(z, cons0(x, cons0(y, xs))) -> divL0(z, cons0(y, cons0(x, xs)))
   minus(x) -> pred0(minus(x))
   div(s0(x)) -> s0(div(minus(x)))
   minus(x) -> x
   pred0(s0(x)) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(10) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   div(00) -> 00

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 1
   POL(MINUS(x_1)) = x_1
   POL(cons0(x_1, x_2)) = x_1 + x_2
   POL(div(x_1)) = 2*x_1
   POL(divL0(x_1, x_2)) = x_1 + 2*x_2
   POL(minus(x_1)) = x_1
   POL(pred0(x_1)) = x_1
   POL(s0(x_1)) = 2*x_1


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s0(y)) -> MINUS(y)

The TRS R consists of the following rules:

   divL0(z, cons0(x, cons0(y, xs))) -> divL0(z, cons0(y, cons0(x, xs)))
   minus(x) -> pred0(minus(x))
   div(s0(x)) -> s0(div(minus(x)))
   minus(x) -> x
   pred0(s0(x)) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   MINUS(s0(y)) -> MINUS(y)

Strictly oriented rules of the TRS R:

   div(s0(x)) -> s0(div(minus(x)))
   pred0(s0(x)) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(MINUS(x_1)) = 2*x_1
   POL(cons0(x_1, x_2)) = 2*x_1 + x_2
   POL(div(x_1)) = 2 + 2*x_1
   POL(divL0(x_1, x_2)) = x_1 + 2*x_2
   POL(minus(x_1)) = x_1
   POL(pred0(x_1)) = x_1
   POL(s0(x_1)) = 1 + x_1


----------------------------------------

(13)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   divL0(z, cons0(x, cons0(y, xs))) -> divL0(z, cons0(y, cons0(x, xs)))
   minus(x) -> pred0(minus(x))
   minus(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(14) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
Relative ADP Problem with
absolute ADPs:

   div(s(x), s(y)) -> s(DIV(minus(x, y), s(y)))

and relative ADPs:

   div(0, s(y)) -> 0
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   divL(z, cons(x, cons(y, xs))) -> divL(z, cons(y, cons(x, xs)))
   minus(x, s(y)) -> pred(minus(x, y))
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   minus(x, 0) -> x
   pred(s(x)) -> x
   divL(x, nil) -> x


----------------------------------------

(17) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:s_1 = 
div_2 = 
divL_2 = 
0 = 
pred_1 = 
minus_2 = 1
cons_2 = 
DIV_2 = 1
nil = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
DIV(x1, x2)  =  DIV(x1)

s(x1)  =  s(x1)

minus(x1, x2)  =  x1

pred(x1)  =  x1

0  =  0

div(x1, x2)  =  div(x1, x2)


Recursive path order with status [RPO].
Quasi-Precedence: 0 > [DIV_1, s_1]
div_2 > [DIV_1, s_1]

Status: DIV_1: multiset status
s_1: multiset status
0: multiset status
div_2: [2,1]


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(s0(x)) -> DIV(minus(x))

The TRS R consists of the following rules:

   div0(00, s0(y)) -> 00
   divL0(x, cons0(y, xs)) -> divL0(div0(x, y), xs)
   divL0(z, cons0(x, cons0(y, xs))) -> divL0(z, cons0(y, cons0(x, xs)))
   minus(x) -> pred0(minus(x))
   div0(s0(x), s0(y)) -> s0(div0(minus(x), s0(y)))
   minus(x) -> x
   pred0(s0(x)) -> x
   divL0(x, nil0) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   divL0(x, nil0) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(DIV(x_1)) = x_1
   POL(cons0(x_1, x_2)) = x_1 + x_2
   POL(div0(x_1, x_2)) = x_1 + 2*x_2
   POL(divL0(x_1, x_2)) = x_1 + 2*x_2
   POL(minus(x_1)) = x_1
   POL(nil0) = 2
   POL(pred0(x_1)) = x_1
   POL(s0(x_1)) = x_1


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(s0(x)) -> DIV(minus(x))

The TRS R consists of the following rules:

   div0(00, s0(y)) -> 00
   divL0(x, cons0(y, xs)) -> divL0(div0(x, y), xs)
   divL0(z, cons0(x, cons0(y, xs))) -> divL0(z, cons0(y, cons0(x, xs)))
   minus(x) -> pred0(minus(x))
   div0(s0(x), s0(y)) -> s0(div0(minus(x), s0(y)))
   minus(x) -> x
   pred0(s0(x)) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   divL0(x, cons0(y, xs)) -> divL0(div0(x, y), xs)

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(DIV(x_1)) = x_1
   POL(cons0(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(div0(x_1, x_2)) = x_1 + x_2
   POL(divL0(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(minus(x_1)) = x_1
   POL(pred0(x_1)) = x_1
   POL(s0(x_1)) = x_1


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(s0(x)) -> DIV(minus(x))

The TRS R consists of the following rules:

   div0(00, s0(y)) -> 00
   divL0(z, cons0(x, cons0(y, xs))) -> divL0(z, cons0(y, cons0(x, xs)))
   minus(x) -> pred0(minus(x))
   div0(s0(x), s0(y)) -> s0(div0(minus(x), s0(y)))
   minus(x) -> x
   pred0(s0(x)) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(23) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   DIV(s0(x)) -> DIV(minus(x))

Strictly oriented rules of the TRS R:

   div0(00, s0(y)) -> 00
   minus(x) -> x
   pred0(s0(x)) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(DIV(x_1)) = x_1
   POL(cons0(x_1, x_2)) = 2*x_1 + x_2
   POL(div0(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(divL0(x_1, x_2)) = x_1 + x_2
   POL(minus(x_1)) = 1 + x_1
   POL(pred0(x_1)) = x_1
   POL(s0(x_1)) = 2 + x_1


----------------------------------------

(24)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   divL0(z, cons0(x, cons0(y, xs))) -> divL0(z, cons0(y, cons0(x, xs)))
   minus(x) -> pred0(minus(x))
   div0(s0(x), s0(y)) -> s0(div0(minus(x), s0(y)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(25) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(26)
YES

----------------------------------------

(27)
Obligation:
Relative ADP Problem with
absolute ADPs:

   divL(x, cons(y, xs)) -> DIVL(div(x, y), xs)

and relative ADPs:

   div(0, s(y)) -> 0
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   minus(x, s(y)) -> pred(minus(x, y))
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   minus(x, 0) -> x
   divL(z, cons(x, cons(y, xs))) -> DIVL(z, cons(y, cons(x, xs)))
   pred(s(x)) -> x
   divL(x, nil) -> x


----------------------------------------

(28) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   divL(x, cons(y, xs)) -> DIVL(div(x, y), xs)

Relative ADPs:

   div(0, s(y)) -> 0
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   minus(x, s(y)) -> pred(minus(x, y))
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   minus(x, 0) -> x
   pred(s(x)) -> x
   divL(x, nil) -> x


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(DIV(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(DIVL(x_1, x_2)) = 3 + 2*x_2
   POL(MINUS(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(PRED(x_1)) = 3 + 3*x_1 + 3*x_1^2
   POL(cons(x_1, x_2)) = 1 + x_2
   POL(div(x_1, x_2)) = 0
   POL(divL(x_1, x_2)) = 3 + 2*x_1 + 2*x_2
   POL(minus(x_1, x_2)) = x_1
   POL(nil) = 3
   POL(pred(x_1)) = x_1
   POL(s(x_1)) = x_1

----------------------------------------

(29)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   div(0, s(y)) -> 0
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   minus(x, s(y)) -> pred(minus(x, y))
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   minus(x, 0) -> x
   divL(z, cons(x, cons(y, xs))) -> DIVL(z, cons(y, cons(x, xs)))
   pred(s(x)) -> x
   divL(x, nil) -> x


----------------------------------------

(30) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(31)
YES
