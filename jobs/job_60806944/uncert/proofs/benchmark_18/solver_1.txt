YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/vzExp.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) RelADPP
        (6) RelADPCleverAfsProof [SOUND, 14 ms]
        (7) QDP
        (8) MRRProof [EQUIVALENT, 6 ms]
        (9) QDP
        (10) MRRProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) PisEmptyProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) RelADPP
        (15) RelADPCleverAfsProof [SOUND, 14 ms]
        (16) QDP
        (17) MRRProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) MRRProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) PisEmptyProof [EQUIVALENT, 0 ms]
        (22) YES
    (23) RelADPP
        (24) RelADPCleverAfsProof [SOUND, 24 ms]
        (25) QDP
        (26) MRRProof [EQUIVALENT, 2 ms]
        (27) QDP
        (28) PisEmptyProof [EQUIVALENT, 0 ms]
        (29) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   minus(x, o) -> x
   minus(s(x), s(y)) -> minus(x, y)
   div(0, s(y)) -> 0
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   divL(x, nil) -> x
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)

The relative TRS consists of the following S rules:

   cons(x, cons(y, xs)) -> cons(y, cons(x, xs))


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   minus(x, o) -> x
   minus(s(x), s(y)) -> MINUS(x, y)
   div(0, s(y)) -> 0
   div(s(x), s(y)) -> s(DIV(minus(x, y), s(y)))
   div(s(x), s(y)) -> s(div(MINUS(x, y), s(y)))
   divL(x, nil) -> x
   divL(x, cons(y, xs)) -> DIVL(div(x, y), xs)
   divL(x, cons(y, xs)) -> divL(DIV(x, y), xs)

and relative ADPs:

   cons(x, cons(y, xs)) -> CONS(y, CONS(x, xs))


----------------------------------------

(3) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  3 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Relative ADP Problem with
absolute ADPs:

   minus(s(x), s(y)) -> MINUS(x, y)

and relative ADPs:

   div(0, s(y)) -> 0
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   minus(x, o) -> x
   cons(x, cons(y, xs)) -> cons(y, cons(x, xs))
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   divL(x, nil) -> x


----------------------------------------

(6) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:s_1 = 
MINUS_2 = 1
o = 
div_2 = 1
divL_2 = 
0 = 
minus_2 = 1
cons_2 = 
nil = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
MINUS(x1, x2)  =  x1

s(x1)  =  s(x1)

div(x1, x2)  =  x1

minus(x1, x2)  =  x1

0  =  0

o  =  o


Recursive path order with status [RPO].
Quasi-Precedence: [s_1, 0]

Status: s_1: multiset status
0: multiset status
o: multiset status


----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s0(x)) -> MINUS(x)

The TRS R consists of the following rules:

   div(00) -> 00
   divL0(x, cons0(y, xs)) -> divL0(div(x), xs)
   minus(x) -> x
   cons0(x, cons0(y, xs)) -> cons0(y, cons0(x, xs))
   div(s0(x)) -> s0(div(minus(x)))
   minus(s0(x)) -> minus(x)
   divL0(x, nil0) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(8) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   divL0(x, cons0(y, xs)) -> divL0(div(x), xs)
   divL0(x, nil0) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 2
   POL(MINUS(x_1)) = 2*x_1
   POL(cons0(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(div(x_1)) = x_1
   POL(divL0(x_1, x_2)) = 2*x_1 + x_2
   POL(minus(x_1)) = x_1
   POL(nil0) = 2
   POL(s0(x_1)) = x_1


----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s0(x)) -> MINUS(x)

The TRS R consists of the following rules:

   div(00) -> 00
   minus(x) -> x
   cons0(x, cons0(y, xs)) -> cons0(y, cons0(x, xs))
   div(s0(x)) -> s0(div(minus(x)))
   minus(s0(x)) -> minus(x)

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(10) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   MINUS(s0(x)) -> MINUS(x)

Strictly oriented rules of the TRS R:

   div(00) -> 00
   div(s0(x)) -> s0(div(minus(x)))
   minus(s0(x)) -> minus(x)

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 2
   POL(MINUS(x_1)) = x_1
   POL(cons0(x_1, x_2)) = 2*x_1 + x_2
   POL(div(x_1)) = 1 + 2*x_1
   POL(minus(x_1)) = x_1
   POL(s0(x_1)) = 2 + 2*x_1


----------------------------------------

(11)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   minus(x) -> x
   cons0(x, cons0(y, xs)) -> cons0(y, cons0(x, xs))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Relative ADP Problem with
absolute ADPs:

   div(s(x), s(y)) -> s(DIV(minus(x, y), s(y)))

and relative ADPs:

   div(0, s(y)) -> 0
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   minus(x, o) -> x
   cons(x, cons(y, xs)) -> cons(y, cons(x, xs))
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   minus(s(x), s(y)) -> minus(x, y)
   divL(x, nil) -> x


----------------------------------------

(15) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:s_1 = 
o = 
div_2 = 1
divL_2 = 
0 = 
minus_2 = 1
cons_2 = 
DIV_2 = 
nil = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
DIV(x1, x2)  =  DIV(x1, x2)

s(x1)  =  s(x1)

minus(x1, x2)  =  x1

o  =  o

div(x1, x2)  =  div(x1)

0  =  0


Recursive path order with status [RPO].
Quasi-Precedence: DIV_2 > s_1
o > s_1
div_1 > s_1
0 > s_1

Status: DIV_2: [1,2]
s_1: multiset status
o: multiset status
div_1: [1]
0: multiset status


----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV0(s0(x), s0(y)) -> DIV0(minus(x), s0(y))

The TRS R consists of the following rules:

   div(00) -> 00
   divL0(x, cons0(y, xs)) -> divL0(div(x), xs)
   minus(x) -> x
   cons0(x, cons0(y, xs)) -> cons0(y, cons0(x, xs))
   div(s0(x)) -> s0(div(minus(x)))
   minus(s0(x)) -> minus(x)
   divL0(x, nil0) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(17) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   divL0(x, cons0(y, xs)) -> divL0(div(x), xs)
   divL0(x, nil0) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 2
   POL(DIV0(x_1, x_2)) = x_1 + x_2
   POL(cons0(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(div(x_1)) = x_1
   POL(divL0(x_1, x_2)) = 2*x_1 + x_2
   POL(minus(x_1)) = x_1
   POL(nil0) = 2
   POL(s0(x_1)) = x_1


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV0(s0(x), s0(y)) -> DIV0(minus(x), s0(y))

The TRS R consists of the following rules:

   div(00) -> 00
   minus(x) -> x
   cons0(x, cons0(y, xs)) -> cons0(y, cons0(x, xs))
   div(s0(x)) -> s0(div(minus(x)))
   minus(s0(x)) -> minus(x)

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   DIV0(s0(x), s0(y)) -> DIV0(minus(x), s0(y))

Strictly oriented rules of the TRS R:

   minus(s0(x)) -> minus(x)

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 0
   POL(DIV0(x_1, x_2)) = x_1 + x_2
   POL(cons0(x_1, x_2)) = 2*x_1 + x_2
   POL(div(x_1)) = x_1
   POL(minus(x_1)) = x_1
   POL(s0(x_1)) = 1 + 2*x_1


----------------------------------------

(20)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   div(00) -> 00
   minus(x) -> x
   cons0(x, cons0(y, xs)) -> cons0(y, cons0(x, xs))
   div(s0(x)) -> s0(div(minus(x)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(22)
YES

----------------------------------------

(23)
Obligation:
Relative ADP Problem with
absolute ADPs:

   divL(x, cons(y, xs)) -> DIVL(div(x, y), xs)

and relative ADPs:

   div(0, s(y)) -> 0
   divL(x, cons(y, xs)) -> divL(div(x, y), xs)
   minus(x, o) -> x
   cons(x, cons(y, xs)) -> cons(y, cons(x, xs))
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   minus(s(x), s(y)) -> minus(x, y)
   divL(x, nil) -> x


----------------------------------------

(24) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:s_1 = 
o = 
div_2 = 1
divL_2 = 
0 = 
minus_2 = 1
cons_2 = 
DIVL_2 = 0
nil = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
DIVL(x1, x2)  =  x2

cons(x1, x2)  =  cons(x1, x2)

div(x1, x2)  =  div(x1)

0  =  0

s(x1)  =  s(x1)

minus(x1, x2)  =  x1

o  =  o


Recursive path order with status [RPO].
Quasi-Precedence: div_1 > s_1

Status: cons_2: [1,2]
div_1: [1]
0: multiset status
s_1: multiset status
o: multiset status


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIVL(cons0(y, xs)) -> DIVL(xs)

The TRS R consists of the following rules:

   div(00) -> 00
   divL0(x, cons0(y, xs)) -> divL0(div(x), xs)
   minus(x) -> x
   cons0(x, cons0(y, xs)) -> cons0(y, cons0(x, xs))
   div(s0(x)) -> s0(div(minus(x)))
   minus(s0(x)) -> minus(x)
   divL0(x, nil0) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(26) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   DIVL(cons0(y, xs)) -> DIVL(xs)

Strictly oriented rules of the TRS R:

   divL0(x, cons0(y, xs)) -> divL0(div(x), xs)
   divL0(x, nil0) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(00) = 2
   POL(DIVL(x_1)) = 2*x_1
   POL(cons0(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(div(x_1)) = x_1
   POL(divL0(x_1, x_2)) = 2*x_1 + x_2
   POL(minus(x_1)) = x_1
   POL(nil0) = 2
   POL(s0(x_1)) = x_1


----------------------------------------

(27)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   div(00) -> 00
   minus(x) -> x
   cons0(x, cons0(y, xs)) -> cons0(y, cons0(x, xs))
   div(s0(x)) -> s0(div(minus(x)))
   minus(s0(x)) -> minus(x)

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(28) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(29)
YES
