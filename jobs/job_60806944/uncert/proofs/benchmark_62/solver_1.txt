YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Qwc1I.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) RelADPP
        (6) RelADPCleverAfsProof [SOUND, 8 ms]
        (7) QDP
        (8) MRRProof [EQUIVALENT, 17 ms]
        (9) QDP
        (10) MRRProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPOrderProof [EQUIVALENT, 5 ms]
        (13) QDP
        (14) PisEmptyProof [EQUIVALENT, 0 ms]
        (15) YES
    (16) RelADPP
        (17) RelADPCleverAfsProof [SOUND, 20 ms]
        (18) QDP
        (19) MRRProof [EQUIVALENT, 12 ms]
        (20) QDP
        (21) MRRProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) QDPOrderProof [EQUIVALENT, 0 ms]
        (24) QDP
        (25) PisEmptyProof [EQUIVALENT, 0 ms]
        (26) YES
    (27) RelADPP
        (28) RelADPCleverAfsProof [SOUND, 16 ms]
        (29) QDP
        (30) MRRProof [EQUIVALENT, 10 ms]
        (31) QDP
        (32) MRRProof [EQUIVALENT, 0 ms]
        (33) QDP
        (34) PisEmptyProof [EQUIVALENT, 0 ms]
        (35) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   g(c(x, s(y))) -> g(c(s(x), y))
   f(c(s(x), y)) -> f(c(x, s(y)))
   f(f(x)) -> f(d(f(x)))
   f(x) -> x

The relative TRS consists of the following S rules:

   rand(x) -> rand(s(x))
   rand(x) -> x


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   g(c(x, s(y))) -> G(c(s(x), y))
   f(c(s(x), y)) -> F(c(x, s(y)))
   f(f(x)) -> F(d(f(x)))
   f(f(x)) -> f(d(F(x)))
   f(x) -> x

and relative ADPs:

   rand(x) -> RAND(s(x))
   rand(x) -> x


----------------------------------------

(3) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  3 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Relative ADP Problem with
absolute ADPs:

   g(c(x, s(y))) -> G(c(s(x), y))

and relative ADPs:

   f(x) -> x
   f(f(x)) -> f(d(f(x)))
   rand(x) -> rand(s(x))
   f(c(s(x), y)) -> f(c(x, s(y)))
   rand(x) -> x


----------------------------------------

(6) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:s_1 = 
c_2 = 0
G_1 = 
d_1 = 
f_1 = 
rand_1 = 
g_1 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
G(x1)  =  G(x1)

c(x1, x2)  =  x2

s(x1)  =  s(x1)


Recursive path order with status [RPO].
Quasi-Precedence: G_1 > s_1

Status: G_1: [1]
s_1: multiset status


----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G0(c(s0(y))) -> G0(c(y))

The TRS R consists of the following rules:

   g0(c(s0(y))) -> g0(c(y))
   f0(x) -> x
   f0(f0(x)) -> f0(d0(f0(x)))
   rand0(x) -> rand0(s0(x))
   f0(c(y)) -> f0(c(s0(y)))
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(8) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   rand0(x) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(G0(x_1)) = x_1
   POL(c(x_1)) = x_1
   POL(d0(x_1)) = x_1
   POL(f0(x_1)) = 2*x_1
   POL(g0(x_1)) = x_1
   POL(rand0(x_1)) = 1 + 2*x_1
   POL(s0(x_1)) = x_1


----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G0(c(s0(y))) -> G0(c(y))

The TRS R consists of the following rules:

   g0(c(s0(y))) -> g0(c(y))
   f0(x) -> x
   f0(f0(x)) -> f0(d0(f0(x)))
   rand0(x) -> rand0(s0(x))
   f0(c(y)) -> f0(c(s0(y)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(10) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   f0(x) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(G0(x_1)) = 2*x_1
   POL(c(x_1)) = x_1
   POL(d0(x_1)) = x_1
   POL(f0(x_1)) = 2 + 2*x_1
   POL(g0(x_1)) = x_1
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G0(c(s0(y))) -> G0(c(y))

The TRS R consists of the following rules:

   g0(c(s0(y))) -> g0(c(y))
   f0(f0(x)) -> f0(d0(f0(x)))
   rand0(x) -> rand0(s0(x))
   f0(c(y)) -> f0(c(s0(y)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   G0(c(s0(y))) -> G0(c(y))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
G0(x1)  =  x1

c(x1)  =  c(x1)

s0(x1)  =  s0(x1)

g0(x1)  =  g0

f0(x1)  =  f0

d0(x1)  =  d0

rand0(x1)  =  rand0


Recursive path order with status [RPO].
Quasi-Precedence: g0 > c_1 > s0_1
f0 > c_1 > s0_1
rand0 > s0_1

Status: c_1: [1]
s0_1: multiset status
g0: multiset status
f0: multiset status
d0: []
rand0: multiset status


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   g0(c(s0(y))) -> g0(c(y))
   f0(f0(x)) -> f0(d0(f0(x)))
   rand0(x) -> rand0(s0(x))
   f0(c(y)) -> f0(c(s0(y)))


----------------------------------------

(13)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   g0(c(s0(y))) -> g0(c(y))
   f0(f0(x)) -> f0(d0(f0(x)))
   rand0(x) -> rand0(s0(x))
   f0(c(y)) -> f0(c(s0(y)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(14) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
Relative ADP Problem with
absolute ADPs:

   f(c(s(x), y)) -> F(c(x, s(y)))

and relative ADPs:

   g(c(x, s(y))) -> g(c(s(x), y))
   f(x) -> x
   f(f(x)) -> f(d(f(x)))
   rand(x) -> rand(s(x))
   rand(x) -> x


----------------------------------------

(17) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:s_1 = 
c_2 = 1
d_1 = 
f_1 = 
F_1 = 
rand_1 = 
g_1 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
F(x1)  =  F(x1)

c(x1, x2)  =  c(x1)

s(x1)  =  s(x1)


Recursive path order with status [RPO].
Quasi-Precedence: [F_1, s_1] > c_1

Status: F_1: [1]
c_1: multiset status
s_1: multiset status


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F0(c(s0(x))) -> F0(c(x))

The TRS R consists of the following rules:

   g0(c(x)) -> g0(c(s0(x)))
   f0(x) -> x
   f0(f0(x)) -> f0(d0(f0(x)))
   rand0(x) -> rand0(s0(x))
   f0(c(s0(x))) -> f0(c(x))
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   rand0(x) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(F0(x_1)) = 2*x_1
   POL(c(x_1)) = 2*x_1
   POL(d0(x_1)) = x_1
   POL(f0(x_1)) = 2*x_1
   POL(g0(x_1)) = x_1
   POL(rand0(x_1)) = 1 + 2*x_1
   POL(s0(x_1)) = x_1


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F0(c(s0(x))) -> F0(c(x))

The TRS R consists of the following rules:

   g0(c(x)) -> g0(c(s0(x)))
   f0(x) -> x
   f0(f0(x)) -> f0(d0(f0(x)))
   rand0(x) -> rand0(s0(x))
   f0(c(s0(x))) -> f0(c(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   f0(x) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(F0(x_1)) = x_1
   POL(c(x_1)) = 2*x_1
   POL(d0(x_1)) = x_1
   POL(f0(x_1)) = 2 + 2*x_1
   POL(g0(x_1)) = x_1
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F0(c(s0(x))) -> F0(c(x))

The TRS R consists of the following rules:

   g0(c(x)) -> g0(c(s0(x)))
   f0(f0(x)) -> f0(d0(f0(x)))
   rand0(x) -> rand0(s0(x))
   f0(c(s0(x))) -> f0(c(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(23) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   F0(c(s0(x))) -> F0(c(x))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
F0(x1)  =  x1

c(x1)  =  x1

s0(x1)  =  s0(x1)

g0(x1)  =  g0

f0(x1)  =  f0

d0(x1)  =  d0

rand0(x1)  =  rand0


Recursive path order with status [RPO].
Quasi-Precedence: g0 > s0_1 > rand0
f0 > rand0
d0 > rand0

Status: s0_1: multiset status
g0: multiset status
f0: multiset status
d0: []
rand0: []


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   g0(c(x)) -> g0(c(s0(x)))
   f0(f0(x)) -> f0(d0(f0(x)))
   rand0(x) -> rand0(s0(x))
   f0(c(s0(x))) -> f0(c(x))


----------------------------------------

(24)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   g0(c(x)) -> g0(c(s0(x)))
   f0(f0(x)) -> f0(d0(f0(x)))
   rand0(x) -> rand0(s0(x))
   f0(c(s0(x))) -> f0(c(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(25) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(26)
YES

----------------------------------------

(27)
Obligation:
Relative ADP Problem with
absolute ADPs:

   f(f(x)) -> f(d(F(x)))

and relative ADPs:

   g(c(x, s(y))) -> g(c(s(x), y))
   f(x) -> x
   f(f(x)) -> f(d(f(x)))
   rand(x) -> rand(s(x))
   f(c(s(x), y)) -> f(c(x, s(y)))
   rand(x) -> x


----------------------------------------

(28) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:s_1 = 
c_2 = 
d_1 = 
f_1 = 
F_1 = 
rand_1 = 
g_1 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
F(x1)  =  x1

f(x1)  =  f(x1)


Recursive path order with status [RPO].
Quasi-Precedence: trivial

Status: f_1: [1]


----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F0(f0(x)) -> F0(x)

The TRS R consists of the following rules:

   g0(c0(x, s0(y))) -> g0(c0(s0(x), y))
   f0(x) -> x
   f0(f0(x)) -> f0(d0(f0(x)))
   rand0(x) -> rand0(s0(x))
   f0(c0(s0(x), y)) -> f0(c0(x, s0(y)))
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(30) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   rand0(x) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(F0(x_1)) = 2*x_1
   POL(c0(x_1, x_2)) = 2*x_1 + x_2
   POL(d0(x_1)) = x_1
   POL(f0(x_1)) = 2*x_1
   POL(g0(x_1)) = x_1
   POL(rand0(x_1)) = 1 + 2*x_1
   POL(s0(x_1)) = x_1


----------------------------------------

(31)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F0(f0(x)) -> F0(x)

The TRS R consists of the following rules:

   g0(c0(x, s0(y))) -> g0(c0(s0(x), y))
   f0(x) -> x
   f0(f0(x)) -> f0(d0(f0(x)))
   rand0(x) -> rand0(s0(x))
   f0(c0(s0(x), y)) -> f0(c0(x, s0(y)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(32) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   F0(f0(x)) -> F0(x)

Strictly oriented rules of the TRS R:

   f0(x) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(F0(x_1)) = 2*x_1
   POL(c0(x_1, x_2)) = 2*x_1 + x_2
   POL(d0(x_1)) = x_1
   POL(f0(x_1)) = 2 + 2*x_1
   POL(g0(x_1)) = x_1
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1


----------------------------------------

(33)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   g0(c0(x, s0(y))) -> g0(c0(s0(x), y))
   f0(f0(x)) -> f0(d0(f0(x)))
   rand0(x) -> rand0(s0(x))
   f0(c0(s0(x), y)) -> f0(c0(x, s0(y)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(34) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(35)
YES
