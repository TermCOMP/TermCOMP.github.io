YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/THEk2.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) RelADPP
        (6) RelADPCleverAfsProof [SOUND, 73 ms]
        (7) QDP
        (8) MRRProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) MRRProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) MRRProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) MRRProof [EQUIVALENT, 1 ms]
        (15) QDP
        (16) QDPOrderProof [EQUIVALENT, 0 ms]
        (17) QDP
        (18) PisEmptyProof [EQUIVALENT, 0 ms]
        (19) YES
    (20) RelADPP
        (21) RelADPCleverAfsProof [SOUND, 73 ms]
        (22) QDP
        (23) MRRProof [EQUIVALENT, 0 ms]
        (24) QDP
        (25) PisEmptyProof [EQUIVALENT, 0 ms]
        (26) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   f(0) -> true
   f(1) -> false
   f(s(x)) -> f(x)
   if(true, s(x), s(y)) -> s(x)
   if(false, s(x), s(y)) -> s(y)
   g(x, c(y)) -> c(g(x, y))
   g(x, c(y)) -> g(x, if(f(x), c(g(s(x), y)), c(y)))

The relative TRS consists of the following S rules:

   rand(x) -> rand(s(x))
   rand(x) -> x


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   f(0) -> true
   f(1) -> false
   f(s(x)) -> F(x)
   if(true, s(x), s(y)) -> s(x)
   if(false, s(x), s(y)) -> s(y)
   g(x, c(y)) -> c(G(x, y))
   g(x, c(y)) -> G(x, if(f(x), c(g(s(x), y)), c(y)))
   g(x, c(y)) -> g(x, IF(f(x), c(g(s(x), y)), c(y)))
   g(x, c(y)) -> g(x, if(F(x), c(g(s(x), y)), c(y)))
   g(x, c(y)) -> g(x, if(f(x), c(G(s(x), y)), c(y)))

and relative ADPs:

   rand(x) -> RAND(s(x))
   rand(x) -> x


----------------------------------------

(3) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  2 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 2 subproblems.

----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Relative ADP Problem with
absolute ADPs:

   f(s(x)) -> F(x)

and relative ADPs:

   if(false, s(x), s(y)) -> s(y)
   if(true, s(x), s(y)) -> s(x)
   g(x, c(y)) -> c(g(x, y))
   f(1) -> false
   g(x, c(y)) -> g(x, if(f(x), c(g(s(x), y)), c(y)))
   f(0) -> true
   rand(x) -> rand(s(x))
   rand(x) -> x


----------------------------------------

(6) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:s_1 = 
true = 
c_1 = 
f_1 = 0
if_3 = 
0 = 
1 = 
F_1 = 
rand_1 = 
g_2 = 1
false = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
F(x1)  =  F(x1)

s(x1)  =  s(x1)

g(x1, x2)  =  g(x1)

c(x1)  =  x1

if(x1, x2, x3)  =  if(x1, x2, x3)

f(x1)  =  f

false  =  false

true  =  true

1  =  1

0  =  0


Recursive path order with status [RPO].
Quasi-Precedence: if_3 > [s_1, g_1]
[f, false, 1] > [true, 0] > [s_1, g_1]

Status: F_1: [1]
s_1: multiset status
g_1: multiset status
if_3: multiset status
f: multiset status
false: multiset status
true: multiset status
1: multiset status
0: multiset status


----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F0(s0(x)) -> F0(x)

The TRS R consists of the following rules:

   if0(false0, s0(x), s0(y)) -> s0(y)
   if0(true0, s0(x), s0(y)) -> s0(x)
   g(x) -> c0(g(x))
   f -> false0
   g(x) -> g(x)
   f -> true0
   f -> f
   rand0(x) -> rand0(s0(x))
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(8) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   if0(false0, s0(x), s0(y)) -> s0(y)
   if0(true0, s0(x), s0(y)) -> s0(x)

Used ordering: Polynomial interpretation [POLO]:

   POL(F0(x_1)) = 2*x_1
   POL(c0(x_1)) = x_1
   POL(f) = 2
   POL(false0) = 2
   POL(g(x_1)) = 1 + 2*x_1
   POL(if0(x_1, x_2, x_3)) = x_1 + 2*x_2 + 2*x_3
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 2


----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F0(s0(x)) -> F0(x)

The TRS R consists of the following rules:

   g(x) -> c0(g(x))
   f -> false0
   g(x) -> g(x)
   f -> true0
   f -> f
   rand0(x) -> rand0(s0(x))
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(10) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   rand0(x) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(F0(x_1)) = 2*x_1
   POL(c0(x_1)) = x_1
   POL(f) = 2
   POL(false0) = 2
   POL(g(x_1)) = 1 + 2*x_1
   POL(rand0(x_1)) = 1 + 2*x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 2


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F0(s0(x)) -> F0(x)

The TRS R consists of the following rules:

   g(x) -> c0(g(x))
   f -> false0
   g(x) -> g(x)
   f -> true0
   f -> f
   rand0(x) -> rand0(s0(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   f -> false0

Used ordering: Polynomial interpretation [POLO]:

   POL(F0(x_1)) = 2*x_1
   POL(c0(x_1)) = x_1
   POL(f) = 2
   POL(false0) = 1
   POL(g(x_1)) = 1 + 2*x_1
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 2


----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F0(s0(x)) -> F0(x)

The TRS R consists of the following rules:

   g(x) -> c0(g(x))
   g(x) -> g(x)
   f -> true0
   f -> f
   rand0(x) -> rand0(s0(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(14) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   f -> true0

Used ordering: Polynomial interpretation [POLO]:

   POL(F0(x_1)) = 2*x_1
   POL(c0(x_1)) = x_1
   POL(f) = 2
   POL(g(x_1)) = 2 + 2*x_1
   POL(rand0(x_1)) = 2*x_1
   POL(s0(x_1)) = x_1
   POL(true0) = 0


----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F0(s0(x)) -> F0(x)

The TRS R consists of the following rules:

   g(x) -> c0(g(x))
   g(x) -> g(x)
   f -> f
   rand0(x) -> rand0(s0(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(16) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   F0(s0(x)) -> F0(x)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
F0(x1)  =  x1

s0(x1)  =  s0(x1)

g(x1)  =  g

c0(x1)  =  c0

f  =  f

rand0(x1)  =  rand0


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   s0_1=1
   rand0=2
   c0=2
   g=3
   f=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   g(x) -> c0(g(x))
   g(x) -> g(x)
   f -> f
   rand0(x) -> rand0(s0(x))


----------------------------------------

(17)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   g(x) -> c0(g(x))
   g(x) -> g(x)
   f -> f
   rand0(x) -> rand0(s0(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(18) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
Relative ADP Problem with
absolute ADPs:

   g(x, c(y)) -> g(x, if(f(x), c(G(s(x), y)), c(y)))
   g(x, c(y)) -> c(G(x, y))

and relative ADPs:

   if(false, s(x), s(y)) -> s(y)
   if(true, s(x), s(y)) -> s(x)
   f(1) -> false
   g(x, c(y)) -> g(x, if(f(x), c(g(s(x), y)), c(y)))
   f(0) -> true
   f(s(x)) -> f(x)
   rand(x) -> rand(s(x))
   rand(x) -> x


----------------------------------------

(21) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:s_1 = 0
true = 
c_1 = 
G_2 = 0
if_3 = 0, 1, 2
f_1 = 0
0 = 
1 = 
rand_1 = 
g_2 = 
false = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
G(x1, x2)  =  G(x2)

c(x1)  =  c(x1)

s(x1)  =  s

g(x1, x2)  =  g(x1, x2)

if(x1, x2, x3)  =  if

f(x1)  =  f

false  =  false

true  =  true

1  =  1

0  =  0


Recursive path order with status [RPO].
Quasi-Precedence: g_2 > [G_1, c_1, s, if]
[f, false, 1] > true > [G_1, c_1, s, if]

Status: G_1: multiset status
c_1: multiset status
s: multiset status
g_2: [1,2]
if: multiset status
f: multiset status
false: multiset status
true: multiset status
1: multiset status
0: multiset status


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G(c0(y)) -> G(y)

The TRS R consists of the following rules:

   if -> s
   g0(x, c0(y)) -> c0(g0(x, y))
   f -> false0
   g0(x, c0(y)) -> g0(x, if)
   f -> true0
   f -> f
   rand0(x) -> rand0(s)
   rand0(x) -> x

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(23) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   G(c0(y)) -> G(y)

Strictly oriented rules of the TRS R:

   if -> s
   g0(x, c0(y)) -> c0(g0(x, y))
   f -> false0
   g0(x, c0(y)) -> g0(x, if)
   f -> true0
   rand0(x) -> x

Used ordering: Knuth-Bendix order [KBO] with precedence:g0_2 > c0_1 > if > G_1 > rand0_1 > f > true0 > false0 > s

and weight map:

   if=2
   s=1
   f=2
   false0=1
   true0=2
   c0_1=1
   rand0_1=1
   G_1=1
   g0_2=0

The variable weight is 1

----------------------------------------

(24)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   f -> f
   rand0(x) -> rand0(s)

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(25) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(26)
YES
