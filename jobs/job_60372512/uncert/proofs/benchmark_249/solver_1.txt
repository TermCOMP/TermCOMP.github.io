MAYBE
proof of /home/ff862203/input_Ym7jpxmcUk.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Outermost Termination of the given OTRS could not be shown:

(0) OTRS
(1) Trivial-Transformation [SOUND, 0 ms]
(2) QTRS
    (3) QTRSRRRProof [EQUIVALENT, 30 ms]
    (4) QTRS
    (5) AAECC Innermost [EQUIVALENT, 0 ms]
    (6) QTRS
    (7) DependencyPairsProof [EQUIVALENT, 0 ms]
    (8) QDP
    (9) DependencyGraphProof [EQUIVALENT, 0 ms]
    (10) QDP
    (11) UsableRulesProof [EQUIVALENT, 0 ms]
    (12) QDP
    (13) QReductionProof [EQUIVALENT, 0 ms]
    (14) QDP
    (15) TransformationProof [EQUIVALENT, 0 ms]
    (16) QDP
    (17) UsableRulesProof [EQUIVALENT, 0 ms]
    (18) QDP
    (19) QReductionProof [EQUIVALENT, 0 ms]
    (20) QDP
    (21) TransformationProof [EQUIVALENT, 0 ms]
    (22) QDP
    (23) UsableRulesProof [EQUIVALENT, 0 ms]
    (24) QDP
    (25) QReductionProof [EQUIVALENT, 0 ms]
    (26) QDP
    (27) TransformationProof [EQUIVALENT, 0 ms]
    (28) QDP
    (29) NonTerminationLoopProof [COMPLETE, 0 ms]
    (30) NO
(31) Thiemann-SpecialC-Transformation [EQUIVALENT, 0 ms]
(32) QTRS
    (33) QTRSRRRProof [EQUIVALENT, 25 ms]
    (34) QTRS
    (35) DependencyPairsProof [EQUIVALENT, 0 ms]
    (36) QDP
    (37) DependencyGraphProof [EQUIVALENT, 0 ms]
    (38) AND
        (39) QDP
            (40) UsableRulesProof [EQUIVALENT, 0 ms]
            (41) QDP
            (42) QReductionProof [EQUIVALENT, 0 ms]
            (43) QDP
            (44) MRRProof [EQUIVALENT, 0 ms]
            (45) QDP
            (46) PisEmptyProof [EQUIVALENT, 0 ms]
            (47) YES
        (48) QDP
            (49) UsableRulesProof [EQUIVALENT, 0 ms]
            (50) QDP
                (51) QReductionProof [EQUIVALENT, 1 ms]
                (52) QDP
                (53) TransformationProof [SOUND, 0 ms]
                (54) QDP
                (55) DependencyGraphProof [EQUIVALENT, 0 ms]
                (56) QDP
            (57) UsableRulesProof [EQUIVALENT, 0 ms]
            (58) QDP
                (59) QReductionProof [EQUIVALENT, 0 ms]
                (60) QDP


----------------------------------------

(0)
Obligation:
Term rewrite system R:
The TRS R consists of the following rules:

   f(x, x) -> f(0, 1)
   0 -> 2
   1 -> 2
   f(x, 2) -> 2
   f(2, x) -> 2



Outermost Strategy.

----------------------------------------

(1) Trivial-Transformation (SOUND)
We applied the Trivial transformation  to transform the outermost TRS to a standard TRS.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(x, x) -> f(0, 1)
   0 -> 2
   1 -> 2
   f(x, 2) -> 2
   f(2, x) -> 2

Q is empty.

----------------------------------------

(3) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(1) = 0
   POL(2) = 0
   POL(f(x_1, x_2)) = 1 + x_1 + x_2
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   f(x, 2) -> 2
   f(2, x) -> 2




----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(x, x) -> f(0, 1)
   0 -> 2
   1 -> 2

Q is empty.

----------------------------------------

(5) AAECC Innermost (EQUIVALENT)
We have applied [NOC,AAECCNOC] to switch to innermost. The TRS R 1 is 
   0 -> 2
   1 -> 2

The TRS R 2 is 
   f(x, x) -> f(0, 1)

The signature Sigma is {f_2}
----------------------------------------

(6)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(x, x) -> f(0, 1)
   0 -> 2
   1 -> 2

The set Q consists of the following terms:

   f(x0, x0)
   0
   1


----------------------------------------

(7) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(x, x) -> F(0, 1)
   F(x, x) -> 0^1
   F(x, x) -> 1^1

The TRS R consists of the following rules:

   f(x, x) -> f(0, 1)
   0 -> 2
   1 -> 2

The set Q consists of the following terms:

   f(x0, x0)
   0
   1

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(x, x) -> F(0, 1)

The TRS R consists of the following rules:

   f(x, x) -> f(0, 1)
   0 -> 2
   1 -> 2

The set Q consists of the following terms:

   f(x0, x0)
   0
   1

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(x, x) -> F(0, 1)

The TRS R consists of the following rules:

   0 -> 2
   1 -> 2

The set Q consists of the following terms:

   f(x0, x0)
   0
   1

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f(x0, x0)


----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(x, x) -> F(0, 1)

The TRS R consists of the following rules:

   0 -> 2
   1 -> 2

The set Q consists of the following terms:

   0
   1

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule F(x, x) -> F(0, 1) at position [0] we obtained the following new rules [LPAR04]:

   (F(x, x) -> F(2, 1),F(x, x) -> F(2, 1))


----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(x, x) -> F(2, 1)

The TRS R consists of the following rules:

   0 -> 2
   1 -> 2

The set Q consists of the following terms:

   0
   1

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(x, x) -> F(2, 1)

The TRS R consists of the following rules:

   1 -> 2

The set Q consists of the following terms:

   0
   1

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   0


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(x, x) -> F(2, 1)

The TRS R consists of the following rules:

   1 -> 2

The set Q consists of the following terms:

   1

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule F(x, x) -> F(2, 1) at position [1] we obtained the following new rules [LPAR04]:

   (F(x, x) -> F(2, 2),F(x, x) -> F(2, 2))


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(x, x) -> F(2, 2)

The TRS R consists of the following rules:

   1 -> 2

The set Q consists of the following terms:

   1

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(x, x) -> F(2, 2)

R is empty.
The set Q consists of the following terms:

   1

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(25) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   1


----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(x, x) -> F(2, 2)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(27) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule F(x, x) -> F(2, 2) we obtained the following new rules [LPAR04]:

   (F(2, 2) -> F(2, 2),F(2, 2) -> F(2, 2))


----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(2, 2) -> F(2, 2)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = F(2, 2) evaluates to  t =F(2, 2)

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from F(2, 2) to F(2, 2).




----------------------------------------

(30)
NO

----------------------------------------

(31) Thiemann-SpecialC-Transformation (EQUIVALENT)
We applied the Thiemann-SpecialC transformation  to transform the outermost TRS to an innermost TRS.
----------------------------------------

(32)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   top(go_up(x)) -> top(reduce(x))
   reduce(f(x_1, x_2)) -> check_f(redex_f(x_1, x_2))
   redex_f(x, x) -> result_f(f(0, 1))
   reduce(0) -> go_up(2)
   reduce(1) -> go_up(2)
   redex_f(x, 2) -> result_f(2)
   redex_f(2, x) -> result_f(2)
   check_f(result_f(x)) -> go_up(x)
   check_f(redex_f(x_1, x_2)) -> in_f_1(reduce(x_1), x_2)
   check_f(redex_f(x_1, x_2)) -> in_f_2(x_1, reduce(x_2))
   in_f_1(go_up(x_1), x_2) -> go_up(f(x_1, x_2))
   in_f_2(x_1, go_up(x_2)) -> go_up(f(x_1, x_2))

The set Q consists of the following terms:

   top(go_up(x0))
   reduce(f(x0, x1))
   redex_f(x0, x0)
   reduce(0)
   reduce(1)
   redex_f(x0, 2)
   redex_f(2, x0)
   check_f(result_f(x0))
   check_f(redex_f(x0, x1))
   in_f_1(go_up(x0), x1)
   in_f_2(x0, go_up(x1))


----------------------------------------

(33) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(1) = 0
   POL(2) = 0
   POL(check_f(x_1)) = x_1
   POL(f(x_1, x_2)) = 1 + x_1 + x_2
   POL(go_up(x_1)) = 2*x_1
   POL(in_f_1(x_1, x_2)) = 2 + x_1 + 2*x_2
   POL(in_f_2(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(redex_f(x_1, x_2)) = 2 + 2*x_1 + 2*x_2
   POL(reduce(x_1)) = 2*x_1
   POL(result_f(x_1)) = 2*x_1
   POL(top(x_1)) = x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   redex_f(x, 2) -> result_f(2)
   redex_f(2, x) -> result_f(2)




----------------------------------------

(34)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   top(go_up(x)) -> top(reduce(x))
   reduce(f(x_1, x_2)) -> check_f(redex_f(x_1, x_2))
   redex_f(x, x) -> result_f(f(0, 1))
   reduce(0) -> go_up(2)
   reduce(1) -> go_up(2)
   check_f(result_f(x)) -> go_up(x)
   check_f(redex_f(x_1, x_2)) -> in_f_1(reduce(x_1), x_2)
   check_f(redex_f(x_1, x_2)) -> in_f_2(x_1, reduce(x_2))
   in_f_1(go_up(x_1), x_2) -> go_up(f(x_1, x_2))
   in_f_2(x_1, go_up(x_2)) -> go_up(f(x_1, x_2))

The set Q consists of the following terms:

   top(go_up(x0))
   reduce(f(x0, x1))
   redex_f(x0, x0)
   reduce(0)
   reduce(1)
   redex_f(x0, 2)
   redex_f(2, x0)
   check_f(result_f(x0))
   check_f(redex_f(x0, x1))
   in_f_1(go_up(x0), x1)
   in_f_2(x0, go_up(x1))


----------------------------------------

(35) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(36)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(go_up(x)) -> TOP(reduce(x))
   TOP(go_up(x)) -> REDUCE(x)
   REDUCE(f(x_1, x_2)) -> CHECK_F(redex_f(x_1, x_2))
   REDUCE(f(x_1, x_2)) -> REDEX_F(x_1, x_2)
   CHECK_F(redex_f(x_1, x_2)) -> IN_F_1(reduce(x_1), x_2)
   CHECK_F(redex_f(x_1, x_2)) -> REDUCE(x_1)
   CHECK_F(redex_f(x_1, x_2)) -> IN_F_2(x_1, reduce(x_2))
   CHECK_F(redex_f(x_1, x_2)) -> REDUCE(x_2)

The TRS R consists of the following rules:

   top(go_up(x)) -> top(reduce(x))
   reduce(f(x_1, x_2)) -> check_f(redex_f(x_1, x_2))
   redex_f(x, x) -> result_f(f(0, 1))
   reduce(0) -> go_up(2)
   reduce(1) -> go_up(2)
   check_f(result_f(x)) -> go_up(x)
   check_f(redex_f(x_1, x_2)) -> in_f_1(reduce(x_1), x_2)
   check_f(redex_f(x_1, x_2)) -> in_f_2(x_1, reduce(x_2))
   in_f_1(go_up(x_1), x_2) -> go_up(f(x_1, x_2))
   in_f_2(x_1, go_up(x_2)) -> go_up(f(x_1, x_2))

The set Q consists of the following terms:

   top(go_up(x0))
   reduce(f(x0, x1))
   redex_f(x0, x0)
   reduce(0)
   reduce(1)
   redex_f(x0, 2)
   redex_f(2, x0)
   check_f(result_f(x0))
   check_f(redex_f(x0, x1))
   in_f_1(go_up(x0), x1)
   in_f_2(x0, go_up(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(37) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 4 less nodes.
----------------------------------------

(38)
Complex Obligation (AND)

----------------------------------------

(39)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CHECK_F(redex_f(x_1, x_2)) -> REDUCE(x_1)
   REDUCE(f(x_1, x_2)) -> CHECK_F(redex_f(x_1, x_2))
   CHECK_F(redex_f(x_1, x_2)) -> REDUCE(x_2)

The TRS R consists of the following rules:

   top(go_up(x)) -> top(reduce(x))
   reduce(f(x_1, x_2)) -> check_f(redex_f(x_1, x_2))
   redex_f(x, x) -> result_f(f(0, 1))
   reduce(0) -> go_up(2)
   reduce(1) -> go_up(2)
   check_f(result_f(x)) -> go_up(x)
   check_f(redex_f(x_1, x_2)) -> in_f_1(reduce(x_1), x_2)
   check_f(redex_f(x_1, x_2)) -> in_f_2(x_1, reduce(x_2))
   in_f_1(go_up(x_1), x_2) -> go_up(f(x_1, x_2))
   in_f_2(x_1, go_up(x_2)) -> go_up(f(x_1, x_2))

The set Q consists of the following terms:

   top(go_up(x0))
   reduce(f(x0, x1))
   redex_f(x0, x0)
   reduce(0)
   reduce(1)
   redex_f(x0, 2)
   redex_f(2, x0)
   check_f(result_f(x0))
   check_f(redex_f(x0, x1))
   in_f_1(go_up(x0), x1)
   in_f_2(x0, go_up(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(40) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(41)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CHECK_F(redex_f(x_1, x_2)) -> REDUCE(x_1)
   REDUCE(f(x_1, x_2)) -> CHECK_F(redex_f(x_1, x_2))
   CHECK_F(redex_f(x_1, x_2)) -> REDUCE(x_2)

The TRS R consists of the following rules:

   redex_f(x, x) -> result_f(f(0, 1))

The set Q consists of the following terms:

   top(go_up(x0))
   reduce(f(x0, x1))
   redex_f(x0, x0)
   reduce(0)
   reduce(1)
   redex_f(x0, 2)
   redex_f(2, x0)
   check_f(result_f(x0))
   check_f(redex_f(x0, x1))
   in_f_1(go_up(x0), x1)
   in_f_2(x0, go_up(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(42) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   top(go_up(x0))
   reduce(f(x0, x1))
   reduce(0)
   reduce(1)
   check_f(result_f(x0))
   check_f(redex_f(x0, x1))
   in_f_1(go_up(x0), x1)
   in_f_2(x0, go_up(x1))


----------------------------------------

(43)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CHECK_F(redex_f(x_1, x_2)) -> REDUCE(x_1)
   REDUCE(f(x_1, x_2)) -> CHECK_F(redex_f(x_1, x_2))
   CHECK_F(redex_f(x_1, x_2)) -> REDUCE(x_2)

The TRS R consists of the following rules:

   redex_f(x, x) -> result_f(f(0, 1))

The set Q consists of the following terms:

   redex_f(x0, x0)
   redex_f(x0, 2)
   redex_f(2, x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(44) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   CHECK_F(redex_f(x_1, x_2)) -> REDUCE(x_1)
   REDUCE(f(x_1, x_2)) -> CHECK_F(redex_f(x_1, x_2))
   CHECK_F(redex_f(x_1, x_2)) -> REDUCE(x_2)


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(1) = 0
   POL(CHECK_F(x_1)) = 1 + 2*x_1
   POL(REDUCE(x_1)) = 2 + 2*x_1
   POL(f(x_1, x_2)) = 1 + x_1 + 2*x_2
   POL(redex_f(x_1, x_2)) = 1 + x_1 + x_2
   POL(result_f(x_1)) = x_1


----------------------------------------

(45)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   redex_f(x, x) -> result_f(f(0, 1))

The set Q consists of the following terms:

   redex_f(x0, x0)
   redex_f(x0, 2)
   redex_f(2, x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(46) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(47)
YES

----------------------------------------

(48)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(go_up(x)) -> TOP(reduce(x))

The TRS R consists of the following rules:

   top(go_up(x)) -> top(reduce(x))
   reduce(f(x_1, x_2)) -> check_f(redex_f(x_1, x_2))
   redex_f(x, x) -> result_f(f(0, 1))
   reduce(0) -> go_up(2)
   reduce(1) -> go_up(2)
   check_f(result_f(x)) -> go_up(x)
   check_f(redex_f(x_1, x_2)) -> in_f_1(reduce(x_1), x_2)
   check_f(redex_f(x_1, x_2)) -> in_f_2(x_1, reduce(x_2))
   in_f_1(go_up(x_1), x_2) -> go_up(f(x_1, x_2))
   in_f_2(x_1, go_up(x_2)) -> go_up(f(x_1, x_2))

The set Q consists of the following terms:

   top(go_up(x0))
   reduce(f(x0, x1))
   redex_f(x0, x0)
   reduce(0)
   reduce(1)
   redex_f(x0, 2)
   redex_f(2, x0)
   check_f(result_f(x0))
   check_f(redex_f(x0, x1))
   in_f_1(go_up(x0), x1)
   in_f_2(x0, go_up(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(49) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(50)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(go_up(x)) -> TOP(reduce(x))

The TRS R consists of the following rules:

   reduce(f(x_1, x_2)) -> check_f(redex_f(x_1, x_2))
   reduce(0) -> go_up(2)
   reduce(1) -> go_up(2)
   redex_f(x, x) -> result_f(f(0, 1))
   check_f(result_f(x)) -> go_up(x)
   check_f(redex_f(x_1, x_2)) -> in_f_1(reduce(x_1), x_2)
   check_f(redex_f(x_1, x_2)) -> in_f_2(x_1, reduce(x_2))
   in_f_2(x_1, go_up(x_2)) -> go_up(f(x_1, x_2))
   in_f_1(go_up(x_1), x_2) -> go_up(f(x_1, x_2))

The set Q consists of the following terms:

   top(go_up(x0))
   reduce(f(x0, x1))
   redex_f(x0, x0)
   reduce(0)
   reduce(1)
   redex_f(x0, 2)
   redex_f(2, x0)
   check_f(result_f(x0))
   check_f(redex_f(x0, x1))
   in_f_1(go_up(x0), x1)
   in_f_2(x0, go_up(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(51) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   top(go_up(x0))


----------------------------------------

(52)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(go_up(x)) -> TOP(reduce(x))

The TRS R consists of the following rules:

   reduce(f(x_1, x_2)) -> check_f(redex_f(x_1, x_2))
   reduce(0) -> go_up(2)
   reduce(1) -> go_up(2)
   redex_f(x, x) -> result_f(f(0, 1))
   check_f(result_f(x)) -> go_up(x)
   check_f(redex_f(x_1, x_2)) -> in_f_1(reduce(x_1), x_2)
   check_f(redex_f(x_1, x_2)) -> in_f_2(x_1, reduce(x_2))
   in_f_2(x_1, go_up(x_2)) -> go_up(f(x_1, x_2))
   in_f_1(go_up(x_1), x_2) -> go_up(f(x_1, x_2))

The set Q consists of the following terms:

   reduce(f(x0, x1))
   redex_f(x0, x0)
   reduce(0)
   reduce(1)
   redex_f(x0, 2)
   redex_f(2, x0)
   check_f(result_f(x0))
   check_f(redex_f(x0, x1))
   in_f_1(go_up(x0), x1)
   in_f_2(x0, go_up(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(53) TransformationProof (SOUND)
By narrowing [LPAR04] the rule TOP(go_up(x)) -> TOP(reduce(x)) at position [0] we obtained the following new rules [LPAR04]:

   (TOP(go_up(f(x0, x1))) -> TOP(check_f(redex_f(x0, x1))),TOP(go_up(f(x0, x1))) -> TOP(check_f(redex_f(x0, x1))))
   (TOP(go_up(0)) -> TOP(go_up(2)),TOP(go_up(0)) -> TOP(go_up(2)))
   (TOP(go_up(1)) -> TOP(go_up(2)),TOP(go_up(1)) -> TOP(go_up(2)))


----------------------------------------

(54)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(go_up(f(x0, x1))) -> TOP(check_f(redex_f(x0, x1)))
   TOP(go_up(0)) -> TOP(go_up(2))
   TOP(go_up(1)) -> TOP(go_up(2))

The TRS R consists of the following rules:

   reduce(f(x_1, x_2)) -> check_f(redex_f(x_1, x_2))
   reduce(0) -> go_up(2)
   reduce(1) -> go_up(2)
   redex_f(x, x) -> result_f(f(0, 1))
   check_f(result_f(x)) -> go_up(x)
   check_f(redex_f(x_1, x_2)) -> in_f_1(reduce(x_1), x_2)
   check_f(redex_f(x_1, x_2)) -> in_f_2(x_1, reduce(x_2))
   in_f_2(x_1, go_up(x_2)) -> go_up(f(x_1, x_2))
   in_f_1(go_up(x_1), x_2) -> go_up(f(x_1, x_2))

The set Q consists of the following terms:

   reduce(f(x0, x1))
   redex_f(x0, x0)
   reduce(0)
   reduce(1)
   redex_f(x0, 2)
   redex_f(2, x0)
   check_f(result_f(x0))
   check_f(redex_f(x0, x1))
   in_f_1(go_up(x0), x1)
   in_f_2(x0, go_up(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(55) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(56)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(go_up(f(x0, x1))) -> TOP(check_f(redex_f(x0, x1)))

The TRS R consists of the following rules:

   reduce(f(x_1, x_2)) -> check_f(redex_f(x_1, x_2))
   reduce(0) -> go_up(2)
   reduce(1) -> go_up(2)
   redex_f(x, x) -> result_f(f(0, 1))
   check_f(result_f(x)) -> go_up(x)
   check_f(redex_f(x_1, x_2)) -> in_f_1(reduce(x_1), x_2)
   check_f(redex_f(x_1, x_2)) -> in_f_2(x_1, reduce(x_2))
   in_f_2(x_1, go_up(x_2)) -> go_up(f(x_1, x_2))
   in_f_1(go_up(x_1), x_2) -> go_up(f(x_1, x_2))

The set Q consists of the following terms:

   reduce(f(x0, x1))
   redex_f(x0, x0)
   reduce(0)
   reduce(1)
   redex_f(x0, 2)
   redex_f(2, x0)
   check_f(result_f(x0))
   check_f(redex_f(x0, x1))
   in_f_1(go_up(x0), x1)
   in_f_2(x0, go_up(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(57) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(58)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(go_up(x)) -> TOP(reduce(x))

The TRS R consists of the following rules:

   reduce(f(x_1, x_2)) -> check_f(redex_f(x_1, x_2))
   reduce(0) -> go_up(2)
   reduce(1) -> go_up(2)
   redex_f(x, x) -> result_f(f(0, 1))
   check_f(result_f(x)) -> go_up(x)
   check_f(redex_f(x_1, x_2)) -> in_f_1(reduce(x_1), x_2)
   check_f(redex_f(x_1, x_2)) -> in_f_2(x_1, reduce(x_2))
   in_f_2(x_1, go_up(x_2)) -> go_up(f(x_1, x_2))
   in_f_1(go_up(x_1), x_2) -> go_up(f(x_1, x_2))

The set Q consists of the following terms:

   top(go_up(x0))
   reduce(f(x0, x1))
   redex_f(x0, x0)
   reduce(0)
   reduce(1)
   redex_f(x0, 2)
   redex_f(2, x0)
   check_f(result_f(x0))
   check_f(redex_f(x0, x1))
   in_f_1(go_up(x0), x1)
   in_f_2(x0, go_up(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(59) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   top(go_up(x0))


----------------------------------------

(60)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(go_up(x)) -> TOP(reduce(x))

The TRS R consists of the following rules:

   reduce(f(x_1, x_2)) -> check_f(redex_f(x_1, x_2))
   reduce(0) -> go_up(2)
   reduce(1) -> go_up(2)
   redex_f(x, x) -> result_f(f(0, 1))
   check_f(result_f(x)) -> go_up(x)
   check_f(redex_f(x_1, x_2)) -> in_f_1(reduce(x_1), x_2)
   check_f(redex_f(x_1, x_2)) -> in_f_2(x_1, reduce(x_2))
   in_f_2(x_1, go_up(x_2)) -> go_up(f(x_1, x_2))
   in_f_1(go_up(x_1), x_2) -> go_up(f(x_1, x_2))

The set Q consists of the following terms:

   reduce(f(x0, x1))
   redex_f(x0, x0)
   reduce(0)
   reduce(1)
   redex_f(x0, 2)
   redex_f(2, x0)
   check_f(result_f(x0))
   check_f(redex_f(x0, x1))
   in_f_1(go_up(x0), x1)
   in_f_2(x0, go_up(x1))

We have to consider all minimal (P,Q,R)-chains.