YES
proof of /home/ff862203/input_klOvX4mFoP.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Outermost Termination of the given OTRS could be proven:

(0) OTRS
(1) Raffelsieper-Zantema-Transformation [SOUND, 0 ms]
(2) QTRS
(3) QTRSRRRProof [EQUIVALENT, 27 ms]
(4) QTRS
(5) AAECC Innermost [EQUIVALENT, 0 ms]
(6) QTRS
(7) DependencyPairsProof [EQUIVALENT, 0 ms]
(8) QDP
(9) DependencyGraphProof [EQUIVALENT, 0 ms]
(10) QDP
(11) UsableRulesProof [EQUIVALENT, 0 ms]
(12) QDP
(13) QReductionProof [EQUIVALENT, 0 ms]
(14) QDP
(15) RFCMatchBoundsDPProof [EQUIVALENT, 0 ms]
(16) YES


----------------------------------------

(0)
Obligation:
Term rewrite system R:
The TRS R consists of the following rules:

   f(x) -> g(f(x))
   g(g(x)) -> c



Outermost Strategy.

----------------------------------------

(1) Raffelsieper-Zantema-Transformation (SOUND)
We applied the Raffelsieper-Zantema transformation  to transform the outermost TRS to a standard TRS.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   down(f(x)) -> up(g(f(x)))
   down(g(g(x))) -> up(c)
   top(up(x)) -> top(down(x))
   down(g(f(y3))) -> g_flat(down(f(y3)))
   down(g(c)) -> g_flat(down(c))
   down(g(fresh_constant)) -> g_flat(down(fresh_constant))
   f_flat(up(x_1)) -> up(f(x_1))
   g_flat(up(x_1)) -> up(g(x_1))

Q is empty.

----------------------------------------

(3) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(c) = 0
   POL(down(x_1)) = 2*x_1
   POL(f(x_1)) = x_1
   POL(f_flat(x_1)) = 2 + x_1
   POL(fresh_constant) = 0
   POL(g(x_1)) = x_1
   POL(g_flat(x_1)) = x_1
   POL(top(x_1)) = 2*x_1
   POL(up(x_1)) = 2*x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   f_flat(up(x_1)) -> up(f(x_1))




----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   down(f(x)) -> up(g(f(x)))
   down(g(g(x))) -> up(c)
   top(up(x)) -> top(down(x))
   down(g(f(y3))) -> g_flat(down(f(y3)))
   down(g(c)) -> g_flat(down(c))
   down(g(fresh_constant)) -> g_flat(down(fresh_constant))
   g_flat(up(x_1)) -> up(g(x_1))

Q is empty.

----------------------------------------

(5) AAECC Innermost (EQUIVALENT)
We have applied [NOC,AAECCNOC] to switch to innermost. The TRS R 1 is 
   down(g(f(y3))) -> g_flat(down(f(y3)))
   down(g(c)) -> g_flat(down(c))
   down(g(fresh_constant)) -> g_flat(down(fresh_constant))
   g_flat(up(x_1)) -> up(g(x_1))
   down(f(x)) -> up(g(f(x)))
   down(g(g(x))) -> up(c)

The TRS R 2 is 
   top(up(x)) -> top(down(x))

The signature Sigma is {top_1}
----------------------------------------

(6)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   down(f(x)) -> up(g(f(x)))
   down(g(g(x))) -> up(c)
   top(up(x)) -> top(down(x))
   down(g(f(y3))) -> g_flat(down(f(y3)))
   down(g(c)) -> g_flat(down(c))
   down(g(fresh_constant)) -> g_flat(down(fresh_constant))
   g_flat(up(x_1)) -> up(g(x_1))

The set Q consists of the following terms:

   down(f(x0))
   down(g(g(x0)))
   top(up(x0))
   down(g(f(x0)))
   down(g(c))
   down(g(fresh_constant))
   g_flat(up(x0))


----------------------------------------

(7) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(up(x)) -> TOP(down(x))
   TOP(up(x)) -> DOWN(x)
   DOWN(g(f(y3))) -> G_FLAT(down(f(y3)))
   DOWN(g(f(y3))) -> DOWN(f(y3))
   DOWN(g(c)) -> G_FLAT(down(c))
   DOWN(g(c)) -> DOWN(c)
   DOWN(g(fresh_constant)) -> G_FLAT(down(fresh_constant))
   DOWN(g(fresh_constant)) -> DOWN(fresh_constant)

The TRS R consists of the following rules:

   down(f(x)) -> up(g(f(x)))
   down(g(g(x))) -> up(c)
   top(up(x)) -> top(down(x))
   down(g(f(y3))) -> g_flat(down(f(y3)))
   down(g(c)) -> g_flat(down(c))
   down(g(fresh_constant)) -> g_flat(down(fresh_constant))
   g_flat(up(x_1)) -> up(g(x_1))

The set Q consists of the following terms:

   down(f(x0))
   down(g(g(x0)))
   top(up(x0))
   down(g(f(x0)))
   down(g(c))
   down(g(fresh_constant))
   g_flat(up(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 7 less nodes.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(up(x)) -> TOP(down(x))

The TRS R consists of the following rules:

   down(f(x)) -> up(g(f(x)))
   down(g(g(x))) -> up(c)
   top(up(x)) -> top(down(x))
   down(g(f(y3))) -> g_flat(down(f(y3)))
   down(g(c)) -> g_flat(down(c))
   down(g(fresh_constant)) -> g_flat(down(fresh_constant))
   g_flat(up(x_1)) -> up(g(x_1))

The set Q consists of the following terms:

   down(f(x0))
   down(g(g(x0)))
   top(up(x0))
   down(g(f(x0)))
   down(g(c))
   down(g(fresh_constant))
   g_flat(up(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(up(x)) -> TOP(down(x))

The TRS R consists of the following rules:

   down(f(x)) -> up(g(f(x)))
   down(g(g(x))) -> up(c)
   down(g(f(y3))) -> g_flat(down(f(y3)))
   down(g(c)) -> g_flat(down(c))
   down(g(fresh_constant)) -> g_flat(down(fresh_constant))
   g_flat(up(x_1)) -> up(g(x_1))

The set Q consists of the following terms:

   down(f(x0))
   down(g(g(x0)))
   top(up(x0))
   down(g(f(x0)))
   down(g(c))
   down(g(fresh_constant))
   g_flat(up(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   top(up(x0))


----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(up(x)) -> TOP(down(x))

The TRS R consists of the following rules:

   down(f(x)) -> up(g(f(x)))
   down(g(g(x))) -> up(c)
   down(g(f(y3))) -> g_flat(down(f(y3)))
   down(g(c)) -> g_flat(down(c))
   down(g(fresh_constant)) -> g_flat(down(fresh_constant))
   g_flat(up(x_1)) -> up(g(x_1))

The set Q consists of the following terms:

   down(f(x0))
   down(g(g(x0)))
   down(g(f(x0)))
   down(g(c))
   down(g(fresh_constant))
   g_flat(up(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) RFCMatchBoundsDPProof (EQUIVALENT)
Finiteness of the DP problem can be shown by a matchbound of 3. 
As the DP problem is minimal we only have to initialize the certificate graph by the rules of P:

   TOP(up(x)) -> TOP(down(x))

To find matches we regarded all rules of R and P:

   down(f(x)) -> up(g(f(x)))
   down(g(g(x))) -> up(c)
   down(g(f(y3))) -> g_flat(down(f(y3)))
   down(g(c)) -> g_flat(down(c))
   down(g(fresh_constant)) -> g_flat(down(fresh_constant))
   g_flat(up(x_1)) -> up(g(x_1))
   TOP(up(x)) -> TOP(down(x))

The certificate found is represented by the following graph.
The certificate consists of the following enumerated nodes:
257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276

Node 257 is start node and node 258 is final node.

Those nodes are connected through the following edges:

* 257 to 259 labelled TOP_1(0)* 257 to 264 labelled TOP_1(1)* 257 to 274 labelled TOP_1(2)* 257 to 276 labelled TOP_1(3)* 258 to 258 labelled #_1(0)* 259 to 258 labelled down_1(0)* 259 to 260 labelled up_1(1)* 259 to 262 labelled g_flat_1(1)* 259 to 267 labelled up_1(2)* 260 to 261 labelled g_1(1)* 260 to 258 labelled c(1)* 261 to 258 labelled f_1(1)* 262 to 263 labelled down_1(1)* 262 to 265 labelled up_1(2)* 263 to 258 labelled f_1(1), c(1), fresh_constant(1)* 264 to 260 labelled down_1(1)* 264 to 268 labelled g_flat_1(2)* 264 to 267 labelled down_1(1)* 264 to 272 labelled up_1(3)* 264 to 273 labelled up_1(2)* 265 to 266 labelled g_1(2)* 266 to 258 labelled f_1(2)* 267 to 265 labelled g_1(2)* 268 to 269 labelled down_1(2)* 268 to 270 labelled up_1(3)* 269 to 258 labelled f_1(2)* 270 to 271 labelled g_1(3)* 271 to 258 labelled f_1(3)* 272 to 270 labelled g_1(3)* 273 to 266 labelled c(2)* 274 to 272 labelled down_1(2)* 274 to 273 labelled down_1(2)* 274 to 275 labelled up_1(3)* 275 to 271 labelled c(3)* 276 to 275 labelled down_1(3)


----------------------------------------

(16)
YES
