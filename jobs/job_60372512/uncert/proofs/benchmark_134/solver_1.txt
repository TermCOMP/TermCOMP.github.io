YES
proof of /home/ff862203/input_rGtqyCZvZl.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Outermost Termination of the given OTRS could be proven:

(0) OTRS
(1) Raffelsieper-Zantema-Transformation [SOUND, 0 ms]
(2) QTRS
(3) QTRSRRRProof [EQUIVALENT, 115 ms]
(4) QTRS
(5) QTRSRRRProof [EQUIVALENT, 25 ms]
(6) QTRS
(7) QTRSRRRProof [EQUIVALENT, 41 ms]
(8) QTRS
(9) QTRSRRRProof [EQUIVALENT, 40 ms]
(10) QTRS
(11) QTRSRRRProof [EQUIVALENT, 27 ms]
(12) QTRS
(13) QTRSRRRProof [EQUIVALENT, 34 ms]
(14) QTRS
(15) DependencyPairsProof [EQUIVALENT, 0 ms]
(16) QDP
(17) DependencyGraphProof [EQUIVALENT, 0 ms]
(18) AND
    (19) QDP
        (20) UsableRulesProof [EQUIVALENT, 0 ms]
        (21) QDP
        (22) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (23) YES
    (24) QDP
        (25) UsableRulesProof [EQUIVALENT, 0 ms]
        (26) QDP
        (27) TransformationProof [EQUIVALENT, 0 ms]
        (28) QDP
        (29) DependencyGraphProof [EQUIVALENT, 0 ms]
        (30) QDP
        (31) QDPOrderProof [EQUIVALENT, 22 ms]
        (32) QDP
        (33) DependencyGraphProof [EQUIVALENT, 0 ms]
        (34) QDP
        (35) QDPOrderProof [EQUIVALENT, 260 ms]
        (36) QDP
        (37) QDPOrderProof [EQUIVALENT, 121 ms]
        (38) QDP
        (39) QDPOrderProof [EQUIVALENT, 189 ms]
        (40) QDP
        (41) QDPOrderProof [EQUIVALENT, 197 ms]
        (42) QDP
        (43) QDPOrderProof [EQUIVALENT, 211 ms]
        (44) QDP
        (45) QDPOrderProof [EQUIVALENT, 150 ms]
        (46) QDP
        (47) QDPOrderProof [EQUIVALENT, 209 ms]
        (48) QDP
        (49) QDPOrderProof [EQUIVALENT, 7001 ms]
        (50) QDP
        (51) PisEmptyProof [EQUIVALENT, 0 ms]
        (52) YES


----------------------------------------

(0)
Obligation:
Term rewrite system R:
The TRS R consists of the following rules:

   incr(nil) -> nil
   incr(cons(X, L)) -> cons(s(X), n__incr(activate(L)))
   adx(nil) -> nil
   adx(cons(X, L)) -> incr(cons(X, n__adx(activate(L))))
   nats -> adx(zeros)
   zeros -> cons(0, n__zeros)
   head(cons(X, L)) -> X
   tail(cons(X, L)) -> activate(L)
   incr(X) -> n__incr(X)
   adx(X) -> n__adx(X)
   zeros -> n__zeros
   activate(n__incr(X)) -> incr(X)
   activate(n__adx(X)) -> adx(X)
   activate(n__zeros) -> zeros
   activate(X) -> X



Outermost Strategy.

----------------------------------------

(1) Raffelsieper-Zantema-Transformation (SOUND)
We applied the Raffelsieper-Zantema transformation  to transform the outermost TRS to a standard TRS.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   down(incr(nil)) -> up(nil)
   down(incr(cons(X, L))) -> up(cons(s(X), n__incr(activate(L))))
   down(adx(nil)) -> up(nil)
   down(adx(cons(X, L))) -> up(incr(cons(X, n__adx(activate(L)))))
   down(nats) -> up(adx(zeros))
   down(zeros) -> up(cons(0, n__zeros))
   down(head(cons(X, L))) -> up(X)
   down(tail(cons(X, L))) -> up(activate(L))
   down(incr(X)) -> up(n__incr(X))
   down(adx(X)) -> up(n__adx(X))
   down(zeros) -> up(n__zeros)
   down(activate(n__incr(X))) -> up(incr(X))
   down(activate(n__adx(X))) -> up(adx(X))
   down(activate(n__zeros)) -> up(zeros)
   down(activate(X)) -> up(X)
   top(up(x)) -> top(down(x))
   down(cons(y1, y2)) -> cons_flat(down(y1), block(y2))
   down(cons(y1, y2)) -> cons_flat(block(y1), down(y2))
   down(s(y3)) -> s_flat(down(y3))
   down(n__incr(y4)) -> n__incr_flat(down(y4))
   down(n__adx(y7)) -> n__adx_flat(down(y7))
   down(head(incr(y11))) -> head_flat(down(incr(y11)))
   down(head(nil)) -> head_flat(down(nil))
   down(head(s(y14))) -> head_flat(down(s(y14)))
   down(head(n__incr(y15))) -> head_flat(down(n__incr(y15)))
   down(head(activate(y16))) -> head_flat(down(activate(y16)))
   down(head(adx(y17))) -> head_flat(down(adx(y17)))
   down(head(n__adx(y18))) -> head_flat(down(n__adx(y18)))
   down(head(nats)) -> head_flat(down(nats))
   down(head(zeros)) -> head_flat(down(zeros))
   down(head(0)) -> head_flat(down(0))
   down(head(n__zeros)) -> head_flat(down(n__zeros))
   down(head(head(y19))) -> head_flat(down(head(y19)))
   down(head(tail(y20))) -> head_flat(down(tail(y20)))
   down(head(fresh_constant)) -> head_flat(down(fresh_constant))
   down(tail(incr(y22))) -> tail_flat(down(incr(y22)))
   down(tail(nil)) -> tail_flat(down(nil))
   down(tail(s(y25))) -> tail_flat(down(s(y25)))
   down(tail(n__incr(y26))) -> tail_flat(down(n__incr(y26)))
   down(tail(activate(y27))) -> tail_flat(down(activate(y27)))
   down(tail(adx(y28))) -> tail_flat(down(adx(y28)))
   down(tail(n__adx(y29))) -> tail_flat(down(n__adx(y29)))
   down(tail(nats)) -> tail_flat(down(nats))
   down(tail(zeros)) -> tail_flat(down(zeros))
   down(tail(0)) -> tail_flat(down(0))
   down(tail(n__zeros)) -> tail_flat(down(n__zeros))
   down(tail(head(y30))) -> tail_flat(down(head(y30)))
   down(tail(tail(y31))) -> tail_flat(down(tail(y31)))
   down(tail(fresh_constant)) -> tail_flat(down(fresh_constant))
   incr_flat(up(x_1)) -> up(incr(x_1))
   cons_flat(up(x_1), block(x_2)) -> up(cons(x_1, x_2))
   cons_flat(block(x_1), up(x_2)) -> up(cons(x_1, x_2))
   s_flat(up(x_1)) -> up(s(x_1))
   n__incr_flat(up(x_1)) -> up(n__incr(x_1))
   activate_flat(up(x_1)) -> up(activate(x_1))
   adx_flat(up(x_1)) -> up(adx(x_1))
   n__adx_flat(up(x_1)) -> up(n__adx(x_1))
   head_flat(up(x_1)) -> up(head(x_1))
   tail_flat(up(x_1)) -> up(tail(x_1))

Q is empty.

----------------------------------------

(3) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(activate(x_1)) = x_1
   POL(activate_flat(x_1)) = 2*x_1
   POL(adx(x_1)) = 2*x_1
   POL(adx_flat(x_1)) = 1 + 2*x_1
   POL(block(x_1)) = 2*x_1
   POL(cons(x_1, x_2)) = 2*x_1 + x_2
   POL(cons_flat(x_1, x_2)) = 2*x_1 + x_2
   POL(down(x_1)) = 2*x_1
   POL(fresh_constant) = 0
   POL(head(x_1)) = 2*x_1
   POL(head_flat(x_1)) = 2*x_1
   POL(incr(x_1)) = x_1
   POL(incr_flat(x_1)) = 2*x_1
   POL(n__adx(x_1)) = 2*x_1
   POL(n__adx_flat(x_1)) = 2*x_1
   POL(n__incr(x_1)) = x_1
   POL(n__incr_flat(x_1)) = x_1
   POL(n__zeros) = 0
   POL(nats) = 0
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(s_flat(x_1)) = x_1
   POL(tail(x_1)) = x_1
   POL(tail_flat(x_1)) = x_1
   POL(top(x_1)) = x_1
   POL(up(x_1)) = 2*x_1
   POL(zeros) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   adx_flat(up(x_1)) -> up(adx(x_1))




----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   down(incr(nil)) -> up(nil)
   down(incr(cons(X, L))) -> up(cons(s(X), n__incr(activate(L))))
   down(adx(nil)) -> up(nil)
   down(adx(cons(X, L))) -> up(incr(cons(X, n__adx(activate(L)))))
   down(nats) -> up(adx(zeros))
   down(zeros) -> up(cons(0, n__zeros))
   down(head(cons(X, L))) -> up(X)
   down(tail(cons(X, L))) -> up(activate(L))
   down(incr(X)) -> up(n__incr(X))
   down(adx(X)) -> up(n__adx(X))
   down(zeros) -> up(n__zeros)
   down(activate(n__incr(X))) -> up(incr(X))
   down(activate(n__adx(X))) -> up(adx(X))
   down(activate(n__zeros)) -> up(zeros)
   down(activate(X)) -> up(X)
   top(up(x)) -> top(down(x))
   down(cons(y1, y2)) -> cons_flat(down(y1), block(y2))
   down(cons(y1, y2)) -> cons_flat(block(y1), down(y2))
   down(s(y3)) -> s_flat(down(y3))
   down(n__incr(y4)) -> n__incr_flat(down(y4))
   down(n__adx(y7)) -> n__adx_flat(down(y7))
   down(head(incr(y11))) -> head_flat(down(incr(y11)))
   down(head(nil)) -> head_flat(down(nil))
   down(head(s(y14))) -> head_flat(down(s(y14)))
   down(head(n__incr(y15))) -> head_flat(down(n__incr(y15)))
   down(head(activate(y16))) -> head_flat(down(activate(y16)))
   down(head(adx(y17))) -> head_flat(down(adx(y17)))
   down(head(n__adx(y18))) -> head_flat(down(n__adx(y18)))
   down(head(nats)) -> head_flat(down(nats))
   down(head(zeros)) -> head_flat(down(zeros))
   down(head(0)) -> head_flat(down(0))
   down(head(n__zeros)) -> head_flat(down(n__zeros))
   down(head(head(y19))) -> head_flat(down(head(y19)))
   down(head(tail(y20))) -> head_flat(down(tail(y20)))
   down(head(fresh_constant)) -> head_flat(down(fresh_constant))
   down(tail(incr(y22))) -> tail_flat(down(incr(y22)))
   down(tail(nil)) -> tail_flat(down(nil))
   down(tail(s(y25))) -> tail_flat(down(s(y25)))
   down(tail(n__incr(y26))) -> tail_flat(down(n__incr(y26)))
   down(tail(activate(y27))) -> tail_flat(down(activate(y27)))
   down(tail(adx(y28))) -> tail_flat(down(adx(y28)))
   down(tail(n__adx(y29))) -> tail_flat(down(n__adx(y29)))
   down(tail(nats)) -> tail_flat(down(nats))
   down(tail(zeros)) -> tail_flat(down(zeros))
   down(tail(0)) -> tail_flat(down(0))
   down(tail(n__zeros)) -> tail_flat(down(n__zeros))
   down(tail(head(y30))) -> tail_flat(down(head(y30)))
   down(tail(tail(y31))) -> tail_flat(down(tail(y31)))
   down(tail(fresh_constant)) -> tail_flat(down(fresh_constant))
   incr_flat(up(x_1)) -> up(incr(x_1))
   cons_flat(up(x_1), block(x_2)) -> up(cons(x_1, x_2))
   cons_flat(block(x_1), up(x_2)) -> up(cons(x_1, x_2))
   s_flat(up(x_1)) -> up(s(x_1))
   n__incr_flat(up(x_1)) -> up(n__incr(x_1))
   activate_flat(up(x_1)) -> up(activate(x_1))
   n__adx_flat(up(x_1)) -> up(n__adx(x_1))
   head_flat(up(x_1)) -> up(head(x_1))
   tail_flat(up(x_1)) -> up(tail(x_1))

Q is empty.

----------------------------------------

(5) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(activate(x_1)) = x_1
   POL(activate_flat(x_1)) = 2 + 2*x_1
   POL(adx(x_1)) = x_1
   POL(block(x_1)) = 2*x_1
   POL(cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(cons_flat(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(down(x_1)) = 2*x_1
   POL(fresh_constant) = 0
   POL(head(x_1)) = x_1
   POL(head_flat(x_1)) = x_1
   POL(incr(x_1)) = x_1
   POL(incr_flat(x_1)) = 1 + 2*x_1
   POL(n__adx(x_1)) = x_1
   POL(n__adx_flat(x_1)) = x_1
   POL(n__incr(x_1)) = x_1
   POL(n__incr_flat(x_1)) = x_1
   POL(n__zeros) = 0
   POL(nats) = 0
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(s_flat(x_1)) = x_1
   POL(tail(x_1)) = x_1
   POL(tail_flat(x_1)) = x_1
   POL(top(x_1)) = 2*x_1
   POL(up(x_1)) = 2*x_1
   POL(zeros) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   incr_flat(up(x_1)) -> up(incr(x_1))
   activate_flat(up(x_1)) -> up(activate(x_1))




----------------------------------------

(6)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   down(incr(nil)) -> up(nil)
   down(incr(cons(X, L))) -> up(cons(s(X), n__incr(activate(L))))
   down(adx(nil)) -> up(nil)
   down(adx(cons(X, L))) -> up(incr(cons(X, n__adx(activate(L)))))
   down(nats) -> up(adx(zeros))
   down(zeros) -> up(cons(0, n__zeros))
   down(head(cons(X, L))) -> up(X)
   down(tail(cons(X, L))) -> up(activate(L))
   down(incr(X)) -> up(n__incr(X))
   down(adx(X)) -> up(n__adx(X))
   down(zeros) -> up(n__zeros)
   down(activate(n__incr(X))) -> up(incr(X))
   down(activate(n__adx(X))) -> up(adx(X))
   down(activate(n__zeros)) -> up(zeros)
   down(activate(X)) -> up(X)
   top(up(x)) -> top(down(x))
   down(cons(y1, y2)) -> cons_flat(down(y1), block(y2))
   down(cons(y1, y2)) -> cons_flat(block(y1), down(y2))
   down(s(y3)) -> s_flat(down(y3))
   down(n__incr(y4)) -> n__incr_flat(down(y4))
   down(n__adx(y7)) -> n__adx_flat(down(y7))
   down(head(incr(y11))) -> head_flat(down(incr(y11)))
   down(head(nil)) -> head_flat(down(nil))
   down(head(s(y14))) -> head_flat(down(s(y14)))
   down(head(n__incr(y15))) -> head_flat(down(n__incr(y15)))
   down(head(activate(y16))) -> head_flat(down(activate(y16)))
   down(head(adx(y17))) -> head_flat(down(adx(y17)))
   down(head(n__adx(y18))) -> head_flat(down(n__adx(y18)))
   down(head(nats)) -> head_flat(down(nats))
   down(head(zeros)) -> head_flat(down(zeros))
   down(head(0)) -> head_flat(down(0))
   down(head(n__zeros)) -> head_flat(down(n__zeros))
   down(head(head(y19))) -> head_flat(down(head(y19)))
   down(head(tail(y20))) -> head_flat(down(tail(y20)))
   down(head(fresh_constant)) -> head_flat(down(fresh_constant))
   down(tail(incr(y22))) -> tail_flat(down(incr(y22)))
   down(tail(nil)) -> tail_flat(down(nil))
   down(tail(s(y25))) -> tail_flat(down(s(y25)))
   down(tail(n__incr(y26))) -> tail_flat(down(n__incr(y26)))
   down(tail(activate(y27))) -> tail_flat(down(activate(y27)))
   down(tail(adx(y28))) -> tail_flat(down(adx(y28)))
   down(tail(n__adx(y29))) -> tail_flat(down(n__adx(y29)))
   down(tail(nats)) -> tail_flat(down(nats))
   down(tail(zeros)) -> tail_flat(down(zeros))
   down(tail(0)) -> tail_flat(down(0))
   down(tail(n__zeros)) -> tail_flat(down(n__zeros))
   down(tail(head(y30))) -> tail_flat(down(head(y30)))
   down(tail(tail(y31))) -> tail_flat(down(tail(y31)))
   down(tail(fresh_constant)) -> tail_flat(down(fresh_constant))
   cons_flat(up(x_1), block(x_2)) -> up(cons(x_1, x_2))
   cons_flat(block(x_1), up(x_2)) -> up(cons(x_1, x_2))
   s_flat(up(x_1)) -> up(s(x_1))
   n__incr_flat(up(x_1)) -> up(n__incr(x_1))
   n__adx_flat(up(x_1)) -> up(n__adx(x_1))
   head_flat(up(x_1)) -> up(head(x_1))
   tail_flat(up(x_1)) -> up(tail(x_1))

Q is empty.

----------------------------------------

(7) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(activate(x_1)) = x_1
   POL(adx(x_1)) = x_1
   POL(block(x_1)) = 2*x_1
   POL(cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(cons_flat(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(down(x_1)) = 2*x_1
   POL(fresh_constant) = 0
   POL(head(x_1)) = x_1
   POL(head_flat(x_1)) = x_1
   POL(incr(x_1)) = x_1
   POL(n__adx(x_1)) = x_1
   POL(n__adx_flat(x_1)) = x_1
   POL(n__incr(x_1)) = x_1
   POL(n__incr_flat(x_1)) = x_1
   POL(n__zeros) = 0
   POL(nats) = 1
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(s_flat(x_1)) = x_1
   POL(tail(x_1)) = x_1
   POL(tail_flat(x_1)) = x_1
   POL(top(x_1)) = x_1
   POL(up(x_1)) = 2*x_1
   POL(zeros) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   down(nats) -> up(adx(zeros))




----------------------------------------

(8)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   down(incr(nil)) -> up(nil)
   down(incr(cons(X, L))) -> up(cons(s(X), n__incr(activate(L))))
   down(adx(nil)) -> up(nil)
   down(adx(cons(X, L))) -> up(incr(cons(X, n__adx(activate(L)))))
   down(zeros) -> up(cons(0, n__zeros))
   down(head(cons(X, L))) -> up(X)
   down(tail(cons(X, L))) -> up(activate(L))
   down(incr(X)) -> up(n__incr(X))
   down(adx(X)) -> up(n__adx(X))
   down(zeros) -> up(n__zeros)
   down(activate(n__incr(X))) -> up(incr(X))
   down(activate(n__adx(X))) -> up(adx(X))
   down(activate(n__zeros)) -> up(zeros)
   down(activate(X)) -> up(X)
   top(up(x)) -> top(down(x))
   down(cons(y1, y2)) -> cons_flat(down(y1), block(y2))
   down(cons(y1, y2)) -> cons_flat(block(y1), down(y2))
   down(s(y3)) -> s_flat(down(y3))
   down(n__incr(y4)) -> n__incr_flat(down(y4))
   down(n__adx(y7)) -> n__adx_flat(down(y7))
   down(head(incr(y11))) -> head_flat(down(incr(y11)))
   down(head(nil)) -> head_flat(down(nil))
   down(head(s(y14))) -> head_flat(down(s(y14)))
   down(head(n__incr(y15))) -> head_flat(down(n__incr(y15)))
   down(head(activate(y16))) -> head_flat(down(activate(y16)))
   down(head(adx(y17))) -> head_flat(down(adx(y17)))
   down(head(n__adx(y18))) -> head_flat(down(n__adx(y18)))
   down(head(nats)) -> head_flat(down(nats))
   down(head(zeros)) -> head_flat(down(zeros))
   down(head(0)) -> head_flat(down(0))
   down(head(n__zeros)) -> head_flat(down(n__zeros))
   down(head(head(y19))) -> head_flat(down(head(y19)))
   down(head(tail(y20))) -> head_flat(down(tail(y20)))
   down(head(fresh_constant)) -> head_flat(down(fresh_constant))
   down(tail(incr(y22))) -> tail_flat(down(incr(y22)))
   down(tail(nil)) -> tail_flat(down(nil))
   down(tail(s(y25))) -> tail_flat(down(s(y25)))
   down(tail(n__incr(y26))) -> tail_flat(down(n__incr(y26)))
   down(tail(activate(y27))) -> tail_flat(down(activate(y27)))
   down(tail(adx(y28))) -> tail_flat(down(adx(y28)))
   down(tail(n__adx(y29))) -> tail_flat(down(n__adx(y29)))
   down(tail(nats)) -> tail_flat(down(nats))
   down(tail(zeros)) -> tail_flat(down(zeros))
   down(tail(0)) -> tail_flat(down(0))
   down(tail(n__zeros)) -> tail_flat(down(n__zeros))
   down(tail(head(y30))) -> tail_flat(down(head(y30)))
   down(tail(tail(y31))) -> tail_flat(down(tail(y31)))
   down(tail(fresh_constant)) -> tail_flat(down(fresh_constant))
   cons_flat(up(x_1), block(x_2)) -> up(cons(x_1, x_2))
   cons_flat(block(x_1), up(x_2)) -> up(cons(x_1, x_2))
   s_flat(up(x_1)) -> up(s(x_1))
   n__incr_flat(up(x_1)) -> up(n__incr(x_1))
   n__adx_flat(up(x_1)) -> up(n__adx(x_1))
   head_flat(up(x_1)) -> up(head(x_1))
   tail_flat(up(x_1)) -> up(tail(x_1))

Q is empty.

----------------------------------------

(9) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(activate(x_1)) = x_1
   POL(adx(x_1)) = 2*x_1
   POL(block(x_1)) = 2*x_1
   POL(cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(cons_flat(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(down(x_1)) = 2*x_1
   POL(fresh_constant) = 0
   POL(head(x_1)) = 2*x_1
   POL(head_flat(x_1)) = 2*x_1
   POL(incr(x_1)) = x_1
   POL(n__adx(x_1)) = 2*x_1
   POL(n__adx_flat(x_1)) = 2*x_1
   POL(n__incr(x_1)) = x_1
   POL(n__incr_flat(x_1)) = x_1
   POL(n__zeros) = 0
   POL(nats) = 0
   POL(nil) = 1
   POL(s(x_1)) = x_1
   POL(s_flat(x_1)) = x_1
   POL(tail(x_1)) = 2*x_1
   POL(tail_flat(x_1)) = 2*x_1
   POL(top(x_1)) = x_1
   POL(up(x_1)) = 2*x_1
   POL(zeros) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   down(adx(nil)) -> up(nil)




----------------------------------------

(10)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   down(incr(nil)) -> up(nil)
   down(incr(cons(X, L))) -> up(cons(s(X), n__incr(activate(L))))
   down(adx(cons(X, L))) -> up(incr(cons(X, n__adx(activate(L)))))
   down(zeros) -> up(cons(0, n__zeros))
   down(head(cons(X, L))) -> up(X)
   down(tail(cons(X, L))) -> up(activate(L))
   down(incr(X)) -> up(n__incr(X))
   down(adx(X)) -> up(n__adx(X))
   down(zeros) -> up(n__zeros)
   down(activate(n__incr(X))) -> up(incr(X))
   down(activate(n__adx(X))) -> up(adx(X))
   down(activate(n__zeros)) -> up(zeros)
   down(activate(X)) -> up(X)
   top(up(x)) -> top(down(x))
   down(cons(y1, y2)) -> cons_flat(down(y1), block(y2))
   down(cons(y1, y2)) -> cons_flat(block(y1), down(y2))
   down(s(y3)) -> s_flat(down(y3))
   down(n__incr(y4)) -> n__incr_flat(down(y4))
   down(n__adx(y7)) -> n__adx_flat(down(y7))
   down(head(incr(y11))) -> head_flat(down(incr(y11)))
   down(head(nil)) -> head_flat(down(nil))
   down(head(s(y14))) -> head_flat(down(s(y14)))
   down(head(n__incr(y15))) -> head_flat(down(n__incr(y15)))
   down(head(activate(y16))) -> head_flat(down(activate(y16)))
   down(head(adx(y17))) -> head_flat(down(adx(y17)))
   down(head(n__adx(y18))) -> head_flat(down(n__adx(y18)))
   down(head(nats)) -> head_flat(down(nats))
   down(head(zeros)) -> head_flat(down(zeros))
   down(head(0)) -> head_flat(down(0))
   down(head(n__zeros)) -> head_flat(down(n__zeros))
   down(head(head(y19))) -> head_flat(down(head(y19)))
   down(head(tail(y20))) -> head_flat(down(tail(y20)))
   down(head(fresh_constant)) -> head_flat(down(fresh_constant))
   down(tail(incr(y22))) -> tail_flat(down(incr(y22)))
   down(tail(nil)) -> tail_flat(down(nil))
   down(tail(s(y25))) -> tail_flat(down(s(y25)))
   down(tail(n__incr(y26))) -> tail_flat(down(n__incr(y26)))
   down(tail(activate(y27))) -> tail_flat(down(activate(y27)))
   down(tail(adx(y28))) -> tail_flat(down(adx(y28)))
   down(tail(n__adx(y29))) -> tail_flat(down(n__adx(y29)))
   down(tail(nats)) -> tail_flat(down(nats))
   down(tail(zeros)) -> tail_flat(down(zeros))
   down(tail(0)) -> tail_flat(down(0))
   down(tail(n__zeros)) -> tail_flat(down(n__zeros))
   down(tail(head(y30))) -> tail_flat(down(head(y30)))
   down(tail(tail(y31))) -> tail_flat(down(tail(y31)))
   down(tail(fresh_constant)) -> tail_flat(down(fresh_constant))
   cons_flat(up(x_1), block(x_2)) -> up(cons(x_1, x_2))
   cons_flat(block(x_1), up(x_2)) -> up(cons(x_1, x_2))
   s_flat(up(x_1)) -> up(s(x_1))
   n__incr_flat(up(x_1)) -> up(n__incr(x_1))
   n__adx_flat(up(x_1)) -> up(n__adx(x_1))
   head_flat(up(x_1)) -> up(head(x_1))
   tail_flat(up(x_1)) -> up(tail(x_1))

Q is empty.

----------------------------------------

(11) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(activate(x_1)) = x_1
   POL(adx(x_1)) = x_1
   POL(block(x_1)) = 2*x_1
   POL(cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(cons_flat(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(down(x_1)) = 2*x_1
   POL(fresh_constant) = 0
   POL(head(x_1)) = 1 + x_1
   POL(head_flat(x_1)) = 2 + x_1
   POL(incr(x_1)) = x_1
   POL(n__adx(x_1)) = x_1
   POL(n__adx_flat(x_1)) = x_1
   POL(n__incr(x_1)) = x_1
   POL(n__incr_flat(x_1)) = x_1
   POL(n__zeros) = 0
   POL(nats) = 0
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(s_flat(x_1)) = x_1
   POL(tail(x_1)) = 2*x_1
   POL(tail_flat(x_1)) = 2*x_1
   POL(top(x_1)) = x_1
   POL(up(x_1)) = 2*x_1
   POL(zeros) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   down(head(cons(X, L))) -> up(X)




----------------------------------------

(12)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   down(incr(nil)) -> up(nil)
   down(incr(cons(X, L))) -> up(cons(s(X), n__incr(activate(L))))
   down(adx(cons(X, L))) -> up(incr(cons(X, n__adx(activate(L)))))
   down(zeros) -> up(cons(0, n__zeros))
   down(tail(cons(X, L))) -> up(activate(L))
   down(incr(X)) -> up(n__incr(X))
   down(adx(X)) -> up(n__adx(X))
   down(zeros) -> up(n__zeros)
   down(activate(n__incr(X))) -> up(incr(X))
   down(activate(n__adx(X))) -> up(adx(X))
   down(activate(n__zeros)) -> up(zeros)
   down(activate(X)) -> up(X)
   top(up(x)) -> top(down(x))
   down(cons(y1, y2)) -> cons_flat(down(y1), block(y2))
   down(cons(y1, y2)) -> cons_flat(block(y1), down(y2))
   down(s(y3)) -> s_flat(down(y3))
   down(n__incr(y4)) -> n__incr_flat(down(y4))
   down(n__adx(y7)) -> n__adx_flat(down(y7))
   down(head(incr(y11))) -> head_flat(down(incr(y11)))
   down(head(nil)) -> head_flat(down(nil))
   down(head(s(y14))) -> head_flat(down(s(y14)))
   down(head(n__incr(y15))) -> head_flat(down(n__incr(y15)))
   down(head(activate(y16))) -> head_flat(down(activate(y16)))
   down(head(adx(y17))) -> head_flat(down(adx(y17)))
   down(head(n__adx(y18))) -> head_flat(down(n__adx(y18)))
   down(head(nats)) -> head_flat(down(nats))
   down(head(zeros)) -> head_flat(down(zeros))
   down(head(0)) -> head_flat(down(0))
   down(head(n__zeros)) -> head_flat(down(n__zeros))
   down(head(head(y19))) -> head_flat(down(head(y19)))
   down(head(tail(y20))) -> head_flat(down(tail(y20)))
   down(head(fresh_constant)) -> head_flat(down(fresh_constant))
   down(tail(incr(y22))) -> tail_flat(down(incr(y22)))
   down(tail(nil)) -> tail_flat(down(nil))
   down(tail(s(y25))) -> tail_flat(down(s(y25)))
   down(tail(n__incr(y26))) -> tail_flat(down(n__incr(y26)))
   down(tail(activate(y27))) -> tail_flat(down(activate(y27)))
   down(tail(adx(y28))) -> tail_flat(down(adx(y28)))
   down(tail(n__adx(y29))) -> tail_flat(down(n__adx(y29)))
   down(tail(nats)) -> tail_flat(down(nats))
   down(tail(zeros)) -> tail_flat(down(zeros))
   down(tail(0)) -> tail_flat(down(0))
   down(tail(n__zeros)) -> tail_flat(down(n__zeros))
   down(tail(head(y30))) -> tail_flat(down(head(y30)))
   down(tail(tail(y31))) -> tail_flat(down(tail(y31)))
   down(tail(fresh_constant)) -> tail_flat(down(fresh_constant))
   cons_flat(up(x_1), block(x_2)) -> up(cons(x_1, x_2))
   cons_flat(block(x_1), up(x_2)) -> up(cons(x_1, x_2))
   s_flat(up(x_1)) -> up(s(x_1))
   n__incr_flat(up(x_1)) -> up(n__incr(x_1))
   n__adx_flat(up(x_1)) -> up(n__adx(x_1))
   head_flat(up(x_1)) -> up(head(x_1))
   tail_flat(up(x_1)) -> up(tail(x_1))

Q is empty.

----------------------------------------

(13) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(activate(x_1)) = x_1
   POL(adx(x_1)) = x_1
   POL(block(x_1)) = x_1
   POL(cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(cons_flat(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(down(x_1)) = x_1
   POL(fresh_constant) = 0
   POL(head(x_1)) = 2*x_1
   POL(head_flat(x_1)) = 2*x_1
   POL(incr(x_1)) = x_1
   POL(n__adx(x_1)) = x_1
   POL(n__adx_flat(x_1)) = x_1
   POL(n__incr(x_1)) = x_1
   POL(n__incr_flat(x_1)) = x_1
   POL(n__zeros) = 0
   POL(nats) = 0
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(s_flat(x_1)) = x_1
   POL(tail(x_1)) = 1 + x_1
   POL(tail_flat(x_1)) = 1 + x_1
   POL(top(x_1)) = 2*x_1
   POL(up(x_1)) = x_1
   POL(zeros) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   down(tail(cons(X, L))) -> up(activate(L))




----------------------------------------

(14)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   down(incr(nil)) -> up(nil)
   down(incr(cons(X, L))) -> up(cons(s(X), n__incr(activate(L))))
   down(adx(cons(X, L))) -> up(incr(cons(X, n__adx(activate(L)))))
   down(zeros) -> up(cons(0, n__zeros))
   down(incr(X)) -> up(n__incr(X))
   down(adx(X)) -> up(n__adx(X))
   down(zeros) -> up(n__zeros)
   down(activate(n__incr(X))) -> up(incr(X))
   down(activate(n__adx(X))) -> up(adx(X))
   down(activate(n__zeros)) -> up(zeros)
   down(activate(X)) -> up(X)
   top(up(x)) -> top(down(x))
   down(cons(y1, y2)) -> cons_flat(down(y1), block(y2))
   down(cons(y1, y2)) -> cons_flat(block(y1), down(y2))
   down(s(y3)) -> s_flat(down(y3))
   down(n__incr(y4)) -> n__incr_flat(down(y4))
   down(n__adx(y7)) -> n__adx_flat(down(y7))
   down(head(incr(y11))) -> head_flat(down(incr(y11)))
   down(head(nil)) -> head_flat(down(nil))
   down(head(s(y14))) -> head_flat(down(s(y14)))
   down(head(n__incr(y15))) -> head_flat(down(n__incr(y15)))
   down(head(activate(y16))) -> head_flat(down(activate(y16)))
   down(head(adx(y17))) -> head_flat(down(adx(y17)))
   down(head(n__adx(y18))) -> head_flat(down(n__adx(y18)))
   down(head(nats)) -> head_flat(down(nats))
   down(head(zeros)) -> head_flat(down(zeros))
   down(head(0)) -> head_flat(down(0))
   down(head(n__zeros)) -> head_flat(down(n__zeros))
   down(head(head(y19))) -> head_flat(down(head(y19)))
   down(head(tail(y20))) -> head_flat(down(tail(y20)))
   down(head(fresh_constant)) -> head_flat(down(fresh_constant))
   down(tail(incr(y22))) -> tail_flat(down(incr(y22)))
   down(tail(nil)) -> tail_flat(down(nil))
   down(tail(s(y25))) -> tail_flat(down(s(y25)))
   down(tail(n__incr(y26))) -> tail_flat(down(n__incr(y26)))
   down(tail(activate(y27))) -> tail_flat(down(activate(y27)))
   down(tail(adx(y28))) -> tail_flat(down(adx(y28)))
   down(tail(n__adx(y29))) -> tail_flat(down(n__adx(y29)))
   down(tail(nats)) -> tail_flat(down(nats))
   down(tail(zeros)) -> tail_flat(down(zeros))
   down(tail(0)) -> tail_flat(down(0))
   down(tail(n__zeros)) -> tail_flat(down(n__zeros))
   down(tail(head(y30))) -> tail_flat(down(head(y30)))
   down(tail(tail(y31))) -> tail_flat(down(tail(y31)))
   down(tail(fresh_constant)) -> tail_flat(down(fresh_constant))
   cons_flat(up(x_1), block(x_2)) -> up(cons(x_1, x_2))
   cons_flat(block(x_1), up(x_2)) -> up(cons(x_1, x_2))
   s_flat(up(x_1)) -> up(s(x_1))
   n__incr_flat(up(x_1)) -> up(n__incr(x_1))
   n__adx_flat(up(x_1)) -> up(n__adx(x_1))
   head_flat(up(x_1)) -> up(head(x_1))
   tail_flat(up(x_1)) -> up(tail(x_1))

Q is empty.

----------------------------------------

(15) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(up(x)) -> TOP(down(x))
   TOP(up(x)) -> DOWN(x)
   DOWN(cons(y1, y2)) -> CONS_FLAT(down(y1), block(y2))
   DOWN(cons(y1, y2)) -> DOWN(y1)
   DOWN(cons(y1, y2)) -> CONS_FLAT(block(y1), down(y2))
   DOWN(cons(y1, y2)) -> DOWN(y2)
   DOWN(s(y3)) -> S_FLAT(down(y3))
   DOWN(s(y3)) -> DOWN(y3)
   DOWN(n__incr(y4)) -> N__INCR_FLAT(down(y4))
   DOWN(n__incr(y4)) -> DOWN(y4)
   DOWN(n__adx(y7)) -> N__ADX_FLAT(down(y7))
   DOWN(n__adx(y7)) -> DOWN(y7)
   DOWN(head(incr(y11))) -> HEAD_FLAT(down(incr(y11)))
   DOWN(head(incr(y11))) -> DOWN(incr(y11))
   DOWN(head(nil)) -> HEAD_FLAT(down(nil))
   DOWN(head(nil)) -> DOWN(nil)
   DOWN(head(s(y14))) -> HEAD_FLAT(down(s(y14)))
   DOWN(head(s(y14))) -> DOWN(s(y14))
   DOWN(head(n__incr(y15))) -> HEAD_FLAT(down(n__incr(y15)))
   DOWN(head(n__incr(y15))) -> DOWN(n__incr(y15))
   DOWN(head(activate(y16))) -> HEAD_FLAT(down(activate(y16)))
   DOWN(head(activate(y16))) -> DOWN(activate(y16))
   DOWN(head(adx(y17))) -> HEAD_FLAT(down(adx(y17)))
   DOWN(head(adx(y17))) -> DOWN(adx(y17))
   DOWN(head(n__adx(y18))) -> HEAD_FLAT(down(n__adx(y18)))
   DOWN(head(n__adx(y18))) -> DOWN(n__adx(y18))
   DOWN(head(nats)) -> HEAD_FLAT(down(nats))
   DOWN(head(nats)) -> DOWN(nats)
   DOWN(head(zeros)) -> HEAD_FLAT(down(zeros))
   DOWN(head(zeros)) -> DOWN(zeros)
   DOWN(head(0)) -> HEAD_FLAT(down(0))
   DOWN(head(0)) -> DOWN(0)
   DOWN(head(n__zeros)) -> HEAD_FLAT(down(n__zeros))
   DOWN(head(n__zeros)) -> DOWN(n__zeros)
   DOWN(head(head(y19))) -> HEAD_FLAT(down(head(y19)))
   DOWN(head(head(y19))) -> DOWN(head(y19))
   DOWN(head(tail(y20))) -> HEAD_FLAT(down(tail(y20)))
   DOWN(head(tail(y20))) -> DOWN(tail(y20))
   DOWN(head(fresh_constant)) -> HEAD_FLAT(down(fresh_constant))
   DOWN(head(fresh_constant)) -> DOWN(fresh_constant)
   DOWN(tail(incr(y22))) -> TAIL_FLAT(down(incr(y22)))
   DOWN(tail(incr(y22))) -> DOWN(incr(y22))
   DOWN(tail(nil)) -> TAIL_FLAT(down(nil))
   DOWN(tail(nil)) -> DOWN(nil)
   DOWN(tail(s(y25))) -> TAIL_FLAT(down(s(y25)))
   DOWN(tail(s(y25))) -> DOWN(s(y25))
   DOWN(tail(n__incr(y26))) -> TAIL_FLAT(down(n__incr(y26)))
   DOWN(tail(n__incr(y26))) -> DOWN(n__incr(y26))
   DOWN(tail(activate(y27))) -> TAIL_FLAT(down(activate(y27)))
   DOWN(tail(activate(y27))) -> DOWN(activate(y27))
   DOWN(tail(adx(y28))) -> TAIL_FLAT(down(adx(y28)))
   DOWN(tail(adx(y28))) -> DOWN(adx(y28))
   DOWN(tail(n__adx(y29))) -> TAIL_FLAT(down(n__adx(y29)))
   DOWN(tail(n__adx(y29))) -> DOWN(n__adx(y29))
   DOWN(tail(nats)) -> TAIL_FLAT(down(nats))
   DOWN(tail(nats)) -> DOWN(nats)
   DOWN(tail(zeros)) -> TAIL_FLAT(down(zeros))
   DOWN(tail(zeros)) -> DOWN(zeros)
   DOWN(tail(0)) -> TAIL_FLAT(down(0))
   DOWN(tail(0)) -> DOWN(0)
   DOWN(tail(n__zeros)) -> TAIL_FLAT(down(n__zeros))
   DOWN(tail(n__zeros)) -> DOWN(n__zeros)
   DOWN(tail(head(y30))) -> TAIL_FLAT(down(head(y30)))
   DOWN(tail(head(y30))) -> DOWN(head(y30))
   DOWN(tail(tail(y31))) -> TAIL_FLAT(down(tail(y31)))
   DOWN(tail(tail(y31))) -> DOWN(tail(y31))
   DOWN(tail(fresh_constant)) -> TAIL_FLAT(down(fresh_constant))
   DOWN(tail(fresh_constant)) -> DOWN(fresh_constant)

The TRS R consists of the following rules:

   down(incr(nil)) -> up(nil)
   down(incr(cons(X, L))) -> up(cons(s(X), n__incr(activate(L))))
   down(adx(cons(X, L))) -> up(incr(cons(X, n__adx(activate(L)))))
   down(zeros) -> up(cons(0, n__zeros))
   down(incr(X)) -> up(n__incr(X))
   down(adx(X)) -> up(n__adx(X))
   down(zeros) -> up(n__zeros)
   down(activate(n__incr(X))) -> up(incr(X))
   down(activate(n__adx(X))) -> up(adx(X))
   down(activate(n__zeros)) -> up(zeros)
   down(activate(X)) -> up(X)
   top(up(x)) -> top(down(x))
   down(cons(y1, y2)) -> cons_flat(down(y1), block(y2))
   down(cons(y1, y2)) -> cons_flat(block(y1), down(y2))
   down(s(y3)) -> s_flat(down(y3))
   down(n__incr(y4)) -> n__incr_flat(down(y4))
   down(n__adx(y7)) -> n__adx_flat(down(y7))
   down(head(incr(y11))) -> head_flat(down(incr(y11)))
   down(head(nil)) -> head_flat(down(nil))
   down(head(s(y14))) -> head_flat(down(s(y14)))
   down(head(n__incr(y15))) -> head_flat(down(n__incr(y15)))
   down(head(activate(y16))) -> head_flat(down(activate(y16)))
   down(head(adx(y17))) -> head_flat(down(adx(y17)))
   down(head(n__adx(y18))) -> head_flat(down(n__adx(y18)))
   down(head(nats)) -> head_flat(down(nats))
   down(head(zeros)) -> head_flat(down(zeros))
   down(head(0)) -> head_flat(down(0))
   down(head(n__zeros)) -> head_flat(down(n__zeros))
   down(head(head(y19))) -> head_flat(down(head(y19)))
   down(head(tail(y20))) -> head_flat(down(tail(y20)))
   down(head(fresh_constant)) -> head_flat(down(fresh_constant))
   down(tail(incr(y22))) -> tail_flat(down(incr(y22)))
   down(tail(nil)) -> tail_flat(down(nil))
   down(tail(s(y25))) -> tail_flat(down(s(y25)))
   down(tail(n__incr(y26))) -> tail_flat(down(n__incr(y26)))
   down(tail(activate(y27))) -> tail_flat(down(activate(y27)))
   down(tail(adx(y28))) -> tail_flat(down(adx(y28)))
   down(tail(n__adx(y29))) -> tail_flat(down(n__adx(y29)))
   down(tail(nats)) -> tail_flat(down(nats))
   down(tail(zeros)) -> tail_flat(down(zeros))
   down(tail(0)) -> tail_flat(down(0))
   down(tail(n__zeros)) -> tail_flat(down(n__zeros))
   down(tail(head(y30))) -> tail_flat(down(head(y30)))
   down(tail(tail(y31))) -> tail_flat(down(tail(y31)))
   down(tail(fresh_constant)) -> tail_flat(down(fresh_constant))
   cons_flat(up(x_1), block(x_2)) -> up(cons(x_1, x_2))
   cons_flat(block(x_1), up(x_2)) -> up(cons(x_1, x_2))
   s_flat(up(x_1)) -> up(s(x_1))
   n__incr_flat(up(x_1)) -> up(n__incr(x_1))
   n__adx_flat(up(x_1)) -> up(n__adx(x_1))
   head_flat(up(x_1)) -> up(head(x_1))
   tail_flat(up(x_1)) -> up(tail(x_1))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 52 less nodes.
----------------------------------------

(18)
Complex Obligation (AND)

----------------------------------------

(19)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DOWN(cons(y1, y2)) -> DOWN(y2)
   DOWN(cons(y1, y2)) -> DOWN(y1)
   DOWN(s(y3)) -> DOWN(y3)
   DOWN(n__incr(y4)) -> DOWN(y4)
   DOWN(n__adx(y7)) -> DOWN(y7)
   DOWN(head(s(y14))) -> DOWN(s(y14))
   DOWN(head(n__incr(y15))) -> DOWN(n__incr(y15))
   DOWN(head(n__adx(y18))) -> DOWN(n__adx(y18))
   DOWN(head(head(y19))) -> DOWN(head(y19))
   DOWN(head(tail(y20))) -> DOWN(tail(y20))
   DOWN(tail(s(y25))) -> DOWN(s(y25))
   DOWN(tail(n__incr(y26))) -> DOWN(n__incr(y26))
   DOWN(tail(n__adx(y29))) -> DOWN(n__adx(y29))
   DOWN(tail(head(y30))) -> DOWN(head(y30))
   DOWN(tail(tail(y31))) -> DOWN(tail(y31))

The TRS R consists of the following rules:

   down(incr(nil)) -> up(nil)
   down(incr(cons(X, L))) -> up(cons(s(X), n__incr(activate(L))))
   down(adx(cons(X, L))) -> up(incr(cons(X, n__adx(activate(L)))))
   down(zeros) -> up(cons(0, n__zeros))
   down(incr(X)) -> up(n__incr(X))
   down(adx(X)) -> up(n__adx(X))
   down(zeros) -> up(n__zeros)
   down(activate(n__incr(X))) -> up(incr(X))
   down(activate(n__adx(X))) -> up(adx(X))
   down(activate(n__zeros)) -> up(zeros)
   down(activate(X)) -> up(X)
   top(up(x)) -> top(down(x))
   down(cons(y1, y2)) -> cons_flat(down(y1), block(y2))
   down(cons(y1, y2)) -> cons_flat(block(y1), down(y2))
   down(s(y3)) -> s_flat(down(y3))
   down(n__incr(y4)) -> n__incr_flat(down(y4))
   down(n__adx(y7)) -> n__adx_flat(down(y7))
   down(head(incr(y11))) -> head_flat(down(incr(y11)))
   down(head(nil)) -> head_flat(down(nil))
   down(head(s(y14))) -> head_flat(down(s(y14)))
   down(head(n__incr(y15))) -> head_flat(down(n__incr(y15)))
   down(head(activate(y16))) -> head_flat(down(activate(y16)))
   down(head(adx(y17))) -> head_flat(down(adx(y17)))
   down(head(n__adx(y18))) -> head_flat(down(n__adx(y18)))
   down(head(nats)) -> head_flat(down(nats))
   down(head(zeros)) -> head_flat(down(zeros))
   down(head(0)) -> head_flat(down(0))
   down(head(n__zeros)) -> head_flat(down(n__zeros))
   down(head(head(y19))) -> head_flat(down(head(y19)))
   down(head(tail(y20))) -> head_flat(down(tail(y20)))
   down(head(fresh_constant)) -> head_flat(down(fresh_constant))
   down(tail(incr(y22))) -> tail_flat(down(incr(y22)))
   down(tail(nil)) -> tail_flat(down(nil))
   down(tail(s(y25))) -> tail_flat(down(s(y25)))
   down(tail(n__incr(y26))) -> tail_flat(down(n__incr(y26)))
   down(tail(activate(y27))) -> tail_flat(down(activate(y27)))
   down(tail(adx(y28))) -> tail_flat(down(adx(y28)))
   down(tail(n__adx(y29))) -> tail_flat(down(n__adx(y29)))
   down(tail(nats)) -> tail_flat(down(nats))
   down(tail(zeros)) -> tail_flat(down(zeros))
   down(tail(0)) -> tail_flat(down(0))
   down(tail(n__zeros)) -> tail_flat(down(n__zeros))
   down(tail(head(y30))) -> tail_flat(down(head(y30)))
   down(tail(tail(y31))) -> tail_flat(down(tail(y31)))
   down(tail(fresh_constant)) -> tail_flat(down(fresh_constant))
   cons_flat(up(x_1), block(x_2)) -> up(cons(x_1, x_2))
   cons_flat(block(x_1), up(x_2)) -> up(cons(x_1, x_2))
   s_flat(up(x_1)) -> up(s(x_1))
   n__incr_flat(up(x_1)) -> up(n__incr(x_1))
   n__adx_flat(up(x_1)) -> up(n__adx(x_1))
   head_flat(up(x_1)) -> up(head(x_1))
   tail_flat(up(x_1)) -> up(tail(x_1))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(20) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DOWN(cons(y1, y2)) -> DOWN(y2)
   DOWN(cons(y1, y2)) -> DOWN(y1)
   DOWN(s(y3)) -> DOWN(y3)
   DOWN(n__incr(y4)) -> DOWN(y4)
   DOWN(n__adx(y7)) -> DOWN(y7)
   DOWN(head(s(y14))) -> DOWN(s(y14))
   DOWN(head(n__incr(y15))) -> DOWN(n__incr(y15))
   DOWN(head(n__adx(y18))) -> DOWN(n__adx(y18))
   DOWN(head(head(y19))) -> DOWN(head(y19))
   DOWN(head(tail(y20))) -> DOWN(tail(y20))
   DOWN(tail(s(y25))) -> DOWN(s(y25))
   DOWN(tail(n__incr(y26))) -> DOWN(n__incr(y26))
   DOWN(tail(n__adx(y29))) -> DOWN(n__adx(y29))
   DOWN(tail(head(y30))) -> DOWN(head(y30))
   DOWN(tail(tail(y31))) -> DOWN(tail(y31))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*DOWN(s(y3)) -> DOWN(y3)
The graph contains the following edges 1 > 1


*DOWN(n__incr(y4)) -> DOWN(y4)
The graph contains the following edges 1 > 1


*DOWN(n__adx(y7)) -> DOWN(y7)
The graph contains the following edges 1 > 1


*DOWN(head(s(y14))) -> DOWN(s(y14))
The graph contains the following edges 1 > 1


*DOWN(tail(s(y25))) -> DOWN(s(y25))
The graph contains the following edges 1 > 1


*DOWN(head(n__incr(y15))) -> DOWN(n__incr(y15))
The graph contains the following edges 1 > 1


*DOWN(tail(n__incr(y26))) -> DOWN(n__incr(y26))
The graph contains the following edges 1 > 1


*DOWN(head(n__adx(y18))) -> DOWN(n__adx(y18))
The graph contains the following edges 1 > 1


*DOWN(tail(n__adx(y29))) -> DOWN(n__adx(y29))
The graph contains the following edges 1 > 1


*DOWN(head(head(y19))) -> DOWN(head(y19))
The graph contains the following edges 1 > 1


*DOWN(tail(head(y30))) -> DOWN(head(y30))
The graph contains the following edges 1 > 1


*DOWN(head(tail(y20))) -> DOWN(tail(y20))
The graph contains the following edges 1 > 1


*DOWN(tail(tail(y31))) -> DOWN(tail(y31))
The graph contains the following edges 1 > 1


*DOWN(cons(y1, y2)) -> DOWN(y2)
The graph contains the following edges 1 > 1


*DOWN(cons(y1, y2)) -> DOWN(y1)
The graph contains the following edges 1 > 1


----------------------------------------

(23)
YES

----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(up(x)) -> TOP(down(x))

The TRS R consists of the following rules:

   down(incr(nil)) -> up(nil)
   down(incr(cons(X, L))) -> up(cons(s(X), n__incr(activate(L))))
   down(adx(cons(X, L))) -> up(incr(cons(X, n__adx(activate(L)))))
   down(zeros) -> up(cons(0, n__zeros))
   down(incr(X)) -> up(n__incr(X))
   down(adx(X)) -> up(n__adx(X))
   down(zeros) -> up(n__zeros)
   down(activate(n__incr(X))) -> up(incr(X))
   down(activate(n__adx(X))) -> up(adx(X))
   down(activate(n__zeros)) -> up(zeros)
   down(activate(X)) -> up(X)
   top(up(x)) -> top(down(x))
   down(cons(y1, y2)) -> cons_flat(down(y1), block(y2))
   down(cons(y1, y2)) -> cons_flat(block(y1), down(y2))
   down(s(y3)) -> s_flat(down(y3))
   down(n__incr(y4)) -> n__incr_flat(down(y4))
   down(n__adx(y7)) -> n__adx_flat(down(y7))
   down(head(incr(y11))) -> head_flat(down(incr(y11)))
   down(head(nil)) -> head_flat(down(nil))
   down(head(s(y14))) -> head_flat(down(s(y14)))
   down(head(n__incr(y15))) -> head_flat(down(n__incr(y15)))
   down(head(activate(y16))) -> head_flat(down(activate(y16)))
   down(head(adx(y17))) -> head_flat(down(adx(y17)))
   down(head(n__adx(y18))) -> head_flat(down(n__adx(y18)))
   down(head(nats)) -> head_flat(down(nats))
   down(head(zeros)) -> head_flat(down(zeros))
   down(head(0)) -> head_flat(down(0))
   down(head(n__zeros)) -> head_flat(down(n__zeros))
   down(head(head(y19))) -> head_flat(down(head(y19)))
   down(head(tail(y20))) -> head_flat(down(tail(y20)))
   down(head(fresh_constant)) -> head_flat(down(fresh_constant))
   down(tail(incr(y22))) -> tail_flat(down(incr(y22)))
   down(tail(nil)) -> tail_flat(down(nil))
   down(tail(s(y25))) -> tail_flat(down(s(y25)))
   down(tail(n__incr(y26))) -> tail_flat(down(n__incr(y26)))
   down(tail(activate(y27))) -> tail_flat(down(activate(y27)))
   down(tail(adx(y28))) -> tail_flat(down(adx(y28)))
   down(tail(n__adx(y29))) -> tail_flat(down(n__adx(y29)))
   down(tail(nats)) -> tail_flat(down(nats))
   down(tail(zeros)) -> tail_flat(down(zeros))
   down(tail(0)) -> tail_flat(down(0))
   down(tail(n__zeros)) -> tail_flat(down(n__zeros))
   down(tail(head(y30))) -> tail_flat(down(head(y30)))
   down(tail(tail(y31))) -> tail_flat(down(tail(y31)))
   down(tail(fresh_constant)) -> tail_flat(down(fresh_constant))
   cons_flat(up(x_1), block(x_2)) -> up(cons(x_1, x_2))
   cons_flat(block(x_1), up(x_2)) -> up(cons(x_1, x_2))
   s_flat(up(x_1)) -> up(s(x_1))
   n__incr_flat(up(x_1)) -> up(n__incr(x_1))
   n__adx_flat(up(x_1)) -> up(n__adx(x_1))
   head_flat(up(x_1)) -> up(head(x_1))
   tail_flat(up(x_1)) -> up(tail(x_1))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(25) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(up(x)) -> TOP(down(x))

The TRS R consists of the following rules:

   down(incr(nil)) -> up(nil)
   down(incr(cons(X, L))) -> up(cons(s(X), n__incr(activate(L))))
   down(adx(cons(X, L))) -> up(incr(cons(X, n__adx(activate(L)))))
   down(zeros) -> up(cons(0, n__zeros))
   down(incr(X)) -> up(n__incr(X))
   down(adx(X)) -> up(n__adx(X))
   down(zeros) -> up(n__zeros)
   down(activate(n__incr(X))) -> up(incr(X))
   down(activate(n__adx(X))) -> up(adx(X))
   down(activate(n__zeros)) -> up(zeros)
   down(activate(X)) -> up(X)
   down(cons(y1, y2)) -> cons_flat(down(y1), block(y2))
   down(cons(y1, y2)) -> cons_flat(block(y1), down(y2))
   down(s(y3)) -> s_flat(down(y3))
   down(n__incr(y4)) -> n__incr_flat(down(y4))
   down(n__adx(y7)) -> n__adx_flat(down(y7))
   down(head(incr(y11))) -> head_flat(down(incr(y11)))
   down(head(nil)) -> head_flat(down(nil))
   down(head(s(y14))) -> head_flat(down(s(y14)))
   down(head(n__incr(y15))) -> head_flat(down(n__incr(y15)))
   down(head(activate(y16))) -> head_flat(down(activate(y16)))
   down(head(adx(y17))) -> head_flat(down(adx(y17)))
   down(head(n__adx(y18))) -> head_flat(down(n__adx(y18)))
   down(head(nats)) -> head_flat(down(nats))
   down(head(zeros)) -> head_flat(down(zeros))
   down(head(0)) -> head_flat(down(0))
   down(head(n__zeros)) -> head_flat(down(n__zeros))
   down(head(head(y19))) -> head_flat(down(head(y19)))
   down(head(tail(y20))) -> head_flat(down(tail(y20)))
   down(head(fresh_constant)) -> head_flat(down(fresh_constant))
   down(tail(incr(y22))) -> tail_flat(down(incr(y22)))
   down(tail(nil)) -> tail_flat(down(nil))
   down(tail(s(y25))) -> tail_flat(down(s(y25)))
   down(tail(n__incr(y26))) -> tail_flat(down(n__incr(y26)))
   down(tail(activate(y27))) -> tail_flat(down(activate(y27)))
   down(tail(adx(y28))) -> tail_flat(down(adx(y28)))
   down(tail(n__adx(y29))) -> tail_flat(down(n__adx(y29)))
   down(tail(nats)) -> tail_flat(down(nats))
   down(tail(zeros)) -> tail_flat(down(zeros))
   down(tail(0)) -> tail_flat(down(0))
   down(tail(n__zeros)) -> tail_flat(down(n__zeros))
   down(tail(head(y30))) -> tail_flat(down(head(y30)))
   down(tail(tail(y31))) -> tail_flat(down(tail(y31)))
   down(tail(fresh_constant)) -> tail_flat(down(fresh_constant))
   tail_flat(up(x_1)) -> up(tail(x_1))
   head_flat(up(x_1)) -> up(head(x_1))
   n__adx_flat(up(x_1)) -> up(n__adx(x_1))
   n__incr_flat(up(x_1)) -> up(n__incr(x_1))
   s_flat(up(x_1)) -> up(s(x_1))
   cons_flat(block(x_1), up(x_2)) -> up(cons(x_1, x_2))
   cons_flat(up(x_1), block(x_2)) -> up(cons(x_1, x_2))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(27) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule TOP(up(x)) -> TOP(down(x)) at position [0] we obtained the following new rules [LPAR04]:

   (TOP(up(incr(nil))) -> TOP(up(nil)),TOP(up(incr(nil))) -> TOP(up(nil)))
   (TOP(up(incr(cons(x0, x1)))) -> TOP(up(cons(s(x0), n__incr(activate(x1))))),TOP(up(incr(cons(x0, x1)))) -> TOP(up(cons(s(x0), n__incr(activate(x1))))))
   (TOP(up(adx(cons(x0, x1)))) -> TOP(up(incr(cons(x0, n__adx(activate(x1)))))),TOP(up(adx(cons(x0, x1)))) -> TOP(up(incr(cons(x0, n__adx(activate(x1)))))))
   (TOP(up(zeros)) -> TOP(up(cons(0, n__zeros))),TOP(up(zeros)) -> TOP(up(cons(0, n__zeros))))
   (TOP(up(incr(x0))) -> TOP(up(n__incr(x0))),TOP(up(incr(x0))) -> TOP(up(n__incr(x0))))
   (TOP(up(adx(x0))) -> TOP(up(n__adx(x0))),TOP(up(adx(x0))) -> TOP(up(n__adx(x0))))
   (TOP(up(zeros)) -> TOP(up(n__zeros)),TOP(up(zeros)) -> TOP(up(n__zeros)))
   (TOP(up(activate(n__incr(x0)))) -> TOP(up(incr(x0))),TOP(up(activate(n__incr(x0)))) -> TOP(up(incr(x0))))
   (TOP(up(activate(n__adx(x0)))) -> TOP(up(adx(x0))),TOP(up(activate(n__adx(x0)))) -> TOP(up(adx(x0))))
   (TOP(up(activate(n__zeros))) -> TOP(up(zeros)),TOP(up(activate(n__zeros))) -> TOP(up(zeros)))
   (TOP(up(activate(x0))) -> TOP(up(x0)),TOP(up(activate(x0))) -> TOP(up(x0)))
   (TOP(up(cons(x0, x1))) -> TOP(cons_flat(down(x0), block(x1))),TOP(up(cons(x0, x1))) -> TOP(cons_flat(down(x0), block(x1))))
   (TOP(up(cons(x0, x1))) -> TOP(cons_flat(block(x0), down(x1))),TOP(up(cons(x0, x1))) -> TOP(cons_flat(block(x0), down(x1))))
   (TOP(up(s(x0))) -> TOP(s_flat(down(x0))),TOP(up(s(x0))) -> TOP(s_flat(down(x0))))
   (TOP(up(n__incr(x0))) -> TOP(n__incr_flat(down(x0))),TOP(up(n__incr(x0))) -> TOP(n__incr_flat(down(x0))))
   (TOP(up(n__adx(x0))) -> TOP(n__adx_flat(down(x0))),TOP(up(n__adx(x0))) -> TOP(n__adx_flat(down(x0))))
   (TOP(up(head(incr(x0)))) -> TOP(head_flat(down(incr(x0)))),TOP(up(head(incr(x0)))) -> TOP(head_flat(down(incr(x0)))))
   (TOP(up(head(nil))) -> TOP(head_flat(down(nil))),TOP(up(head(nil))) -> TOP(head_flat(down(nil))))
   (TOP(up(head(s(x0)))) -> TOP(head_flat(down(s(x0)))),TOP(up(head(s(x0)))) -> TOP(head_flat(down(s(x0)))))
   (TOP(up(head(n__incr(x0)))) -> TOP(head_flat(down(n__incr(x0)))),TOP(up(head(n__incr(x0)))) -> TOP(head_flat(down(n__incr(x0)))))
   (TOP(up(head(activate(x0)))) -> TOP(head_flat(down(activate(x0)))),TOP(up(head(activate(x0)))) -> TOP(head_flat(down(activate(x0)))))
   (TOP(up(head(adx(x0)))) -> TOP(head_flat(down(adx(x0)))),TOP(up(head(adx(x0)))) -> TOP(head_flat(down(adx(x0)))))
   (TOP(up(head(n__adx(x0)))) -> TOP(head_flat(down(n__adx(x0)))),TOP(up(head(n__adx(x0)))) -> TOP(head_flat(down(n__adx(x0)))))
   (TOP(up(head(nats))) -> TOP(head_flat(down(nats))),TOP(up(head(nats))) -> TOP(head_flat(down(nats))))
   (TOP(up(head(zeros))) -> TOP(head_flat(down(zeros))),TOP(up(head(zeros))) -> TOP(head_flat(down(zeros))))
   (TOP(up(head(0))) -> TOP(head_flat(down(0))),TOP(up(head(0))) -> TOP(head_flat(down(0))))
   (TOP(up(head(n__zeros))) -> TOP(head_flat(down(n__zeros))),TOP(up(head(n__zeros))) -> TOP(head_flat(down(n__zeros))))
   (TOP(up(head(head(x0)))) -> TOP(head_flat(down(head(x0)))),TOP(up(head(head(x0)))) -> TOP(head_flat(down(head(x0)))))
   (TOP(up(head(tail(x0)))) -> TOP(head_flat(down(tail(x0)))),TOP(up(head(tail(x0)))) -> TOP(head_flat(down(tail(x0)))))
   (TOP(up(head(fresh_constant))) -> TOP(head_flat(down(fresh_constant))),TOP(up(head(fresh_constant))) -> TOP(head_flat(down(fresh_constant))))
   (TOP(up(tail(incr(x0)))) -> TOP(tail_flat(down(incr(x0)))),TOP(up(tail(incr(x0)))) -> TOP(tail_flat(down(incr(x0)))))
   (TOP(up(tail(nil))) -> TOP(tail_flat(down(nil))),TOP(up(tail(nil))) -> TOP(tail_flat(down(nil))))
   (TOP(up(tail(s(x0)))) -> TOP(tail_flat(down(s(x0)))),TOP(up(tail(s(x0)))) -> TOP(tail_flat(down(s(x0)))))
   (TOP(up(tail(n__incr(x0)))) -> TOP(tail_flat(down(n__incr(x0)))),TOP(up(tail(n__incr(x0)))) -> TOP(tail_flat(down(n__incr(x0)))))
   (TOP(up(tail(activate(x0)))) -> TOP(tail_flat(down(activate(x0)))),TOP(up(tail(activate(x0)))) -> TOP(tail_flat(down(activate(x0)))))
   (TOP(up(tail(adx(x0)))) -> TOP(tail_flat(down(adx(x0)))),TOP(up(tail(adx(x0)))) -> TOP(tail_flat(down(adx(x0)))))
   (TOP(up(tail(n__adx(x0)))) -> TOP(tail_flat(down(n__adx(x0)))),TOP(up(tail(n__adx(x0)))) -> TOP(tail_flat(down(n__adx(x0)))))
   (TOP(up(tail(nats))) -> TOP(tail_flat(down(nats))),TOP(up(tail(nats))) -> TOP(tail_flat(down(nats))))
   (TOP(up(tail(zeros))) -> TOP(tail_flat(down(zeros))),TOP(up(tail(zeros))) -> TOP(tail_flat(down(zeros))))
   (TOP(up(tail(0))) -> TOP(tail_flat(down(0))),TOP(up(tail(0))) -> TOP(tail_flat(down(0))))
   (TOP(up(tail(n__zeros))) -> TOP(tail_flat(down(n__zeros))),TOP(up(tail(n__zeros))) -> TOP(tail_flat(down(n__zeros))))
   (TOP(up(tail(head(x0)))) -> TOP(tail_flat(down(head(x0)))),TOP(up(tail(head(x0)))) -> TOP(tail_flat(down(head(x0)))))
   (TOP(up(tail(tail(x0)))) -> TOP(tail_flat(down(tail(x0)))),TOP(up(tail(tail(x0)))) -> TOP(tail_flat(down(tail(x0)))))
   (TOP(up(tail(fresh_constant))) -> TOP(tail_flat(down(fresh_constant))),TOP(up(tail(fresh_constant))) -> TOP(tail_flat(down(fresh_constant))))


----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(up(incr(nil))) -> TOP(up(nil))
   TOP(up(incr(cons(x0, x1)))) -> TOP(up(cons(s(x0), n__incr(activate(x1)))))
   TOP(up(adx(cons(x0, x1)))) -> TOP(up(incr(cons(x0, n__adx(activate(x1))))))
   TOP(up(zeros)) -> TOP(up(cons(0, n__zeros)))
   TOP(up(incr(x0))) -> TOP(up(n__incr(x0)))
   TOP(up(adx(x0))) -> TOP(up(n__adx(x0)))
   TOP(up(zeros)) -> TOP(up(n__zeros))
   TOP(up(activate(n__incr(x0)))) -> TOP(up(incr(x0)))
   TOP(up(activate(n__adx(x0)))) -> TOP(up(adx(x0)))
   TOP(up(activate(n__zeros))) -> TOP(up(zeros))
   TOP(up(activate(x0))) -> TOP(up(x0))
   TOP(up(cons(x0, x1))) -> TOP(cons_flat(down(x0), block(x1)))
   TOP(up(cons(x0, x1))) -> TOP(cons_flat(block(x0), down(x1)))
   TOP(up(s(x0))) -> TOP(s_flat(down(x0)))
   TOP(up(n__incr(x0))) -> TOP(n__incr_flat(down(x0)))
   TOP(up(n__adx(x0))) -> TOP(n__adx_flat(down(x0)))
   TOP(up(head(incr(x0)))) -> TOP(head_flat(down(incr(x0))))
   TOP(up(head(nil))) -> TOP(head_flat(down(nil)))
   TOP(up(head(s(x0)))) -> TOP(head_flat(down(s(x0))))
   TOP(up(head(n__incr(x0)))) -> TOP(head_flat(down(n__incr(x0))))
   TOP(up(head(activate(x0)))) -> TOP(head_flat(down(activate(x0))))
   TOP(up(head(adx(x0)))) -> TOP(head_flat(down(adx(x0))))
   TOP(up(head(n__adx(x0)))) -> TOP(head_flat(down(n__adx(x0))))
   TOP(up(head(nats))) -> TOP(head_flat(down(nats)))
   TOP(up(head(zeros))) -> TOP(head_flat(down(zeros)))
   TOP(up(head(0))) -> TOP(head_flat(down(0)))
   TOP(up(head(n__zeros))) -> TOP(head_flat(down(n__zeros)))
   TOP(up(head(head(x0)))) -> TOP(head_flat(down(head(x0))))
   TOP(up(head(tail(x0)))) -> TOP(head_flat(down(tail(x0))))
   TOP(up(head(fresh_constant))) -> TOP(head_flat(down(fresh_constant)))
   TOP(up(tail(incr(x0)))) -> TOP(tail_flat(down(incr(x0))))
   TOP(up(tail(nil))) -> TOP(tail_flat(down(nil)))
   TOP(up(tail(s(x0)))) -> TOP(tail_flat(down(s(x0))))
   TOP(up(tail(n__incr(x0)))) -> TOP(tail_flat(down(n__incr(x0))))
   TOP(up(tail(activate(x0)))) -> TOP(tail_flat(down(activate(x0))))
   TOP(up(tail(adx(x0)))) -> TOP(tail_flat(down(adx(x0))))
   TOP(up(tail(n__adx(x0)))) -> TOP(tail_flat(down(n__adx(x0))))
   TOP(up(tail(nats))) -> TOP(tail_flat(down(nats)))
   TOP(up(tail(zeros))) -> TOP(tail_flat(down(zeros)))
   TOP(up(tail(0))) -> TOP(tail_flat(down(0)))
   TOP(up(tail(n__zeros))) -> TOP(tail_flat(down(n__zeros)))
   TOP(up(tail(head(x0)))) -> TOP(tail_flat(down(head(x0))))
   TOP(up(tail(tail(x0)))) -> TOP(tail_flat(down(tail(x0))))
   TOP(up(tail(fresh_constant))) -> TOP(tail_flat(down(fresh_constant)))

The TRS R consists of the following rules:

   down(incr(nil)) -> up(nil)
   down(incr(cons(X, L))) -> up(cons(s(X), n__incr(activate(L))))
   down(adx(cons(X, L))) -> up(incr(cons(X, n__adx(activate(L)))))
   down(zeros) -> up(cons(0, n__zeros))
   down(incr(X)) -> up(n__incr(X))
   down(adx(X)) -> up(n__adx(X))
   down(zeros) -> up(n__zeros)
   down(activate(n__incr(X))) -> up(incr(X))
   down(activate(n__adx(X))) -> up(adx(X))
   down(activate(n__zeros)) -> up(zeros)
   down(activate(X)) -> up(X)
   down(cons(y1, y2)) -> cons_flat(down(y1), block(y2))
   down(cons(y1, y2)) -> cons_flat(block(y1), down(y2))
   down(s(y3)) -> s_flat(down(y3))
   down(n__incr(y4)) -> n__incr_flat(down(y4))
   down(n__adx(y7)) -> n__adx_flat(down(y7))
   down(head(incr(y11))) -> head_flat(down(incr(y11)))
   down(head(nil)) -> head_flat(down(nil))
   down(head(s(y14))) -> head_flat(down(s(y14)))
   down(head(n__incr(y15))) -> head_flat(down(n__incr(y15)))
   down(head(activate(y16))) -> head_flat(down(activate(y16)))
   down(head(adx(y17))) -> head_flat(down(adx(y17)))
   down(head(n__adx(y18))) -> head_flat(down(n__adx(y18)))
   down(head(nats)) -> head_flat(down(nats))
   down(head(zeros)) -> head_flat(down(zeros))
   down(head(0)) -> head_flat(down(0))
   down(head(n__zeros)) -> head_flat(down(n__zeros))
   down(head(head(y19))) -> head_flat(down(head(y19)))
   down(head(tail(y20))) -> head_flat(down(tail(y20)))
   down(head(fresh_constant)) -> head_flat(down(fresh_constant))
   down(tail(incr(y22))) -> tail_flat(down(incr(y22)))
   down(tail(nil)) -> tail_flat(down(nil))
   down(tail(s(y25))) -> tail_flat(down(s(y25)))
   down(tail(n__incr(y26))) -> tail_flat(down(n__incr(y26)))
   down(tail(activate(y27))) -> tail_flat(down(activate(y27)))
   down(tail(adx(y28))) -> tail_flat(down(adx(y28)))
   down(tail(n__adx(y29))) -> tail_flat(down(n__adx(y29)))
   down(tail(nats)) -> tail_flat(down(nats))
   down(tail(zeros)) -> tail_flat(down(zeros))
   down(tail(0)) -> tail_flat(down(0))
   down(tail(n__zeros)) -> tail_flat(down(n__zeros))
   down(tail(head(y30))) -> tail_flat(down(head(y30)))
   down(tail(tail(y31))) -> tail_flat(down(tail(y31)))
   down(tail(fresh_constant)) -> tail_flat(down(fresh_constant))
   tail_flat(up(x_1)) -> up(tail(x_1))
   head_flat(up(x_1)) -> up(head(x_1))
   n__adx_flat(up(x_1)) -> up(n__adx(x_1))
   n__incr_flat(up(x_1)) -> up(n__incr(x_1))
   s_flat(up(x_1)) -> up(s(x_1))
   cons_flat(block(x_1), up(x_2)) -> up(cons(x_1, x_2))
   cons_flat(up(x_1), block(x_2)) -> up(cons(x_1, x_2))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 12 less nodes.
----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(up(incr(cons(x0, x1)))) -> TOP(up(cons(s(x0), n__incr(activate(x1)))))
   TOP(up(cons(x0, x1))) -> TOP(cons_flat(down(x0), block(x1)))
   TOP(up(adx(cons(x0, x1)))) -> TOP(up(incr(cons(x0, n__adx(activate(x1))))))
   TOP(up(incr(x0))) -> TOP(up(n__incr(x0)))
   TOP(up(n__incr(x0))) -> TOP(n__incr_flat(down(x0)))
   TOP(up(zeros)) -> TOP(up(cons(0, n__zeros)))
   TOP(up(cons(x0, x1))) -> TOP(cons_flat(block(x0), down(x1)))
   TOP(up(adx(x0))) -> TOP(up(n__adx(x0)))
   TOP(up(n__adx(x0))) -> TOP(n__adx_flat(down(x0)))
   TOP(up(activate(n__incr(x0)))) -> TOP(up(incr(x0)))
   TOP(up(activate(n__adx(x0)))) -> TOP(up(adx(x0)))
   TOP(up(activate(n__zeros))) -> TOP(up(zeros))
   TOP(up(activate(x0))) -> TOP(up(x0))
   TOP(up(s(x0))) -> TOP(s_flat(down(x0)))
   TOP(up(head(incr(x0)))) -> TOP(head_flat(down(incr(x0))))
   TOP(up(head(s(x0)))) -> TOP(head_flat(down(s(x0))))
   TOP(up(head(n__incr(x0)))) -> TOP(head_flat(down(n__incr(x0))))
   TOP(up(head(activate(x0)))) -> TOP(head_flat(down(activate(x0))))
   TOP(up(head(adx(x0)))) -> TOP(head_flat(down(adx(x0))))
   TOP(up(head(n__adx(x0)))) -> TOP(head_flat(down(n__adx(x0))))
   TOP(up(head(zeros))) -> TOP(head_flat(down(zeros)))
   TOP(up(head(head(x0)))) -> TOP(head_flat(down(head(x0))))
   TOP(up(head(tail(x0)))) -> TOP(head_flat(down(tail(x0))))
   TOP(up(tail(incr(x0)))) -> TOP(tail_flat(down(incr(x0))))
   TOP(up(tail(s(x0)))) -> TOP(tail_flat(down(s(x0))))
   TOP(up(tail(n__incr(x0)))) -> TOP(tail_flat(down(n__incr(x0))))
   TOP(up(tail(activate(x0)))) -> TOP(tail_flat(down(activate(x0))))
   TOP(up(tail(adx(x0)))) -> TOP(tail_flat(down(adx(x0))))
   TOP(up(tail(n__adx(x0)))) -> TOP(tail_flat(down(n__adx(x0))))
   TOP(up(tail(zeros))) -> TOP(tail_flat(down(zeros)))
   TOP(up(tail(head(x0)))) -> TOP(tail_flat(down(head(x0))))
   TOP(up(tail(tail(x0)))) -> TOP(tail_flat(down(tail(x0))))

The TRS R consists of the following rules:

   down(incr(nil)) -> up(nil)
   down(incr(cons(X, L))) -> up(cons(s(X), n__incr(activate(L))))
   down(adx(cons(X, L))) -> up(incr(cons(X, n__adx(activate(L)))))
   down(zeros) -> up(cons(0, n__zeros))
   down(incr(X)) -> up(n__incr(X))
   down(adx(X)) -> up(n__adx(X))
   down(zeros) -> up(n__zeros)
   down(activate(n__incr(X))) -> up(incr(X))
   down(activate(n__adx(X))) -> up(adx(X))
   down(activate(n__zeros)) -> up(zeros)
   down(activate(X)) -> up(X)
   down(cons(y1, y2)) -> cons_flat(down(y1), block(y2))
   down(cons(y1, y2)) -> cons_flat(block(y1), down(y2))
   down(s(y3)) -> s_flat(down(y3))
   down(n__incr(y4)) -> n__incr_flat(down(y4))
   down(n__adx(y7)) -> n__adx_flat(down(y7))
   down(head(incr(y11))) -> head_flat(down(incr(y11)))
   down(head(nil)) -> head_flat(down(nil))
   down(head(s(y14))) -> head_flat(down(s(y14)))
   down(head(n__incr(y15))) -> head_flat(down(n__incr(y15)))
   down(head(activate(y16))) -> head_flat(down(activate(y16)))
   down(head(adx(y17))) -> head_flat(down(adx(y17)))
   down(head(n__adx(y18))) -> head_flat(down(n__adx(y18)))
   down(head(nats)) -> head_flat(down(nats))
   down(head(zeros)) -> head_flat(down(zeros))
   down(head(0)) -> head_flat(down(0))
   down(head(n__zeros)) -> head_flat(down(n__zeros))
   down(head(head(y19))) -> head_flat(down(head(y19)))
   down(head(tail(y20))) -> head_flat(down(tail(y20)))
   down(head(fresh_constant)) -> head_flat(down(fresh_constant))
   down(tail(incr(y22))) -> tail_flat(down(incr(y22)))
   down(tail(nil)) -> tail_flat(down(nil))
   down(tail(s(y25))) -> tail_flat(down(s(y25)))
   down(tail(n__incr(y26))) -> tail_flat(down(n__incr(y26)))
   down(tail(activate(y27))) -> tail_flat(down(activate(y27)))
   down(tail(adx(y28))) -> tail_flat(down(adx(y28)))
   down(tail(n__adx(y29))) -> tail_flat(down(n__adx(y29)))
   down(tail(nats)) -> tail_flat(down(nats))
   down(tail(zeros)) -> tail_flat(down(zeros))
   down(tail(0)) -> tail_flat(down(0))
   down(tail(n__zeros)) -> tail_flat(down(n__zeros))
   down(tail(head(y30))) -> tail_flat(down(head(y30)))
   down(tail(tail(y31))) -> tail_flat(down(tail(y31)))
   down(tail(fresh_constant)) -> tail_flat(down(fresh_constant))
   tail_flat(up(x_1)) -> up(tail(x_1))
   head_flat(up(x_1)) -> up(head(x_1))
   n__adx_flat(up(x_1)) -> up(n__adx(x_1))
   n__incr_flat(up(x_1)) -> up(n__incr(x_1))
   s_flat(up(x_1)) -> up(s(x_1))
   cons_flat(block(x_1), up(x_2)) -> up(cons(x_1, x_2))
   cons_flat(up(x_1), block(x_2)) -> up(cons(x_1, x_2))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   TOP(up(incr(cons(x0, x1)))) -> TOP(up(cons(s(x0), n__incr(activate(x1)))))
   TOP(up(incr(x0))) -> TOP(up(n__incr(x0)))
   TOP(up(zeros)) -> TOP(up(cons(0, n__zeros)))
   TOP(up(adx(x0))) -> TOP(up(n__adx(x0)))
   TOP(up(activate(n__zeros))) -> TOP(up(zeros))
   TOP(up(activate(x0))) -> TOP(up(x0))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(TOP(x_1)) = x_1
   POL(activate(x_1)) = 1 + x_1
   POL(adx(x_1)) = 1
   POL(block(x_1)) = x_1
   POL(cons(x_1, x_2)) = 0
   POL(cons_flat(x_1, x_2)) = 0
   POL(down(x_1)) = 0
   POL(fresh_constant) = 0
   POL(head(x_1)) = 0
   POL(head_flat(x_1)) = 0
   POL(incr(x_1)) = 1
   POL(n__adx(x_1)) = 0
   POL(n__adx_flat(x_1)) = 0
   POL(n__incr(x_1)) = 0
   POL(n__incr_flat(x_1)) = 0
   POL(n__zeros) = 1
   POL(nats) = 0
   POL(nil) = 0
   POL(s(x_1)) = 0
   POL(s_flat(x_1)) = 0
   POL(tail(x_1)) = 0
   POL(tail_flat(x_1)) = 0
   POL(up(x_1)) = x_1
   POL(zeros) = 1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   cons_flat(up(x_1), block(x_2)) -> up(cons(x_1, x_2))
   n__incr_flat(up(x_1)) -> up(n__incr(x_1))
   cons_flat(block(x_1), up(x_2)) -> up(cons(x_1, x_2))
   n__adx_flat(up(x_1)) -> up(n__adx(x_1))
   s_flat(up(x_1)) -> up(s(x_1))
   head_flat(up(x_1)) -> up(head(x_1))
   tail_flat(up(x_1)) -> up(tail(x_1))


----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(up(cons(x0, x1))) -> TOP(cons_flat(down(x0), block(x1)))
   TOP(up(adx(cons(x0, x1)))) -> TOP(up(incr(cons(x0, n__adx(activate(x1))))))
   TOP(up(n__incr(x0))) -> TOP(n__incr_flat(down(x0)))
   TOP(up(cons(x0, x1))) -> TOP(cons_flat(block(x0), down(x1)))
   TOP(up(n__adx(x0))) -> TOP(n__adx_flat(down(x0)))
   TOP(up(activate(n__incr(x0)))) -> TOP(up(incr(x0)))
   TOP(up(activate(n__adx(x0)))) -> TOP(up(adx(x0)))
   TOP(up(s(x0))) -> TOP(s_flat(down(x0)))
   TOP(up(head(incr(x0)))) -> TOP(head_flat(down(incr(x0))))
   TOP(up(head(s(x0)))) -> TOP(head_flat(down(s(x0))))
   TOP(up(head(n__incr(x0)))) -> TOP(head_flat(down(n__incr(x0))))
   TOP(up(head(activate(x0)))) -> TOP(head_flat(down(activate(x0))))
   TOP(up(head(adx(x0)))) -> TOP(head_flat(down(adx(x0))))
   TOP(up(head(n__adx(x0)))) -> TOP(head_flat(down(n__adx(x0))))
   TOP(up(head(zeros))) -> TOP(head_flat(down(zeros)))
   TOP(up(head(head(x0)))) -> TOP(head_flat(down(head(x0))))
   TOP(up(head(tail(x0)))) -> TOP(head_flat(down(tail(x0))))
   TOP(up(tail(incr(x0)))) -> TOP(tail_flat(down(incr(x0))))
   TOP(up(tail(s(x0)))) -> TOP(tail_flat(down(s(x0))))
   TOP(up(tail(n__incr(x0)))) -> TOP(tail_flat(down(n__incr(x0))))
   TOP(up(tail(activate(x0)))) -> TOP(tail_flat(down(activate(x0))))
   TOP(up(tail(adx(x0)))) -> TOP(tail_flat(down(adx(x0))))
   TOP(up(tail(n__adx(x0)))) -> TOP(tail_flat(down(n__adx(x0))))
   TOP(up(tail(zeros))) -> TOP(tail_flat(down(zeros)))
   TOP(up(tail(head(x0)))) -> TOP(tail_flat(down(head(x0))))
   TOP(up(tail(tail(x0)))) -> TOP(tail_flat(down(tail(x0))))

The TRS R consists of the following rules:

   down(incr(nil)) -> up(nil)
   down(incr(cons(X, L))) -> up(cons(s(X), n__incr(activate(L))))
   down(adx(cons(X, L))) -> up(incr(cons(X, n__adx(activate(L)))))
   down(zeros) -> up(cons(0, n__zeros))
   down(incr(X)) -> up(n__incr(X))
   down(adx(X)) -> up(n__adx(X))
   down(zeros) -> up(n__zeros)
   down(activate(n__incr(X))) -> up(incr(X))
   down(activate(n__adx(X))) -> up(adx(X))
   down(activate(n__zeros)) -> up(zeros)
   down(activate(X)) -> up(X)
   down(cons(y1, y2)) -> cons_flat(down(y1), block(y2))
   down(cons(y1, y2)) -> cons_flat(block(y1), down(y2))
   down(s(y3)) -> s_flat(down(y3))
   down(n__incr(y4)) -> n__incr_flat(down(y4))
   down(n__adx(y7)) -> n__adx_flat(down(y7))
   down(head(incr(y11))) -> head_flat(down(incr(y11)))
   down(head(nil)) -> head_flat(down(nil))
   down(head(s(y14))) -> head_flat(down(s(y14)))
   down(head(n__incr(y15))) -> head_flat(down(n__incr(y15)))
   down(head(activate(y16))) -> head_flat(down(activate(y16)))
   down(head(adx(y17))) -> head_flat(down(adx(y17)))
   down(head(n__adx(y18))) -> head_flat(down(n__adx(y18)))
   down(head(nats)) -> head_flat(down(nats))
   down(head(zeros)) -> head_flat(down(zeros))
   down(head(0)) -> head_flat(down(0))
   down(head(n__zeros)) -> head_flat(down(n__zeros))
   down(head(head(y19))) -> head_flat(down(head(y19)))
   down(head(tail(y20))) -> head_flat(down(tail(y20)))
   down(head(fresh_constant)) -> head_flat(down(fresh_constant))
   down(tail(incr(y22))) -> tail_flat(down(incr(y22)))
   down(tail(nil)) -> tail_flat(down(nil))
   down(tail(s(y25))) -> tail_flat(down(s(y25)))
   down(tail(n__incr(y26))) -> tail_flat(down(n__incr(y26)))
   down(tail(activate(y27))) -> tail_flat(down(activate(y27)))
   down(tail(adx(y28))) -> tail_flat(down(adx(y28)))
   down(tail(n__adx(y29))) -> tail_flat(down(n__adx(y29)))
   down(tail(nats)) -> tail_flat(down(nats))
   down(tail(zeros)) -> tail_flat(down(zeros))
   down(tail(0)) -> tail_flat(down(0))
   down(tail(n__zeros)) -> tail_flat(down(n__zeros))
   down(tail(head(y30))) -> tail_flat(down(head(y30)))
   down(tail(tail(y31))) -> tail_flat(down(tail(y31)))
   down(tail(fresh_constant)) -> tail_flat(down(fresh_constant))
   tail_flat(up(x_1)) -> up(tail(x_1))
   head_flat(up(x_1)) -> up(head(x_1))
   n__adx_flat(up(x_1)) -> up(n__adx(x_1))
   n__incr_flat(up(x_1)) -> up(n__incr(x_1))
   s_flat(up(x_1)) -> up(s(x_1))
   cons_flat(block(x_1), up(x_2)) -> up(cons(x_1, x_2))
   cons_flat(up(x_1), block(x_2)) -> up(cons(x_1, x_2))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(33) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 3 less nodes.
----------------------------------------

(34)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(up(cons(x0, x1))) -> TOP(cons_flat(down(x0), block(x1)))
   TOP(up(cons(x0, x1))) -> TOP(cons_flat(block(x0), down(x1)))
   TOP(up(s(x0))) -> TOP(s_flat(down(x0)))
   TOP(up(n__incr(x0))) -> TOP(n__incr_flat(down(x0)))
   TOP(up(n__adx(x0))) -> TOP(n__adx_flat(down(x0)))
   TOP(up(head(incr(x0)))) -> TOP(head_flat(down(incr(x0))))
   TOP(up(head(s(x0)))) -> TOP(head_flat(down(s(x0))))
   TOP(up(head(n__incr(x0)))) -> TOP(head_flat(down(n__incr(x0))))
   TOP(up(head(activate(x0)))) -> TOP(head_flat(down(activate(x0))))
   TOP(up(head(adx(x0)))) -> TOP(head_flat(down(adx(x0))))
   TOP(up(head(n__adx(x0)))) -> TOP(head_flat(down(n__adx(x0))))
   TOP(up(head(zeros))) -> TOP(head_flat(down(zeros)))
   TOP(up(head(head(x0)))) -> TOP(head_flat(down(head(x0))))
   TOP(up(head(tail(x0)))) -> TOP(head_flat(down(tail(x0))))
   TOP(up(tail(incr(x0)))) -> TOP(tail_flat(down(incr(x0))))
   TOP(up(tail(s(x0)))) -> TOP(tail_flat(down(s(x0))))
   TOP(up(tail(n__incr(x0)))) -> TOP(tail_flat(down(n__incr(x0))))
   TOP(up(tail(activate(x0)))) -> TOP(tail_flat(down(activate(x0))))
   TOP(up(tail(adx(x0)))) -> TOP(tail_flat(down(adx(x0))))
   TOP(up(tail(n__adx(x0)))) -> TOP(tail_flat(down(n__adx(x0))))
   TOP(up(tail(zeros))) -> TOP(tail_flat(down(zeros)))
   TOP(up(tail(head(x0)))) -> TOP(tail_flat(down(head(x0))))
   TOP(up(tail(tail(x0)))) -> TOP(tail_flat(down(tail(x0))))

The TRS R consists of the following rules:

   down(incr(nil)) -> up(nil)
   down(incr(cons(X, L))) -> up(cons(s(X), n__incr(activate(L))))
   down(adx(cons(X, L))) -> up(incr(cons(X, n__adx(activate(L)))))
   down(zeros) -> up(cons(0, n__zeros))
   down(incr(X)) -> up(n__incr(X))
   down(adx(X)) -> up(n__adx(X))
   down(zeros) -> up(n__zeros)
   down(activate(n__incr(X))) -> up(incr(X))
   down(activate(n__adx(X))) -> up(adx(X))
   down(activate(n__zeros)) -> up(zeros)
   down(activate(X)) -> up(X)
   down(cons(y1, y2)) -> cons_flat(down(y1), block(y2))
   down(cons(y1, y2)) -> cons_flat(block(y1), down(y2))
   down(s(y3)) -> s_flat(down(y3))
   down(n__incr(y4)) -> n__incr_flat(down(y4))
   down(n__adx(y7)) -> n__adx_flat(down(y7))
   down(head(incr(y11))) -> head_flat(down(incr(y11)))
   down(head(nil)) -> head_flat(down(nil))
   down(head(s(y14))) -> head_flat(down(s(y14)))
   down(head(n__incr(y15))) -> head_flat(down(n__incr(y15)))
   down(head(activate(y16))) -> head_flat(down(activate(y16)))
   down(head(adx(y17))) -> head_flat(down(adx(y17)))
   down(head(n__adx(y18))) -> head_flat(down(n__adx(y18)))
   down(head(nats)) -> head_flat(down(nats))
   down(head(zeros)) -> head_flat(down(zeros))
   down(head(0)) -> head_flat(down(0))
   down(head(n__zeros)) -> head_flat(down(n__zeros))
   down(head(head(y19))) -> head_flat(down(head(y19)))
   down(head(tail(y20))) -> head_flat(down(tail(y20)))
   down(head(fresh_constant)) -> head_flat(down(fresh_constant))
   down(tail(incr(y22))) -> tail_flat(down(incr(y22)))
   down(tail(nil)) -> tail_flat(down(nil))
   down(tail(s(y25))) -> tail_flat(down(s(y25)))
   down(tail(n__incr(y26))) -> tail_flat(down(n__incr(y26)))
   down(tail(activate(y27))) -> tail_flat(down(activate(y27)))
   down(tail(adx(y28))) -> tail_flat(down(adx(y28)))
   down(tail(n__adx(y29))) -> tail_flat(down(n__adx(y29)))
   down(tail(nats)) -> tail_flat(down(nats))
   down(tail(zeros)) -> tail_flat(down(zeros))
   down(tail(0)) -> tail_flat(down(0))
   down(tail(n__zeros)) -> tail_flat(down(n__zeros))
   down(tail(head(y30))) -> tail_flat(down(head(y30)))
   down(tail(tail(y31))) -> tail_flat(down(tail(y31)))
   down(tail(fresh_constant)) -> tail_flat(down(fresh_constant))
   tail_flat(up(x_1)) -> up(tail(x_1))
   head_flat(up(x_1)) -> up(head(x_1))
   n__adx_flat(up(x_1)) -> up(n__adx(x_1))
   n__incr_flat(up(x_1)) -> up(n__incr(x_1))
   s_flat(up(x_1)) -> up(s(x_1))
   cons_flat(block(x_1), up(x_2)) -> up(cons(x_1, x_2))
   cons_flat(up(x_1), block(x_2)) -> up(cons(x_1, x_2))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(35) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   TOP(up(head(activate(x0)))) -> TOP(head_flat(down(activate(x0))))
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO]:

Non-tuple symbols: 
<<<
 M( s_flat_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( nats ) =  	[[0], [0]]
>>>

<<<
 M( block_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( n__incr_flat_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( head_1(x_1) ) =  	[[1], [1]] 	+ 	[[1, 0], [1, 0]] 	* 	x_1
>>>

<<<
 M( cons_flat_2(x_1, x_2) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1 	+ 	[[0, 0], [0, 0]] 	* 	x_2
>>>

<<<
 M( incr_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( activate_1(x_1) ) =  	[[1], [0]] 	+ 	[[1, 0], [1, 0]] 	* 	x_1
>>>

<<<
 M( n__adx_flat_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( nil ) =  	[[0], [0]]
>>>

<<<
 M( adx_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( s_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( tail_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( n__zeros ) =  	[[0], [0]]
>>>

<<<
 M( n__incr_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( n__adx_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( down_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 1], [0, 0]] 	* 	x_1
>>>

<<<
 M( zeros ) =  	[[0], [0]]
>>>

<<<
 M( 0 ) =  	[[0], [0]]
>>>

<<<
 M( fresh_constant ) =  	[[0], [0]]
>>>

<<<
 M( up_1(x_1) ) =  	[[0], [0]] 	+ 	[[1, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( cons_2(x_1, x_2) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1 	+ 	[[0, 0], [0, 0]] 	* 	x_2
>>>

<<<
 M( tail_flat_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( head_flat_1(x_1) ) =  	[[1], [0]] 	+ 	[[1, 0], [0, 0]] 	* 	x_1
>>>

Tuple symbols: 
<<<
 M( TOP_1(x_1) ) =  	[[0]] 	+ 	[[1, 0]] 	* 	x_1
>>>



Matrix type: 

We used a basic matrix type which is not further parametrizeable.





As matrix orders are CE-compatible, we used usable rules w.r.t. argument filtering in the order.
The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   down(incr(nil)) -> up(nil)
   down(incr(cons(X, L))) -> up(cons(s(X), n__incr(activate(L))))
   down(adx(cons(X, L))) -> up(incr(cons(X, n__adx(activate(L)))))
   down(zeros) -> up(cons(0, n__zeros))
   down(incr(X)) -> up(n__incr(X))
   down(adx(X)) -> up(n__adx(X))
   down(zeros) -> up(n__zeros)
   down(activate(n__incr(X))) -> up(incr(X))
   down(activate(n__adx(X))) -> up(adx(X))
   down(activate(n__zeros)) -> up(zeros)
   down(activate(X)) -> up(X)
   down(cons(y1, y2)) -> cons_flat(down(y1), block(y2))
   down(cons(y1, y2)) -> cons_flat(block(y1), down(y2))
   down(s(y3)) -> s_flat(down(y3))
   down(n__incr(y4)) -> n__incr_flat(down(y4))
   down(n__adx(y7)) -> n__adx_flat(down(y7))
   down(head(incr(y11))) -> head_flat(down(incr(y11)))
   down(head(nil)) -> head_flat(down(nil))
   down(head(s(y14))) -> head_flat(down(s(y14)))
   down(head(n__incr(y15))) -> head_flat(down(n__incr(y15)))
   down(head(activate(y16))) -> head_flat(down(activate(y16)))
   down(head(adx(y17))) -> head_flat(down(adx(y17)))
   down(head(n__adx(y18))) -> head_flat(down(n__adx(y18)))
   down(head(nats)) -> head_flat(down(nats))
   down(head(zeros)) -> head_flat(down(zeros))
   down(head(0)) -> head_flat(down(0))
   down(head(n__zeros)) -> head_flat(down(n__zeros))
   down(head(head(y19))) -> head_flat(down(head(y19)))
   down(head(tail(y20))) -> head_flat(down(tail(y20)))
   down(head(fresh_constant)) -> head_flat(down(fresh_constant))
   down(tail(incr(y22))) -> tail_flat(down(incr(y22)))
   down(tail(nil)) -> tail_flat(down(nil))
   down(tail(s(y25))) -> tail_flat(down(s(y25)))
   down(tail(n__incr(y26))) -> tail_flat(down(n__incr(y26)))
   down(tail(activate(y27))) -> tail_flat(down(activate(y27)))
   down(tail(adx(y28))) -> tail_flat(down(adx(y28)))
   down(tail(n__adx(y29))) -> tail_flat(down(n__adx(y29)))
   down(tail(nats)) -> tail_flat(down(nats))
   down(tail(zeros)) -> tail_flat(down(zeros))
   down(tail(0)) -> tail_flat(down(0))
   down(tail(n__zeros)) -> tail_flat(down(n__zeros))
   down(tail(head(y30))) -> tail_flat(down(head(y30)))
   down(tail(tail(y31))) -> tail_flat(down(tail(y31)))
   down(tail(fresh_constant)) -> tail_flat(down(fresh_constant))
   cons_flat(up(x_1), block(x_2)) -> up(cons(x_1, x_2))
   cons_flat(block(x_1), up(x_2)) -> up(cons(x_1, x_2))
   s_flat(up(x_1)) -> up(s(x_1))
   n__incr_flat(up(x_1)) -> up(n__incr(x_1))
   n__adx_flat(up(x_1)) -> up(n__adx(x_1))
   head_flat(up(x_1)) -> up(head(x_1))
   tail_flat(up(x_1)) -> up(tail(x_1))


----------------------------------------

(36)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(up(cons(x0, x1))) -> TOP(cons_flat(down(x0), block(x1)))
   TOP(up(cons(x0, x1))) -> TOP(cons_flat(block(x0), down(x1)))
   TOP(up(s(x0))) -> TOP(s_flat(down(x0)))
   TOP(up(n__incr(x0))) -> TOP(n__incr_flat(down(x0)))
   TOP(up(n__adx(x0))) -> TOP(n__adx_flat(down(x0)))
   TOP(up(head(incr(x0)))) -> TOP(head_flat(down(incr(x0))))
   TOP(up(head(s(x0)))) -> TOP(head_flat(down(s(x0))))
   TOP(up(head(n__incr(x0)))) -> TOP(head_flat(down(n__incr(x0))))
   TOP(up(head(adx(x0)))) -> TOP(head_flat(down(adx(x0))))
   TOP(up(head(n__adx(x0)))) -> TOP(head_flat(down(n__adx(x0))))
   TOP(up(head(zeros))) -> TOP(head_flat(down(zeros)))
   TOP(up(head(head(x0)))) -> TOP(head_flat(down(head(x0))))
   TOP(up(head(tail(x0)))) -> TOP(head_flat(down(tail(x0))))
   TOP(up(tail(incr(x0)))) -> TOP(tail_flat(down(incr(x0))))
   TOP(up(tail(s(x0)))) -> TOP(tail_flat(down(s(x0))))
   TOP(up(tail(n__incr(x0)))) -> TOP(tail_flat(down(n__incr(x0))))
   TOP(up(tail(activate(x0)))) -> TOP(tail_flat(down(activate(x0))))
   TOP(up(tail(adx(x0)))) -> TOP(tail_flat(down(adx(x0))))
   TOP(up(tail(n__adx(x0)))) -> TOP(tail_flat(down(n__adx(x0))))
   TOP(up(tail(zeros))) -> TOP(tail_flat(down(zeros)))
   TOP(up(tail(head(x0)))) -> TOP(tail_flat(down(head(x0))))
   TOP(up(tail(tail(x0)))) -> TOP(tail_flat(down(tail(x0))))

The TRS R consists of the following rules:

   down(incr(nil)) -> up(nil)
   down(incr(cons(X, L))) -> up(cons(s(X), n__incr(activate(L))))
   down(adx(cons(X, L))) -> up(incr(cons(X, n__adx(activate(L)))))
   down(zeros) -> up(cons(0, n__zeros))
   down(incr(X)) -> up(n__incr(X))
   down(adx(X)) -> up(n__adx(X))
   down(zeros) -> up(n__zeros)
   down(activate(n__incr(X))) -> up(incr(X))
   down(activate(n__adx(X))) -> up(adx(X))
   down(activate(n__zeros)) -> up(zeros)
   down(activate(X)) -> up(X)
   down(cons(y1, y2)) -> cons_flat(down(y1), block(y2))
   down(cons(y1, y2)) -> cons_flat(block(y1), down(y2))
   down(s(y3)) -> s_flat(down(y3))
   down(n__incr(y4)) -> n__incr_flat(down(y4))
   down(n__adx(y7)) -> n__adx_flat(down(y7))
   down(head(incr(y11))) -> head_flat(down(incr(y11)))
   down(head(nil)) -> head_flat(down(nil))
   down(head(s(y14))) -> head_flat(down(s(y14)))
   down(head(n__incr(y15))) -> head_flat(down(n__incr(y15)))
   down(head(activate(y16))) -> head_flat(down(activate(y16)))
   down(head(adx(y17))) -> head_flat(down(adx(y17)))
   down(head(n__adx(y18))) -> head_flat(down(n__adx(y18)))
   down(head(nats)) -> head_flat(down(nats))
   down(head(zeros)) -> head_flat(down(zeros))
   down(head(0)) -> head_flat(down(0))
   down(head(n__zeros)) -> head_flat(down(n__zeros))
   down(head(head(y19))) -> head_flat(down(head(y19)))
   down(head(tail(y20))) -> head_flat(down(tail(y20)))
   down(head(fresh_constant)) -> head_flat(down(fresh_constant))
   down(tail(incr(y22))) -> tail_flat(down(incr(y22)))
   down(tail(nil)) -> tail_flat(down(nil))
   down(tail(s(y25))) -> tail_flat(down(s(y25)))
   down(tail(n__incr(y26))) -> tail_flat(down(n__incr(y26)))
   down(tail(activate(y27))) -> tail_flat(down(activate(y27)))
   down(tail(adx(y28))) -> tail_flat(down(adx(y28)))
   down(tail(n__adx(y29))) -> tail_flat(down(n__adx(y29)))
   down(tail(nats)) -> tail_flat(down(nats))
   down(tail(zeros)) -> tail_flat(down(zeros))
   down(tail(0)) -> tail_flat(down(0))
   down(tail(n__zeros)) -> tail_flat(down(n__zeros))
   down(tail(head(y30))) -> tail_flat(down(head(y30)))
   down(tail(tail(y31))) -> tail_flat(down(tail(y31)))
   down(tail(fresh_constant)) -> tail_flat(down(fresh_constant))
   tail_flat(up(x_1)) -> up(tail(x_1))
   head_flat(up(x_1)) -> up(head(x_1))
   n__adx_flat(up(x_1)) -> up(n__adx(x_1))
   n__incr_flat(up(x_1)) -> up(n__incr(x_1))
   s_flat(up(x_1)) -> up(s(x_1))
   cons_flat(block(x_1), up(x_2)) -> up(cons(x_1, x_2))
   cons_flat(up(x_1), block(x_2)) -> up(cons(x_1, x_2))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(37) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   TOP(up(head(zeros))) -> TOP(head_flat(down(zeros)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO]:

Non-tuple symbols: 
<<<
 M( s_flat_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( nats ) =  	[[0], [0]]
>>>

<<<
 M( block_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( n__incr_flat_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( head_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 1], [0, 1]] 	* 	x_1
>>>

<<<
 M( cons_flat_2(x_1, x_2) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1 	+ 	[[0, 0], [0, 0]] 	* 	x_2
>>>

<<<
 M( incr_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( activate_1(x_1) ) =  	[[1], [1]] 	+ 	[[1, 1], [1, 1]] 	* 	x_1
>>>

<<<
 M( n__adx_flat_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( nil ) =  	[[0], [0]]
>>>

<<<
 M( adx_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( s_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( tail_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( n__zeros ) =  	[[0], [0]]
>>>

<<<
 M( n__incr_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( n__adx_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( down_1(x_1) ) =  	[[0], [0]] 	+ 	[[1, 0], [1, 0]] 	* 	x_1
>>>

<<<
 M( zeros ) =  	[[0], [1]]
>>>

<<<
 M( 0 ) =  	[[0], [0]]
>>>

<<<
 M( fresh_constant ) =  	[[0], [0]]
>>>

<<<
 M( up_1(x_1) ) =  	[[0], [0]] 	+ 	[[1, 0], [0, 1]] 	* 	x_1
>>>

<<<
 M( cons_2(x_1, x_2) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1 	+ 	[[0, 0], [0, 0]] 	* 	x_2
>>>

<<<
 M( tail_flat_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( head_flat_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 1], [0, 1]] 	* 	x_1
>>>

Tuple symbols: 
<<<
 M( TOP_1(x_1) ) =  	[[0]] 	+ 	[[1, 0]] 	* 	x_1
>>>



Matrix type: 

We used a basic matrix type which is not further parametrizeable.





As matrix orders are CE-compatible, we used usable rules w.r.t. argument filtering in the order.
The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   down(incr(nil)) -> up(nil)
   down(incr(cons(X, L))) -> up(cons(s(X), n__incr(activate(L))))
   down(adx(cons(X, L))) -> up(incr(cons(X, n__adx(activate(L)))))
   down(zeros) -> up(cons(0, n__zeros))
   down(incr(X)) -> up(n__incr(X))
   down(adx(X)) -> up(n__adx(X))
   down(zeros) -> up(n__zeros)
   down(activate(n__incr(X))) -> up(incr(X))
   down(activate(n__adx(X))) -> up(adx(X))
   down(activate(n__zeros)) -> up(zeros)
   down(activate(X)) -> up(X)
   down(cons(y1, y2)) -> cons_flat(down(y1), block(y2))
   down(cons(y1, y2)) -> cons_flat(block(y1), down(y2))
   down(s(y3)) -> s_flat(down(y3))
   down(n__incr(y4)) -> n__incr_flat(down(y4))
   down(n__adx(y7)) -> n__adx_flat(down(y7))
   down(head(incr(y11))) -> head_flat(down(incr(y11)))
   down(head(nil)) -> head_flat(down(nil))
   down(head(s(y14))) -> head_flat(down(s(y14)))
   down(head(n__incr(y15))) -> head_flat(down(n__incr(y15)))
   down(head(activate(y16))) -> head_flat(down(activate(y16)))
   down(head(adx(y17))) -> head_flat(down(adx(y17)))
   down(head(n__adx(y18))) -> head_flat(down(n__adx(y18)))
   down(head(nats)) -> head_flat(down(nats))
   down(head(zeros)) -> head_flat(down(zeros))
   down(head(0)) -> head_flat(down(0))
   down(head(n__zeros)) -> head_flat(down(n__zeros))
   down(head(head(y19))) -> head_flat(down(head(y19)))
   down(head(tail(y20))) -> head_flat(down(tail(y20)))
   down(head(fresh_constant)) -> head_flat(down(fresh_constant))
   down(tail(incr(y22))) -> tail_flat(down(incr(y22)))
   down(tail(nil)) -> tail_flat(down(nil))
   down(tail(s(y25))) -> tail_flat(down(s(y25)))
   down(tail(n__incr(y26))) -> tail_flat(down(n__incr(y26)))
   down(tail(activate(y27))) -> tail_flat(down(activate(y27)))
   down(tail(adx(y28))) -> tail_flat(down(adx(y28)))
   down(tail(n__adx(y29))) -> tail_flat(down(n__adx(y29)))
   down(tail(nats)) -> tail_flat(down(nats))
   down(tail(zeros)) -> tail_flat(down(zeros))
   down(tail(0)) -> tail_flat(down(0))
   down(tail(n__zeros)) -> tail_flat(down(n__zeros))
   down(tail(head(y30))) -> tail_flat(down(head(y30)))
   down(tail(tail(y31))) -> tail_flat(down(tail(y31)))
   down(tail(fresh_constant)) -> tail_flat(down(fresh_constant))
   cons_flat(up(x_1), block(x_2)) -> up(cons(x_1, x_2))
   cons_flat(block(x_1), up(x_2)) -> up(cons(x_1, x_2))
   s_flat(up(x_1)) -> up(s(x_1))
   n__incr_flat(up(x_1)) -> up(n__incr(x_1))
   n__adx_flat(up(x_1)) -> up(n__adx(x_1))
   head_flat(up(x_1)) -> up(head(x_1))
   tail_flat(up(x_1)) -> up(tail(x_1))


----------------------------------------

(38)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(up(cons(x0, x1))) -> TOP(cons_flat(down(x0), block(x1)))
   TOP(up(cons(x0, x1))) -> TOP(cons_flat(block(x0), down(x1)))
   TOP(up(s(x0))) -> TOP(s_flat(down(x0)))
   TOP(up(n__incr(x0))) -> TOP(n__incr_flat(down(x0)))
   TOP(up(n__adx(x0))) -> TOP(n__adx_flat(down(x0)))
   TOP(up(head(incr(x0)))) -> TOP(head_flat(down(incr(x0))))
   TOP(up(head(s(x0)))) -> TOP(head_flat(down(s(x0))))
   TOP(up(head(n__incr(x0)))) -> TOP(head_flat(down(n__incr(x0))))
   TOP(up(head(adx(x0)))) -> TOP(head_flat(down(adx(x0))))
   TOP(up(head(n__adx(x0)))) -> TOP(head_flat(down(n__adx(x0))))
   TOP(up(head(head(x0)))) -> TOP(head_flat(down(head(x0))))
   TOP(up(head(tail(x0)))) -> TOP(head_flat(down(tail(x0))))
   TOP(up(tail(incr(x0)))) -> TOP(tail_flat(down(incr(x0))))
   TOP(up(tail(s(x0)))) -> TOP(tail_flat(down(s(x0))))
   TOP(up(tail(n__incr(x0)))) -> TOP(tail_flat(down(n__incr(x0))))
   TOP(up(tail(activate(x0)))) -> TOP(tail_flat(down(activate(x0))))
   TOP(up(tail(adx(x0)))) -> TOP(tail_flat(down(adx(x0))))
   TOP(up(tail(n__adx(x0)))) -> TOP(tail_flat(down(n__adx(x0))))
   TOP(up(tail(zeros))) -> TOP(tail_flat(down(zeros)))
   TOP(up(tail(head(x0)))) -> TOP(tail_flat(down(head(x0))))
   TOP(up(tail(tail(x0)))) -> TOP(tail_flat(down(tail(x0))))

The TRS R consists of the following rules:

   down(incr(nil)) -> up(nil)
   down(incr(cons(X, L))) -> up(cons(s(X), n__incr(activate(L))))
   down(adx(cons(X, L))) -> up(incr(cons(X, n__adx(activate(L)))))
   down(zeros) -> up(cons(0, n__zeros))
   down(incr(X)) -> up(n__incr(X))
   down(adx(X)) -> up(n__adx(X))
   down(zeros) -> up(n__zeros)
   down(activate(n__incr(X))) -> up(incr(X))
   down(activate(n__adx(X))) -> up(adx(X))
   down(activate(n__zeros)) -> up(zeros)
   down(activate(X)) -> up(X)
   down(cons(y1, y2)) -> cons_flat(down(y1), block(y2))
   down(cons(y1, y2)) -> cons_flat(block(y1), down(y2))
   down(s(y3)) -> s_flat(down(y3))
   down(n__incr(y4)) -> n__incr_flat(down(y4))
   down(n__adx(y7)) -> n__adx_flat(down(y7))
   down(head(incr(y11))) -> head_flat(down(incr(y11)))
   down(head(nil)) -> head_flat(down(nil))
   down(head(s(y14))) -> head_flat(down(s(y14)))
   down(head(n__incr(y15))) -> head_flat(down(n__incr(y15)))
   down(head(activate(y16))) -> head_flat(down(activate(y16)))
   down(head(adx(y17))) -> head_flat(down(adx(y17)))
   down(head(n__adx(y18))) -> head_flat(down(n__adx(y18)))
   down(head(nats)) -> head_flat(down(nats))
   down(head(zeros)) -> head_flat(down(zeros))
   down(head(0)) -> head_flat(down(0))
   down(head(n__zeros)) -> head_flat(down(n__zeros))
   down(head(head(y19))) -> head_flat(down(head(y19)))
   down(head(tail(y20))) -> head_flat(down(tail(y20)))
   down(head(fresh_constant)) -> head_flat(down(fresh_constant))
   down(tail(incr(y22))) -> tail_flat(down(incr(y22)))
   down(tail(nil)) -> tail_flat(down(nil))
   down(tail(s(y25))) -> tail_flat(down(s(y25)))
   down(tail(n__incr(y26))) -> tail_flat(down(n__incr(y26)))
   down(tail(activate(y27))) -> tail_flat(down(activate(y27)))
   down(tail(adx(y28))) -> tail_flat(down(adx(y28)))
   down(tail(n__adx(y29))) -> tail_flat(down(n__adx(y29)))
   down(tail(nats)) -> tail_flat(down(nats))
   down(tail(zeros)) -> tail_flat(down(zeros))
   down(tail(0)) -> tail_flat(down(0))
   down(tail(n__zeros)) -> tail_flat(down(n__zeros))
   down(tail(head(y30))) -> tail_flat(down(head(y30)))
   down(tail(tail(y31))) -> tail_flat(down(tail(y31)))
   down(tail(fresh_constant)) -> tail_flat(down(fresh_constant))
   tail_flat(up(x_1)) -> up(tail(x_1))
   head_flat(up(x_1)) -> up(head(x_1))
   n__adx_flat(up(x_1)) -> up(n__adx(x_1))
   n__incr_flat(up(x_1)) -> up(n__incr(x_1))
   s_flat(up(x_1)) -> up(s(x_1))
   cons_flat(block(x_1), up(x_2)) -> up(cons(x_1, x_2))
   cons_flat(up(x_1), block(x_2)) -> up(cons(x_1, x_2))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(39) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   TOP(up(tail(activate(x0)))) -> TOP(tail_flat(down(activate(x0))))
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO]:

Non-tuple symbols: 
<<<
 M( s_flat_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( nats ) =  	[[0], [0]]
>>>

<<<
 M( block_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( n__incr_flat_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( head_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( cons_flat_2(x_1, x_2) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1 	+ 	[[0, 0], [0, 0]] 	* 	x_2
>>>

<<<
 M( incr_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( activate_1(x_1) ) =  	[[0], [1]] 	+ 	[[0, 1], [0, 1]] 	* 	x_1
>>>

<<<
 M( n__adx_flat_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( nil ) =  	[[0], [0]]
>>>

<<<
 M( adx_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( s_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( tail_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 1], [0, 1]] 	* 	x_1
>>>

<<<
 M( n__zeros ) =  	[[0], [0]]
>>>

<<<
 M( n__incr_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( n__adx_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( down_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [1, 0]] 	* 	x_1
>>>

<<<
 M( zeros ) =  	[[0], [0]]
>>>

<<<
 M( 0 ) =  	[[0], [0]]
>>>

<<<
 M( fresh_constant ) =  	[[0], [0]]
>>>

<<<
 M( up_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 1]] 	* 	x_1
>>>

<<<
 M( cons_2(x_1, x_2) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1 	+ 	[[0, 0], [0, 0]] 	* 	x_2
>>>

<<<
 M( tail_flat_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 1]] 	* 	x_1
>>>

<<<
 M( head_flat_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

Tuple symbols: 
<<<
 M( TOP_1(x_1) ) =  	[[0]] 	+ 	[[0, 1]] 	* 	x_1
>>>



Matrix type: 

We used a basic matrix type which is not further parametrizeable.





As matrix orders are CE-compatible, we used usable rules w.r.t. argument filtering in the order.
The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   down(incr(nil)) -> up(nil)
   down(incr(cons(X, L))) -> up(cons(s(X), n__incr(activate(L))))
   down(adx(cons(X, L))) -> up(incr(cons(X, n__adx(activate(L)))))
   down(zeros) -> up(cons(0, n__zeros))
   down(incr(X)) -> up(n__incr(X))
   down(adx(X)) -> up(n__adx(X))
   down(zeros) -> up(n__zeros)
   down(activate(n__incr(X))) -> up(incr(X))
   down(activate(n__adx(X))) -> up(adx(X))
   down(activate(n__zeros)) -> up(zeros)
   down(activate(X)) -> up(X)
   down(cons(y1, y2)) -> cons_flat(down(y1), block(y2))
   down(cons(y1, y2)) -> cons_flat(block(y1), down(y2))
   down(s(y3)) -> s_flat(down(y3))
   down(n__incr(y4)) -> n__incr_flat(down(y4))
   down(n__adx(y7)) -> n__adx_flat(down(y7))
   down(head(incr(y11))) -> head_flat(down(incr(y11)))
   down(head(nil)) -> head_flat(down(nil))
   down(head(s(y14))) -> head_flat(down(s(y14)))
   down(head(n__incr(y15))) -> head_flat(down(n__incr(y15)))
   down(head(activate(y16))) -> head_flat(down(activate(y16)))
   down(head(adx(y17))) -> head_flat(down(adx(y17)))
   down(head(n__adx(y18))) -> head_flat(down(n__adx(y18)))
   down(head(nats)) -> head_flat(down(nats))
   down(head(zeros)) -> head_flat(down(zeros))
   down(head(0)) -> head_flat(down(0))
   down(head(n__zeros)) -> head_flat(down(n__zeros))
   down(head(head(y19))) -> head_flat(down(head(y19)))
   down(head(tail(y20))) -> head_flat(down(tail(y20)))
   down(head(fresh_constant)) -> head_flat(down(fresh_constant))
   down(tail(incr(y22))) -> tail_flat(down(incr(y22)))
   down(tail(nil)) -> tail_flat(down(nil))
   down(tail(s(y25))) -> tail_flat(down(s(y25)))
   down(tail(n__incr(y26))) -> tail_flat(down(n__incr(y26)))
   down(tail(activate(y27))) -> tail_flat(down(activate(y27)))
   down(tail(adx(y28))) -> tail_flat(down(adx(y28)))
   down(tail(n__adx(y29))) -> tail_flat(down(n__adx(y29)))
   down(tail(nats)) -> tail_flat(down(nats))
   down(tail(zeros)) -> tail_flat(down(zeros))
   down(tail(0)) -> tail_flat(down(0))
   down(tail(n__zeros)) -> tail_flat(down(n__zeros))
   down(tail(head(y30))) -> tail_flat(down(head(y30)))
   down(tail(tail(y31))) -> tail_flat(down(tail(y31)))
   down(tail(fresh_constant)) -> tail_flat(down(fresh_constant))
   cons_flat(up(x_1), block(x_2)) -> up(cons(x_1, x_2))
   cons_flat(block(x_1), up(x_2)) -> up(cons(x_1, x_2))
   s_flat(up(x_1)) -> up(s(x_1))
   n__incr_flat(up(x_1)) -> up(n__incr(x_1))
   n__adx_flat(up(x_1)) -> up(n__adx(x_1))
   head_flat(up(x_1)) -> up(head(x_1))
   tail_flat(up(x_1)) -> up(tail(x_1))


----------------------------------------

(40)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(up(cons(x0, x1))) -> TOP(cons_flat(down(x0), block(x1)))
   TOP(up(cons(x0, x1))) -> TOP(cons_flat(block(x0), down(x1)))
   TOP(up(s(x0))) -> TOP(s_flat(down(x0)))
   TOP(up(n__incr(x0))) -> TOP(n__incr_flat(down(x0)))
   TOP(up(n__adx(x0))) -> TOP(n__adx_flat(down(x0)))
   TOP(up(head(incr(x0)))) -> TOP(head_flat(down(incr(x0))))
   TOP(up(head(s(x0)))) -> TOP(head_flat(down(s(x0))))
   TOP(up(head(n__incr(x0)))) -> TOP(head_flat(down(n__incr(x0))))
   TOP(up(head(adx(x0)))) -> TOP(head_flat(down(adx(x0))))
   TOP(up(head(n__adx(x0)))) -> TOP(head_flat(down(n__adx(x0))))
   TOP(up(head(head(x0)))) -> TOP(head_flat(down(head(x0))))
   TOP(up(head(tail(x0)))) -> TOP(head_flat(down(tail(x0))))
   TOP(up(tail(incr(x0)))) -> TOP(tail_flat(down(incr(x0))))
   TOP(up(tail(s(x0)))) -> TOP(tail_flat(down(s(x0))))
   TOP(up(tail(n__incr(x0)))) -> TOP(tail_flat(down(n__incr(x0))))
   TOP(up(tail(adx(x0)))) -> TOP(tail_flat(down(adx(x0))))
   TOP(up(tail(n__adx(x0)))) -> TOP(tail_flat(down(n__adx(x0))))
   TOP(up(tail(zeros))) -> TOP(tail_flat(down(zeros)))
   TOP(up(tail(head(x0)))) -> TOP(tail_flat(down(head(x0))))
   TOP(up(tail(tail(x0)))) -> TOP(tail_flat(down(tail(x0))))

The TRS R consists of the following rules:

   down(incr(nil)) -> up(nil)
   down(incr(cons(X, L))) -> up(cons(s(X), n__incr(activate(L))))
   down(adx(cons(X, L))) -> up(incr(cons(X, n__adx(activate(L)))))
   down(zeros) -> up(cons(0, n__zeros))
   down(incr(X)) -> up(n__incr(X))
   down(adx(X)) -> up(n__adx(X))
   down(zeros) -> up(n__zeros)
   down(activate(n__incr(X))) -> up(incr(X))
   down(activate(n__adx(X))) -> up(adx(X))
   down(activate(n__zeros)) -> up(zeros)
   down(activate(X)) -> up(X)
   down(cons(y1, y2)) -> cons_flat(down(y1), block(y2))
   down(cons(y1, y2)) -> cons_flat(block(y1), down(y2))
   down(s(y3)) -> s_flat(down(y3))
   down(n__incr(y4)) -> n__incr_flat(down(y4))
   down(n__adx(y7)) -> n__adx_flat(down(y7))
   down(head(incr(y11))) -> head_flat(down(incr(y11)))
   down(head(nil)) -> head_flat(down(nil))
   down(head(s(y14))) -> head_flat(down(s(y14)))
   down(head(n__incr(y15))) -> head_flat(down(n__incr(y15)))
   down(head(activate(y16))) -> head_flat(down(activate(y16)))
   down(head(adx(y17))) -> head_flat(down(adx(y17)))
   down(head(n__adx(y18))) -> head_flat(down(n__adx(y18)))
   down(head(nats)) -> head_flat(down(nats))
   down(head(zeros)) -> head_flat(down(zeros))
   down(head(0)) -> head_flat(down(0))
   down(head(n__zeros)) -> head_flat(down(n__zeros))
   down(head(head(y19))) -> head_flat(down(head(y19)))
   down(head(tail(y20))) -> head_flat(down(tail(y20)))
   down(head(fresh_constant)) -> head_flat(down(fresh_constant))
   down(tail(incr(y22))) -> tail_flat(down(incr(y22)))
   down(tail(nil)) -> tail_flat(down(nil))
   down(tail(s(y25))) -> tail_flat(down(s(y25)))
   down(tail(n__incr(y26))) -> tail_flat(down(n__incr(y26)))
   down(tail(activate(y27))) -> tail_flat(down(activate(y27)))
   down(tail(adx(y28))) -> tail_flat(down(adx(y28)))
   down(tail(n__adx(y29))) -> tail_flat(down(n__adx(y29)))
   down(tail(nats)) -> tail_flat(down(nats))
   down(tail(zeros)) -> tail_flat(down(zeros))
   down(tail(0)) -> tail_flat(down(0))
   down(tail(n__zeros)) -> tail_flat(down(n__zeros))
   down(tail(head(y30))) -> tail_flat(down(head(y30)))
   down(tail(tail(y31))) -> tail_flat(down(tail(y31)))
   down(tail(fresh_constant)) -> tail_flat(down(fresh_constant))
   tail_flat(up(x_1)) -> up(tail(x_1))
   head_flat(up(x_1)) -> up(head(x_1))
   n__adx_flat(up(x_1)) -> up(n__adx(x_1))
   n__incr_flat(up(x_1)) -> up(n__incr(x_1))
   s_flat(up(x_1)) -> up(s(x_1))
   cons_flat(block(x_1), up(x_2)) -> up(cons(x_1, x_2))
   cons_flat(up(x_1), block(x_2)) -> up(cons(x_1, x_2))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(41) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   TOP(up(tail(adx(x0)))) -> TOP(tail_flat(down(adx(x0))))
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO]:

Non-tuple symbols: 
<<<
 M( s_flat_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( nats ) =  	[[0], [0]]
>>>

<<<
 M( block_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( n__incr_flat_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( head_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( cons_flat_2(x_1, x_2) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1 	+ 	[[0, 0], [0, 0]] 	* 	x_2
>>>

<<<
 M( incr_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( activate_1(x_1) ) =  	[[1], [1]] 	+ 	[[0, 1], [0, 1]] 	* 	x_1
>>>

<<<
 M( n__adx_flat_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( nil ) =  	[[0], [0]]
>>>

<<<
 M( adx_1(x_1) ) =  	[[0], [1]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( s_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( tail_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 1], [0, 1]] 	* 	x_1
>>>

<<<
 M( n__zeros ) =  	[[0], [0]]
>>>

<<<
 M( n__incr_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( n__adx_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( down_1(x_1) ) =  	[[0], [0]] 	+ 	[[1, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( zeros ) =  	[[0], [0]]
>>>

<<<
 M( 0 ) =  	[[0], [0]]
>>>

<<<
 M( fresh_constant ) =  	[[0], [0]]
>>>

<<<
 M( up_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 1], [0, 0]] 	* 	x_1
>>>

<<<
 M( cons_2(x_1, x_2) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1 	+ 	[[0, 0], [0, 0]] 	* 	x_2
>>>

<<<
 M( tail_flat_1(x_1) ) =  	[[0], [0]] 	+ 	[[1, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( head_flat_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

Tuple symbols: 
<<<
 M( TOP_1(x_1) ) =  	[[0]] 	+ 	[[1, 0]] 	* 	x_1
>>>



Matrix type: 

We used a basic matrix type which is not further parametrizeable.





As matrix orders are CE-compatible, we used usable rules w.r.t. argument filtering in the order.
The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   down(incr(nil)) -> up(nil)
   down(incr(cons(X, L))) -> up(cons(s(X), n__incr(activate(L))))
   down(adx(cons(X, L))) -> up(incr(cons(X, n__adx(activate(L)))))
   down(zeros) -> up(cons(0, n__zeros))
   down(incr(X)) -> up(n__incr(X))
   down(adx(X)) -> up(n__adx(X))
   down(zeros) -> up(n__zeros)
   down(activate(n__incr(X))) -> up(incr(X))
   down(activate(n__adx(X))) -> up(adx(X))
   down(activate(n__zeros)) -> up(zeros)
   down(activate(X)) -> up(X)
   down(cons(y1, y2)) -> cons_flat(down(y1), block(y2))
   down(cons(y1, y2)) -> cons_flat(block(y1), down(y2))
   down(s(y3)) -> s_flat(down(y3))
   down(n__incr(y4)) -> n__incr_flat(down(y4))
   down(n__adx(y7)) -> n__adx_flat(down(y7))
   down(head(incr(y11))) -> head_flat(down(incr(y11)))
   down(head(nil)) -> head_flat(down(nil))
   down(head(s(y14))) -> head_flat(down(s(y14)))
   down(head(n__incr(y15))) -> head_flat(down(n__incr(y15)))
   down(head(activate(y16))) -> head_flat(down(activate(y16)))
   down(head(adx(y17))) -> head_flat(down(adx(y17)))
   down(head(n__adx(y18))) -> head_flat(down(n__adx(y18)))
   down(head(nats)) -> head_flat(down(nats))
   down(head(zeros)) -> head_flat(down(zeros))
   down(head(0)) -> head_flat(down(0))
   down(head(n__zeros)) -> head_flat(down(n__zeros))
   down(head(head(y19))) -> head_flat(down(head(y19)))
   down(head(tail(y20))) -> head_flat(down(tail(y20)))
   down(head(fresh_constant)) -> head_flat(down(fresh_constant))
   down(tail(incr(y22))) -> tail_flat(down(incr(y22)))
   down(tail(nil)) -> tail_flat(down(nil))
   down(tail(s(y25))) -> tail_flat(down(s(y25)))
   down(tail(n__incr(y26))) -> tail_flat(down(n__incr(y26)))
   down(tail(activate(y27))) -> tail_flat(down(activate(y27)))
   down(tail(adx(y28))) -> tail_flat(down(adx(y28)))
   down(tail(n__adx(y29))) -> tail_flat(down(n__adx(y29)))
   down(tail(nats)) -> tail_flat(down(nats))
   down(tail(zeros)) -> tail_flat(down(zeros))
   down(tail(0)) -> tail_flat(down(0))
   down(tail(n__zeros)) -> tail_flat(down(n__zeros))
   down(tail(head(y30))) -> tail_flat(down(head(y30)))
   down(tail(tail(y31))) -> tail_flat(down(tail(y31)))
   down(tail(fresh_constant)) -> tail_flat(down(fresh_constant))
   cons_flat(up(x_1), block(x_2)) -> up(cons(x_1, x_2))
   cons_flat(block(x_1), up(x_2)) -> up(cons(x_1, x_2))
   s_flat(up(x_1)) -> up(s(x_1))
   n__incr_flat(up(x_1)) -> up(n__incr(x_1))
   n__adx_flat(up(x_1)) -> up(n__adx(x_1))
   head_flat(up(x_1)) -> up(head(x_1))
   tail_flat(up(x_1)) -> up(tail(x_1))


----------------------------------------

(42)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(up(cons(x0, x1))) -> TOP(cons_flat(down(x0), block(x1)))
   TOP(up(cons(x0, x1))) -> TOP(cons_flat(block(x0), down(x1)))
   TOP(up(s(x0))) -> TOP(s_flat(down(x0)))
   TOP(up(n__incr(x0))) -> TOP(n__incr_flat(down(x0)))
   TOP(up(n__adx(x0))) -> TOP(n__adx_flat(down(x0)))
   TOP(up(head(incr(x0)))) -> TOP(head_flat(down(incr(x0))))
   TOP(up(head(s(x0)))) -> TOP(head_flat(down(s(x0))))
   TOP(up(head(n__incr(x0)))) -> TOP(head_flat(down(n__incr(x0))))
   TOP(up(head(adx(x0)))) -> TOP(head_flat(down(adx(x0))))
   TOP(up(head(n__adx(x0)))) -> TOP(head_flat(down(n__adx(x0))))
   TOP(up(head(head(x0)))) -> TOP(head_flat(down(head(x0))))
   TOP(up(head(tail(x0)))) -> TOP(head_flat(down(tail(x0))))
   TOP(up(tail(incr(x0)))) -> TOP(tail_flat(down(incr(x0))))
   TOP(up(tail(s(x0)))) -> TOP(tail_flat(down(s(x0))))
   TOP(up(tail(n__incr(x0)))) -> TOP(tail_flat(down(n__incr(x0))))
   TOP(up(tail(n__adx(x0)))) -> TOP(tail_flat(down(n__adx(x0))))
   TOP(up(tail(zeros))) -> TOP(tail_flat(down(zeros)))
   TOP(up(tail(head(x0)))) -> TOP(tail_flat(down(head(x0))))
   TOP(up(tail(tail(x0)))) -> TOP(tail_flat(down(tail(x0))))

The TRS R consists of the following rules:

   down(incr(nil)) -> up(nil)
   down(incr(cons(X, L))) -> up(cons(s(X), n__incr(activate(L))))
   down(adx(cons(X, L))) -> up(incr(cons(X, n__adx(activate(L)))))
   down(zeros) -> up(cons(0, n__zeros))
   down(incr(X)) -> up(n__incr(X))
   down(adx(X)) -> up(n__adx(X))
   down(zeros) -> up(n__zeros)
   down(activate(n__incr(X))) -> up(incr(X))
   down(activate(n__adx(X))) -> up(adx(X))
   down(activate(n__zeros)) -> up(zeros)
   down(activate(X)) -> up(X)
   down(cons(y1, y2)) -> cons_flat(down(y1), block(y2))
   down(cons(y1, y2)) -> cons_flat(block(y1), down(y2))
   down(s(y3)) -> s_flat(down(y3))
   down(n__incr(y4)) -> n__incr_flat(down(y4))
   down(n__adx(y7)) -> n__adx_flat(down(y7))
   down(head(incr(y11))) -> head_flat(down(incr(y11)))
   down(head(nil)) -> head_flat(down(nil))
   down(head(s(y14))) -> head_flat(down(s(y14)))
   down(head(n__incr(y15))) -> head_flat(down(n__incr(y15)))
   down(head(activate(y16))) -> head_flat(down(activate(y16)))
   down(head(adx(y17))) -> head_flat(down(adx(y17)))
   down(head(n__adx(y18))) -> head_flat(down(n__adx(y18)))
   down(head(nats)) -> head_flat(down(nats))
   down(head(zeros)) -> head_flat(down(zeros))
   down(head(0)) -> head_flat(down(0))
   down(head(n__zeros)) -> head_flat(down(n__zeros))
   down(head(head(y19))) -> head_flat(down(head(y19)))
   down(head(tail(y20))) -> head_flat(down(tail(y20)))
   down(head(fresh_constant)) -> head_flat(down(fresh_constant))
   down(tail(incr(y22))) -> tail_flat(down(incr(y22)))
   down(tail(nil)) -> tail_flat(down(nil))
   down(tail(s(y25))) -> tail_flat(down(s(y25)))
   down(tail(n__incr(y26))) -> tail_flat(down(n__incr(y26)))
   down(tail(activate(y27))) -> tail_flat(down(activate(y27)))
   down(tail(adx(y28))) -> tail_flat(down(adx(y28)))
   down(tail(n__adx(y29))) -> tail_flat(down(n__adx(y29)))
   down(tail(nats)) -> tail_flat(down(nats))
   down(tail(zeros)) -> tail_flat(down(zeros))
   down(tail(0)) -> tail_flat(down(0))
   down(tail(n__zeros)) -> tail_flat(down(n__zeros))
   down(tail(head(y30))) -> tail_flat(down(head(y30)))
   down(tail(tail(y31))) -> tail_flat(down(tail(y31)))
   down(tail(fresh_constant)) -> tail_flat(down(fresh_constant))
   tail_flat(up(x_1)) -> up(tail(x_1))
   head_flat(up(x_1)) -> up(head(x_1))
   n__adx_flat(up(x_1)) -> up(n__adx(x_1))
   n__incr_flat(up(x_1)) -> up(n__incr(x_1))
   s_flat(up(x_1)) -> up(s(x_1))
   cons_flat(block(x_1), up(x_2)) -> up(cons(x_1, x_2))
   cons_flat(up(x_1), block(x_2)) -> up(cons(x_1, x_2))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(43) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   TOP(up(tail(incr(x0)))) -> TOP(tail_flat(down(incr(x0))))
   TOP(up(tail(zeros))) -> TOP(tail_flat(down(zeros)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO]:

Non-tuple symbols: 
<<<
 M( s_flat_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( nats ) =  	[[0], [0]]
>>>

<<<
 M( block_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( n__incr_flat_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( head_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( cons_flat_2(x_1, x_2) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1 	+ 	[[0, 0], [0, 0]] 	* 	x_2
>>>

<<<
 M( incr_1(x_1) ) =  	[[1], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( activate_1(x_1) ) =  	[[1], [1]] 	+ 	[[1, 0], [1, 0]] 	* 	x_1
>>>

<<<
 M( n__adx_flat_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( nil ) =  	[[0], [0]]
>>>

<<<
 M( adx_1(x_1) ) =  	[[1], [1]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( s_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( tail_1(x_1) ) =  	[[0], [0]] 	+ 	[[1, 0], [1, 0]] 	* 	x_1
>>>

<<<
 M( n__zeros ) =  	[[0], [0]]
>>>

<<<
 M( n__incr_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( n__adx_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( down_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 1], [0, 0]] 	* 	x_1
>>>

<<<
 M( zeros ) =  	[[1], [0]]
>>>

<<<
 M( 0 ) =  	[[0], [0]]
>>>

<<<
 M( fresh_constant ) =  	[[0], [0]]
>>>

<<<
 M( up_1(x_1) ) =  	[[0], [0]] 	+ 	[[1, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( cons_2(x_1, x_2) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1 	+ 	[[0, 0], [0, 0]] 	* 	x_2
>>>

<<<
 M( tail_flat_1(x_1) ) =  	[[0], [0]] 	+ 	[[1, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( head_flat_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

Tuple symbols: 
<<<
 M( TOP_1(x_1) ) =  	[[0]] 	+ 	[[1, 0]] 	* 	x_1
>>>



Matrix type: 

We used a basic matrix type which is not further parametrizeable.





As matrix orders are CE-compatible, we used usable rules w.r.t. argument filtering in the order.
The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   down(incr(nil)) -> up(nil)
   down(incr(cons(X, L))) -> up(cons(s(X), n__incr(activate(L))))
   down(adx(cons(X, L))) -> up(incr(cons(X, n__adx(activate(L)))))
   down(zeros) -> up(cons(0, n__zeros))
   down(incr(X)) -> up(n__incr(X))
   down(adx(X)) -> up(n__adx(X))
   down(zeros) -> up(n__zeros)
   down(activate(n__incr(X))) -> up(incr(X))
   down(activate(n__adx(X))) -> up(adx(X))
   down(activate(n__zeros)) -> up(zeros)
   down(activate(X)) -> up(X)
   down(cons(y1, y2)) -> cons_flat(down(y1), block(y2))
   down(cons(y1, y2)) -> cons_flat(block(y1), down(y2))
   down(s(y3)) -> s_flat(down(y3))
   down(n__incr(y4)) -> n__incr_flat(down(y4))
   down(n__adx(y7)) -> n__adx_flat(down(y7))
   down(head(incr(y11))) -> head_flat(down(incr(y11)))
   down(head(nil)) -> head_flat(down(nil))
   down(head(s(y14))) -> head_flat(down(s(y14)))
   down(head(n__incr(y15))) -> head_flat(down(n__incr(y15)))
   down(head(activate(y16))) -> head_flat(down(activate(y16)))
   down(head(adx(y17))) -> head_flat(down(adx(y17)))
   down(head(n__adx(y18))) -> head_flat(down(n__adx(y18)))
   down(head(nats)) -> head_flat(down(nats))
   down(head(zeros)) -> head_flat(down(zeros))
   down(head(0)) -> head_flat(down(0))
   down(head(n__zeros)) -> head_flat(down(n__zeros))
   down(head(head(y19))) -> head_flat(down(head(y19)))
   down(head(tail(y20))) -> head_flat(down(tail(y20)))
   down(head(fresh_constant)) -> head_flat(down(fresh_constant))
   down(tail(incr(y22))) -> tail_flat(down(incr(y22)))
   down(tail(nil)) -> tail_flat(down(nil))
   down(tail(s(y25))) -> tail_flat(down(s(y25)))
   down(tail(n__incr(y26))) -> tail_flat(down(n__incr(y26)))
   down(tail(activate(y27))) -> tail_flat(down(activate(y27)))
   down(tail(adx(y28))) -> tail_flat(down(adx(y28)))
   down(tail(n__adx(y29))) -> tail_flat(down(n__adx(y29)))
   down(tail(nats)) -> tail_flat(down(nats))
   down(tail(zeros)) -> tail_flat(down(zeros))
   down(tail(0)) -> tail_flat(down(0))
   down(tail(n__zeros)) -> tail_flat(down(n__zeros))
   down(tail(head(y30))) -> tail_flat(down(head(y30)))
   down(tail(tail(y31))) -> tail_flat(down(tail(y31)))
   down(tail(fresh_constant)) -> tail_flat(down(fresh_constant))
   cons_flat(up(x_1), block(x_2)) -> up(cons(x_1, x_2))
   cons_flat(block(x_1), up(x_2)) -> up(cons(x_1, x_2))
   s_flat(up(x_1)) -> up(s(x_1))
   n__incr_flat(up(x_1)) -> up(n__incr(x_1))
   n__adx_flat(up(x_1)) -> up(n__adx(x_1))
   head_flat(up(x_1)) -> up(head(x_1))
   tail_flat(up(x_1)) -> up(tail(x_1))


----------------------------------------

(44)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(up(cons(x0, x1))) -> TOP(cons_flat(down(x0), block(x1)))
   TOP(up(cons(x0, x1))) -> TOP(cons_flat(block(x0), down(x1)))
   TOP(up(s(x0))) -> TOP(s_flat(down(x0)))
   TOP(up(n__incr(x0))) -> TOP(n__incr_flat(down(x0)))
   TOP(up(n__adx(x0))) -> TOP(n__adx_flat(down(x0)))
   TOP(up(head(incr(x0)))) -> TOP(head_flat(down(incr(x0))))
   TOP(up(head(s(x0)))) -> TOP(head_flat(down(s(x0))))
   TOP(up(head(n__incr(x0)))) -> TOP(head_flat(down(n__incr(x0))))
   TOP(up(head(adx(x0)))) -> TOP(head_flat(down(adx(x0))))
   TOP(up(head(n__adx(x0)))) -> TOP(head_flat(down(n__adx(x0))))
   TOP(up(head(head(x0)))) -> TOP(head_flat(down(head(x0))))
   TOP(up(head(tail(x0)))) -> TOP(head_flat(down(tail(x0))))
   TOP(up(tail(s(x0)))) -> TOP(tail_flat(down(s(x0))))
   TOP(up(tail(n__incr(x0)))) -> TOP(tail_flat(down(n__incr(x0))))
   TOP(up(tail(n__adx(x0)))) -> TOP(tail_flat(down(n__adx(x0))))
   TOP(up(tail(head(x0)))) -> TOP(tail_flat(down(head(x0))))
   TOP(up(tail(tail(x0)))) -> TOP(tail_flat(down(tail(x0))))

The TRS R consists of the following rules:

   down(incr(nil)) -> up(nil)
   down(incr(cons(X, L))) -> up(cons(s(X), n__incr(activate(L))))
   down(adx(cons(X, L))) -> up(incr(cons(X, n__adx(activate(L)))))
   down(zeros) -> up(cons(0, n__zeros))
   down(incr(X)) -> up(n__incr(X))
   down(adx(X)) -> up(n__adx(X))
   down(zeros) -> up(n__zeros)
   down(activate(n__incr(X))) -> up(incr(X))
   down(activate(n__adx(X))) -> up(adx(X))
   down(activate(n__zeros)) -> up(zeros)
   down(activate(X)) -> up(X)
   down(cons(y1, y2)) -> cons_flat(down(y1), block(y2))
   down(cons(y1, y2)) -> cons_flat(block(y1), down(y2))
   down(s(y3)) -> s_flat(down(y3))
   down(n__incr(y4)) -> n__incr_flat(down(y4))
   down(n__adx(y7)) -> n__adx_flat(down(y7))
   down(head(incr(y11))) -> head_flat(down(incr(y11)))
   down(head(nil)) -> head_flat(down(nil))
   down(head(s(y14))) -> head_flat(down(s(y14)))
   down(head(n__incr(y15))) -> head_flat(down(n__incr(y15)))
   down(head(activate(y16))) -> head_flat(down(activate(y16)))
   down(head(adx(y17))) -> head_flat(down(adx(y17)))
   down(head(n__adx(y18))) -> head_flat(down(n__adx(y18)))
   down(head(nats)) -> head_flat(down(nats))
   down(head(zeros)) -> head_flat(down(zeros))
   down(head(0)) -> head_flat(down(0))
   down(head(n__zeros)) -> head_flat(down(n__zeros))
   down(head(head(y19))) -> head_flat(down(head(y19)))
   down(head(tail(y20))) -> head_flat(down(tail(y20)))
   down(head(fresh_constant)) -> head_flat(down(fresh_constant))
   down(tail(incr(y22))) -> tail_flat(down(incr(y22)))
   down(tail(nil)) -> tail_flat(down(nil))
   down(tail(s(y25))) -> tail_flat(down(s(y25)))
   down(tail(n__incr(y26))) -> tail_flat(down(n__incr(y26)))
   down(tail(activate(y27))) -> tail_flat(down(activate(y27)))
   down(tail(adx(y28))) -> tail_flat(down(adx(y28)))
   down(tail(n__adx(y29))) -> tail_flat(down(n__adx(y29)))
   down(tail(nats)) -> tail_flat(down(nats))
   down(tail(zeros)) -> tail_flat(down(zeros))
   down(tail(0)) -> tail_flat(down(0))
   down(tail(n__zeros)) -> tail_flat(down(n__zeros))
   down(tail(head(y30))) -> tail_flat(down(head(y30)))
   down(tail(tail(y31))) -> tail_flat(down(tail(y31)))
   down(tail(fresh_constant)) -> tail_flat(down(fresh_constant))
   tail_flat(up(x_1)) -> up(tail(x_1))
   head_flat(up(x_1)) -> up(head(x_1))
   n__adx_flat(up(x_1)) -> up(n__adx(x_1))
   n__incr_flat(up(x_1)) -> up(n__incr(x_1))
   s_flat(up(x_1)) -> up(s(x_1))
   cons_flat(block(x_1), up(x_2)) -> up(cons(x_1, x_2))
   cons_flat(up(x_1), block(x_2)) -> up(cons(x_1, x_2))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(45) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   TOP(up(head(adx(x0)))) -> TOP(head_flat(down(adx(x0))))
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO]:

Non-tuple symbols: 
<<<
 M( s_flat_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( nats ) =  	[[0], [0]]
>>>

<<<
 M( block_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( n__incr_flat_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( head_1(x_1) ) =  	[[0], [0]] 	+ 	[[1, 0], [1, 0]] 	* 	x_1
>>>

<<<
 M( cons_flat_2(x_1, x_2) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1 	+ 	[[0, 0], [0, 0]] 	* 	x_2
>>>

<<<
 M( incr_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( activate_1(x_1) ) =  	[[1], [1]] 	+ 	[[1, 0], [1, 0]] 	* 	x_1
>>>

<<<
 M( n__adx_flat_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( nil ) =  	[[0], [0]]
>>>

<<<
 M( adx_1(x_1) ) =  	[[1], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( s_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( tail_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( n__zeros ) =  	[[0], [0]]
>>>

<<<
 M( n__incr_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( n__adx_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( down_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 1]] 	* 	x_1
>>>

<<<
 M( zeros ) =  	[[0], [0]]
>>>

<<<
 M( 0 ) =  	[[0], [0]]
>>>

<<<
 M( fresh_constant ) =  	[[0], [0]]
>>>

<<<
 M( up_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [1, 0]] 	* 	x_1
>>>

<<<
 M( cons_2(x_1, x_2) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1 	+ 	[[0, 0], [0, 0]] 	* 	x_2
>>>

<<<
 M( tail_flat_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( head_flat_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 1]] 	* 	x_1
>>>

Tuple symbols: 
<<<
 M( TOP_1(x_1) ) =  	[[0]] 	+ 	[[0, 1]] 	* 	x_1
>>>



Matrix type: 

We used a basic matrix type which is not further parametrizeable.





As matrix orders are CE-compatible, we used usable rules w.r.t. argument filtering in the order.
The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   down(incr(nil)) -> up(nil)
   down(incr(cons(X, L))) -> up(cons(s(X), n__incr(activate(L))))
   down(adx(cons(X, L))) -> up(incr(cons(X, n__adx(activate(L)))))
   down(zeros) -> up(cons(0, n__zeros))
   down(incr(X)) -> up(n__incr(X))
   down(adx(X)) -> up(n__adx(X))
   down(zeros) -> up(n__zeros)
   down(activate(n__incr(X))) -> up(incr(X))
   down(activate(n__adx(X))) -> up(adx(X))
   down(activate(n__zeros)) -> up(zeros)
   down(activate(X)) -> up(X)
   down(cons(y1, y2)) -> cons_flat(down(y1), block(y2))
   down(cons(y1, y2)) -> cons_flat(block(y1), down(y2))
   down(s(y3)) -> s_flat(down(y3))
   down(n__incr(y4)) -> n__incr_flat(down(y4))
   down(n__adx(y7)) -> n__adx_flat(down(y7))
   down(head(incr(y11))) -> head_flat(down(incr(y11)))
   down(head(nil)) -> head_flat(down(nil))
   down(head(s(y14))) -> head_flat(down(s(y14)))
   down(head(n__incr(y15))) -> head_flat(down(n__incr(y15)))
   down(head(activate(y16))) -> head_flat(down(activate(y16)))
   down(head(adx(y17))) -> head_flat(down(adx(y17)))
   down(head(n__adx(y18))) -> head_flat(down(n__adx(y18)))
   down(head(nats)) -> head_flat(down(nats))
   down(head(zeros)) -> head_flat(down(zeros))
   down(head(0)) -> head_flat(down(0))
   down(head(n__zeros)) -> head_flat(down(n__zeros))
   down(head(head(y19))) -> head_flat(down(head(y19)))
   down(head(tail(y20))) -> head_flat(down(tail(y20)))
   down(head(fresh_constant)) -> head_flat(down(fresh_constant))
   down(tail(incr(y22))) -> tail_flat(down(incr(y22)))
   down(tail(nil)) -> tail_flat(down(nil))
   down(tail(s(y25))) -> tail_flat(down(s(y25)))
   down(tail(n__incr(y26))) -> tail_flat(down(n__incr(y26)))
   down(tail(activate(y27))) -> tail_flat(down(activate(y27)))
   down(tail(adx(y28))) -> tail_flat(down(adx(y28)))
   down(tail(n__adx(y29))) -> tail_flat(down(n__adx(y29)))
   down(tail(nats)) -> tail_flat(down(nats))
   down(tail(zeros)) -> tail_flat(down(zeros))
   down(tail(0)) -> tail_flat(down(0))
   down(tail(n__zeros)) -> tail_flat(down(n__zeros))
   down(tail(head(y30))) -> tail_flat(down(head(y30)))
   down(tail(tail(y31))) -> tail_flat(down(tail(y31)))
   down(tail(fresh_constant)) -> tail_flat(down(fresh_constant))
   cons_flat(up(x_1), block(x_2)) -> up(cons(x_1, x_2))
   cons_flat(block(x_1), up(x_2)) -> up(cons(x_1, x_2))
   s_flat(up(x_1)) -> up(s(x_1))
   n__incr_flat(up(x_1)) -> up(n__incr(x_1))
   n__adx_flat(up(x_1)) -> up(n__adx(x_1))
   head_flat(up(x_1)) -> up(head(x_1))
   tail_flat(up(x_1)) -> up(tail(x_1))


----------------------------------------

(46)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(up(cons(x0, x1))) -> TOP(cons_flat(down(x0), block(x1)))
   TOP(up(cons(x0, x1))) -> TOP(cons_flat(block(x0), down(x1)))
   TOP(up(s(x0))) -> TOP(s_flat(down(x0)))
   TOP(up(n__incr(x0))) -> TOP(n__incr_flat(down(x0)))
   TOP(up(n__adx(x0))) -> TOP(n__adx_flat(down(x0)))
   TOP(up(head(incr(x0)))) -> TOP(head_flat(down(incr(x0))))
   TOP(up(head(s(x0)))) -> TOP(head_flat(down(s(x0))))
   TOP(up(head(n__incr(x0)))) -> TOP(head_flat(down(n__incr(x0))))
   TOP(up(head(n__adx(x0)))) -> TOP(head_flat(down(n__adx(x0))))
   TOP(up(head(head(x0)))) -> TOP(head_flat(down(head(x0))))
   TOP(up(head(tail(x0)))) -> TOP(head_flat(down(tail(x0))))
   TOP(up(tail(s(x0)))) -> TOP(tail_flat(down(s(x0))))
   TOP(up(tail(n__incr(x0)))) -> TOP(tail_flat(down(n__incr(x0))))
   TOP(up(tail(n__adx(x0)))) -> TOP(tail_flat(down(n__adx(x0))))
   TOP(up(tail(head(x0)))) -> TOP(tail_flat(down(head(x0))))
   TOP(up(tail(tail(x0)))) -> TOP(tail_flat(down(tail(x0))))

The TRS R consists of the following rules:

   down(incr(nil)) -> up(nil)
   down(incr(cons(X, L))) -> up(cons(s(X), n__incr(activate(L))))
   down(adx(cons(X, L))) -> up(incr(cons(X, n__adx(activate(L)))))
   down(zeros) -> up(cons(0, n__zeros))
   down(incr(X)) -> up(n__incr(X))
   down(adx(X)) -> up(n__adx(X))
   down(zeros) -> up(n__zeros)
   down(activate(n__incr(X))) -> up(incr(X))
   down(activate(n__adx(X))) -> up(adx(X))
   down(activate(n__zeros)) -> up(zeros)
   down(activate(X)) -> up(X)
   down(cons(y1, y2)) -> cons_flat(down(y1), block(y2))
   down(cons(y1, y2)) -> cons_flat(block(y1), down(y2))
   down(s(y3)) -> s_flat(down(y3))
   down(n__incr(y4)) -> n__incr_flat(down(y4))
   down(n__adx(y7)) -> n__adx_flat(down(y7))
   down(head(incr(y11))) -> head_flat(down(incr(y11)))
   down(head(nil)) -> head_flat(down(nil))
   down(head(s(y14))) -> head_flat(down(s(y14)))
   down(head(n__incr(y15))) -> head_flat(down(n__incr(y15)))
   down(head(activate(y16))) -> head_flat(down(activate(y16)))
   down(head(adx(y17))) -> head_flat(down(adx(y17)))
   down(head(n__adx(y18))) -> head_flat(down(n__adx(y18)))
   down(head(nats)) -> head_flat(down(nats))
   down(head(zeros)) -> head_flat(down(zeros))
   down(head(0)) -> head_flat(down(0))
   down(head(n__zeros)) -> head_flat(down(n__zeros))
   down(head(head(y19))) -> head_flat(down(head(y19)))
   down(head(tail(y20))) -> head_flat(down(tail(y20)))
   down(head(fresh_constant)) -> head_flat(down(fresh_constant))
   down(tail(incr(y22))) -> tail_flat(down(incr(y22)))
   down(tail(nil)) -> tail_flat(down(nil))
   down(tail(s(y25))) -> tail_flat(down(s(y25)))
   down(tail(n__incr(y26))) -> tail_flat(down(n__incr(y26)))
   down(tail(activate(y27))) -> tail_flat(down(activate(y27)))
   down(tail(adx(y28))) -> tail_flat(down(adx(y28)))
   down(tail(n__adx(y29))) -> tail_flat(down(n__adx(y29)))
   down(tail(nats)) -> tail_flat(down(nats))
   down(tail(zeros)) -> tail_flat(down(zeros))
   down(tail(0)) -> tail_flat(down(0))
   down(tail(n__zeros)) -> tail_flat(down(n__zeros))
   down(tail(head(y30))) -> tail_flat(down(head(y30)))
   down(tail(tail(y31))) -> tail_flat(down(tail(y31)))
   down(tail(fresh_constant)) -> tail_flat(down(fresh_constant))
   tail_flat(up(x_1)) -> up(tail(x_1))
   head_flat(up(x_1)) -> up(head(x_1))
   n__adx_flat(up(x_1)) -> up(n__adx(x_1))
   n__incr_flat(up(x_1)) -> up(n__incr(x_1))
   s_flat(up(x_1)) -> up(s(x_1))
   cons_flat(block(x_1), up(x_2)) -> up(cons(x_1, x_2))
   cons_flat(up(x_1), block(x_2)) -> up(cons(x_1, x_2))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(47) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   TOP(up(head(incr(x0)))) -> TOP(head_flat(down(incr(x0))))
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO]:

Non-tuple symbols: 
<<<
 M( s_flat_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( nats ) =  	[[0], [0]]
>>>

<<<
 M( block_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( n__incr_flat_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( head_1(x_1) ) =  	[[0], [0]] 	+ 	[[1, 0], [1, 0]] 	* 	x_1
>>>

<<<
 M( cons_flat_2(x_1, x_2) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1 	+ 	[[0, 0], [0, 0]] 	* 	x_2
>>>

<<<
 M( incr_1(x_1) ) =  	[[1], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( activate_1(x_1) ) =  	[[1], [1]] 	+ 	[[1, 0], [1, 0]] 	* 	x_1
>>>

<<<
 M( n__adx_flat_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( nil ) =  	[[0], [0]]
>>>

<<<
 M( adx_1(x_1) ) =  	[[1], [1]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( s_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( tail_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( n__zeros ) =  	[[0], [0]]
>>>

<<<
 M( n__incr_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( n__adx_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( down_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 1], [0, 0]] 	* 	x_1
>>>

<<<
 M( zeros ) =  	[[0], [0]]
>>>

<<<
 M( 0 ) =  	[[0], [0]]
>>>

<<<
 M( fresh_constant ) =  	[[0], [0]]
>>>

<<<
 M( up_1(x_1) ) =  	[[0], [0]] 	+ 	[[1, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( cons_2(x_1, x_2) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1 	+ 	[[0, 0], [0, 0]] 	* 	x_2
>>>

<<<
 M( tail_flat_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( head_flat_1(x_1) ) =  	[[0], [0]] 	+ 	[[1, 1], [0, 0]] 	* 	x_1
>>>

Tuple symbols: 
<<<
 M( TOP_1(x_1) ) =  	[[0]] 	+ 	[[1, 0]] 	* 	x_1
>>>



Matrix type: 

We used a basic matrix type which is not further parametrizeable.





As matrix orders are CE-compatible, we used usable rules w.r.t. argument filtering in the order.
The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   down(incr(nil)) -> up(nil)
   down(incr(cons(X, L))) -> up(cons(s(X), n__incr(activate(L))))
   down(adx(cons(X, L))) -> up(incr(cons(X, n__adx(activate(L)))))
   down(zeros) -> up(cons(0, n__zeros))
   down(incr(X)) -> up(n__incr(X))
   down(adx(X)) -> up(n__adx(X))
   down(zeros) -> up(n__zeros)
   down(activate(n__incr(X))) -> up(incr(X))
   down(activate(n__adx(X))) -> up(adx(X))
   down(activate(n__zeros)) -> up(zeros)
   down(activate(X)) -> up(X)
   down(cons(y1, y2)) -> cons_flat(down(y1), block(y2))
   down(cons(y1, y2)) -> cons_flat(block(y1), down(y2))
   down(s(y3)) -> s_flat(down(y3))
   down(n__incr(y4)) -> n__incr_flat(down(y4))
   down(n__adx(y7)) -> n__adx_flat(down(y7))
   down(head(incr(y11))) -> head_flat(down(incr(y11)))
   down(head(nil)) -> head_flat(down(nil))
   down(head(s(y14))) -> head_flat(down(s(y14)))
   down(head(n__incr(y15))) -> head_flat(down(n__incr(y15)))
   down(head(activate(y16))) -> head_flat(down(activate(y16)))
   down(head(adx(y17))) -> head_flat(down(adx(y17)))
   down(head(n__adx(y18))) -> head_flat(down(n__adx(y18)))
   down(head(nats)) -> head_flat(down(nats))
   down(head(zeros)) -> head_flat(down(zeros))
   down(head(0)) -> head_flat(down(0))
   down(head(n__zeros)) -> head_flat(down(n__zeros))
   down(head(head(y19))) -> head_flat(down(head(y19)))
   down(head(tail(y20))) -> head_flat(down(tail(y20)))
   down(head(fresh_constant)) -> head_flat(down(fresh_constant))
   down(tail(incr(y22))) -> tail_flat(down(incr(y22)))
   down(tail(nil)) -> tail_flat(down(nil))
   down(tail(s(y25))) -> tail_flat(down(s(y25)))
   down(tail(n__incr(y26))) -> tail_flat(down(n__incr(y26)))
   down(tail(activate(y27))) -> tail_flat(down(activate(y27)))
   down(tail(adx(y28))) -> tail_flat(down(adx(y28)))
   down(tail(n__adx(y29))) -> tail_flat(down(n__adx(y29)))
   down(tail(nats)) -> tail_flat(down(nats))
   down(tail(zeros)) -> tail_flat(down(zeros))
   down(tail(0)) -> tail_flat(down(0))
   down(tail(n__zeros)) -> tail_flat(down(n__zeros))
   down(tail(head(y30))) -> tail_flat(down(head(y30)))
   down(tail(tail(y31))) -> tail_flat(down(tail(y31)))
   down(tail(fresh_constant)) -> tail_flat(down(fresh_constant))
   cons_flat(up(x_1), block(x_2)) -> up(cons(x_1, x_2))
   cons_flat(block(x_1), up(x_2)) -> up(cons(x_1, x_2))
   s_flat(up(x_1)) -> up(s(x_1))
   n__incr_flat(up(x_1)) -> up(n__incr(x_1))
   n__adx_flat(up(x_1)) -> up(n__adx(x_1))
   head_flat(up(x_1)) -> up(head(x_1))
   tail_flat(up(x_1)) -> up(tail(x_1))


----------------------------------------

(48)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(up(cons(x0, x1))) -> TOP(cons_flat(down(x0), block(x1)))
   TOP(up(cons(x0, x1))) -> TOP(cons_flat(block(x0), down(x1)))
   TOP(up(s(x0))) -> TOP(s_flat(down(x0)))
   TOP(up(n__incr(x0))) -> TOP(n__incr_flat(down(x0)))
   TOP(up(n__adx(x0))) -> TOP(n__adx_flat(down(x0)))
   TOP(up(head(s(x0)))) -> TOP(head_flat(down(s(x0))))
   TOP(up(head(n__incr(x0)))) -> TOP(head_flat(down(n__incr(x0))))
   TOP(up(head(n__adx(x0)))) -> TOP(head_flat(down(n__adx(x0))))
   TOP(up(head(head(x0)))) -> TOP(head_flat(down(head(x0))))
   TOP(up(head(tail(x0)))) -> TOP(head_flat(down(tail(x0))))
   TOP(up(tail(s(x0)))) -> TOP(tail_flat(down(s(x0))))
   TOP(up(tail(n__incr(x0)))) -> TOP(tail_flat(down(n__incr(x0))))
   TOP(up(tail(n__adx(x0)))) -> TOP(tail_flat(down(n__adx(x0))))
   TOP(up(tail(head(x0)))) -> TOP(tail_flat(down(head(x0))))
   TOP(up(tail(tail(x0)))) -> TOP(tail_flat(down(tail(x0))))

The TRS R consists of the following rules:

   down(incr(nil)) -> up(nil)
   down(incr(cons(X, L))) -> up(cons(s(X), n__incr(activate(L))))
   down(adx(cons(X, L))) -> up(incr(cons(X, n__adx(activate(L)))))
   down(zeros) -> up(cons(0, n__zeros))
   down(incr(X)) -> up(n__incr(X))
   down(adx(X)) -> up(n__adx(X))
   down(zeros) -> up(n__zeros)
   down(activate(n__incr(X))) -> up(incr(X))
   down(activate(n__adx(X))) -> up(adx(X))
   down(activate(n__zeros)) -> up(zeros)
   down(activate(X)) -> up(X)
   down(cons(y1, y2)) -> cons_flat(down(y1), block(y2))
   down(cons(y1, y2)) -> cons_flat(block(y1), down(y2))
   down(s(y3)) -> s_flat(down(y3))
   down(n__incr(y4)) -> n__incr_flat(down(y4))
   down(n__adx(y7)) -> n__adx_flat(down(y7))
   down(head(incr(y11))) -> head_flat(down(incr(y11)))
   down(head(nil)) -> head_flat(down(nil))
   down(head(s(y14))) -> head_flat(down(s(y14)))
   down(head(n__incr(y15))) -> head_flat(down(n__incr(y15)))
   down(head(activate(y16))) -> head_flat(down(activate(y16)))
   down(head(adx(y17))) -> head_flat(down(adx(y17)))
   down(head(n__adx(y18))) -> head_flat(down(n__adx(y18)))
   down(head(nats)) -> head_flat(down(nats))
   down(head(zeros)) -> head_flat(down(zeros))
   down(head(0)) -> head_flat(down(0))
   down(head(n__zeros)) -> head_flat(down(n__zeros))
   down(head(head(y19))) -> head_flat(down(head(y19)))
   down(head(tail(y20))) -> head_flat(down(tail(y20)))
   down(head(fresh_constant)) -> head_flat(down(fresh_constant))
   down(tail(incr(y22))) -> tail_flat(down(incr(y22)))
   down(tail(nil)) -> tail_flat(down(nil))
   down(tail(s(y25))) -> tail_flat(down(s(y25)))
   down(tail(n__incr(y26))) -> tail_flat(down(n__incr(y26)))
   down(tail(activate(y27))) -> tail_flat(down(activate(y27)))
   down(tail(adx(y28))) -> tail_flat(down(adx(y28)))
   down(tail(n__adx(y29))) -> tail_flat(down(n__adx(y29)))
   down(tail(nats)) -> tail_flat(down(nats))
   down(tail(zeros)) -> tail_flat(down(zeros))
   down(tail(0)) -> tail_flat(down(0))
   down(tail(n__zeros)) -> tail_flat(down(n__zeros))
   down(tail(head(y30))) -> tail_flat(down(head(y30)))
   down(tail(tail(y31))) -> tail_flat(down(tail(y31)))
   down(tail(fresh_constant)) -> tail_flat(down(fresh_constant))
   tail_flat(up(x_1)) -> up(tail(x_1))
   head_flat(up(x_1)) -> up(head(x_1))
   n__adx_flat(up(x_1)) -> up(n__adx(x_1))
   n__incr_flat(up(x_1)) -> up(n__incr(x_1))
   s_flat(up(x_1)) -> up(s(x_1))
   cons_flat(block(x_1), up(x_2)) -> up(cons(x_1, x_2))
   cons_flat(up(x_1), block(x_2)) -> up(cons(x_1, x_2))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(49) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   TOP(up(cons(x0, x1))) -> TOP(cons_flat(down(x0), block(x1)))
   TOP(up(cons(x0, x1))) -> TOP(cons_flat(block(x0), down(x1)))
   TOP(up(s(x0))) -> TOP(s_flat(down(x0)))
   TOP(up(n__incr(x0))) -> TOP(n__incr_flat(down(x0)))
   TOP(up(n__adx(x0))) -> TOP(n__adx_flat(down(x0)))
   TOP(up(head(s(x0)))) -> TOP(head_flat(down(s(x0))))
   TOP(up(head(n__incr(x0)))) -> TOP(head_flat(down(n__incr(x0))))
   TOP(up(head(n__adx(x0)))) -> TOP(head_flat(down(n__adx(x0))))
   TOP(up(head(head(x0)))) -> TOP(head_flat(down(head(x0))))
   TOP(up(head(tail(x0)))) -> TOP(head_flat(down(tail(x0))))
   TOP(up(tail(s(x0)))) -> TOP(tail_flat(down(s(x0))))
   TOP(up(tail(n__incr(x0)))) -> TOP(tail_flat(down(n__incr(x0))))
   TOP(up(tail(n__adx(x0)))) -> TOP(tail_flat(down(n__adx(x0))))
   TOP(up(tail(head(x0)))) -> TOP(tail_flat(down(head(x0))))
   TOP(up(tail(tail(x0)))) -> TOP(tail_flat(down(tail(x0))))
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO]:

Non-tuple symbols: 
<<<
 M( s_flat_1(x_1) ) =  	[[1], [0]] 	+ 	[[2, 2], [0, 0]] 	* 	x_1
>>>

<<<
 M( nats ) =  	[[0], [0]]
>>>

<<<
 M( block_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 2], [0, 0]] 	* 	x_1
>>>

<<<
 M( n__incr_flat_1(x_1) ) =  	[[0], [0]] 	+ 	[[1, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( head_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 1]] 	* 	x_1
>>>

<<<
 M( cons_flat_2(x_1, x_2) ) =  	[[0], [0]] 	+ 	[[1, 0], [0, 0]] 	* 	x_1 	+ 	[[2, 0], [0, 0]] 	* 	x_2
>>>

<<<
 M( incr_1(x_1) ) =  	[[0], [1]] 	+ 	[[0, 0], [1, 1]] 	* 	x_1
>>>

<<<
 M( activate_1(x_1) ) =  	[[0], [1]] 	+ 	[[0, 0], [1, 1]] 	* 	x_1
>>>

<<<
 M( n__adx_flat_1(x_1) ) =  	[[0], [0]] 	+ 	[[1, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( nil ) =  	[[0], [0]]
>>>

<<<
 M( adx_1(x_1) ) =  	[[0], [2]] 	+ 	[[0, 0], [3, 1]] 	* 	x_1
>>>

<<<
 M( s_1(x_1) ) =  	[[0], [1]] 	+ 	[[0, 0], [0, 2]] 	* 	x_1
>>>

<<<
 M( tail_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 0], [0, 1]] 	* 	x_1
>>>

<<<
 M( n__zeros ) =  	[[2], [0]]
>>>

<<<
 M( n__incr_1(x_1) ) =  	[[2], [0]] 	+ 	[[1, 0], [0, 1]] 	* 	x_1
>>>

<<<
 M( n__adx_1(x_1) ) =  	[[2], [0]] 	+ 	[[3, 0], [0, 1]] 	* 	x_1
>>>

<<<
 M( down_1(x_1) ) =  	[[0], [0]] 	+ 	[[0, 2], [0, 0]] 	* 	x_1
>>>

<<<
 M( zeros ) =  	[[0], [2]]
>>>

<<<
 M( 0 ) =  	[[0], [0]]
>>>

<<<
 M( fresh_constant ) =  	[[0], [0]]
>>>

<<<
 M( up_1(x_1) ) =  	[[1], [0]] 	+ 	[[0, 2], [0, 0]] 	* 	x_1
>>>

<<<
 M( cons_2(x_1, x_2) ) =  	[[3], [0]] 	+ 	[[0, 1], [0, 1]] 	* 	x_1 	+ 	[[2, 0], [0, 2]] 	* 	x_2
>>>

<<<
 M( tail_flat_1(x_1) ) =  	[[0], [0]] 	+ 	[[1, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( head_flat_1(x_1) ) =  	[[0], [0]] 	+ 	[[1, 0], [0, 0]] 	* 	x_1
>>>

Tuple symbols: 
<<<
 M( TOP_1(x_1) ) =  	[[0]] 	+ 	[[2, 0]] 	* 	x_1
>>>



Matrix type: 

We used a basic matrix type which is not further parametrizeable.





As matrix orders are CE-compatible, we used usable rules w.r.t. argument filtering in the order.
The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   down(incr(nil)) -> up(nil)
   down(incr(cons(X, L))) -> up(cons(s(X), n__incr(activate(L))))
   down(adx(cons(X, L))) -> up(incr(cons(X, n__adx(activate(L)))))
   down(zeros) -> up(cons(0, n__zeros))
   down(incr(X)) -> up(n__incr(X))
   down(adx(X)) -> up(n__adx(X))
   down(zeros) -> up(n__zeros)
   down(activate(n__incr(X))) -> up(incr(X))
   down(activate(n__adx(X))) -> up(adx(X))
   down(activate(n__zeros)) -> up(zeros)
   down(activate(X)) -> up(X)
   down(cons(y1, y2)) -> cons_flat(down(y1), block(y2))
   down(cons(y1, y2)) -> cons_flat(block(y1), down(y2))
   down(s(y3)) -> s_flat(down(y3))
   down(n__incr(y4)) -> n__incr_flat(down(y4))
   down(n__adx(y7)) -> n__adx_flat(down(y7))
   down(head(incr(y11))) -> head_flat(down(incr(y11)))
   down(head(nil)) -> head_flat(down(nil))
   down(head(s(y14))) -> head_flat(down(s(y14)))
   down(head(n__incr(y15))) -> head_flat(down(n__incr(y15)))
   down(head(activate(y16))) -> head_flat(down(activate(y16)))
   down(head(adx(y17))) -> head_flat(down(adx(y17)))
   down(head(n__adx(y18))) -> head_flat(down(n__adx(y18)))
   down(head(nats)) -> head_flat(down(nats))
   down(head(zeros)) -> head_flat(down(zeros))
   down(head(0)) -> head_flat(down(0))
   down(head(n__zeros)) -> head_flat(down(n__zeros))
   down(head(head(y19))) -> head_flat(down(head(y19)))
   down(head(tail(y20))) -> head_flat(down(tail(y20)))
   down(head(fresh_constant)) -> head_flat(down(fresh_constant))
   down(tail(incr(y22))) -> tail_flat(down(incr(y22)))
   down(tail(nil)) -> tail_flat(down(nil))
   down(tail(s(y25))) -> tail_flat(down(s(y25)))
   down(tail(n__incr(y26))) -> tail_flat(down(n__incr(y26)))
   down(tail(activate(y27))) -> tail_flat(down(activate(y27)))
   down(tail(adx(y28))) -> tail_flat(down(adx(y28)))
   down(tail(n__adx(y29))) -> tail_flat(down(n__adx(y29)))
   down(tail(nats)) -> tail_flat(down(nats))
   down(tail(zeros)) -> tail_flat(down(zeros))
   down(tail(0)) -> tail_flat(down(0))
   down(tail(n__zeros)) -> tail_flat(down(n__zeros))
   down(tail(head(y30))) -> tail_flat(down(head(y30)))
   down(tail(tail(y31))) -> tail_flat(down(tail(y31)))
   down(tail(fresh_constant)) -> tail_flat(down(fresh_constant))
   cons_flat(up(x_1), block(x_2)) -> up(cons(x_1, x_2))
   cons_flat(block(x_1), up(x_2)) -> up(cons(x_1, x_2))
   s_flat(up(x_1)) -> up(s(x_1))
   n__incr_flat(up(x_1)) -> up(n__incr(x_1))
   n__adx_flat(up(x_1)) -> up(n__adx(x_1))
   head_flat(up(x_1)) -> up(head(x_1))
   tail_flat(up(x_1)) -> up(tail(x_1))


----------------------------------------

(50)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   down(incr(nil)) -> up(nil)
   down(incr(cons(X, L))) -> up(cons(s(X), n__incr(activate(L))))
   down(adx(cons(X, L))) -> up(incr(cons(X, n__adx(activate(L)))))
   down(zeros) -> up(cons(0, n__zeros))
   down(incr(X)) -> up(n__incr(X))
   down(adx(X)) -> up(n__adx(X))
   down(zeros) -> up(n__zeros)
   down(activate(n__incr(X))) -> up(incr(X))
   down(activate(n__adx(X))) -> up(adx(X))
   down(activate(n__zeros)) -> up(zeros)
   down(activate(X)) -> up(X)
   down(cons(y1, y2)) -> cons_flat(down(y1), block(y2))
   down(cons(y1, y2)) -> cons_flat(block(y1), down(y2))
   down(s(y3)) -> s_flat(down(y3))
   down(n__incr(y4)) -> n__incr_flat(down(y4))
   down(n__adx(y7)) -> n__adx_flat(down(y7))
   down(head(incr(y11))) -> head_flat(down(incr(y11)))
   down(head(nil)) -> head_flat(down(nil))
   down(head(s(y14))) -> head_flat(down(s(y14)))
   down(head(n__incr(y15))) -> head_flat(down(n__incr(y15)))
   down(head(activate(y16))) -> head_flat(down(activate(y16)))
   down(head(adx(y17))) -> head_flat(down(adx(y17)))
   down(head(n__adx(y18))) -> head_flat(down(n__adx(y18)))
   down(head(nats)) -> head_flat(down(nats))
   down(head(zeros)) -> head_flat(down(zeros))
   down(head(0)) -> head_flat(down(0))
   down(head(n__zeros)) -> head_flat(down(n__zeros))
   down(head(head(y19))) -> head_flat(down(head(y19)))
   down(head(tail(y20))) -> head_flat(down(tail(y20)))
   down(head(fresh_constant)) -> head_flat(down(fresh_constant))
   down(tail(incr(y22))) -> tail_flat(down(incr(y22)))
   down(tail(nil)) -> tail_flat(down(nil))
   down(tail(s(y25))) -> tail_flat(down(s(y25)))
   down(tail(n__incr(y26))) -> tail_flat(down(n__incr(y26)))
   down(tail(activate(y27))) -> tail_flat(down(activate(y27)))
   down(tail(adx(y28))) -> tail_flat(down(adx(y28)))
   down(tail(n__adx(y29))) -> tail_flat(down(n__adx(y29)))
   down(tail(nats)) -> tail_flat(down(nats))
   down(tail(zeros)) -> tail_flat(down(zeros))
   down(tail(0)) -> tail_flat(down(0))
   down(tail(n__zeros)) -> tail_flat(down(n__zeros))
   down(tail(head(y30))) -> tail_flat(down(head(y30)))
   down(tail(tail(y31))) -> tail_flat(down(tail(y31)))
   down(tail(fresh_constant)) -> tail_flat(down(fresh_constant))
   tail_flat(up(x_1)) -> up(tail(x_1))
   head_flat(up(x_1)) -> up(head(x_1))
   n__adx_flat(up(x_1)) -> up(n__adx(x_1))
   n__incr_flat(up(x_1)) -> up(n__incr(x_1))
   s_flat(up(x_1)) -> up(s(x_1))
   cons_flat(block(x_1), up(x_2)) -> up(cons(x_1, x_2))
   cons_flat(up(x_1), block(x_2)) -> up(cons(x_1, x_2))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(51) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(52)
YES
