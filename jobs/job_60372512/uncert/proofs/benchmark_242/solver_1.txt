YES
proof of /home/ff862203/input_IJu8tCQ7zj.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Outermost Termination of the given OTRS could be proven:

(0) OTRS
(1) Thiemann-SpecialC-Transformation [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) MRRProof [EQUIVALENT, 7 ms]
        (13) QDP
        (14) PisEmptyProof [EQUIVALENT, 0 ms]
        (15) YES
    (16) QDP
        (17) UsableRulesProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QReductionProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) QDPOrderProof [EQUIVALENT, 24 ms]
        (22) QDP
        (23) PisEmptyProof [EQUIVALENT, 0 ms]
        (24) YES


----------------------------------------

(0)
Obligation:
Term rewrite system R:
The TRS R consists of the following rules:

   f(x, x) -> g(f(x, x))
   g(x) -> a



Outermost Strategy.

----------------------------------------

(1) Thiemann-SpecialC-Transformation (EQUIVALENT)
We applied the Thiemann-SpecialC transformation  to transform the outermost TRS to an innermost TRS.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   top(go_up(x)) -> top(reduce(x))
   reduce(f(x_1, x_2)) -> check_f(redex_f(x_1, x_2))
   reduce(g(x_1)) -> check_g(redex_g(x_1))
   redex_f(x, x) -> result_f(g(f(x, x)))
   redex_g(x) -> result_g(a)
   check_f(result_f(x)) -> go_up(x)
   check_g(result_g(x)) -> go_up(x)
   check_f(redex_f(x_1, x_2)) -> in_f_1(reduce(x_1), x_2)
   check_f(redex_f(x_1, x_2)) -> in_f_2(x_1, reduce(x_2))
   check_g(redex_g(x_1)) -> in_g_1(reduce(x_1))
   in_f_1(go_up(x_1), x_2) -> go_up(f(x_1, x_2))
   in_f_2(x_1, go_up(x_2)) -> go_up(f(x_1, x_2))
   in_g_1(go_up(x_1)) -> go_up(g(x_1))

The set Q consists of the following terms:

   top(go_up(x0))
   reduce(f(x0, x1))
   reduce(g(x0))
   redex_f(x0, x0)
   redex_g(x0)
   check_f(result_f(x0))
   check_g(result_g(x0))
   check_f(redex_f(x0, x1))
   in_f_1(go_up(x0), x1)
   in_f_2(x0, go_up(x1))
   in_g_1(go_up(x0))


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(go_up(x)) -> TOP(reduce(x))
   TOP(go_up(x)) -> REDUCE(x)
   REDUCE(f(x_1, x_2)) -> CHECK_F(redex_f(x_1, x_2))
   REDUCE(f(x_1, x_2)) -> REDEX_F(x_1, x_2)
   REDUCE(g(x_1)) -> CHECK_G(redex_g(x_1))
   REDUCE(g(x_1)) -> REDEX_G(x_1)
   CHECK_F(redex_f(x_1, x_2)) -> IN_F_1(reduce(x_1), x_2)
   CHECK_F(redex_f(x_1, x_2)) -> REDUCE(x_1)
   CHECK_F(redex_f(x_1, x_2)) -> IN_F_2(x_1, reduce(x_2))
   CHECK_F(redex_f(x_1, x_2)) -> REDUCE(x_2)
   CHECK_G(redex_g(x_1)) -> IN_G_1(reduce(x_1))
   CHECK_G(redex_g(x_1)) -> REDUCE(x_1)

The TRS R consists of the following rules:

   top(go_up(x)) -> top(reduce(x))
   reduce(f(x_1, x_2)) -> check_f(redex_f(x_1, x_2))
   reduce(g(x_1)) -> check_g(redex_g(x_1))
   redex_f(x, x) -> result_f(g(f(x, x)))
   redex_g(x) -> result_g(a)
   check_f(result_f(x)) -> go_up(x)
   check_g(result_g(x)) -> go_up(x)
   check_f(redex_f(x_1, x_2)) -> in_f_1(reduce(x_1), x_2)
   check_f(redex_f(x_1, x_2)) -> in_f_2(x_1, reduce(x_2))
   check_g(redex_g(x_1)) -> in_g_1(reduce(x_1))
   in_f_1(go_up(x_1), x_2) -> go_up(f(x_1, x_2))
   in_f_2(x_1, go_up(x_2)) -> go_up(f(x_1, x_2))
   in_g_1(go_up(x_1)) -> go_up(g(x_1))

The set Q consists of the following terms:

   top(go_up(x0))
   reduce(f(x0, x1))
   reduce(g(x0))
   redex_f(x0, x0)
   redex_g(x0)
   check_f(result_f(x0))
   check_g(result_g(x0))
   check_f(redex_f(x0, x1))
   in_f_1(go_up(x0), x1)
   in_f_2(x0, go_up(x1))
   in_g_1(go_up(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 8 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CHECK_F(redex_f(x_1, x_2)) -> REDUCE(x_1)
   REDUCE(f(x_1, x_2)) -> CHECK_F(redex_f(x_1, x_2))
   CHECK_F(redex_f(x_1, x_2)) -> REDUCE(x_2)

The TRS R consists of the following rules:

   top(go_up(x)) -> top(reduce(x))
   reduce(f(x_1, x_2)) -> check_f(redex_f(x_1, x_2))
   reduce(g(x_1)) -> check_g(redex_g(x_1))
   redex_f(x, x) -> result_f(g(f(x, x)))
   redex_g(x) -> result_g(a)
   check_f(result_f(x)) -> go_up(x)
   check_g(result_g(x)) -> go_up(x)
   check_f(redex_f(x_1, x_2)) -> in_f_1(reduce(x_1), x_2)
   check_f(redex_f(x_1, x_2)) -> in_f_2(x_1, reduce(x_2))
   check_g(redex_g(x_1)) -> in_g_1(reduce(x_1))
   in_f_1(go_up(x_1), x_2) -> go_up(f(x_1, x_2))
   in_f_2(x_1, go_up(x_2)) -> go_up(f(x_1, x_2))
   in_g_1(go_up(x_1)) -> go_up(g(x_1))

The set Q consists of the following terms:

   top(go_up(x0))
   reduce(f(x0, x1))
   reduce(g(x0))
   redex_f(x0, x0)
   redex_g(x0)
   check_f(result_f(x0))
   check_g(result_g(x0))
   check_f(redex_f(x0, x1))
   in_f_1(go_up(x0), x1)
   in_f_2(x0, go_up(x1))
   in_g_1(go_up(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CHECK_F(redex_f(x_1, x_2)) -> REDUCE(x_1)
   REDUCE(f(x_1, x_2)) -> CHECK_F(redex_f(x_1, x_2))
   CHECK_F(redex_f(x_1, x_2)) -> REDUCE(x_2)

The TRS R consists of the following rules:

   redex_f(x, x) -> result_f(g(f(x, x)))

The set Q consists of the following terms:

   top(go_up(x0))
   reduce(f(x0, x1))
   reduce(g(x0))
   redex_f(x0, x0)
   redex_g(x0)
   check_f(result_f(x0))
   check_g(result_g(x0))
   check_f(redex_f(x0, x1))
   in_f_1(go_up(x0), x1)
   in_f_2(x0, go_up(x1))
   in_g_1(go_up(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   top(go_up(x0))
   reduce(f(x0, x1))
   reduce(g(x0))
   redex_g(x0)
   check_f(result_f(x0))
   check_g(result_g(x0))
   check_f(redex_f(x0, x1))
   in_f_1(go_up(x0), x1)
   in_f_2(x0, go_up(x1))
   in_g_1(go_up(x0))


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CHECK_F(redex_f(x_1, x_2)) -> REDUCE(x_1)
   REDUCE(f(x_1, x_2)) -> CHECK_F(redex_f(x_1, x_2))
   CHECK_F(redex_f(x_1, x_2)) -> REDUCE(x_2)

The TRS R consists of the following rules:

   redex_f(x, x) -> result_f(g(f(x, x)))

The set Q consists of the following terms:

   redex_f(x0, x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   CHECK_F(redex_f(x_1, x_2)) -> REDUCE(x_1)
   REDUCE(f(x_1, x_2)) -> CHECK_F(redex_f(x_1, x_2))
   CHECK_F(redex_f(x_1, x_2)) -> REDUCE(x_2)


Used ordering: Polynomial interpretation [POLO]:

   POL(CHECK_F(x_1)) = 1 + x_1
   POL(REDUCE(x_1)) = 2*x_1
   POL(f(x_1, x_2)) = 2 + x_1 + 2*x_2
   POL(g(x_1)) = x_1
   POL(redex_f(x_1, x_2)) = 2 + 2*x_1 + 2*x_2
   POL(result_f(x_1)) = x_1


----------------------------------------

(13)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   redex_f(x, x) -> result_f(g(f(x, x)))

The set Q consists of the following terms:

   redex_f(x0, x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(go_up(x)) -> TOP(reduce(x))

The TRS R consists of the following rules:

   top(go_up(x)) -> top(reduce(x))
   reduce(f(x_1, x_2)) -> check_f(redex_f(x_1, x_2))
   reduce(g(x_1)) -> check_g(redex_g(x_1))
   redex_f(x, x) -> result_f(g(f(x, x)))
   redex_g(x) -> result_g(a)
   check_f(result_f(x)) -> go_up(x)
   check_g(result_g(x)) -> go_up(x)
   check_f(redex_f(x_1, x_2)) -> in_f_1(reduce(x_1), x_2)
   check_f(redex_f(x_1, x_2)) -> in_f_2(x_1, reduce(x_2))
   check_g(redex_g(x_1)) -> in_g_1(reduce(x_1))
   in_f_1(go_up(x_1), x_2) -> go_up(f(x_1, x_2))
   in_f_2(x_1, go_up(x_2)) -> go_up(f(x_1, x_2))
   in_g_1(go_up(x_1)) -> go_up(g(x_1))

The set Q consists of the following terms:

   top(go_up(x0))
   reduce(f(x0, x1))
   reduce(g(x0))
   redex_f(x0, x0)
   redex_g(x0)
   check_f(result_f(x0))
   check_g(result_g(x0))
   check_f(redex_f(x0, x1))
   in_f_1(go_up(x0), x1)
   in_f_2(x0, go_up(x1))
   in_g_1(go_up(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(go_up(x)) -> TOP(reduce(x))

The TRS R consists of the following rules:

   reduce(f(x_1, x_2)) -> check_f(redex_f(x_1, x_2))
   reduce(g(x_1)) -> check_g(redex_g(x_1))
   redex_g(x) -> result_g(a)
   check_g(result_g(x)) -> go_up(x)
   redex_f(x, x) -> result_f(g(f(x, x)))
   check_f(result_f(x)) -> go_up(x)
   check_f(redex_f(x_1, x_2)) -> in_f_1(reduce(x_1), x_2)
   check_f(redex_f(x_1, x_2)) -> in_f_2(x_1, reduce(x_2))
   in_f_2(x_1, go_up(x_2)) -> go_up(f(x_1, x_2))
   in_f_1(go_up(x_1), x_2) -> go_up(f(x_1, x_2))

The set Q consists of the following terms:

   top(go_up(x0))
   reduce(f(x0, x1))
   reduce(g(x0))
   redex_f(x0, x0)
   redex_g(x0)
   check_f(result_f(x0))
   check_g(result_g(x0))
   check_f(redex_f(x0, x1))
   in_f_1(go_up(x0), x1)
   in_f_2(x0, go_up(x1))
   in_g_1(go_up(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   top(go_up(x0))
   in_g_1(go_up(x0))


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(go_up(x)) -> TOP(reduce(x))

The TRS R consists of the following rules:

   reduce(f(x_1, x_2)) -> check_f(redex_f(x_1, x_2))
   reduce(g(x_1)) -> check_g(redex_g(x_1))
   redex_g(x) -> result_g(a)
   check_g(result_g(x)) -> go_up(x)
   redex_f(x, x) -> result_f(g(f(x, x)))
   check_f(result_f(x)) -> go_up(x)
   check_f(redex_f(x_1, x_2)) -> in_f_1(reduce(x_1), x_2)
   check_f(redex_f(x_1, x_2)) -> in_f_2(x_1, reduce(x_2))
   in_f_2(x_1, go_up(x_2)) -> go_up(f(x_1, x_2))
   in_f_1(go_up(x_1), x_2) -> go_up(f(x_1, x_2))

The set Q consists of the following terms:

   reduce(f(x0, x1))
   reduce(g(x0))
   redex_f(x0, x0)
   redex_g(x0)
   check_f(result_f(x0))
   check_g(result_g(x0))
   check_f(redex_f(x0, x1))
   in_f_1(go_up(x0), x1)
   in_f_2(x0, go_up(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   TOP(go_up(x)) -> TOP(reduce(x))
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO]:

Non-tuple symbols: 
<<<
 M( result_f_1(x_1) ) =  	[[0], [0]] 	+ 	[[1, 1], [0, 0]] 	* 	x_1
>>>

<<<
 M( a ) =  	[[0], [0]]
>>>

<<<
 M( reduce_1(x_1) ) =  	[[1], [0]] 	+ 	[[0, 0], [1, 1]] 	* 	x_1
>>>

<<<
 M( in_f_2_2(x_1, x_2) ) =  	[[0], [1]] 	+ 	[[0, 0], [1, 1]] 	* 	x_1 	+ 	[[1, 0], [1, 1]] 	* 	x_2
>>>

<<<
 M( redex_f_2(x_1, x_2) ) =  	[[1], [0]] 	+ 	[[1, 1], [0, 0]] 	* 	x_1 	+ 	[[1, 1], [0, 0]] 	* 	x_2
>>>

<<<
 M( check_f_1(x_1) ) =  	[[1], [1]] 	+ 	[[0, 0], [1, 0]] 	* 	x_1
>>>

<<<
 M( g_1(x_1) ) =  	[[1], [0]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

<<<
 M( go_up_1(x_1) ) =  	[[1], [1]] 	+ 	[[0, 0], [1, 1]] 	* 	x_1
>>>

<<<
 M( result_g_1(x_1) ) =  	[[0], [1]] 	+ 	[[0, 0], [1, 1]] 	* 	x_1
>>>

<<<
 M( in_f_1_2(x_1, x_2) ) =  	[[0], [1]] 	+ 	[[1, 0], [1, 1]] 	* 	x_1 	+ 	[[0, 0], [1, 1]] 	* 	x_2
>>>

<<<
 M( f_2(x_1, x_2) ) =  	[[1], [1]] 	+ 	[[0, 0], [1, 1]] 	* 	x_1 	+ 	[[1, 0], [0, 1]] 	* 	x_2
>>>

<<<
 M( check_g_1(x_1) ) =  	[[1], [0]] 	+ 	[[0, 0], [0, 1]] 	* 	x_1
>>>

<<<
 M( redex_g_1(x_1) ) =  	[[0], [1]] 	+ 	[[0, 0], [0, 0]] 	* 	x_1
>>>

Tuple symbols: 
<<<
 M( TOP_1(x_1) ) =  	[[0]] 	+ 	[[0, 1]] 	* 	x_1
>>>



Matrix type: 

We used a basic matrix type which is not further parametrizeable.





As matrix orders are CE-compatible, we used usable rules w.r.t. argument filtering in the order.
The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   reduce(f(x_1, x_2)) -> check_f(redex_f(x_1, x_2))
   reduce(g(x_1)) -> check_g(redex_g(x_1))
   check_f(redex_f(x_1, x_2)) -> in_f_1(reduce(x_1), x_2)
   in_f_1(go_up(x_1), x_2) -> go_up(f(x_1, x_2))
   redex_f(x, x) -> result_f(g(f(x, x)))
   check_f(result_f(x)) -> go_up(x)
   check_f(redex_f(x_1, x_2)) -> in_f_2(x_1, reduce(x_2))
   in_f_2(x_1, go_up(x_2)) -> go_up(f(x_1, x_2))
   redex_g(x) -> result_g(a)
   check_g(result_g(x)) -> go_up(x)


----------------------------------------

(22)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   reduce(f(x_1, x_2)) -> check_f(redex_f(x_1, x_2))
   reduce(g(x_1)) -> check_g(redex_g(x_1))
   redex_g(x) -> result_g(a)
   check_g(result_g(x)) -> go_up(x)
   redex_f(x, x) -> result_f(g(f(x, x)))
   check_f(result_f(x)) -> go_up(x)
   check_f(redex_f(x_1, x_2)) -> in_f_1(reduce(x_1), x_2)
   check_f(redex_f(x_1, x_2)) -> in_f_2(x_1, reduce(x_2))
   in_f_2(x_1, go_up(x_2)) -> go_up(f(x_1, x_2))
   in_f_1(go_up(x_1), x_2) -> go_up(f(x_1, x_2))

The set Q consists of the following terms:

   reduce(f(x0, x1))
   reduce(g(x0))
   redex_f(x0, x0)
   redex_g(x0)
   check_f(result_f(x0))
   check_g(result_g(x0))
   check_f(redex_f(x0, x1))
   in_f_1(go_up(x0), x1)
   in_f_2(x0, go_up(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(24)
YES
