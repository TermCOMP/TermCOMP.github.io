MAYBE
proof of /home/ff862203/input_fDlsOcM7nV.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Outermost Termination of the given OTRS could not be shown:

(0) OTRS
(1) Trivial-Transformation [SOUND, 0 ms]
(2) QTRS
    (3) DependencyPairsProof [EQUIVALENT, 0 ms]
    (4) QDP
    (5) TransformationProof [EQUIVALENT, 0 ms]
    (6) QDP
    (7) NonTerminationLoopProof [COMPLETE, 0 ms]
    (8) NO
(9) Thiemann-SpecialC-Transformation [EQUIVALENT, 0 ms]
(10) QTRS
    (11) DependencyPairsProof [EQUIVALENT, 0 ms]
    (12) QDP
    (13) DependencyGraphProof [EQUIVALENT, 0 ms]
    (14) AND
        (15) QDP
            (16) UsableRulesProof [EQUIVALENT, 0 ms]
            (17) QDP
            (18) QReductionProof [EQUIVALENT, 0 ms]
            (19) QDP
            (20) QDPOrderProof [EQUIVALENT, 0 ms]
            (21) QDP
            (22) DependencyGraphProof [EQUIVALENT, 0 ms]
            (23) QDP
            (24) UsableRulesProof [EQUIVALENT, 0 ms]
            (25) QDP
            (26) QReductionProof [EQUIVALENT, 0 ms]
            (27) QDP
            (28) QDPOrderProof [EQUIVALENT, 3 ms]
            (29) QDP
            (30) DependencyGraphProof [EQUIVALENT, 0 ms]
            (31) TRUE
        (32) QDP
            (33) UsableRulesProof [EQUIVALENT, 0 ms]
            (34) QDP
                (35) QReductionProof [EQUIVALENT, 0 ms]
                (36) QDP
                (37) TransformationProof [EQUIVALENT, 0 ms]
                (38) QDP
                (39) DependencyGraphProof [EQUIVALENT, 0 ms]
                (40) QDP
            (41) UsableRulesProof [EQUIVALENT, 0 ms]
            (42) QDP
                (43) QReductionProof [EQUIVALENT, 0 ms]
                (44) QDP


----------------------------------------

(0)
Obligation:
Term rewrite system R:
The TRS R consists of the following rules:

   f(X, g(X), Y) -> f(Y, Y, Y)
   g(b) -> c
   b -> c



Outermost Strategy.

----------------------------------------

(1) Trivial-Transformation (SOUND)
We applied the Trivial transformation  to transform the outermost TRS to a standard TRS.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(X, g(X), Y) -> f(Y, Y, Y)
   g(b) -> c
   b -> c

Q is empty.

----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(X, g(X), Y) -> F(Y, Y, Y)

The TRS R consists of the following rules:

   f(X, g(X), Y) -> f(Y, Y, Y)
   g(b) -> c
   b -> c

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) TransformationProof (EQUIVALENT)
By forward instantiating [JAR06] the rule F(X, g(X), Y) -> F(Y, Y, Y) we obtained the following new rules [LPAR04]:

   (F(x0, g(x0), g(y_1)) -> F(g(y_1), g(y_1), g(y_1)),F(x0, g(x0), g(y_1)) -> F(g(y_1), g(y_1), g(y_1)))


----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(x0, g(x0), g(y_1)) -> F(g(y_1), g(y_1), g(y_1))

The TRS R consists of the following rules:

   f(X, g(X), Y) -> f(Y, Y, Y)
   g(b) -> c
   b -> c

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the right:

s = F(x0, g(x0), g(b)) evaluates to  t =F(c, g(c), g(b))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [x0 / c]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

F(x0, g(x0), g(b)) -> F(g(b), g(b), g(b))
 with rule F(x0, g(x0), g(y_1)) -> F(g(y_1), g(y_1), g(y_1)) and matcher [y_1 / b].

F(g(b), g(b), g(b)) -> F(c, g(b), g(b))
with rule g(b) -> c at position [0] and matcher [ ]

F(c, g(b), g(b)) -> F(c, g(c), g(b))
with rule b -> c at position [1,0] and matcher [ ]

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(8)
NO

----------------------------------------

(9) Thiemann-SpecialC-Transformation (EQUIVALENT)
We applied the Thiemann-SpecialC transformation  to transform the outermost TRS to an innermost TRS.
----------------------------------------

(10)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   top(go_up(x)) -> top(reduce(x))
   reduce(f(x_1, x_2, x_3)) -> check_f(redex_f(x_1, x_2, x_3))
   reduce(g(x_1)) -> check_g(redex_g(x_1))
   redex_f(X, g(X), Y) -> result_f(f(Y, Y, Y))
   redex_g(b) -> result_g(c)
   reduce(b) -> go_up(c)
   check_f(result_f(x)) -> go_up(x)
   check_g(result_g(x)) -> go_up(x)
   check_f(redex_f(x_1, x_2, x_3)) -> in_f_1(reduce(x_1), x_2, x_3)
   check_f(redex_f(x_1, x_2, x_3)) -> in_f_2(x_1, reduce(x_2), x_3)
   check_f(redex_f(x_1, x_2, x_3)) -> in_f_3(x_1, x_2, reduce(x_3))
   check_g(redex_g(x_1)) -> in_g_1(reduce(x_1))
   in_f_1(go_up(x_1), x_2, x_3) -> go_up(f(x_1, x_2, x_3))
   in_f_2(x_1, go_up(x_2), x_3) -> go_up(f(x_1, x_2, x_3))
   in_f_3(x_1, x_2, go_up(x_3)) -> go_up(f(x_1, x_2, x_3))
   in_g_1(go_up(x_1)) -> go_up(g(x_1))

The set Q consists of the following terms:

   top(go_up(x0))
   reduce(f(x0, x1, x2))
   reduce(g(x0))
   redex_f(x0, g(x0), x1)
   redex_g(b)
   reduce(b)
   check_f(result_f(x0))
   check_g(result_g(x0))
   check_f(redex_f(x0, x1, x2))
   check_g(redex_g(x0))
   in_f_1(go_up(x0), x1, x2)
   in_f_2(x0, go_up(x1), x2)
   in_f_3(x0, x1, go_up(x2))
   in_g_1(go_up(x0))


----------------------------------------

(11) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(go_up(x)) -> TOP(reduce(x))
   TOP(go_up(x)) -> REDUCE(x)
   REDUCE(f(x_1, x_2, x_3)) -> CHECK_F(redex_f(x_1, x_2, x_3))
   REDUCE(f(x_1, x_2, x_3)) -> REDEX_F(x_1, x_2, x_3)
   REDUCE(g(x_1)) -> CHECK_G(redex_g(x_1))
   REDUCE(g(x_1)) -> REDEX_G(x_1)
   CHECK_F(redex_f(x_1, x_2, x_3)) -> IN_F_1(reduce(x_1), x_2, x_3)
   CHECK_F(redex_f(x_1, x_2, x_3)) -> REDUCE(x_1)
   CHECK_F(redex_f(x_1, x_2, x_3)) -> IN_F_2(x_1, reduce(x_2), x_3)
   CHECK_F(redex_f(x_1, x_2, x_3)) -> REDUCE(x_2)
   CHECK_F(redex_f(x_1, x_2, x_3)) -> IN_F_3(x_1, x_2, reduce(x_3))
   CHECK_F(redex_f(x_1, x_2, x_3)) -> REDUCE(x_3)
   CHECK_G(redex_g(x_1)) -> IN_G_1(reduce(x_1))
   CHECK_G(redex_g(x_1)) -> REDUCE(x_1)

The TRS R consists of the following rules:

   top(go_up(x)) -> top(reduce(x))
   reduce(f(x_1, x_2, x_3)) -> check_f(redex_f(x_1, x_2, x_3))
   reduce(g(x_1)) -> check_g(redex_g(x_1))
   redex_f(X, g(X), Y) -> result_f(f(Y, Y, Y))
   redex_g(b) -> result_g(c)
   reduce(b) -> go_up(c)
   check_f(result_f(x)) -> go_up(x)
   check_g(result_g(x)) -> go_up(x)
   check_f(redex_f(x_1, x_2, x_3)) -> in_f_1(reduce(x_1), x_2, x_3)
   check_f(redex_f(x_1, x_2, x_3)) -> in_f_2(x_1, reduce(x_2), x_3)
   check_f(redex_f(x_1, x_2, x_3)) -> in_f_3(x_1, x_2, reduce(x_3))
   check_g(redex_g(x_1)) -> in_g_1(reduce(x_1))
   in_f_1(go_up(x_1), x_2, x_3) -> go_up(f(x_1, x_2, x_3))
   in_f_2(x_1, go_up(x_2), x_3) -> go_up(f(x_1, x_2, x_3))
   in_f_3(x_1, x_2, go_up(x_3)) -> go_up(f(x_1, x_2, x_3))
   in_g_1(go_up(x_1)) -> go_up(g(x_1))

The set Q consists of the following terms:

   top(go_up(x0))
   reduce(f(x0, x1, x2))
   reduce(g(x0))
   redex_f(x0, g(x0), x1)
   redex_g(b)
   reduce(b)
   check_f(result_f(x0))
   check_g(result_g(x0))
   check_f(redex_f(x0, x1, x2))
   check_g(redex_g(x0))
   in_f_1(go_up(x0), x1, x2)
   in_f_2(x0, go_up(x1), x2)
   in_f_3(x0, x1, go_up(x2))
   in_g_1(go_up(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 7 less nodes.
----------------------------------------

(14)
Complex Obligation (AND)

----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CHECK_F(redex_f(x_1, x_2, x_3)) -> REDUCE(x_1)
   REDUCE(f(x_1, x_2, x_3)) -> CHECK_F(redex_f(x_1, x_2, x_3))
   CHECK_F(redex_f(x_1, x_2, x_3)) -> REDUCE(x_2)
   REDUCE(g(x_1)) -> CHECK_G(redex_g(x_1))
   CHECK_G(redex_g(x_1)) -> REDUCE(x_1)
   CHECK_F(redex_f(x_1, x_2, x_3)) -> REDUCE(x_3)

The TRS R consists of the following rules:

   top(go_up(x)) -> top(reduce(x))
   reduce(f(x_1, x_2, x_3)) -> check_f(redex_f(x_1, x_2, x_3))
   reduce(g(x_1)) -> check_g(redex_g(x_1))
   redex_f(X, g(X), Y) -> result_f(f(Y, Y, Y))
   redex_g(b) -> result_g(c)
   reduce(b) -> go_up(c)
   check_f(result_f(x)) -> go_up(x)
   check_g(result_g(x)) -> go_up(x)
   check_f(redex_f(x_1, x_2, x_3)) -> in_f_1(reduce(x_1), x_2, x_3)
   check_f(redex_f(x_1, x_2, x_3)) -> in_f_2(x_1, reduce(x_2), x_3)
   check_f(redex_f(x_1, x_2, x_3)) -> in_f_3(x_1, x_2, reduce(x_3))
   check_g(redex_g(x_1)) -> in_g_1(reduce(x_1))
   in_f_1(go_up(x_1), x_2, x_3) -> go_up(f(x_1, x_2, x_3))
   in_f_2(x_1, go_up(x_2), x_3) -> go_up(f(x_1, x_2, x_3))
   in_f_3(x_1, x_2, go_up(x_3)) -> go_up(f(x_1, x_2, x_3))
   in_g_1(go_up(x_1)) -> go_up(g(x_1))

The set Q consists of the following terms:

   top(go_up(x0))
   reduce(f(x0, x1, x2))
   reduce(g(x0))
   redex_f(x0, g(x0), x1)
   redex_g(b)
   reduce(b)
   check_f(result_f(x0))
   check_g(result_g(x0))
   check_f(redex_f(x0, x1, x2))
   check_g(redex_g(x0))
   in_f_1(go_up(x0), x1, x2)
   in_f_2(x0, go_up(x1), x2)
   in_f_3(x0, x1, go_up(x2))
   in_g_1(go_up(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(16) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(17)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CHECK_F(redex_f(x_1, x_2, x_3)) -> REDUCE(x_1)
   REDUCE(f(x_1, x_2, x_3)) -> CHECK_F(redex_f(x_1, x_2, x_3))
   CHECK_F(redex_f(x_1, x_2, x_3)) -> REDUCE(x_2)
   REDUCE(g(x_1)) -> CHECK_G(redex_g(x_1))
   CHECK_G(redex_g(x_1)) -> REDUCE(x_1)
   CHECK_F(redex_f(x_1, x_2, x_3)) -> REDUCE(x_3)

The TRS R consists of the following rules:

   redex_g(b) -> result_g(c)
   redex_f(X, g(X), Y) -> result_f(f(Y, Y, Y))

The set Q consists of the following terms:

   top(go_up(x0))
   reduce(f(x0, x1, x2))
   reduce(g(x0))
   redex_f(x0, g(x0), x1)
   redex_g(b)
   reduce(b)
   check_f(result_f(x0))
   check_g(result_g(x0))
   check_f(redex_f(x0, x1, x2))
   check_g(redex_g(x0))
   in_f_1(go_up(x0), x1, x2)
   in_f_2(x0, go_up(x1), x2)
   in_f_3(x0, x1, go_up(x2))
   in_g_1(go_up(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(18) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   top(go_up(x0))
   reduce(f(x0, x1, x2))
   reduce(g(x0))
   reduce(b)
   check_f(result_f(x0))
   check_g(result_g(x0))
   check_f(redex_f(x0, x1, x2))
   check_g(redex_g(x0))
   in_f_1(go_up(x0), x1, x2)
   in_f_2(x0, go_up(x1), x2)
   in_f_3(x0, x1, go_up(x2))
   in_g_1(go_up(x0))


----------------------------------------

(19)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CHECK_F(redex_f(x_1, x_2, x_3)) -> REDUCE(x_1)
   REDUCE(f(x_1, x_2, x_3)) -> CHECK_F(redex_f(x_1, x_2, x_3))
   CHECK_F(redex_f(x_1, x_2, x_3)) -> REDUCE(x_2)
   REDUCE(g(x_1)) -> CHECK_G(redex_g(x_1))
   CHECK_G(redex_g(x_1)) -> REDUCE(x_1)
   CHECK_F(redex_f(x_1, x_2, x_3)) -> REDUCE(x_3)

The TRS R consists of the following rules:

   redex_g(b) -> result_g(c)
   redex_f(X, g(X), Y) -> result_f(f(Y, Y, Y))

The set Q consists of the following terms:

   redex_f(x0, g(x0), x1)
   redex_g(b)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(20) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   REDUCE(g(x_1)) -> CHECK_G(redex_g(x_1))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(CHECK_F(x_1)) = x_1
   POL(CHECK_G(x_1)) = x_1
   POL(REDUCE(x_1)) = x_1
   POL(b) = 1
   POL(c) = 1
   POL(f(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(g(x_1)) = 1 + x_1
   POL(redex_f(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(redex_g(x_1)) = x_1
   POL(result_f(x_1)) = 1
   POL(result_g(x_1)) = x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   redex_f(X, g(X), Y) -> result_f(f(Y, Y, Y))
   redex_g(b) -> result_g(c)


----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CHECK_F(redex_f(x_1, x_2, x_3)) -> REDUCE(x_1)
   REDUCE(f(x_1, x_2, x_3)) -> CHECK_F(redex_f(x_1, x_2, x_3))
   CHECK_F(redex_f(x_1, x_2, x_3)) -> REDUCE(x_2)
   CHECK_G(redex_g(x_1)) -> REDUCE(x_1)
   CHECK_F(redex_f(x_1, x_2, x_3)) -> REDUCE(x_3)

The TRS R consists of the following rules:

   redex_g(b) -> result_g(c)
   redex_f(X, g(X), Y) -> result_f(f(Y, Y, Y))

The set Q consists of the following terms:

   redex_f(x0, g(x0), x1)
   redex_g(b)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REDUCE(f(x_1, x_2, x_3)) -> CHECK_F(redex_f(x_1, x_2, x_3))
   CHECK_F(redex_f(x_1, x_2, x_3)) -> REDUCE(x_1)
   CHECK_F(redex_f(x_1, x_2, x_3)) -> REDUCE(x_2)
   CHECK_F(redex_f(x_1, x_2, x_3)) -> REDUCE(x_3)

The TRS R consists of the following rules:

   redex_g(b) -> result_g(c)
   redex_f(X, g(X), Y) -> result_f(f(Y, Y, Y))

The set Q consists of the following terms:

   redex_f(x0, g(x0), x1)
   redex_g(b)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REDUCE(f(x_1, x_2, x_3)) -> CHECK_F(redex_f(x_1, x_2, x_3))
   CHECK_F(redex_f(x_1, x_2, x_3)) -> REDUCE(x_1)
   CHECK_F(redex_f(x_1, x_2, x_3)) -> REDUCE(x_2)
   CHECK_F(redex_f(x_1, x_2, x_3)) -> REDUCE(x_3)

The TRS R consists of the following rules:

   redex_f(X, g(X), Y) -> result_f(f(Y, Y, Y))

The set Q consists of the following terms:

   redex_f(x0, g(x0), x1)
   redex_g(b)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   redex_g(b)


----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REDUCE(f(x_1, x_2, x_3)) -> CHECK_F(redex_f(x_1, x_2, x_3))
   CHECK_F(redex_f(x_1, x_2, x_3)) -> REDUCE(x_1)
   CHECK_F(redex_f(x_1, x_2, x_3)) -> REDUCE(x_2)
   CHECK_F(redex_f(x_1, x_2, x_3)) -> REDUCE(x_3)

The TRS R consists of the following rules:

   redex_f(X, g(X), Y) -> result_f(f(Y, Y, Y))

The set Q consists of the following terms:

   redex_f(x0, g(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   REDUCE(f(x_1, x_2, x_3)) -> CHECK_F(redex_f(x_1, x_2, x_3))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(CHECK_F(x_1)) = x_1
   POL(REDUCE(x_1)) = x_1
   POL(f(x_1, x_2, x_3)) = 1 + x_1 + x_2 + x_3
   POL(g(x_1)) = 1
   POL(redex_f(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(result_f(x_1)) = 1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   redex_f(X, g(X), Y) -> result_f(f(Y, Y, Y))


----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CHECK_F(redex_f(x_1, x_2, x_3)) -> REDUCE(x_1)
   CHECK_F(redex_f(x_1, x_2, x_3)) -> REDUCE(x_2)
   CHECK_F(redex_f(x_1, x_2, x_3)) -> REDUCE(x_3)

The TRS R consists of the following rules:

   redex_f(X, g(X), Y) -> result_f(f(Y, Y, Y))

The set Q consists of the following terms:

   redex_f(x0, g(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(30) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 3 less nodes.
----------------------------------------

(31)
TRUE

----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(go_up(x)) -> TOP(reduce(x))

The TRS R consists of the following rules:

   top(go_up(x)) -> top(reduce(x))
   reduce(f(x_1, x_2, x_3)) -> check_f(redex_f(x_1, x_2, x_3))
   reduce(g(x_1)) -> check_g(redex_g(x_1))
   redex_f(X, g(X), Y) -> result_f(f(Y, Y, Y))
   redex_g(b) -> result_g(c)
   reduce(b) -> go_up(c)
   check_f(result_f(x)) -> go_up(x)
   check_g(result_g(x)) -> go_up(x)
   check_f(redex_f(x_1, x_2, x_3)) -> in_f_1(reduce(x_1), x_2, x_3)
   check_f(redex_f(x_1, x_2, x_3)) -> in_f_2(x_1, reduce(x_2), x_3)
   check_f(redex_f(x_1, x_2, x_3)) -> in_f_3(x_1, x_2, reduce(x_3))
   check_g(redex_g(x_1)) -> in_g_1(reduce(x_1))
   in_f_1(go_up(x_1), x_2, x_3) -> go_up(f(x_1, x_2, x_3))
   in_f_2(x_1, go_up(x_2), x_3) -> go_up(f(x_1, x_2, x_3))
   in_f_3(x_1, x_2, go_up(x_3)) -> go_up(f(x_1, x_2, x_3))
   in_g_1(go_up(x_1)) -> go_up(g(x_1))

The set Q consists of the following terms:

   top(go_up(x0))
   reduce(f(x0, x1, x2))
   reduce(g(x0))
   redex_f(x0, g(x0), x1)
   redex_g(b)
   reduce(b)
   check_f(result_f(x0))
   check_g(result_g(x0))
   check_f(redex_f(x0, x1, x2))
   check_g(redex_g(x0))
   in_f_1(go_up(x0), x1, x2)
   in_f_2(x0, go_up(x1), x2)
   in_f_3(x0, x1, go_up(x2))
   in_g_1(go_up(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(33) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(34)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(go_up(x)) -> TOP(reduce(x))

The TRS R consists of the following rules:

   reduce(f(x_1, x_2, x_3)) -> check_f(redex_f(x_1, x_2, x_3))
   reduce(g(x_1)) -> check_g(redex_g(x_1))
   reduce(b) -> go_up(c)
   redex_g(b) -> result_g(c)
   check_g(result_g(x)) -> go_up(x)
   check_g(redex_g(x_1)) -> in_g_1(reduce(x_1))
   in_g_1(go_up(x_1)) -> go_up(g(x_1))
   redex_f(X, g(X), Y) -> result_f(f(Y, Y, Y))
   check_f(result_f(x)) -> go_up(x)
   check_f(redex_f(x_1, x_2, x_3)) -> in_f_1(reduce(x_1), x_2, x_3)
   check_f(redex_f(x_1, x_2, x_3)) -> in_f_2(x_1, reduce(x_2), x_3)
   check_f(redex_f(x_1, x_2, x_3)) -> in_f_3(x_1, x_2, reduce(x_3))
   in_f_3(x_1, x_2, go_up(x_3)) -> go_up(f(x_1, x_2, x_3))
   in_f_2(x_1, go_up(x_2), x_3) -> go_up(f(x_1, x_2, x_3))
   in_f_1(go_up(x_1), x_2, x_3) -> go_up(f(x_1, x_2, x_3))

The set Q consists of the following terms:

   top(go_up(x0))
   reduce(f(x0, x1, x2))
   reduce(g(x0))
   redex_f(x0, g(x0), x1)
   redex_g(b)
   reduce(b)
   check_f(result_f(x0))
   check_g(result_g(x0))
   check_f(redex_f(x0, x1, x2))
   check_g(redex_g(x0))
   in_f_1(go_up(x0), x1, x2)
   in_f_2(x0, go_up(x1), x2)
   in_f_3(x0, x1, go_up(x2))
   in_g_1(go_up(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(35) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   top(go_up(x0))


----------------------------------------

(36)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(go_up(x)) -> TOP(reduce(x))

The TRS R consists of the following rules:

   reduce(f(x_1, x_2, x_3)) -> check_f(redex_f(x_1, x_2, x_3))
   reduce(g(x_1)) -> check_g(redex_g(x_1))
   reduce(b) -> go_up(c)
   redex_g(b) -> result_g(c)
   check_g(result_g(x)) -> go_up(x)
   check_g(redex_g(x_1)) -> in_g_1(reduce(x_1))
   in_g_1(go_up(x_1)) -> go_up(g(x_1))
   redex_f(X, g(X), Y) -> result_f(f(Y, Y, Y))
   check_f(result_f(x)) -> go_up(x)
   check_f(redex_f(x_1, x_2, x_3)) -> in_f_1(reduce(x_1), x_2, x_3)
   check_f(redex_f(x_1, x_2, x_3)) -> in_f_2(x_1, reduce(x_2), x_3)
   check_f(redex_f(x_1, x_2, x_3)) -> in_f_3(x_1, x_2, reduce(x_3))
   in_f_3(x_1, x_2, go_up(x_3)) -> go_up(f(x_1, x_2, x_3))
   in_f_2(x_1, go_up(x_2), x_3) -> go_up(f(x_1, x_2, x_3))
   in_f_1(go_up(x_1), x_2, x_3) -> go_up(f(x_1, x_2, x_3))

The set Q consists of the following terms:

   reduce(f(x0, x1, x2))
   reduce(g(x0))
   redex_f(x0, g(x0), x1)
   redex_g(b)
   reduce(b)
   check_f(result_f(x0))
   check_g(result_g(x0))
   check_f(redex_f(x0, x1, x2))
   check_g(redex_g(x0))
   in_f_1(go_up(x0), x1, x2)
   in_f_2(x0, go_up(x1), x2)
   in_f_3(x0, x1, go_up(x2))
   in_g_1(go_up(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(37) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule TOP(go_up(x)) -> TOP(reduce(x)) at position [0] we obtained the following new rules [LPAR04]:

   (TOP(go_up(f(x0, x1, x2))) -> TOP(check_f(redex_f(x0, x1, x2))),TOP(go_up(f(x0, x1, x2))) -> TOP(check_f(redex_f(x0, x1, x2))))
   (TOP(go_up(g(x0))) -> TOP(check_g(redex_g(x0))),TOP(go_up(g(x0))) -> TOP(check_g(redex_g(x0))))
   (TOP(go_up(b)) -> TOP(go_up(c)),TOP(go_up(b)) -> TOP(go_up(c)))


----------------------------------------

(38)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(go_up(f(x0, x1, x2))) -> TOP(check_f(redex_f(x0, x1, x2)))
   TOP(go_up(g(x0))) -> TOP(check_g(redex_g(x0)))
   TOP(go_up(b)) -> TOP(go_up(c))

The TRS R consists of the following rules:

   reduce(f(x_1, x_2, x_3)) -> check_f(redex_f(x_1, x_2, x_3))
   reduce(g(x_1)) -> check_g(redex_g(x_1))
   reduce(b) -> go_up(c)
   redex_g(b) -> result_g(c)
   check_g(result_g(x)) -> go_up(x)
   check_g(redex_g(x_1)) -> in_g_1(reduce(x_1))
   in_g_1(go_up(x_1)) -> go_up(g(x_1))
   redex_f(X, g(X), Y) -> result_f(f(Y, Y, Y))
   check_f(result_f(x)) -> go_up(x)
   check_f(redex_f(x_1, x_2, x_3)) -> in_f_1(reduce(x_1), x_2, x_3)
   check_f(redex_f(x_1, x_2, x_3)) -> in_f_2(x_1, reduce(x_2), x_3)
   check_f(redex_f(x_1, x_2, x_3)) -> in_f_3(x_1, x_2, reduce(x_3))
   in_f_3(x_1, x_2, go_up(x_3)) -> go_up(f(x_1, x_2, x_3))
   in_f_2(x_1, go_up(x_2), x_3) -> go_up(f(x_1, x_2, x_3))
   in_f_1(go_up(x_1), x_2, x_3) -> go_up(f(x_1, x_2, x_3))

The set Q consists of the following terms:

   reduce(f(x0, x1, x2))
   reduce(g(x0))
   redex_f(x0, g(x0), x1)
   redex_g(b)
   reduce(b)
   check_f(result_f(x0))
   check_g(result_g(x0))
   check_f(redex_f(x0, x1, x2))
   check_g(redex_g(x0))
   in_f_1(go_up(x0), x1, x2)
   in_f_2(x0, go_up(x1), x2)
   in_f_3(x0, x1, go_up(x2))
   in_g_1(go_up(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(39) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(40)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(go_up(f(x0, x1, x2))) -> TOP(check_f(redex_f(x0, x1, x2)))
   TOP(go_up(g(x0))) -> TOP(check_g(redex_g(x0)))

The TRS R consists of the following rules:

   reduce(f(x_1, x_2, x_3)) -> check_f(redex_f(x_1, x_2, x_3))
   reduce(g(x_1)) -> check_g(redex_g(x_1))
   reduce(b) -> go_up(c)
   redex_g(b) -> result_g(c)
   check_g(result_g(x)) -> go_up(x)
   check_g(redex_g(x_1)) -> in_g_1(reduce(x_1))
   in_g_1(go_up(x_1)) -> go_up(g(x_1))
   redex_f(X, g(X), Y) -> result_f(f(Y, Y, Y))
   check_f(result_f(x)) -> go_up(x)
   check_f(redex_f(x_1, x_2, x_3)) -> in_f_1(reduce(x_1), x_2, x_3)
   check_f(redex_f(x_1, x_2, x_3)) -> in_f_2(x_1, reduce(x_2), x_3)
   check_f(redex_f(x_1, x_2, x_3)) -> in_f_3(x_1, x_2, reduce(x_3))
   in_f_3(x_1, x_2, go_up(x_3)) -> go_up(f(x_1, x_2, x_3))
   in_f_2(x_1, go_up(x_2), x_3) -> go_up(f(x_1, x_2, x_3))
   in_f_1(go_up(x_1), x_2, x_3) -> go_up(f(x_1, x_2, x_3))

The set Q consists of the following terms:

   reduce(f(x0, x1, x2))
   reduce(g(x0))
   redex_f(x0, g(x0), x1)
   redex_g(b)
   reduce(b)
   check_f(result_f(x0))
   check_g(result_g(x0))
   check_f(redex_f(x0, x1, x2))
   check_g(redex_g(x0))
   in_f_1(go_up(x0), x1, x2)
   in_f_2(x0, go_up(x1), x2)
   in_f_3(x0, x1, go_up(x2))
   in_g_1(go_up(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(41) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(42)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(go_up(x)) -> TOP(reduce(x))

The TRS R consists of the following rules:

   reduce(f(x_1, x_2, x_3)) -> check_f(redex_f(x_1, x_2, x_3))
   reduce(g(x_1)) -> check_g(redex_g(x_1))
   reduce(b) -> go_up(c)
   redex_g(b) -> result_g(c)
   check_g(result_g(x)) -> go_up(x)
   check_g(redex_g(x_1)) -> in_g_1(reduce(x_1))
   in_g_1(go_up(x_1)) -> go_up(g(x_1))
   redex_f(X, g(X), Y) -> result_f(f(Y, Y, Y))
   check_f(result_f(x)) -> go_up(x)
   check_f(redex_f(x_1, x_2, x_3)) -> in_f_1(reduce(x_1), x_2, x_3)
   check_f(redex_f(x_1, x_2, x_3)) -> in_f_2(x_1, reduce(x_2), x_3)
   check_f(redex_f(x_1, x_2, x_3)) -> in_f_3(x_1, x_2, reduce(x_3))
   in_f_3(x_1, x_2, go_up(x_3)) -> go_up(f(x_1, x_2, x_3))
   in_f_2(x_1, go_up(x_2), x_3) -> go_up(f(x_1, x_2, x_3))
   in_f_1(go_up(x_1), x_2, x_3) -> go_up(f(x_1, x_2, x_3))

The set Q consists of the following terms:

   top(go_up(x0))
   reduce(f(x0, x1, x2))
   reduce(g(x0))
   redex_f(x0, g(x0), x1)
   redex_g(b)
   reduce(b)
   check_f(result_f(x0))
   check_g(result_g(x0))
   check_f(redex_f(x0, x1, x2))
   check_g(redex_g(x0))
   in_f_1(go_up(x0), x1, x2)
   in_f_2(x0, go_up(x1), x2)
   in_f_3(x0, x1, go_up(x2))
   in_g_1(go_up(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(43) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   top(go_up(x0))


----------------------------------------

(44)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(go_up(x)) -> TOP(reduce(x))

The TRS R consists of the following rules:

   reduce(f(x_1, x_2, x_3)) -> check_f(redex_f(x_1, x_2, x_3))
   reduce(g(x_1)) -> check_g(redex_g(x_1))
   reduce(b) -> go_up(c)
   redex_g(b) -> result_g(c)
   check_g(result_g(x)) -> go_up(x)
   check_g(redex_g(x_1)) -> in_g_1(reduce(x_1))
   in_g_1(go_up(x_1)) -> go_up(g(x_1))
   redex_f(X, g(X), Y) -> result_f(f(Y, Y, Y))
   check_f(result_f(x)) -> go_up(x)
   check_f(redex_f(x_1, x_2, x_3)) -> in_f_1(reduce(x_1), x_2, x_3)
   check_f(redex_f(x_1, x_2, x_3)) -> in_f_2(x_1, reduce(x_2), x_3)
   check_f(redex_f(x_1, x_2, x_3)) -> in_f_3(x_1, x_2, reduce(x_3))
   in_f_3(x_1, x_2, go_up(x_3)) -> go_up(f(x_1, x_2, x_3))
   in_f_2(x_1, go_up(x_2), x_3) -> go_up(f(x_1, x_2, x_3))
   in_f_1(go_up(x_1), x_2, x_3) -> go_up(f(x_1, x_2, x_3))

The set Q consists of the following terms:

   reduce(f(x0, x1, x2))
   reduce(g(x0))
   redex_f(x0, g(x0), x1)
   redex_g(b)
   reduce(b)
   check_f(result_f(x0))
   check_g(result_g(x0))
   check_f(redex_f(x0, x1, x2))
   check_g(redex_g(x0))
   in_f_1(go_up(x0), x1, x2)
   in_f_2(x0, go_up(x1), x2)
   in_f_3(x0, x1, go_up(x2))
   in_g_1(go_up(x0))

We have to consider all minimal (P,Q,R)-chains.