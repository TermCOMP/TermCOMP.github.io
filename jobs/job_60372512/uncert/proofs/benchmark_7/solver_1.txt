YES
proof of /home/ff862203/input_xyCc9X5jJT.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Outermost Termination of the given OTRS could be proven:

(0) OTRS
(1) Raffelsieper-Zantema-Transformation [SOUND, 0 ms]
(2) QTRS
(3) QTRSRRRProof [EQUIVALENT, 17 ms]
(4) QTRS
(5) QTRSRRRProof [EQUIVALENT, 0 ms]
(6) QTRS
(7) AAECC Innermost [EQUIVALENT, 0 ms]
(8) QTRS
(9) DependencyPairsProof [EQUIVALENT, 0 ms]
(10) QDP
(11) DependencyGraphProof [EQUIVALENT, 0 ms]
(12) QDP
(13) UsableRulesProof [EQUIVALENT, 0 ms]
(14) QDP
(15) QReductionProof [EQUIVALENT, 0 ms]
(16) QDP
(17) RFCMatchBoundsDPProof [EQUIVALENT, 0 ms]
(18) YES


----------------------------------------

(0)
Obligation:
Term rewrite system R:
The TRS R consists of the following rules:

   f(x) -> g(f(x))
   g(f(x)) -> x
   g(x) -> a



Outermost Strategy.

----------------------------------------

(1) Raffelsieper-Zantema-Transformation (SOUND)
We applied the Raffelsieper-Zantema transformation  to transform the outermost TRS to a standard TRS.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   down(f(x)) -> up(g(f(x)))
   down(g(f(x))) -> up(x)
   down(g(x)) -> up(a)
   top(up(x)) -> top(down(x))
   f_flat(up(x_1)) -> up(f(x_1))
   g_flat(up(x_1)) -> up(g(x_1))

Q is empty.

----------------------------------------

(3) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(a) = 0
   POL(down(x_1)) = 2 + 2*x_1
   POL(f(x_1)) = x_1
   POL(f_flat(x_1)) = 1 + 2*x_1
   POL(g(x_1)) = x_1
   POL(g_flat(x_1)) = 2*x_1
   POL(top(x_1)) = 2*x_1
   POL(up(x_1)) = 2 + 2*x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   f_flat(up(x_1)) -> up(f(x_1))
   g_flat(up(x_1)) -> up(g(x_1))




----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   down(f(x)) -> up(g(f(x)))
   down(g(f(x))) -> up(x)
   down(g(x)) -> up(a)
   top(up(x)) -> top(down(x))

Q is empty.

----------------------------------------

(5) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(a) = 0
   POL(down(x_1)) = 2*x_1
   POL(f(x_1)) = 1 + x_1
   POL(g(x_1)) = x_1
   POL(top(x_1)) = 2*x_1
   POL(up(x_1)) = 2*x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   down(g(f(x))) -> up(x)




----------------------------------------

(6)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   down(f(x)) -> up(g(f(x)))
   down(g(x)) -> up(a)
   top(up(x)) -> top(down(x))

Q is empty.

----------------------------------------

(7) AAECC Innermost (EQUIVALENT)
We have applied [NOC,AAECCNOC] to switch to innermost. The TRS R 1 is 
   down(f(x)) -> up(g(f(x)))
   down(g(x)) -> up(a)

The TRS R 2 is 
   top(up(x)) -> top(down(x))

The signature Sigma is {top_1}
----------------------------------------

(8)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   down(f(x)) -> up(g(f(x)))
   down(g(x)) -> up(a)
   top(up(x)) -> top(down(x))

The set Q consists of the following terms:

   down(f(x0))
   down(g(x0))
   top(up(x0))


----------------------------------------

(9) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(up(x)) -> TOP(down(x))
   TOP(up(x)) -> DOWN(x)

The TRS R consists of the following rules:

   down(f(x)) -> up(g(f(x)))
   down(g(x)) -> up(a)
   top(up(x)) -> top(down(x))

The set Q consists of the following terms:

   down(f(x0))
   down(g(x0))
   top(up(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(up(x)) -> TOP(down(x))

The TRS R consists of the following rules:

   down(f(x)) -> up(g(f(x)))
   down(g(x)) -> up(a)
   top(up(x)) -> top(down(x))

The set Q consists of the following terms:

   down(f(x0))
   down(g(x0))
   top(up(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(up(x)) -> TOP(down(x))

The TRS R consists of the following rules:

   down(f(x)) -> up(g(f(x)))
   down(g(x)) -> up(a)

The set Q consists of the following terms:

   down(f(x0))
   down(g(x0))
   top(up(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   top(up(x0))


----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(up(x)) -> TOP(down(x))

The TRS R consists of the following rules:

   down(f(x)) -> up(g(f(x)))
   down(g(x)) -> up(a)

The set Q consists of the following terms:

   down(f(x0))
   down(g(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) RFCMatchBoundsDPProof (EQUIVALENT)
Finiteness of the DP problem can be shown by a matchbound of 2. 
As the DP problem is minimal we only have to initialize the certificate graph by the rules of P:

   TOP(up(x)) -> TOP(down(x))

To find matches we regarded all rules of R and P:

   down(f(x)) -> up(g(f(x)))
   down(g(x)) -> up(a)
   TOP(up(x)) -> TOP(down(x))

The certificate found is represented by the following graph.
The certificate consists of the following enumerated nodes:
162, 163, 164, 165, 166, 167, 168, 169

Node 162 is start node and node 163 is final node.

Those nodes are connected through the following edges:

* 162 to 164 labelled TOP_1(0)* 162 to 167 labelled TOP_1(1)* 162 to 169 labelled TOP_1(2)* 163 to 163 labelled #_1(0)* 164 to 163 labelled down_1(0)* 164 to 165 labelled up_1(1)* 165 to 166 labelled g_1(1)* 165 to 163 labelled a(1)* 166 to 163 labelled f_1(1)* 167 to 165 labelled down_1(1)* 167 to 168 labelled up_1(2)* 168 to 166 labelled a(2)* 169 to 168 labelled down_1(2)


----------------------------------------

(18)
YES
