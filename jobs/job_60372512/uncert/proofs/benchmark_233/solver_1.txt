MAYBE
proof of /home/ff862203/input_IYctJOgsPD.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Outermost Termination of the given OTRS could not be shown:

(0) OTRS
(1) Trivial-Transformation [SOUND, 0 ms]
(2) QTRS
    (3) DependencyPairsProof [EQUIVALENT, 0 ms]
    (4) QDP
    (5) DependencyGraphProof [EQUIVALENT, 0 ms]
    (6) QDP
    (7) UsableRulesReductionPairsProof [EQUIVALENT, 0 ms]
    (8) QDP
    (9) NonTerminationLoopProof [COMPLETE, 0 ms]
    (10) NO
(11) Thiemann-SpecialC-Transformation [EQUIVALENT, 0 ms]
(12) QTRS
    (13) DependencyPairsProof [EQUIVALENT, 0 ms]
    (14) QDP
    (15) DependencyGraphProof [EQUIVALENT, 0 ms]
    (16) AND
        (17) QDP
            (18) UsableRulesProof [EQUIVALENT, 0 ms]
            (19) QDP
            (20) QReductionProof [EQUIVALENT, 0 ms]
            (21) QDP
            (22) MRRProof [EQUIVALENT, 0 ms]
            (23) QDP
            (24) MRRProof [EQUIVALENT, 6 ms]
            (25) QDP
            (26) QReductionProof [EQUIVALENT, 0 ms]
            (27) QDP
            (28) MRRProof [EQUIVALENT, 0 ms]
            (29) QDP
            (30) UsableRulesReductionPairsProof [EQUIVALENT, 0 ms]
            (31) QDP
            (32) DependencyGraphProof [EQUIVALENT, 0 ms]
            (33) TRUE
        (34) QDP
            (35) UsableRulesProof [EQUIVALENT, 0 ms]
            (36) QDP
                (37) QReductionProof [EQUIVALENT, 0 ms]
                (38) QDP
                (39) TransformationProof [EQUIVALENT, 0 ms]
                (40) QDP
            (41) UsableRulesProof [EQUIVALENT, 0 ms]
            (42) QDP
                (43) QReductionProof [EQUIVALENT, 0 ms]
                (44) QDP


----------------------------------------

(0)
Obligation:
Term rewrite system R:
The TRS R consists of the following rules:

   p(x, y, x) -> q(p(y, x, y))
   q(q(x)) -> c



Outermost Strategy.

----------------------------------------

(1) Trivial-Transformation (SOUND)
We applied the Trivial transformation  to transform the outermost TRS to a standard TRS.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   p(x, y, x) -> q(p(y, x, y))
   q(q(x)) -> c

Q is empty.

----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P(x, y, x) -> Q(p(y, x, y))
   P(x, y, x) -> P(y, x, y)

The TRS R consists of the following rules:

   p(x, y, x) -> q(p(y, x, y))
   q(q(x)) -> c

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P(x, y, x) -> P(y, x, y)

The TRS R consists of the following rules:

   p(x, y, x) -> q(p(y, x, y))
   q(q(x)) -> c

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) UsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules with reduction pair processor [LPAR04] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules [FROCOS05] can be oriented non-strictly. All non-usable rules are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

No dependency pairs are removed.

The following rules are removed from R:

   p(x, y, x) -> q(p(y, x, y))
   q(q(x)) -> c
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(P(x_1, x_2, x_3)) = x_1 + 2*x_2 + x_3


----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P(x, y, x) -> P(y, x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = P(x, y, x) evaluates to  t =P(y, x, y)

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [x / y, y / x]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from P(x, y, x) to P(y, x, y).




----------------------------------------

(10)
NO

----------------------------------------

(11) Thiemann-SpecialC-Transformation (EQUIVALENT)
We applied the Thiemann-SpecialC transformation  to transform the outermost TRS to an innermost TRS.
----------------------------------------

(12)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   top(go_up(x)) -> top(reduce(x))
   reduce(p(x_1, x_2, x_3)) -> check_p(redex_p(x_1, x_2, x_3))
   reduce(q(x_1)) -> check_q(redex_q(x_1))
   redex_p(x, y, x) -> result_p(q(p(y, x, y)))
   redex_q(q(x)) -> result_q(c)
   check_p(result_p(x)) -> go_up(x)
   check_q(result_q(x)) -> go_up(x)
   check_p(redex_p(x_1, x_2, x_3)) -> in_p_1(reduce(x_1), x_2, x_3)
   check_p(redex_p(x_1, x_2, x_3)) -> in_p_2(x_1, reduce(x_2), x_3)
   check_p(redex_p(x_1, x_2, x_3)) -> in_p_3(x_1, x_2, reduce(x_3))
   check_q(redex_q(x_1)) -> in_q_1(reduce(x_1))
   in_p_1(go_up(x_1), x_2, x_3) -> go_up(p(x_1, x_2, x_3))
   in_p_2(x_1, go_up(x_2), x_3) -> go_up(p(x_1, x_2, x_3))
   in_p_3(x_1, x_2, go_up(x_3)) -> go_up(p(x_1, x_2, x_3))
   in_q_1(go_up(x_1)) -> go_up(q(x_1))

The set Q consists of the following terms:

   top(go_up(x0))
   reduce(p(x0, x1, x2))
   reduce(q(x0))
   redex_p(x0, x1, x0)
   redex_q(q(x0))
   check_p(result_p(x0))
   check_q(result_q(x0))
   check_p(redex_p(x0, x1, x2))
   check_q(redex_q(x0))
   in_p_1(go_up(x0), x1, x2)
   in_p_2(x0, go_up(x1), x2)
   in_p_3(x0, x1, go_up(x2))
   in_q_1(go_up(x0))


----------------------------------------

(13) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(go_up(x)) -> TOP(reduce(x))
   TOP(go_up(x)) -> REDUCE(x)
   REDUCE(p(x_1, x_2, x_3)) -> CHECK_P(redex_p(x_1, x_2, x_3))
   REDUCE(p(x_1, x_2, x_3)) -> REDEX_P(x_1, x_2, x_3)
   REDUCE(q(x_1)) -> CHECK_Q(redex_q(x_1))
   REDUCE(q(x_1)) -> REDEX_Q(x_1)
   CHECK_P(redex_p(x_1, x_2, x_3)) -> IN_P_1(reduce(x_1), x_2, x_3)
   CHECK_P(redex_p(x_1, x_2, x_3)) -> REDUCE(x_1)
   CHECK_P(redex_p(x_1, x_2, x_3)) -> IN_P_2(x_1, reduce(x_2), x_3)
   CHECK_P(redex_p(x_1, x_2, x_3)) -> REDUCE(x_2)
   CHECK_P(redex_p(x_1, x_2, x_3)) -> IN_P_3(x_1, x_2, reduce(x_3))
   CHECK_P(redex_p(x_1, x_2, x_3)) -> REDUCE(x_3)
   CHECK_Q(redex_q(x_1)) -> IN_Q_1(reduce(x_1))
   CHECK_Q(redex_q(x_1)) -> REDUCE(x_1)

The TRS R consists of the following rules:

   top(go_up(x)) -> top(reduce(x))
   reduce(p(x_1, x_2, x_3)) -> check_p(redex_p(x_1, x_2, x_3))
   reduce(q(x_1)) -> check_q(redex_q(x_1))
   redex_p(x, y, x) -> result_p(q(p(y, x, y)))
   redex_q(q(x)) -> result_q(c)
   check_p(result_p(x)) -> go_up(x)
   check_q(result_q(x)) -> go_up(x)
   check_p(redex_p(x_1, x_2, x_3)) -> in_p_1(reduce(x_1), x_2, x_3)
   check_p(redex_p(x_1, x_2, x_3)) -> in_p_2(x_1, reduce(x_2), x_3)
   check_p(redex_p(x_1, x_2, x_3)) -> in_p_3(x_1, x_2, reduce(x_3))
   check_q(redex_q(x_1)) -> in_q_1(reduce(x_1))
   in_p_1(go_up(x_1), x_2, x_3) -> go_up(p(x_1, x_2, x_3))
   in_p_2(x_1, go_up(x_2), x_3) -> go_up(p(x_1, x_2, x_3))
   in_p_3(x_1, x_2, go_up(x_3)) -> go_up(p(x_1, x_2, x_3))
   in_q_1(go_up(x_1)) -> go_up(q(x_1))

The set Q consists of the following terms:

   top(go_up(x0))
   reduce(p(x0, x1, x2))
   reduce(q(x0))
   redex_p(x0, x1, x0)
   redex_q(q(x0))
   check_p(result_p(x0))
   check_q(result_q(x0))
   check_p(redex_p(x0, x1, x2))
   check_q(redex_q(x0))
   in_p_1(go_up(x0), x1, x2)
   in_p_2(x0, go_up(x1), x2)
   in_p_3(x0, x1, go_up(x2))
   in_q_1(go_up(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 7 less nodes.
----------------------------------------

(16)
Complex Obligation (AND)

----------------------------------------

(17)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CHECK_P(redex_p(x_1, x_2, x_3)) -> REDUCE(x_1)
   REDUCE(p(x_1, x_2, x_3)) -> CHECK_P(redex_p(x_1, x_2, x_3))
   CHECK_P(redex_p(x_1, x_2, x_3)) -> REDUCE(x_2)
   REDUCE(q(x_1)) -> CHECK_Q(redex_q(x_1))
   CHECK_Q(redex_q(x_1)) -> REDUCE(x_1)
   CHECK_P(redex_p(x_1, x_2, x_3)) -> REDUCE(x_3)

The TRS R consists of the following rules:

   top(go_up(x)) -> top(reduce(x))
   reduce(p(x_1, x_2, x_3)) -> check_p(redex_p(x_1, x_2, x_3))
   reduce(q(x_1)) -> check_q(redex_q(x_1))
   redex_p(x, y, x) -> result_p(q(p(y, x, y)))
   redex_q(q(x)) -> result_q(c)
   check_p(result_p(x)) -> go_up(x)
   check_q(result_q(x)) -> go_up(x)
   check_p(redex_p(x_1, x_2, x_3)) -> in_p_1(reduce(x_1), x_2, x_3)
   check_p(redex_p(x_1, x_2, x_3)) -> in_p_2(x_1, reduce(x_2), x_3)
   check_p(redex_p(x_1, x_2, x_3)) -> in_p_3(x_1, x_2, reduce(x_3))
   check_q(redex_q(x_1)) -> in_q_1(reduce(x_1))
   in_p_1(go_up(x_1), x_2, x_3) -> go_up(p(x_1, x_2, x_3))
   in_p_2(x_1, go_up(x_2), x_3) -> go_up(p(x_1, x_2, x_3))
   in_p_3(x_1, x_2, go_up(x_3)) -> go_up(p(x_1, x_2, x_3))
   in_q_1(go_up(x_1)) -> go_up(q(x_1))

The set Q consists of the following terms:

   top(go_up(x0))
   reduce(p(x0, x1, x2))
   reduce(q(x0))
   redex_p(x0, x1, x0)
   redex_q(q(x0))
   check_p(result_p(x0))
   check_q(result_q(x0))
   check_p(redex_p(x0, x1, x2))
   check_q(redex_q(x0))
   in_p_1(go_up(x0), x1, x2)
   in_p_2(x0, go_up(x1), x2)
   in_p_3(x0, x1, go_up(x2))
   in_q_1(go_up(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(18) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(19)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CHECK_P(redex_p(x_1, x_2, x_3)) -> REDUCE(x_1)
   REDUCE(p(x_1, x_2, x_3)) -> CHECK_P(redex_p(x_1, x_2, x_3))
   CHECK_P(redex_p(x_1, x_2, x_3)) -> REDUCE(x_2)
   REDUCE(q(x_1)) -> CHECK_Q(redex_q(x_1))
   CHECK_Q(redex_q(x_1)) -> REDUCE(x_1)
   CHECK_P(redex_p(x_1, x_2, x_3)) -> REDUCE(x_3)

The TRS R consists of the following rules:

   redex_q(q(x)) -> result_q(c)
   redex_p(x, y, x) -> result_p(q(p(y, x, y)))

The set Q consists of the following terms:

   top(go_up(x0))
   reduce(p(x0, x1, x2))
   reduce(q(x0))
   redex_p(x0, x1, x0)
   redex_q(q(x0))
   check_p(result_p(x0))
   check_q(result_q(x0))
   check_p(redex_p(x0, x1, x2))
   check_q(redex_q(x0))
   in_p_1(go_up(x0), x1, x2)
   in_p_2(x0, go_up(x1), x2)
   in_p_3(x0, x1, go_up(x2))
   in_q_1(go_up(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(20) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   top(go_up(x0))
   reduce(p(x0, x1, x2))
   reduce(q(x0))
   check_p(result_p(x0))
   check_q(result_q(x0))
   check_p(redex_p(x0, x1, x2))
   check_q(redex_q(x0))
   in_p_1(go_up(x0), x1, x2)
   in_p_2(x0, go_up(x1), x2)
   in_p_3(x0, x1, go_up(x2))
   in_q_1(go_up(x0))


----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CHECK_P(redex_p(x_1, x_2, x_3)) -> REDUCE(x_1)
   REDUCE(p(x_1, x_2, x_3)) -> CHECK_P(redex_p(x_1, x_2, x_3))
   CHECK_P(redex_p(x_1, x_2, x_3)) -> REDUCE(x_2)
   REDUCE(q(x_1)) -> CHECK_Q(redex_q(x_1))
   CHECK_Q(redex_q(x_1)) -> REDUCE(x_1)
   CHECK_P(redex_p(x_1, x_2, x_3)) -> REDUCE(x_3)

The TRS R consists of the following rules:

   redex_q(q(x)) -> result_q(c)
   redex_p(x, y, x) -> result_p(q(p(y, x, y)))

The set Q consists of the following terms:

   redex_p(x0, x1, x0)
   redex_q(q(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   redex_q(q(x)) -> result_q(c)

Used ordering: Polynomial interpretation [POLO]:

   POL(CHECK_P(x_1)) = 1 + 2*x_1
   POL(CHECK_Q(x_1)) = x_1
   POL(REDUCE(x_1)) = 1 + 2*x_1
   POL(c) = 0
   POL(p(x_1, x_2, x_3)) = x_1 + 2*x_2 + x_3
   POL(q(x_1)) = x_1
   POL(redex_p(x_1, x_2, x_3)) = x_1 + 2*x_2 + x_3
   POL(redex_q(x_1)) = 1 + 2*x_1
   POL(result_p(x_1)) = x_1
   POL(result_q(x_1)) = x_1


----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CHECK_P(redex_p(x_1, x_2, x_3)) -> REDUCE(x_1)
   REDUCE(p(x_1, x_2, x_3)) -> CHECK_P(redex_p(x_1, x_2, x_3))
   CHECK_P(redex_p(x_1, x_2, x_3)) -> REDUCE(x_2)
   REDUCE(q(x_1)) -> CHECK_Q(redex_q(x_1))
   CHECK_Q(redex_q(x_1)) -> REDUCE(x_1)
   CHECK_P(redex_p(x_1, x_2, x_3)) -> REDUCE(x_3)

The TRS R consists of the following rules:

   redex_p(x, y, x) -> result_p(q(p(y, x, y)))

The set Q consists of the following terms:

   redex_p(x0, x1, x0)
   redex_q(q(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   REDUCE(q(x_1)) -> CHECK_Q(redex_q(x_1))
   CHECK_Q(redex_q(x_1)) -> REDUCE(x_1)


Used ordering: Polynomial interpretation [POLO]:

   POL(CHECK_P(x_1)) = 2*x_1
   POL(CHECK_Q(x_1)) = 1 + 2*x_1
   POL(REDUCE(x_1)) = 2 + 2*x_1
   POL(p(x_1, x_2, x_3)) = x_1 + 2*x_2 + x_3
   POL(q(x_1)) = 1 + x_1
   POL(redex_p(x_1, x_2, x_3)) = 1 + x_1 + 2*x_2 + x_3
   POL(redex_q(x_1)) = 1 + x_1
   POL(result_p(x_1)) = x_1


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CHECK_P(redex_p(x_1, x_2, x_3)) -> REDUCE(x_1)
   REDUCE(p(x_1, x_2, x_3)) -> CHECK_P(redex_p(x_1, x_2, x_3))
   CHECK_P(redex_p(x_1, x_2, x_3)) -> REDUCE(x_2)
   CHECK_P(redex_p(x_1, x_2, x_3)) -> REDUCE(x_3)

The TRS R consists of the following rules:

   redex_p(x, y, x) -> result_p(q(p(y, x, y)))

The set Q consists of the following terms:

   redex_p(x0, x1, x0)
   redex_q(q(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   redex_q(q(x0))


----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CHECK_P(redex_p(x_1, x_2, x_3)) -> REDUCE(x_1)
   REDUCE(p(x_1, x_2, x_3)) -> CHECK_P(redex_p(x_1, x_2, x_3))
   CHECK_P(redex_p(x_1, x_2, x_3)) -> REDUCE(x_2)
   CHECK_P(redex_p(x_1, x_2, x_3)) -> REDUCE(x_3)

The TRS R consists of the following rules:

   redex_p(x, y, x) -> result_p(q(p(y, x, y)))

The set Q consists of the following terms:

   redex_p(x0, x1, x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   redex_p(x, y, x) -> result_p(q(p(y, x, y)))

Used ordering: Polynomial interpretation [POLO]:

   POL(CHECK_P(x_1)) = 2*x_1
   POL(REDUCE(x_1)) = 2 + 2*x_1
   POL(p(x_1, x_2, x_3)) = x_1 + 2*x_2 + x_3
   POL(q(x_1)) = x_1
   POL(redex_p(x_1, x_2, x_3)) = 1 + x_1 + 2*x_2 + x_3
   POL(result_p(x_1)) = x_1


----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CHECK_P(redex_p(x_1, x_2, x_3)) -> REDUCE(x_1)
   REDUCE(p(x_1, x_2, x_3)) -> CHECK_P(redex_p(x_1, x_2, x_3))
   CHECK_P(redex_p(x_1, x_2, x_3)) -> REDUCE(x_2)
   CHECK_P(redex_p(x_1, x_2, x_3)) -> REDUCE(x_3)

R is empty.
The set Q consists of the following terms:

   redex_p(x0, x1, x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(30) UsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules with reduction pair processor [LPAR04] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules [FROCOS05] can be oriented non-strictly. All non-usable rules are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

The following dependency pairs can be deleted:

   REDUCE(p(x_1, x_2, x_3)) -> CHECK_P(redex_p(x_1, x_2, x_3))
No rules are removed from R.

Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(CHECK_P(x_1)) = x_1
   POL(REDUCE(x_1)) = 2*x_1
   POL(p(x_1, x_2, x_3)) = 2*x_1 + 2*x_2 + 2*x_3
   POL(redex_p(x_1, x_2, x_3)) = 2*x_1 + 2*x_2 + 2*x_3


----------------------------------------

(31)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CHECK_P(redex_p(x_1, x_2, x_3)) -> REDUCE(x_1)
   CHECK_P(redex_p(x_1, x_2, x_3)) -> REDUCE(x_2)
   CHECK_P(redex_p(x_1, x_2, x_3)) -> REDUCE(x_3)

R is empty.
The set Q consists of the following terms:

   redex_p(x0, x1, x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(32) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 3 less nodes.
----------------------------------------

(33)
TRUE

----------------------------------------

(34)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(go_up(x)) -> TOP(reduce(x))

The TRS R consists of the following rules:

   top(go_up(x)) -> top(reduce(x))
   reduce(p(x_1, x_2, x_3)) -> check_p(redex_p(x_1, x_2, x_3))
   reduce(q(x_1)) -> check_q(redex_q(x_1))
   redex_p(x, y, x) -> result_p(q(p(y, x, y)))
   redex_q(q(x)) -> result_q(c)
   check_p(result_p(x)) -> go_up(x)
   check_q(result_q(x)) -> go_up(x)
   check_p(redex_p(x_1, x_2, x_3)) -> in_p_1(reduce(x_1), x_2, x_3)
   check_p(redex_p(x_1, x_2, x_3)) -> in_p_2(x_1, reduce(x_2), x_3)
   check_p(redex_p(x_1, x_2, x_3)) -> in_p_3(x_1, x_2, reduce(x_3))
   check_q(redex_q(x_1)) -> in_q_1(reduce(x_1))
   in_p_1(go_up(x_1), x_2, x_3) -> go_up(p(x_1, x_2, x_3))
   in_p_2(x_1, go_up(x_2), x_3) -> go_up(p(x_1, x_2, x_3))
   in_p_3(x_1, x_2, go_up(x_3)) -> go_up(p(x_1, x_2, x_3))
   in_q_1(go_up(x_1)) -> go_up(q(x_1))

The set Q consists of the following terms:

   top(go_up(x0))
   reduce(p(x0, x1, x2))
   reduce(q(x0))
   redex_p(x0, x1, x0)
   redex_q(q(x0))
   check_p(result_p(x0))
   check_q(result_q(x0))
   check_p(redex_p(x0, x1, x2))
   check_q(redex_q(x0))
   in_p_1(go_up(x0), x1, x2)
   in_p_2(x0, go_up(x1), x2)
   in_p_3(x0, x1, go_up(x2))
   in_q_1(go_up(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(35) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(36)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(go_up(x)) -> TOP(reduce(x))

The TRS R consists of the following rules:

   reduce(p(x_1, x_2, x_3)) -> check_p(redex_p(x_1, x_2, x_3))
   reduce(q(x_1)) -> check_q(redex_q(x_1))
   redex_q(q(x)) -> result_q(c)
   check_q(result_q(x)) -> go_up(x)
   check_q(redex_q(x_1)) -> in_q_1(reduce(x_1))
   in_q_1(go_up(x_1)) -> go_up(q(x_1))
   redex_p(x, y, x) -> result_p(q(p(y, x, y)))
   check_p(result_p(x)) -> go_up(x)
   check_p(redex_p(x_1, x_2, x_3)) -> in_p_1(reduce(x_1), x_2, x_3)
   check_p(redex_p(x_1, x_2, x_3)) -> in_p_2(x_1, reduce(x_2), x_3)
   check_p(redex_p(x_1, x_2, x_3)) -> in_p_3(x_1, x_2, reduce(x_3))
   in_p_3(x_1, x_2, go_up(x_3)) -> go_up(p(x_1, x_2, x_3))
   in_p_2(x_1, go_up(x_2), x_3) -> go_up(p(x_1, x_2, x_3))
   in_p_1(go_up(x_1), x_2, x_3) -> go_up(p(x_1, x_2, x_3))

The set Q consists of the following terms:

   top(go_up(x0))
   reduce(p(x0, x1, x2))
   reduce(q(x0))
   redex_p(x0, x1, x0)
   redex_q(q(x0))
   check_p(result_p(x0))
   check_q(result_q(x0))
   check_p(redex_p(x0, x1, x2))
   check_q(redex_q(x0))
   in_p_1(go_up(x0), x1, x2)
   in_p_2(x0, go_up(x1), x2)
   in_p_3(x0, x1, go_up(x2))
   in_q_1(go_up(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(37) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   top(go_up(x0))


----------------------------------------

(38)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(go_up(x)) -> TOP(reduce(x))

The TRS R consists of the following rules:

   reduce(p(x_1, x_2, x_3)) -> check_p(redex_p(x_1, x_2, x_3))
   reduce(q(x_1)) -> check_q(redex_q(x_1))
   redex_q(q(x)) -> result_q(c)
   check_q(result_q(x)) -> go_up(x)
   check_q(redex_q(x_1)) -> in_q_1(reduce(x_1))
   in_q_1(go_up(x_1)) -> go_up(q(x_1))
   redex_p(x, y, x) -> result_p(q(p(y, x, y)))
   check_p(result_p(x)) -> go_up(x)
   check_p(redex_p(x_1, x_2, x_3)) -> in_p_1(reduce(x_1), x_2, x_3)
   check_p(redex_p(x_1, x_2, x_3)) -> in_p_2(x_1, reduce(x_2), x_3)
   check_p(redex_p(x_1, x_2, x_3)) -> in_p_3(x_1, x_2, reduce(x_3))
   in_p_3(x_1, x_2, go_up(x_3)) -> go_up(p(x_1, x_2, x_3))
   in_p_2(x_1, go_up(x_2), x_3) -> go_up(p(x_1, x_2, x_3))
   in_p_1(go_up(x_1), x_2, x_3) -> go_up(p(x_1, x_2, x_3))

The set Q consists of the following terms:

   reduce(p(x0, x1, x2))
   reduce(q(x0))
   redex_p(x0, x1, x0)
   redex_q(q(x0))
   check_p(result_p(x0))
   check_q(result_q(x0))
   check_p(redex_p(x0, x1, x2))
   check_q(redex_q(x0))
   in_p_1(go_up(x0), x1, x2)
   in_p_2(x0, go_up(x1), x2)
   in_p_3(x0, x1, go_up(x2))
   in_q_1(go_up(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(39) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule TOP(go_up(x)) -> TOP(reduce(x)) at position [0] we obtained the following new rules [LPAR04]:

   (TOP(go_up(p(x0, x1, x2))) -> TOP(check_p(redex_p(x0, x1, x2))),TOP(go_up(p(x0, x1, x2))) -> TOP(check_p(redex_p(x0, x1, x2))))
   (TOP(go_up(q(x0))) -> TOP(check_q(redex_q(x0))),TOP(go_up(q(x0))) -> TOP(check_q(redex_q(x0))))


----------------------------------------

(40)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(go_up(p(x0, x1, x2))) -> TOP(check_p(redex_p(x0, x1, x2)))
   TOP(go_up(q(x0))) -> TOP(check_q(redex_q(x0)))

The TRS R consists of the following rules:

   reduce(p(x_1, x_2, x_3)) -> check_p(redex_p(x_1, x_2, x_3))
   reduce(q(x_1)) -> check_q(redex_q(x_1))
   redex_q(q(x)) -> result_q(c)
   check_q(result_q(x)) -> go_up(x)
   check_q(redex_q(x_1)) -> in_q_1(reduce(x_1))
   in_q_1(go_up(x_1)) -> go_up(q(x_1))
   redex_p(x, y, x) -> result_p(q(p(y, x, y)))
   check_p(result_p(x)) -> go_up(x)
   check_p(redex_p(x_1, x_2, x_3)) -> in_p_1(reduce(x_1), x_2, x_3)
   check_p(redex_p(x_1, x_2, x_3)) -> in_p_2(x_1, reduce(x_2), x_3)
   check_p(redex_p(x_1, x_2, x_3)) -> in_p_3(x_1, x_2, reduce(x_3))
   in_p_3(x_1, x_2, go_up(x_3)) -> go_up(p(x_1, x_2, x_3))
   in_p_2(x_1, go_up(x_2), x_3) -> go_up(p(x_1, x_2, x_3))
   in_p_1(go_up(x_1), x_2, x_3) -> go_up(p(x_1, x_2, x_3))

The set Q consists of the following terms:

   reduce(p(x0, x1, x2))
   reduce(q(x0))
   redex_p(x0, x1, x0)
   redex_q(q(x0))
   check_p(result_p(x0))
   check_q(result_q(x0))
   check_p(redex_p(x0, x1, x2))
   check_q(redex_q(x0))
   in_p_1(go_up(x0), x1, x2)
   in_p_2(x0, go_up(x1), x2)
   in_p_3(x0, x1, go_up(x2))
   in_q_1(go_up(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(41) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(42)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(go_up(x)) -> TOP(reduce(x))

The TRS R consists of the following rules:

   reduce(p(x_1, x_2, x_3)) -> check_p(redex_p(x_1, x_2, x_3))
   reduce(q(x_1)) -> check_q(redex_q(x_1))
   redex_q(q(x)) -> result_q(c)
   check_q(result_q(x)) -> go_up(x)
   check_q(redex_q(x_1)) -> in_q_1(reduce(x_1))
   in_q_1(go_up(x_1)) -> go_up(q(x_1))
   redex_p(x, y, x) -> result_p(q(p(y, x, y)))
   check_p(result_p(x)) -> go_up(x)
   check_p(redex_p(x_1, x_2, x_3)) -> in_p_1(reduce(x_1), x_2, x_3)
   check_p(redex_p(x_1, x_2, x_3)) -> in_p_2(x_1, reduce(x_2), x_3)
   check_p(redex_p(x_1, x_2, x_3)) -> in_p_3(x_1, x_2, reduce(x_3))
   in_p_3(x_1, x_2, go_up(x_3)) -> go_up(p(x_1, x_2, x_3))
   in_p_2(x_1, go_up(x_2), x_3) -> go_up(p(x_1, x_2, x_3))
   in_p_1(go_up(x_1), x_2, x_3) -> go_up(p(x_1, x_2, x_3))

The set Q consists of the following terms:

   top(go_up(x0))
   reduce(p(x0, x1, x2))
   reduce(q(x0))
   redex_p(x0, x1, x0)
   redex_q(q(x0))
   check_p(result_p(x0))
   check_q(result_q(x0))
   check_p(redex_p(x0, x1, x2))
   check_q(redex_q(x0))
   in_p_1(go_up(x0), x1, x2)
   in_p_2(x0, go_up(x1), x2)
   in_p_3(x0, x1, go_up(x2))
   in_q_1(go_up(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(43) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   top(go_up(x0))


----------------------------------------

(44)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(go_up(x)) -> TOP(reduce(x))

The TRS R consists of the following rules:

   reduce(p(x_1, x_2, x_3)) -> check_p(redex_p(x_1, x_2, x_3))
   reduce(q(x_1)) -> check_q(redex_q(x_1))
   redex_q(q(x)) -> result_q(c)
   check_q(result_q(x)) -> go_up(x)
   check_q(redex_q(x_1)) -> in_q_1(reduce(x_1))
   in_q_1(go_up(x_1)) -> go_up(q(x_1))
   redex_p(x, y, x) -> result_p(q(p(y, x, y)))
   check_p(result_p(x)) -> go_up(x)
   check_p(redex_p(x_1, x_2, x_3)) -> in_p_1(reduce(x_1), x_2, x_3)
   check_p(redex_p(x_1, x_2, x_3)) -> in_p_2(x_1, reduce(x_2), x_3)
   check_p(redex_p(x_1, x_2, x_3)) -> in_p_3(x_1, x_2, reduce(x_3))
   in_p_3(x_1, x_2, go_up(x_3)) -> go_up(p(x_1, x_2, x_3))
   in_p_2(x_1, go_up(x_2), x_3) -> go_up(p(x_1, x_2, x_3))
   in_p_1(go_up(x_1), x_2, x_3) -> go_up(p(x_1, x_2, x_3))

The set Q consists of the following terms:

   reduce(p(x0, x1, x2))
   reduce(q(x0))
   redex_p(x0, x1, x0)
   redex_q(q(x0))
   check_p(result_p(x0))
   check_q(result_q(x0))
   check_p(redex_p(x0, x1, x2))
   check_q(redex_q(x0))
   in_p_1(go_up(x0), x1, x2)
   in_p_2(x0, go_up(x1), x2)
   in_p_3(x0, x1, go_up(x2))
   in_q_1(go_up(x0))

We have to consider all minimal (P,Q,R)-chains.