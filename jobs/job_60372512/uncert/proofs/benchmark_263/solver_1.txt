YES
proof of /home/ff862203/input_YAOcCqVSmO.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Outermost Termination of the given OTRS could be proven:

(0) OTRS
(1) Raffelsieper-Zantema-Transformation [SOUND, 0 ms]
(2) QTRS
(3) QTRSRRRProof [EQUIVALENT, 22 ms]
(4) QTRS
(5) AAECC Innermost [EQUIVALENT, 0 ms]
(6) QTRS
(7) DependencyPairsProof [EQUIVALENT, 0 ms]
(8) QDP
(9) DependencyGraphProof [EQUIVALENT, 0 ms]
(10) AND
    (11) QDP
        (12) UsableRulesProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) QReductionProof [EQUIVALENT, 0 ms]
        (15) QDP
        (16) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (17) YES
    (18) QDP
        (19) UsableRulesProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) QReductionProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (24) YES
    (25) QDP
        (26) UsableRulesProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) QReductionProof [EQUIVALENT, 0 ms]
        (29) QDP
        (30) RFCMatchBoundsDPProof [EQUIVALENT, 0 ms]
        (31) YES


----------------------------------------

(0)
Obligation:
Term rewrite system R:
The TRS R consists of the following rules:

   f(f(g(x))) -> x
   g(b) -> f(g(b))



Outermost Strategy.

----------------------------------------

(1) Raffelsieper-Zantema-Transformation (SOUND)
We applied the Raffelsieper-Zantema transformation  to transform the outermost TRS to a standard TRS.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   down(f(f(g(x)))) -> up(x)
   down(g(b)) -> up(f(g(b)))
   top(up(x)) -> top(down(x))
   down(f(g(y4))) -> f_flat(down(g(y4)))
   down(f(b)) -> f_flat(down(b))
   down(f(fresh_constant)) -> f_flat(down(fresh_constant))
   down(g(f(y6))) -> g_flat(down(f(y6)))
   down(g(g(y7))) -> g_flat(down(g(y7)))
   down(g(fresh_constant)) -> g_flat(down(fresh_constant))
   down(f(f(f(y9)))) -> f_flat(down(f(f(y9))))
   down(f(f(b))) -> f_flat(down(f(b)))
   down(f(f(fresh_constant))) -> f_flat(down(f(fresh_constant)))
   f_flat(up(x_1)) -> up(f(x_1))
   g_flat(up(x_1)) -> up(g(x_1))

Q is empty.

----------------------------------------

(3) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(b) = 0
   POL(down(x_1)) = 2 + 2*x_1
   POL(f(x_1)) = x_1
   POL(f_flat(x_1)) = x_1
   POL(fresh_constant) = 0
   POL(g(x_1)) = 1 + 2*x_1
   POL(g_flat(x_1)) = 2*x_1
   POL(top(x_1)) = 2*x_1
   POL(up(x_1)) = 2 + 2*x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   down(f(f(g(x)))) -> up(x)




----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   down(g(b)) -> up(f(g(b)))
   top(up(x)) -> top(down(x))
   down(f(g(y4))) -> f_flat(down(g(y4)))
   down(f(b)) -> f_flat(down(b))
   down(f(fresh_constant)) -> f_flat(down(fresh_constant))
   down(g(f(y6))) -> g_flat(down(f(y6)))
   down(g(g(y7))) -> g_flat(down(g(y7)))
   down(g(fresh_constant)) -> g_flat(down(fresh_constant))
   down(f(f(f(y9)))) -> f_flat(down(f(f(y9))))
   down(f(f(b))) -> f_flat(down(f(b)))
   down(f(f(fresh_constant))) -> f_flat(down(f(fresh_constant)))
   f_flat(up(x_1)) -> up(f(x_1))
   g_flat(up(x_1)) -> up(g(x_1))

Q is empty.

----------------------------------------

(5) AAECC Innermost (EQUIVALENT)
We have applied [NOC,AAECCNOC] to switch to innermost. The TRS R 1 is 
   down(f(g(y4))) -> f_flat(down(g(y4)))
   down(f(b)) -> f_flat(down(b))
   down(f(fresh_constant)) -> f_flat(down(fresh_constant))
   down(g(f(y6))) -> g_flat(down(f(y6)))
   down(g(g(y7))) -> g_flat(down(g(y7)))
   down(g(fresh_constant)) -> g_flat(down(fresh_constant))
   down(f(f(f(y9)))) -> f_flat(down(f(f(y9))))
   down(f(f(b))) -> f_flat(down(f(b)))
   down(f(f(fresh_constant))) -> f_flat(down(f(fresh_constant)))
   f_flat(up(x_1)) -> up(f(x_1))
   g_flat(up(x_1)) -> up(g(x_1))
   down(g(b)) -> up(f(g(b)))

The TRS R 2 is 
   top(up(x)) -> top(down(x))

The signature Sigma is {top_1}
----------------------------------------

(6)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   down(g(b)) -> up(f(g(b)))
   top(up(x)) -> top(down(x))
   down(f(g(y4))) -> f_flat(down(g(y4)))
   down(f(b)) -> f_flat(down(b))
   down(f(fresh_constant)) -> f_flat(down(fresh_constant))
   down(g(f(y6))) -> g_flat(down(f(y6)))
   down(g(g(y7))) -> g_flat(down(g(y7)))
   down(g(fresh_constant)) -> g_flat(down(fresh_constant))
   down(f(f(f(y9)))) -> f_flat(down(f(f(y9))))
   down(f(f(b))) -> f_flat(down(f(b)))
   down(f(f(fresh_constant))) -> f_flat(down(f(fresh_constant)))
   f_flat(up(x_1)) -> up(f(x_1))
   g_flat(up(x_1)) -> up(g(x_1))

The set Q consists of the following terms:

   down(g(b))
   top(up(x0))
   down(f(g(x0)))
   down(f(b))
   down(f(fresh_constant))
   down(g(f(x0)))
   down(g(g(x0)))
   down(g(fresh_constant))
   down(f(f(f(x0))))
   down(f(f(b)))
   down(f(f(fresh_constant)))
   f_flat(up(x0))
   g_flat(up(x0))


----------------------------------------

(7) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(up(x)) -> TOP(down(x))
   TOP(up(x)) -> DOWN(x)
   DOWN(f(g(y4))) -> F_FLAT(down(g(y4)))
   DOWN(f(g(y4))) -> DOWN(g(y4))
   DOWN(f(b)) -> F_FLAT(down(b))
   DOWN(f(b)) -> DOWN(b)
   DOWN(f(fresh_constant)) -> F_FLAT(down(fresh_constant))
   DOWN(f(fresh_constant)) -> DOWN(fresh_constant)
   DOWN(g(f(y6))) -> G_FLAT(down(f(y6)))
   DOWN(g(f(y6))) -> DOWN(f(y6))
   DOWN(g(g(y7))) -> G_FLAT(down(g(y7)))
   DOWN(g(g(y7))) -> DOWN(g(y7))
   DOWN(g(fresh_constant)) -> G_FLAT(down(fresh_constant))
   DOWN(g(fresh_constant)) -> DOWN(fresh_constant)
   DOWN(f(f(f(y9)))) -> F_FLAT(down(f(f(y9))))
   DOWN(f(f(f(y9)))) -> DOWN(f(f(y9)))
   DOWN(f(f(b))) -> F_FLAT(down(f(b)))
   DOWN(f(f(b))) -> DOWN(f(b))
   DOWN(f(f(fresh_constant))) -> F_FLAT(down(f(fresh_constant)))
   DOWN(f(f(fresh_constant))) -> DOWN(f(fresh_constant))

The TRS R consists of the following rules:

   down(g(b)) -> up(f(g(b)))
   top(up(x)) -> top(down(x))
   down(f(g(y4))) -> f_flat(down(g(y4)))
   down(f(b)) -> f_flat(down(b))
   down(f(fresh_constant)) -> f_flat(down(fresh_constant))
   down(g(f(y6))) -> g_flat(down(f(y6)))
   down(g(g(y7))) -> g_flat(down(g(y7)))
   down(g(fresh_constant)) -> g_flat(down(fresh_constant))
   down(f(f(f(y9)))) -> f_flat(down(f(f(y9))))
   down(f(f(b))) -> f_flat(down(f(b)))
   down(f(f(fresh_constant))) -> f_flat(down(f(fresh_constant)))
   f_flat(up(x_1)) -> up(f(x_1))
   g_flat(up(x_1)) -> up(g(x_1))

The set Q consists of the following terms:

   down(g(b))
   top(up(x0))
   down(f(g(x0)))
   down(f(b))
   down(f(fresh_constant))
   down(g(f(x0)))
   down(g(g(x0)))
   down(g(fresh_constant))
   down(f(f(f(x0))))
   down(f(f(b)))
   down(f(f(fresh_constant)))
   f_flat(up(x0))
   g_flat(up(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 15 less nodes.
----------------------------------------

(10)
Complex Obligation (AND)

----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DOWN(f(f(f(y9)))) -> DOWN(f(f(y9)))

The TRS R consists of the following rules:

   down(g(b)) -> up(f(g(b)))
   top(up(x)) -> top(down(x))
   down(f(g(y4))) -> f_flat(down(g(y4)))
   down(f(b)) -> f_flat(down(b))
   down(f(fresh_constant)) -> f_flat(down(fresh_constant))
   down(g(f(y6))) -> g_flat(down(f(y6)))
   down(g(g(y7))) -> g_flat(down(g(y7)))
   down(g(fresh_constant)) -> g_flat(down(fresh_constant))
   down(f(f(f(y9)))) -> f_flat(down(f(f(y9))))
   down(f(f(b))) -> f_flat(down(f(b)))
   down(f(f(fresh_constant))) -> f_flat(down(f(fresh_constant)))
   f_flat(up(x_1)) -> up(f(x_1))
   g_flat(up(x_1)) -> up(g(x_1))

The set Q consists of the following terms:

   down(g(b))
   top(up(x0))
   down(f(g(x0)))
   down(f(b))
   down(f(fresh_constant))
   down(g(f(x0)))
   down(g(g(x0)))
   down(g(fresh_constant))
   down(f(f(f(x0))))
   down(f(f(b)))
   down(f(f(fresh_constant)))
   f_flat(up(x0))
   g_flat(up(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DOWN(f(f(f(y9)))) -> DOWN(f(f(y9)))

R is empty.
The set Q consists of the following terms:

   down(g(b))
   top(up(x0))
   down(f(g(x0)))
   down(f(b))
   down(f(fresh_constant))
   down(g(f(x0)))
   down(g(g(x0)))
   down(g(fresh_constant))
   down(f(f(f(x0))))
   down(f(f(b)))
   down(f(f(fresh_constant)))
   f_flat(up(x0))
   g_flat(up(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   down(g(b))
   top(up(x0))
   down(f(g(x0)))
   down(f(b))
   down(f(fresh_constant))
   down(g(f(x0)))
   down(g(g(x0)))
   down(g(fresh_constant))
   down(f(f(f(x0))))
   down(f(f(b)))
   down(f(f(fresh_constant)))
   f_flat(up(x0))
   g_flat(up(x0))


----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DOWN(f(f(f(y9)))) -> DOWN(f(f(y9)))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(16) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*DOWN(f(f(f(y9)))) -> DOWN(f(f(y9)))
The graph contains the following edges 1 > 1


----------------------------------------

(17)
YES

----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DOWN(g(f(y6))) -> DOWN(f(y6))
   DOWN(f(g(y4))) -> DOWN(g(y4))
   DOWN(g(g(y7))) -> DOWN(g(y7))

The TRS R consists of the following rules:

   down(g(b)) -> up(f(g(b)))
   top(up(x)) -> top(down(x))
   down(f(g(y4))) -> f_flat(down(g(y4)))
   down(f(b)) -> f_flat(down(b))
   down(f(fresh_constant)) -> f_flat(down(fresh_constant))
   down(g(f(y6))) -> g_flat(down(f(y6)))
   down(g(g(y7))) -> g_flat(down(g(y7)))
   down(g(fresh_constant)) -> g_flat(down(fresh_constant))
   down(f(f(f(y9)))) -> f_flat(down(f(f(y9))))
   down(f(f(b))) -> f_flat(down(f(b)))
   down(f(f(fresh_constant))) -> f_flat(down(f(fresh_constant)))
   f_flat(up(x_1)) -> up(f(x_1))
   g_flat(up(x_1)) -> up(g(x_1))

The set Q consists of the following terms:

   down(g(b))
   top(up(x0))
   down(f(g(x0)))
   down(f(b))
   down(f(fresh_constant))
   down(g(f(x0)))
   down(g(g(x0)))
   down(g(fresh_constant))
   down(f(f(f(x0))))
   down(f(f(b)))
   down(f(f(fresh_constant)))
   f_flat(up(x0))
   g_flat(up(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DOWN(g(f(y6))) -> DOWN(f(y6))
   DOWN(f(g(y4))) -> DOWN(g(y4))
   DOWN(g(g(y7))) -> DOWN(g(y7))

R is empty.
The set Q consists of the following terms:

   down(g(b))
   top(up(x0))
   down(f(g(x0)))
   down(f(b))
   down(f(fresh_constant))
   down(g(f(x0)))
   down(g(g(x0)))
   down(g(fresh_constant))
   down(f(f(f(x0))))
   down(f(f(b)))
   down(f(f(fresh_constant)))
   f_flat(up(x0))
   g_flat(up(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   down(g(b))
   top(up(x0))
   down(f(g(x0)))
   down(f(b))
   down(f(fresh_constant))
   down(g(f(x0)))
   down(g(g(x0)))
   down(g(fresh_constant))
   down(f(f(f(x0))))
   down(f(f(b)))
   down(f(f(fresh_constant)))
   f_flat(up(x0))
   g_flat(up(x0))


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DOWN(g(f(y6))) -> DOWN(f(y6))
   DOWN(f(g(y4))) -> DOWN(g(y4))
   DOWN(g(g(y7))) -> DOWN(g(y7))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*DOWN(f(g(y4))) -> DOWN(g(y4))
The graph contains the following edges 1 > 1


*DOWN(g(g(y7))) -> DOWN(g(y7))
The graph contains the following edges 1 > 1


*DOWN(g(f(y6))) -> DOWN(f(y6))
The graph contains the following edges 1 > 1


----------------------------------------

(24)
YES

----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(up(x)) -> TOP(down(x))

The TRS R consists of the following rules:

   down(g(b)) -> up(f(g(b)))
   top(up(x)) -> top(down(x))
   down(f(g(y4))) -> f_flat(down(g(y4)))
   down(f(b)) -> f_flat(down(b))
   down(f(fresh_constant)) -> f_flat(down(fresh_constant))
   down(g(f(y6))) -> g_flat(down(f(y6)))
   down(g(g(y7))) -> g_flat(down(g(y7)))
   down(g(fresh_constant)) -> g_flat(down(fresh_constant))
   down(f(f(f(y9)))) -> f_flat(down(f(f(y9))))
   down(f(f(b))) -> f_flat(down(f(b)))
   down(f(f(fresh_constant))) -> f_flat(down(f(fresh_constant)))
   f_flat(up(x_1)) -> up(f(x_1))
   g_flat(up(x_1)) -> up(g(x_1))

The set Q consists of the following terms:

   down(g(b))
   top(up(x0))
   down(f(g(x0)))
   down(f(b))
   down(f(fresh_constant))
   down(g(f(x0)))
   down(g(g(x0)))
   down(g(fresh_constant))
   down(f(f(f(x0))))
   down(f(f(b)))
   down(f(f(fresh_constant)))
   f_flat(up(x0))
   g_flat(up(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(up(x)) -> TOP(down(x))

The TRS R consists of the following rules:

   down(g(b)) -> up(f(g(b)))
   down(f(g(y4))) -> f_flat(down(g(y4)))
   down(f(b)) -> f_flat(down(b))
   down(f(fresh_constant)) -> f_flat(down(fresh_constant))
   down(g(f(y6))) -> g_flat(down(f(y6)))
   down(g(g(y7))) -> g_flat(down(g(y7)))
   down(g(fresh_constant)) -> g_flat(down(fresh_constant))
   down(f(f(f(y9)))) -> f_flat(down(f(f(y9))))
   down(f(f(b))) -> f_flat(down(f(b)))
   down(f(f(fresh_constant))) -> f_flat(down(f(fresh_constant)))
   f_flat(up(x_1)) -> up(f(x_1))
   g_flat(up(x_1)) -> up(g(x_1))

The set Q consists of the following terms:

   down(g(b))
   top(up(x0))
   down(f(g(x0)))
   down(f(b))
   down(f(fresh_constant))
   down(g(f(x0)))
   down(g(g(x0)))
   down(g(fresh_constant))
   down(f(f(f(x0))))
   down(f(f(b)))
   down(f(f(fresh_constant)))
   f_flat(up(x0))
   g_flat(up(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   top(up(x0))


----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(up(x)) -> TOP(down(x))

The TRS R consists of the following rules:

   down(g(b)) -> up(f(g(b)))
   down(f(g(y4))) -> f_flat(down(g(y4)))
   down(f(b)) -> f_flat(down(b))
   down(f(fresh_constant)) -> f_flat(down(fresh_constant))
   down(g(f(y6))) -> g_flat(down(f(y6)))
   down(g(g(y7))) -> g_flat(down(g(y7)))
   down(g(fresh_constant)) -> g_flat(down(fresh_constant))
   down(f(f(f(y9)))) -> f_flat(down(f(f(y9))))
   down(f(f(b))) -> f_flat(down(f(b)))
   down(f(f(fresh_constant))) -> f_flat(down(f(fresh_constant)))
   f_flat(up(x_1)) -> up(f(x_1))
   g_flat(up(x_1)) -> up(g(x_1))

The set Q consists of the following terms:

   down(g(b))
   down(f(g(x0)))
   down(f(b))
   down(f(fresh_constant))
   down(g(f(x0)))
   down(g(g(x0)))
   down(g(fresh_constant))
   down(f(f(f(x0))))
   down(f(f(b)))
   down(f(f(fresh_constant)))
   f_flat(up(x0))
   g_flat(up(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(30) RFCMatchBoundsDPProof (EQUIVALENT)
Finiteness of the DP problem can be shown by a matchbound of 9. 
As the DP problem is minimal we only have to initialize the certificate graph by the rules of P:

   TOP(up(x)) -> TOP(down(x))

To find matches we regarded all rules of R and P:

   down(g(b)) -> up(f(g(b)))
   down(f(g(y4))) -> f_flat(down(g(y4)))
   down(f(b)) -> f_flat(down(b))
   down(f(fresh_constant)) -> f_flat(down(fresh_constant))
   down(g(f(y6))) -> g_flat(down(f(y6)))
   down(g(g(y7))) -> g_flat(down(g(y7)))
   down(g(fresh_constant)) -> g_flat(down(fresh_constant))
   down(f(f(f(y9)))) -> f_flat(down(f(f(y9))))
   down(f(f(b))) -> f_flat(down(f(b)))
   down(f(f(fresh_constant))) -> f_flat(down(f(fresh_constant)))
   f_flat(up(x_1)) -> up(f(x_1))
   g_flat(up(x_1)) -> up(g(x_1))
   TOP(up(x)) -> TOP(down(x))

The certificate found is represented by the following graph.
The certificate consists of the following enumerated nodes:
541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635

Node 541 is start node and node 542 is final node.

Those nodes are connected through the following edges:

* 541 to 543 labelled TOP_1(0)* 541 to 554 labelled TOP_1(1)* 541 to 566 labelled TOP_1(2)* 541 to 596 labelled TOP_1(3)* 542 to 542 labelled #_1(0)* 543 to 542 labelled down_1(0)* 543 to 544 labelled up_1(1)* 543 to 547 labelled f_flat_1(1), g_flat_1(1)* 543 to 549 labelled g_flat_1(1)* 543 to 551 labelled f_flat_1(1)* 543 to 557 labelled up_1(2)* 544 to 545 labelled f_1(1)* 545 to 546 labelled g_1(1)* 546 to 542 labelled b(1)* 547 to 548 labelled down_1(1)* 547 to 544 labelled up_1(1)* 547 to 549 labelled g_flat_1(1)* 547 to 547 labelled g_flat_1(1)* 547 to 557 labelled up_1(2)* 548 to 542 labelled g_1(1), b(1), fresh_constant(1)* 549 to 550 labelled down_1(1)* 549 to 547 labelled f_flat_1(1)* 549 to 551 labelled f_flat_1(1)* 549 to 557 labelled up_1(2)* 550 to 542 labelled f_1(1)* 551 to 552 labelled down_1(1)* 551 to 555 labelled f_flat_1(2)* 551 to 551 labelled f_flat_1(1)* 552 to 553 labelled f_1(1)* 553 to 542 labelled f_1(1), b(1), fresh_constant(1)* 554 to 544 labelled down_1(1)* 554 to 558 labelled f_flat_1(2), g_flat_1(2)* 554 to 557 labelled down_1(1)* 554 to 563 labelled up_1(3)* 554 to 564 labelled g_flat_1(2)* 555 to 556 labelled down_1(2)* 556 to 542 labelled b(2), fresh_constant(2)* 557 to 544 labelled f_1(2), g_1(2)* 557 to 557 labelled f_1(2), g_1(2)* 557 to 545 labelled f_1(2)* 558 to 559 labelled down_1(2)* 558 to 560 labelled up_1(2)* 558 to 564 labelled g_flat_1(2)* 558 to 567 labelled g_flat_1(3)* 558 to 569 labelled f_flat_1(3), g_flat_1(3)* 558 to 558 labelled f_flat_1(2)* 558 to 571 labelled f_flat_1(3)* 558 to 563 labelled up_1(3)* 558 to 578 labelled up_1(4)* 559 to 546 labelled g_1(2)* 559 to 544 labelled g_1(2)* 559 to 557 labelled f_1(2), g_1(2)* 560 to 561 labelled f_1(2)* 561 to 562 labelled g_1(2)* 562 to 542 labelled b(2)* 563 to 560 labelled f_1(3), g_1(3)* 563 to 563 labelled f_1(3), g_1(3), f_1(5)* 563 to 578 labelled f_1(3), g_1(3), f_1(5)* 564 to 565 labelled down_1(2)* 564 to 558 labelled f_flat_1(2)* 564 to 563 labelled up_1(3)* 565 to 545 labelled f_1(2)* 565 to 544 labelled f_1(2)* 566 to 563 labelled down_1(2)* 566 to 574 labelled g_flat_1(3), f_flat_1(3)* 566 to 579 labelled f_flat_1(3), g_flat_1(3)* 566 to 584 labelled f_flat_1(3)* 566 to 595 labelled up_1(4)* 567 to 568 labelled down_1(3)* 567 to 558 labelled f_flat_1(2)* 567 to 569 labelled f_flat_1(3)* 567 to 571 labelled f_flat_1(3)* 567 to 563 labelled up_1(3)* 567 to 578 labelled up_1(4)* 568 to 544 labelled f_1(3)* 568 to 557 labelled f_1(3)* 568 to 545 labelled f_1(3)* 569 to 570 labelled down_1(3)* 569 to 564 labelled g_flat_1(2)* 569 to 567 labelled g_flat_1(3)* 569 to 569 labelled g_flat_1(3)* 569 to 563 labelled up_1(3)* 569 to 578 labelled up_1(4)* 570 to 544 labelled g_1(3)* 570 to 557 labelled g_1(3)* 571 to 572 labelled down_1(3)* 571 to 558 labelled f_flat_1(2)* 571 to 571 labelled f_flat_1(3)* 571 to 563 labelled up_1(3)* 571 to 578 labelled up_1(4)* 572 to 573 labelled f_1(3)* 573 to 544 labelled f_1(3)* 573 to 557 labelled f_1(3)* 573 to 545 labelled f_1(3)* 574 to 575 labelled down_1(3)* 574 to 576 labelled f_flat_1(3)* 574 to 587 labelled up_1(4)* 574 to 590 labelled f_flat_1(4), g_flat_1(4)* 574 to 584 labelled f_flat_1(3)* 574 to 592 labelled f_flat_1(4)* 574 to 588 labelled f_flat_1(4), g_flat_1(4)* 574 to 599 labelled up_1(5)* 575 to 561 labelled f_1(3)* 575 to 560 labelled f_1(3)* 575 to 563 labelled f_1(3)* 575 to 578 labelled f_1(3), g_1(3)* 576 to 577 labelled down_1(3)* 576 to 581 labelled up_1(3)* 577 to 562 labelled g_1(3)* 578 to 563 labelled g_1(4), f_1(4)* 578 to 578 labelled g_1(4), f_1(4)* 579 to 580 labelled down_1(3)* 579 to 574 labelled g_flat_1(3)* 579 to 588 labelled g_flat_1(4)* 579 to 590 labelled g_flat_1(4)* 579 to 595 labelled up_1(4)* 579 to 599 labelled up_1(5)* 580 to 560 labelled g_1(3)* 580 to 563 labelled g_1(3)* 581 to 582 labelled f_1(3)* 581 to 620 labelled f_1(4)* 581 to 619 labelled f_1(4)* 581 to 621 labelled f_1(4)* 582 to 583 labelled g_1(3)* 583 to 542 labelled b(3)* 584 to 585 labelled down_1(3)* 585 to 586 labelled f_1(3)* 586 to 561 labelled f_1(3)* 587 to 581 labelled f_1(4)* 588 to 589 labelled down_1(4)* 588 to 590 labelled f_flat_1(4)* 588 to 584 labelled f_flat_1(3)* 588 to 592 labelled f_flat_1(4)* 588 to 588 labelled f_flat_1(4)* 588 to 597 labelled f_flat_1(5)* 588 to 599 labelled up_1(5)* 588 to 619 labelled up_1(6)* 589 to 560 labelled f_1(4)* 589 to 563 labelled f_1(4)* 589 to 578 labelled f_1(4)* 590 to 591 labelled down_1(4)* 590 to 574 labelled g_flat_1(3)* 590 to 588 labelled g_flat_1(4)* 590 to 590 labelled g_flat_1(4)* 590 to 595 labelled up_1(4)* 590 to 597 labelled g_flat_1(5)* 590 to 599 labelled up_1(5)* 590 to 620 labelled up_1(6)* 591 to 560 labelled g_1(4)* 591 to 563 labelled g_1(4)* 591 to 578 labelled g_1(4)* 592 to 593 labelled down_1(4)* 592 to 584 labelled f_flat_1(3)* 592 to 592 labelled f_flat_1(4)* 592 to 588 labelled f_flat_1(4)* 592 to 597 labelled f_flat_1(5)* 592 to 599 labelled up_1(5)* 592 to 619 labelled up_1(6)* 593 to 594 labelled f_1(4)* 594 to 560 labelled f_1(4)* 594 to 563 labelled f_1(4)* 595 to 587 labelled g_1(4), f_1(4)* 595 to 595 labelled f_1(4), g_1(4)* 595 to 599 labelled g_1(4), f_1(4)* 596 to 595 labelled down_1(3)* 596 to 602 labelled g_flat_1(4), f_flat_1(4)* 596 to 604 labelled f_flat_1(4), g_flat_1(4)* 596 to 609 labelled f_flat_1(4)* 597 to 598 labelled down_1(5)* 597 to 588 labelled g_flat_1(4), f_flat_1(4)* 597 to 590 labelled g_flat_1(4), f_flat_1(4)* 597 to 600 labelled g_flat_1(6)* 597 to 597 labelled g_flat_1(5), f_flat_1(5)* 597 to 584 labelled f_flat_1(3)* 597 to 592 labelled f_flat_1(4)* 597 to 606 labelled f_flat_1(6)* 597 to 599 labelled up_1(5)* 597 to 620 labelled up_1(6)* 597 to 619 labelled up_1(6)* 597 to 621 labelled up_1(7)* 598 to 563 labelled g_1(5), f_1(5)* 598 to 578 labelled g_1(5), f_1(5)* 599 to 595 labelled f_1(5), g_1(5)* 599 to 599 labelled f_1(5), g_1(5), f_1(7), f_1(8)* 599 to 620 labelled f_1(5), g_1(5), f_1(7), f_1(8)* 599 to 619 labelled f_1(5), g_1(5), f_1(8)* 599 to 621 labelled f_1(8)* 600 to 601 labelled down_1(6)* 600 to 590 labelled f_flat_1(4)* 600 to 597 labelled f_flat_1(5)* 600 to 584 labelled f_flat_1(3)* 600 to 592 labelled f_flat_1(4)* 600 to 588 labelled f_flat_1(4)* 600 to 606 labelled f_flat_1(6)* 600 to 599 labelled up_1(5)* 600 to 619 labelled up_1(6)* 600 to 621 labelled up_1(7)* 601 to 563 labelled f_1(6)* 601 to 578 labelled f_1(6)* 602 to 603 labelled down_1(4)* 602 to 614 labelled f_flat_1(5), g_flat_1(5)* 602 to 609 labelled f_flat_1(4)* 602 to 616 labelled f_flat_1(5)* 602 to 612 labelled f_flat_1(5), g_flat_1(5)* 603 to 581 labelled f_1(4)* 603 to 587 labelled f_1(4)* 603 to 595 labelled f_1(4)* 603 to 599 labelled g_1(4), f_1(4)* 603 to 620 labelled f_1(4), g_1(4)* 603 to 619 labelled f_1(4), g_1(4)* 603 to 621 labelled f_1(4)* 604 to 605 labelled down_1(4)* 604 to 612 labelled g_flat_1(5)* 604 to 614 labelled g_flat_1(5)* 605 to 587 labelled g_1(4)* 605 to 595 labelled g_1(4)* 606 to 607 labelled down_1(6)* 606 to 592 labelled f_flat_1(4)* 606 to 588 labelled f_flat_1(4)* 606 to 606 labelled f_flat_1(6)* 606 to 597 labelled f_flat_1(5)* 606 to 599 labelled up_1(5)* 606 to 619 labelled up_1(6)* 606 to 621 labelled up_1(7)* 607 to 608 labelled f_1(6)* 608 to 563 labelled f_1(6)* 608 to 578 labelled f_1(6)* 609 to 610 labelled down_1(4)* 610 to 611 labelled f_1(4)* 611 to 582 labelled f_1(4)* 612 to 613 labelled down_1(5)* 612 to 614 labelled f_flat_1(5)* 612 to 609 labelled f_flat_1(4)* 612 to 616 labelled f_flat_1(5)* 612 to 612 labelled f_flat_1(5)* 612 to 624 labelled f_flat_1(6)* 612 to 626 labelled f_flat_1(6)* 612 to 622 labelled f_flat_1(6)* 613 to 581 labelled f_1(5)* 613 to 587 labelled f_1(5)* 613 to 595 labelled f_1(5)* 613 to 599 labelled f_1(5)* 614 to 615 labelled down_1(5)* 614 to 612 labelled g_flat_1(5)* 614 to 614 labelled g_flat_1(5)* 614 to 622 labelled g_flat_1(6), f_flat_1(6)* 614 to 624 labelled g_flat_1(6), f_flat_1(6)* 614 to 626 labelled f_flat_1(6)* 615 to 587 labelled g_1(5)* 615 to 595 labelled g_1(5)* 615 to 599 labelled g_1(5)* 615 to 620 labelled f_1(5), g_1(5)* 615 to 619 labelled f_1(5), g_1(5)* 615 to 621 labelled g_1(5), f_1(5)* 616 to 617 labelled down_1(5)* 616 to 609 labelled f_flat_1(4)* 616 to 616 labelled f_flat_1(5)* 616 to 612 labelled f_flat_1(5)* 616 to 614 labelled f_flat_1(5)* 617 to 618 labelled f_1(5)* 618 to 581 labelled f_1(5)* 618 to 587 labelled f_1(5)* 618 to 595 labelled f_1(5)* 619 to 599 labelled f_1(6)* 619 to 620 labelled f_1(6)* 619 to 619 labelled f_1(6)* 619 to 621 labelled f_1(6)* 620 to 599 labelled g_1(6)* 620 to 620 labelled g_1(6)* 620 to 619 labelled g_1(6)* 620 to 621 labelled g_1(6), f_1(5)* 621 to 619 labelled g_1(7), f_1(7)* 621 to 621 labelled g_1(7), f_1(7)* 622 to 623 labelled down_1(6)* 622 to 614 labelled f_flat_1(5)* 622 to 624 labelled f_flat_1(6)* 622 to 616 labelled f_flat_1(5)* 622 to 612 labelled f_flat_1(5)* 622 to 626 labelled f_flat_1(6)* 622 to 622 labelled f_flat_1(6)* 622 to 629 labelled f_flat_1(7)* 623 to 595 labelled f_1(6)* 623 to 599 labelled f_1(6)* 623 to 620 labelled f_1(6)* 623 to 619 labelled f_1(6)* 623 to 621 labelled f_1(6)* 624 to 625 labelled down_1(6)* 624 to 614 labelled g_flat_1(5)* 624 to 612 labelled g_flat_1(5)* 624 to 622 labelled g_flat_1(6)* 624 to 624 labelled g_flat_1(6)* 624 to 629 labelled g_flat_1(7)* 625 to 595 labelled g_1(6)* 625 to 599 labelled g_1(6)* 625 to 620 labelled g_1(6)* 625 to 619 labelled g_1(6)* 625 to 621 labelled g_1(6)* 626 to 627 labelled down_1(6)* 626 to 616 labelled f_flat_1(5)* 626 to 612 labelled f_flat_1(5)* 626 to 626 labelled f_flat_1(6)* 626 to 622 labelled f_flat_1(6)* 626 to 629 labelled f_flat_1(7)* 627 to 628 labelled f_1(6)* 628 to 595 labelled f_1(6)* 628 to 599 labelled f_1(6)* 629 to 630 labelled down_1(7)* 629 to 622 labelled g_flat_1(6), f_flat_1(6)* 629 to 624 labelled g_flat_1(6), f_flat_1(6)* 629 to 631 labelled g_flat_1(8), f_flat_1(8)* 629 to 629 labelled g_flat_1(7), f_flat_1(7)* 629 to 616 labelled f_flat_1(5)* 629 to 612 labelled f_flat_1(5)* 629 to 626 labelled f_flat_1(6)* 630 to 599 labelled g_1(7), f_1(7)* 630 to 620 labelled g_1(7), f_1(7)* 630 to 619 labelled g_1(7), f_1(7)* 630 to 621 labelled g_1(7), f_1(7)* 631 to 632 labelled down_1(8)* 631 to 624 labelled f_flat_1(6)* 631 to 629 labelled f_flat_1(7), g_flat_1(7)* 631 to 631 labelled g_flat_1(8), f_flat_1(8)* 631 to 616 labelled f_flat_1(5)* 631 to 612 labelled f_flat_1(5)* 631 to 626 labelled f_flat_1(6)* 631 to 622 labelled f_flat_1(6)* 631 to 633 labelled f_flat_1(9)* 632 to 599 labelled f_1(8)* 632 to 620 labelled f_1(8)* 632 to 619 labelled g_1(8), f_1(8)* 632 to 621 labelled g_1(8), f_1(8)* 633 to 634 labelled down_1(9)* 633 to 626 labelled f_flat_1(6)* 633 to 622 labelled f_flat_1(6)* 633 to 631 labelled f_flat_1(8)* 633 to 633 labelled f_flat_1(9)* 633 to 629 labelled f_flat_1(7)* 634 to 635 labelled f_1(9)* 635 to 599 labelled f_1(9)* 635 to 620 labelled f_1(9)* 635 to 619 labelled f_1(9)* 635 to 621 labelled f_1(9)


----------------------------------------

(31)
YES
